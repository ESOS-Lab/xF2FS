!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDR	sqlite3_MFAW.c	9776;"	d	file:
AGGREGATE	sqlite3_MFAW.c	11327;"	d	file:
AGGREGATE2	sqlite3_MFAW.c	11330;"	d	file:
ALWAYS	sqlite3_MFAW.c	132889;"	d	file:
ALWAYS	sqlite3_MFAW.c	132892;"	d	file:
ALWAYS	sqlite3_MFAW.c	132897;"	d	file:
ALWAYS	sqlite3_MFAW.c	8503;"	d	file:
ALWAYS	sqlite3_MFAW.c	8506;"	d	file:
ALWAYS	sqlite3_MFAW.c	8509;"	d	file:
AdjustTree	sqlite3_MFAW.c	/^static int AdjustTree($/;"	f	file:
AggInfo	sqlite3_MFAW.c	/^struct AggInfo {$/;"	s	file:
AggInfo	sqlite3_MFAW.c	/^typedef struct AggInfo AggInfo;$/;"	t	typeref:struct:AggInfo	file:
AggInfo_col	sqlite3_MFAW.c	/^  struct AggInfo_col {    \/* For each column used in source tables *\/$/;"	s	struct:AggInfo	file:
AggInfo_func	sqlite3_MFAW.c	/^  struct AggInfo_func {   \/* For each aggregate function *\/$/;"	s	struct:AggInfo	file:
ApplyCostMultiplier	sqlite3_MFAW.c	120924;"	d	file:
ApplyCostMultiplier	sqlite3_MFAW.c	120926;"	d	file:
ArraySize	sqlite3_MFAW.c	9225;"	d	file:
AttachKey	sqlite3_MFAW.c	/^struct AttachKey { int type;  Token key; };$/;"	s	file:
AuthContext	sqlite3_MFAW.c	/^struct AuthContext {$/;"	s	file:
AuthContext	sqlite3_MFAW.c	/^typedef struct AuthContext AuthContext;$/;"	t	typeref:struct:AuthContext	file:
AutoincInfo	sqlite3_MFAW.c	/^struct AutoincInfo {$/;"	s	file:
AutoincInfo	sqlite3_MFAW.c	/^typedef struct AutoincInfo AutoincInfo;$/;"	t	typeref:struct:AutoincInfo	file:
AuxData	sqlite3_MFAW.c	/^struct AuxData {$/;"	s	file:
AuxData	sqlite3_MFAW.c	/^typedef struct AuxData AuxData;$/;"	t	typeref:struct:AuxData	file:
BITVEC_HASH	sqlite3_MFAW.c	38939;"	d	file:
BITVEC_MXHASH	sqlite3_MFAW.c	38934;"	d	file:
BITVEC_NBIT	sqlite3_MFAW.c	38928;"	d	file:
BITVEC_NELEM	sqlite3_MFAW.c	38926;"	d	file:
BITVEC_NINT	sqlite3_MFAW.c	38931;"	d	file:
BITVEC_NPTR	sqlite3_MFAW.c	38941;"	d	file:
BITVEC_SZ	sqlite3_MFAW.c	38912;"	d	file:
BITVEC_SZELEM	sqlite3_MFAW.c	38924;"	d	file:
BITVEC_TELEM	sqlite3_MFAW.c	38922;"	d	file:
BITVEC_USIZE	sqlite3_MFAW.c	38916;"	d	file:
BMS	sqlite3_MFAW.c	12121;"	d	file:
BTALLOC_ANY	sqlite3_MFAW.c	53169;"	d	file:
BTALLOC_EXACT	sqlite3_MFAW.c	53170;"	d	file:
BTALLOC_LE	sqlite3_MFAW.c	53171;"	d	file:
BTCF_AtLast	sqlite3_MFAW.c	52680;"	d	file:
BTCF_Incrblob	sqlite3_MFAW.c	52681;"	d	file:
BTCF_ValidNKey	sqlite3_MFAW.c	52678;"	d	file:
BTCF_ValidOvfl	sqlite3_MFAW.c	52679;"	d	file:
BTCF_WriteFlag	sqlite3_MFAW.c	52677;"	d	file:
BTCURSOR_MAX_DEPTH	sqlite3_MFAW.c	52632;"	d	file:
BTREE_APPLICATION_ID	sqlite3_MFAW.c	9492;"	d	file:
BTREE_AUTOVACUUM_FULL	sqlite3_MFAW.c	9376;"	d	file:
BTREE_AUTOVACUUM_INCR	sqlite3_MFAW.c	9377;"	d	file:
BTREE_AUTOVACUUM_NONE	sqlite3_MFAW.c	9375;"	d	file:
BTREE_BLOBKEY	sqlite3_MFAW.c	9455;"	d	file:
BTREE_BULKLOAD	sqlite3_MFAW.c	9508;"	d	file:
BTREE_DATA_VERSION	sqlite3_MFAW.c	9493;"	d	file:
BTREE_DEFAULT_CACHE_SIZE	sqlite3_MFAW.c	9487;"	d	file:
BTREE_FILE_FORMAT	sqlite3_MFAW.c	9486;"	d	file:
BTREE_FREE_PAGE_COUNT	sqlite3_MFAW.c	9484;"	d	file:
BTREE_INCR_VACUUM	sqlite3_MFAW.c	9491;"	d	file:
BTREE_INTKEY	sqlite3_MFAW.c	9454;"	d	file:
BTREE_LARGEST_ROOT_PAGE	sqlite3_MFAW.c	9488;"	d	file:
BTREE_MEMORY	sqlite3_MFAW.c	9403;"	d	file:
BTREE_OMIT_JOURNAL	sqlite3_MFAW.c	9402;"	d	file:
BTREE_SCHEMA_VERSION	sqlite3_MFAW.c	9485;"	d	file:
BTREE_SEEK_EQ	sqlite3_MFAW.c	9509;"	d	file:
BTREE_SINGLE	sqlite3_MFAW.c	9404;"	d	file:
BTREE_TEXT_ENCODING	sqlite3_MFAW.c	9489;"	d	file:
BTREE_UNORDERED	sqlite3_MFAW.c	9405;"	d	file:
BTREE_USER_VERSION	sqlite3_MFAW.c	9490;"	d	file:
BTS_EXCLUSIVE	sqlite3_MFAW.c	52605;"	d	file:
BTS_INITIALLY_EMPTY	sqlite3_MFAW.c	52603;"	d	file:
BTS_NO_WAL	sqlite3_MFAW.c	52604;"	d	file:
BTS_PAGESIZE_FIXED	sqlite3_MFAW.c	52601;"	d	file:
BTS_PENDING	sqlite3_MFAW.c	52606;"	d	file:
BTS_READ_ONLY	sqlite3_MFAW.c	52600;"	d	file:
BTS_SECURE_DELETE	sqlite3_MFAW.c	52602;"	d	file:
BYTESWAP32	sqlite3_MFAW.c	49551;"	d	file:
BenignMallocHooks	sqlite3_MFAW.c	/^static SQLITE_WSD struct BenignMallocHooks {$/;"	s	file:
BenignMallocHooks	sqlite3_MFAW.c	/^typedef struct BenignMallocHooks BenignMallocHooks;$/;"	t	typeref:struct:BenignMallocHooks	file:
Bitmask	sqlite3_MFAW.c	/^typedef u64 Bitmask;$/;"	t	file:
Bitvec	sqlite3_MFAW.c	/^struct Bitvec {$/;"	s	file:
Bitvec	sqlite3_MFAW.c	/^typedef struct Bitvec Bitvec;$/;"	t	typeref:struct:Bitvec	file:
Blob	sqlite3_MFAW.c	/^struct Blob {$/;"	s	file:
Blob	sqlite3_MFAW.c	/^typedef struct Blob Blob;$/;"	t	typeref:struct:Blob	file:
Bool	sqlite3_MFAW.c	/^typedef unsigned Bool;$/;"	t	file:
BtCursor	sqlite3_MFAW.c	/^struct BtCursor {$/;"	s	file:
BtCursor	sqlite3_MFAW.c	/^typedef struct BtCursor BtCursor;$/;"	t	typeref:struct:BtCursor	file:
BtLock	sqlite3_MFAW.c	/^struct BtLock {$/;"	s	file:
BtLock	sqlite3_MFAW.c	/^typedef struct BtLock BtLock;$/;"	t	typeref:struct:BtLock	file:
BtShared	sqlite3_MFAW.c	/^struct BtShared {$/;"	s	file:
BtShared	sqlite3_MFAW.c	/^typedef struct BtShared BtShared;$/;"	t	typeref:struct:BtShared	file:
Btree	sqlite3_MFAW.c	/^struct Btree {$/;"	s	file:
Btree	sqlite3_MFAW.c	/^typedef struct Btree Btree;$/;"	t	typeref:struct:Btree	file:
BusyHandler	sqlite3_MFAW.c	/^struct BusyHandler {$/;"	s	file:
BusyHandler	sqlite3_MFAW.c	/^typedef struct BusyHandler BusyHandler;$/;"	t	typeref:struct:BusyHandler	file:
ByteRangeLockPB2	sqlite3_MFAW.c	/^struct ByteRangeLockPB2$/;"	s	file:
CACHE_STALE	sqlite3_MFAW.c	14663;"	d	file:
CFLAGS	Makefile	/^CFLAGS = -lpthread -ldl$/;"	m
CHECK_PAGE	sqlite3_MFAW.c	42858;"	d	file:
CHECK_PAGE	sqlite3_MFAW.c	42869;"	d	file:
CLEARBIT	sqlite3_MFAW.c	39172;"	d	file:
CODEC1	sqlite3_MFAW.c	42071;"	d	file:
CODEC1	sqlite3_MFAW.c	42077;"	d	file:
CODEC2	sqlite3_MFAW.c	42073;"	d	file:
CODEC2	sqlite3_MFAW.c	42078;"	d	file:
COLFLAG_HIDDEN	sqlite3_MFAW.c	11387;"	d	file:
COLFLAG_PRIMKEY	sqlite3_MFAW.c	11386;"	d	file:
COLNAME_COLUMN	sqlite3_MFAW.c	9759;"	d	file:
COLNAME_DATABASE	sqlite3_MFAW.c	9757;"	d	file:
COLNAME_DECLTYPE	sqlite3_MFAW.c	9756;"	d	file:
COLNAME_N	sqlite3_MFAW.c	9761;"	d	file:
COLNAME_N	sqlite3_MFAW.c	9764;"	d	file:
COLNAME_N	sqlite3_MFAW.c	9766;"	d	file:
COLNAME_NAME	sqlite3_MFAW.c	9755;"	d	file:
COLNAME_TABLE	sqlite3_MFAW.c	9758;"	d	file:
COLUMN_MASK	sqlite3_MFAW.c	99348;"	d	file:
CORRUPT_DB	sqlite3_MFAW.c	12852;"	d	file:
CTIMEOPT_VAL	sqlite3_MFAW.c	14090;"	d	file:
CTIMEOPT_VAL_	sqlite3_MFAW.c	14089;"	d	file:
CTRL_FREE	sqlite3_MFAW.c	18616;"	d	file:
CTRL_LOGSIZE	sqlite3_MFAW.c	18615;"	d	file:
CURSOR_FAULT	sqlite3_MFAW.c	52717;"	d	file:
CURSOR_INVALID	sqlite3_MFAW.c	52713;"	d	file:
CURSOR_REQUIRESEEK	sqlite3_MFAW.c	52716;"	d	file:
CURSOR_SKIPNEXT	sqlite3_MFAW.c	52715;"	d	file:
CURSOR_VALID	sqlite3_MFAW.c	52714;"	d	file:
CellInfo	sqlite3_MFAW.c	/^struct CellInfo {$/;"	s	file:
CellInfo	sqlite3_MFAW.c	/^typedef struct CellInfo CellInfo;$/;"	t	typeref:struct:CellInfo	file:
ChooseLeaf	sqlite3_MFAW.c	/^static int ChooseLeaf($/;"	f	file:
Cleanup	sqlite3_MFAW.c	/^static void Cleanup(Vdbe *p){$/;"	f	file:
CollSeq	sqlite3_MFAW.c	/^struct CollSeq {$/;"	s	file:
CollSeq	sqlite3_MFAW.c	/^typedef struct CollSeq CollSeq;$/;"	t	typeref:struct:CollSeq	file:
Column	sqlite3_MFAW.c	/^struct Column {$/;"	s	file:
Column	sqlite3_MFAW.c	/^typedef struct Column Column;$/;"	t	typeref:struct:Column	file:
ConstFactorOk	sqlite3_MFAW.c	11213;"	d	file:
CountCtx	sqlite3_MFAW.c	/^struct CountCtx {$/;"	s	file:
CountCtx	sqlite3_MFAW.c	/^typedef struct CountCtx CountCtx;$/;"	t	typeref:struct:CountCtx	file:
Cte	sqlite3_MFAW.c	/^  struct Cte {                    \/* For each CTE in the WITH clause.... *\/$/;"	s	struct:With	file:
D	sqlite3_MFAW.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
DB_Empty	sqlite3_MFAW.c	10927;"	d	file:
DB_SchemaLoaded	sqlite3_MFAW.c	10925;"	d	file:
DB_UnresetViews	sqlite3_MFAW.c	10926;"	d	file:
DCOORD	sqlite3_MFAW.c	151305;"	d	file:
DCOORD	sqlite3_MFAW.c	151307;"	d	file:
DEF_PROCSTAT_BUFFER_SIZE	mobibench.c	265;"	d	file:
DEF_PROCSTAT_BUFFER_SIZE	mobibench_MFAW.c	265;"	d	file:
DIRECT_MODE	sqlite3_MFAW.c	47660;"	d	file:
DOCID_CMP	sqlite3_MFAW.c	135489;"	d	file:
DOTLOCK_SUFFIX	sqlite3_MFAW.c	27537;"	d	file:
DO_OS_MALLOC_TEST	sqlite3_MFAW.c	16516;"	d	file:
DO_OS_MALLOC_TEST	sqlite3_MFAW.c	16523;"	d	file:
DateTime	sqlite3_MFAW.c	/^struct DateTime {$/;"	s	file:
DateTime	sqlite3_MFAW.c	/^typedef struct DateTime DateTime;$/;"	t	typeref:struct:DateTime	file:
Db	sqlite3_MFAW.c	/^struct Db {$/;"	s	file:
Db	sqlite3_MFAW.c	/^typedef struct Db Db;$/;"	t	typeref:struct:Db	file:
DbClearProperty	sqlite3_MFAW.c	10913;"	d	file:
DbFixer	sqlite3_MFAW.c	/^struct DbFixer {$/;"	s	file:
DbFixer	sqlite3_MFAW.c	/^typedef struct DbFixer DbFixer;$/;"	t	typeref:struct:DbFixer	file:
DbHasAnyProperty	sqlite3_MFAW.c	10911;"	d	file:
DbHasProperty	sqlite3_MFAW.c	10910;"	d	file:
DbMaskAllZero	sqlite3_MFAW.c	12477;"	d	file:
DbMaskAllZero	sqlite3_MFAW.c	12484;"	d	file:
DbMaskNonZero	sqlite3_MFAW.c	12478;"	d	file:
DbMaskNonZero	sqlite3_MFAW.c	12485;"	d	file:
DbMaskSet	sqlite3_MFAW.c	12476;"	d	file:
DbMaskSet	sqlite3_MFAW.c	12483;"	d	file:
DbMaskTest	sqlite3_MFAW.c	12474;"	d	file:
DbMaskTest	sqlite3_MFAW.c	12481;"	d	file:
DbMaskZero	sqlite3_MFAW.c	12475;"	d	file:
DbMaskZero	sqlite3_MFAW.c	12482;"	d	file:
DbPage	sqlite3_MFAW.c	/^typedef struct PgHdr DbPage;$/;"	t	typeref:struct:PgHdr	file:
DbSetProperty	sqlite3_MFAW.c	10912;"	d	file:
Deephemeralize	sqlite3_MFAW.c	70983;"	d	file:
DistinctCtx	sqlite3_MFAW.c	/^struct DistinctCtx {$/;"	s	file:
DistinctCtx	sqlite3_MFAW.c	/^typedef struct DistinctCtx DistinctCtx;$/;"	t	typeref:struct:DistinctCtx	file:
EIGHT_BYTE_ALIGNMENT	sqlite3_MFAW.c	9114;"	d	file:
EIGHT_BYTE_ALIGNMENT	sqlite3_MFAW.c	9116;"	d	file:
ENC	sqlite3_MFAW.c	11141;"	d	file:
END	mobibench.c	/^	END,$/;"	e	enum:__anon31	file:
END	mobibench_MFAW.c	/^	END,$/;"	e	enum:__anon28	file:
END_CPU_CHECK	mobibench.c	268;"	d	file:
END_CPU_CHECK	mobibench_MFAW.c	268;"	d	file:
EP_Agg	sqlite3_MFAW.c	11978;"	d	file:
EP_CanBeNull	sqlite3_MFAW.c	11997;"	d	file:
EP_Collate	sqlite3_MFAW.c	11985;"	d	file:
EP_ConstFunc	sqlite3_MFAW.c	11996;"	d	file:
EP_DblQuoted	sqlite3_MFAW.c	11983;"	d	file:
EP_Distinct	sqlite3_MFAW.c	11981;"	d	file:
EP_Error	sqlite3_MFAW.c	11980;"	d	file:
EP_FromJoin	sqlite3_MFAW.c	11977;"	d	file:
EP_Generic	sqlite3_MFAW.c	11986;"	d	file:
EP_InfixFunc	sqlite3_MFAW.c	11984;"	d	file:
EP_IntValue	sqlite3_MFAW.c	11987;"	d	file:
EP_MemToken	sqlite3_MFAW.c	11993;"	d	file:
EP_NoReduce	sqlite3_MFAW.c	11994;"	d	file:
EP_Propagate	sqlite3_MFAW.c	12003;"	d	file:
EP_Reduced	sqlite3_MFAW.c	11990;"	d	file:
EP_Resolved	sqlite3_MFAW.c	11979;"	d	file:
EP_Skip	sqlite3_MFAW.c	11989;"	d	file:
EP_Static	sqlite3_MFAW.c	11992;"	d	file:
EP_Subquery	sqlite3_MFAW.c	11998;"	d	file:
EP_TokenOnly	sqlite3_MFAW.c	11991;"	d	file:
EP_Unlikely	sqlite3_MFAW.c	11995;"	d	file:
EP_VarSelect	sqlite3_MFAW.c	11982;"	d	file:
EP_xIsSelect	sqlite3_MFAW.c	11988;"	d	file:
ERROR	mobibench.c	/^	ERROR,$/;"	e	enum:__anon31	file:
ERROR	mobibench_MFAW.c	/^	ERROR,$/;"	e	enum:__anon28	file:
EXCLUSIVE_LOCK	sqlite3_MFAW.c	10660;"	d	file:
EXEC	mobibench.c	/^	EXEC,$/;"	e	enum:__anon31	file:
EXEC	mobibench_MFAW.c	/^	EXEC,$/;"	e	enum:__anon28	file:
EXENAME	Makefile	/^EXENAME = mobibench_MFAW$/;"	m
EXPRDUP_REDUCE	sqlite3_MFAW.c	12037;"	d	file:
EXPR_FULLSIZE	sqlite3_MFAW.c	12029;"	d	file:
EXPR_REDUCEDSIZE	sqlite3_MFAW.c	12030;"	d	file:
EXPR_TOKENONLYSIZE	sqlite3_MFAW.c	12031;"	d	file:
EXTRA_SIZE	sqlite3_MFAW.c	52456;"	d	file:
ExpandBlob	sqlite3_MFAW.c	14995;"	d	file:
ExpandBlob	sqlite3_MFAW.c	14998;"	d	file:
Explain	sqlite3_MFAW.c	/^struct Explain {$/;"	s	file:
Explain	sqlite3_MFAW.c	/^typedef struct Explain Explain;$/;"	t	typeref:struct:Explain	file:
Expr	sqlite3_MFAW.c	/^struct Expr {$/;"	s	file:
Expr	sqlite3_MFAW.c	/^typedef struct Expr Expr;$/;"	t	typeref:struct:Expr	file:
ExprClearProperty	sqlite3_MFAW.c	12012;"	d	file:
ExprHasAllProperty	sqlite3_MFAW.c	12010;"	d	file:
ExprHasProperty	sqlite3_MFAW.c	12009;"	d	file:
ExprList	sqlite3_MFAW.c	/^struct ExprList {$/;"	s	file:
ExprList	sqlite3_MFAW.c	/^typedef struct ExprList ExprList;$/;"	t	typeref:struct:ExprList	file:
ExprList_item	sqlite3_MFAW.c	/^  struct ExprList_item { \/* For each expression in the list *\/$/;"	s	struct:ExprList	file:
ExprSetProperty	sqlite3_MFAW.c	12011;"	d	file:
ExprSetVVAProperty	sqlite3_MFAW.c	12019;"	d	file:
ExprSetVVAProperty	sqlite3_MFAW.c	12021;"	d	file:
ExprSpan	sqlite3_MFAW.c	/^struct ExprSpan {$/;"	s	file:
ExprSpan	sqlite3_MFAW.c	/^typedef struct ExprSpan ExprSpan;$/;"	t	typeref:struct:ExprSpan	file:
F2FS_IOCTL_MAGIC	sqlite3_MFAW.c	25351;"	d	file:
F2FS_IOC_ABORT_VOLATILE_WRITE	sqlite3_MFAW.c	25360;"	d	file:
F2FS_IOC_ADD_ATOMIC_FILE	sqlite3_MFAW.c	25354;"	d	file:
F2FS_IOC_COMMIT_ATOMIC_WRITE	sqlite3_MFAW.c	25353;"	d	file:
F2FS_IOC_COMMIT_ATOMIC_WRITE_FILES	sqlite3_MFAW.c	25356;"	d	file:
F2FS_IOC_DEFRAGMENT	sqlite3_MFAW.c	25363;"	d	file:
F2FS_IOC_END_ATOMIC_WRITE_FILES	sqlite3_MFAW.c	25357;"	d	file:
F2FS_IOC_GARBAGE_COLLECT	sqlite3_MFAW.c	25361;"	d	file:
F2FS_IOC_MOVE_RANGE	sqlite3_MFAW.c	25364;"	d	file:
F2FS_IOC_RELEASE_VOLATILE_WRITE	sqlite3_MFAW.c	25359;"	d	file:
F2FS_IOC_START_ATOMIC_WRITE	sqlite3_MFAW.c	25352;"	d	file:
F2FS_IOC_START_ATOMIC_WRITE_FILES	sqlite3_MFAW.c	25355;"	d	file:
F2FS_IOC_START_VOLATILE_WRITE	sqlite3_MFAW.c	25358;"	d	file:
F2FS_IOC_WRITE_CHECKPOINT	sqlite3_MFAW.c	25362;"	d	file:
FDATASYNC	mobibench.c	/^  FDATASYNC,$/;"	e	enum:__anon30	file:
FDATASYNC	mobibench_MFAW.c	/^  FDATASYNC,$/;"	e	enum:__anon27	file:
FILEHANDLEID	sqlite3_MFAW.c	41790;"	d	file:
FILE_ATTRIBUTE_MASK	sqlite3_MFAW.c	33455;"	d	file:
FILE_FLAG_MASK	sqlite3_MFAW.c	33451;"	d	file:
FKey	sqlite3_MFAW.c	/^struct FKey {$/;"	s	file:
FKey	sqlite3_MFAW.c	/^typedef struct FKey FKey;$/;"	t	typeref:struct:FKey	file:
FLAG_INTERN	sqlite3_MFAW.c	21412;"	d	file:
FLAG_SIGNED	sqlite3_MFAW.c	21411;"	d	file:
FLAG_STRING	sqlite3_MFAW.c	21413;"	d	file:
FOREGUARD	sqlite3_MFAW.c	17381;"	d	file:
FOUR_BYTE_INT	sqlite3_MFAW.c	67901;"	d	file:
FOUR_BYTE_UINT	sqlite3_MFAW.c	67900;"	d	file:
FSYNC	mobibench.c	/^  FSYNC,$/;"	e	enum:__anon30	file:
FSYNC	mobibench_MFAW.c	/^  FSYNC,$/;"	e	enum:__anon27	file:
FTS3_AUX_SCHEMA	sqlite3_MFAW.c	139014;"	d	file:
FTS3_DOCID_SEARCH	sqlite3_MFAW.c	133088;"	d	file:
FTS3_EVAL_FILTER	sqlite3_MFAW.c	133068;"	d	file:
FTS3_EVAL_MATCHINFO	sqlite3_MFAW.c	133070;"	d	file:
FTS3_EVAL_NEXT	sqlite3_MFAW.c	133069;"	d	file:
FTS3_FULLSCAN_SEARCH	sqlite3_MFAW.c	133087;"	d	file:
FTS3_FULLTEXT_SEARCH	sqlite3_MFAW.c	133089;"	d	file:
FTS3_HASH_BINARY	sqlite3_MFAW.c	132748;"	d	file:
FTS3_HASH_STRING	sqlite3_MFAW.c	132747;"	d	file:
FTS3_HAVE_DOCID_GE	sqlite3_MFAW.c	133098;"	d	file:
FTS3_HAVE_DOCID_LE	sqlite3_MFAW.c	133099;"	d	file:
FTS3_HAVE_LANGID	sqlite3_MFAW.c	133097;"	d	file:
FTS3_MATCHINFO_AVGLENGTH	sqlite3_MFAW.c	148728;"	d	file:
FTS3_MATCHINFO_DEFAULT	sqlite3_MFAW.c	148737;"	d	file:
FTS3_MATCHINFO_HITS	sqlite3_MFAW.c	148731;"	d	file:
FTS3_MATCHINFO_LCS	sqlite3_MFAW.c	148730;"	d	file:
FTS3_MATCHINFO_LENGTH	sqlite3_MFAW.c	148729;"	d	file:
FTS3_MATCHINFO_LHITS	sqlite3_MFAW.c	148732;"	d	file:
FTS3_MATCHINFO_NCOL	sqlite3_MFAW.c	148726;"	d	file:
FTS3_MATCHINFO_NDOC	sqlite3_MFAW.c	148727;"	d	file:
FTS3_MATCHINFO_NPHRASE	sqlite3_MFAW.c	148725;"	d	file:
FTS3_MAX_PENDING_DATA	sqlite3_MFAW.c	132823;"	d	file:
FTS3_MERGE_COUNT	sqlite3_MFAW.c	132813;"	d	file:
FTS3_NODE_CHUNKSIZE	sqlite3_MFAW.c	143098;"	d	file:
FTS3_NODE_CHUNKSIZE	sqlite3_MFAW.c	143101;"	d	file:
FTS3_NODE_CHUNK_THRESHOLD	sqlite3_MFAW.c	143099;"	d	file:
FTS3_NODE_CHUNK_THRESHOLD	sqlite3_MFAW.c	143102;"	d	file:
FTS3_NODE_PADDING	sqlite3_MFAW.c	143076;"	d	file:
FTS3_SEGCURSOR_ALL	sqlite3_MFAW.c	133241;"	d	file:
FTS3_SEGCURSOR_PENDING	sqlite3_MFAW.c	133240;"	d	file:
FTS3_SEGDIR_MAXLEVEL	sqlite3_MFAW.c	132861;"	d	file:
FTS3_SEGDIR_MAXLEVEL_STR	sqlite3_MFAW.c	132862;"	d	file:
FTS3_SEGMENT_COLUMN_FILTER	sqlite3_MFAW.c	133253;"	d	file:
FTS3_SEGMENT_FIRST	sqlite3_MFAW.c	133256;"	d	file:
FTS3_SEGMENT_IGNORE_EMPTY	sqlite3_MFAW.c	133252;"	d	file:
FTS3_SEGMENT_PREFIX	sqlite3_MFAW.c	133254;"	d	file:
FTS3_SEGMENT_REQUIRE_POS	sqlite3_MFAW.c	133251;"	d	file:
FTS3_SEGMENT_SCAN	sqlite3_MFAW.c	133255;"	d	file:
FTS3_TOK_SCHEMA	sqlite3_MFAW.c	142726;"	d	file:
FTS3_VARINT_MAX	sqlite3_MFAW.c	132844;"	d	file:
FTS4AUX_EQ_CONSTRAINT	sqlite3_MFAW.c	139107;"	d	file:
FTS4AUX_GE_CONSTRAINT	sqlite3_MFAW.c	139108;"	d	file:
FTS4AUX_LE_CONSTRAINT	sqlite3_MFAW.c	139109;"	d	file:
FTSQUERY_AND	sqlite3_MFAW.c	133201;"	d	file:
FTSQUERY_NEAR	sqlite3_MFAW.c	133199;"	d	file:
FTSQUERY_NOT	sqlite3_MFAW.c	133200;"	d	file:
FTSQUERY_OR	sqlite3_MFAW.c	133202;"	d	file:
FTSQUERY_PHRASE	sqlite3_MFAW.c	133203;"	d	file:
FTS_CORRUPT_VTAB	sqlite3_MFAW.c	132937;"	d	file:
FTS_CORRUPT_VTAB	sqlite3_MFAW.c	132939;"	d	file:
FTS_MAX_APPENDABLE_HEIGHT	sqlite3_MFAW.c	143064;"	d	file:
FTS_STAT_AUTOINCRMERGE	sqlite3_MFAW.c	143111;"	d	file:
FTS_STAT_DOCTOTAL	sqlite3_MFAW.c	143109;"	d	file:
FTS_STAT_INCRMERGEHINT	sqlite3_MFAW.c	143110;"	d	file:
FULLY_WITHIN	sqlite3_MFAW.c	8031;"	d	file:
FUNCTION	sqlite3_MFAW.c	11312;"	d	file:
FUNCTION2	sqlite3_MFAW.c	11318;"	d	file:
FUNC_PERFECT_MATCH	sqlite3_MFAW.c	95432;"	d	file:
FileChunk	sqlite3_MFAW.c	/^struct FileChunk {$/;"	s	file:
FileChunk	sqlite3_MFAW.c	/^typedef struct FileChunk FileChunk;$/;"	t	typeref:struct:FileChunk	file:
FilePoint	sqlite3_MFAW.c	/^struct FilePoint {$/;"	s	file:
FilePoint	sqlite3_MFAW.c	/^typedef struct FilePoint FilePoint;$/;"	t	typeref:struct:FilePoint	file:
Fts3Cursor	sqlite3_MFAW.c	/^struct Fts3Cursor {$/;"	s	file:
Fts3Cursor	sqlite3_MFAW.c	/^typedef struct Fts3Cursor Fts3Cursor;$/;"	t	typeref:struct:Fts3Cursor	file:
Fts3DeferredToken	sqlite3_MFAW.c	/^struct Fts3DeferredToken {$/;"	s	file:
Fts3DeferredToken	sqlite3_MFAW.c	/^typedef struct Fts3DeferredToken Fts3DeferredToken;$/;"	t	typeref:struct:Fts3DeferredToken	file:
Fts3Doclist	sqlite3_MFAW.c	/^struct Fts3Doclist {$/;"	s	file:
Fts3Doclist	sqlite3_MFAW.c	/^typedef struct Fts3Doclist Fts3Doclist;$/;"	t	typeref:struct:Fts3Doclist	file:
Fts3Expr	sqlite3_MFAW.c	/^struct Fts3Expr {$/;"	s	file:
Fts3Expr	sqlite3_MFAW.c	/^typedef struct Fts3Expr Fts3Expr;$/;"	t	typeref:struct:Fts3Expr	file:
Fts3Hash	sqlite3_MFAW.c	/^struct Fts3Hash {$/;"	s	file:
Fts3Hash	sqlite3_MFAW.c	/^typedef struct Fts3Hash Fts3Hash;$/;"	t	typeref:struct:Fts3Hash	file:
Fts3HashElem	sqlite3_MFAW.c	/^struct Fts3HashElem {$/;"	s	file:
Fts3HashElem	sqlite3_MFAW.c	/^typedef struct Fts3HashElem Fts3HashElem;$/;"	t	typeref:struct:Fts3HashElem	file:
Fts3Index	sqlite3_MFAW.c	/^  struct Fts3Index {$/;"	s	struct:Fts3Table	file:
Fts3MultiSegReader	sqlite3_MFAW.c	/^struct Fts3MultiSegReader {$/;"	s	file:
Fts3MultiSegReader	sqlite3_MFAW.c	/^typedef struct Fts3MultiSegReader Fts3MultiSegReader;$/;"	t	typeref:struct:Fts3MultiSegReader	file:
Fts3Phrase	sqlite3_MFAW.c	/^struct Fts3Phrase {$/;"	s	file:
Fts3Phrase	sqlite3_MFAW.c	/^typedef struct Fts3Phrase Fts3Phrase;$/;"	t	typeref:struct:Fts3Phrase	file:
Fts3PhraseToken	sqlite3_MFAW.c	/^struct Fts3PhraseToken {$/;"	s	file:
Fts3PhraseToken	sqlite3_MFAW.c	/^typedef struct Fts3PhraseToken Fts3PhraseToken;$/;"	t	typeref:struct:Fts3PhraseToken	file:
Fts3SegFilter	sqlite3_MFAW.c	/^struct Fts3SegFilter {$/;"	s	file:
Fts3SegFilter	sqlite3_MFAW.c	/^typedef struct Fts3SegFilter Fts3SegFilter;$/;"	t	typeref:struct:Fts3SegFilter	file:
Fts3SegReader	sqlite3_MFAW.c	/^struct Fts3SegReader {$/;"	s	file:
Fts3SegReader	sqlite3_MFAW.c	/^typedef struct Fts3SegReader Fts3SegReader;$/;"	t	typeref:struct:Fts3SegReader	file:
Fts3Table	sqlite3_MFAW.c	/^struct Fts3Table {$/;"	s	file:
Fts3Table	sqlite3_MFAW.c	/^typedef struct Fts3Table Fts3Table;$/;"	t	typeref:struct:Fts3Table	file:
Fts3TokenAndCost	sqlite3_MFAW.c	/^struct Fts3TokenAndCost {$/;"	s	file:
Fts3TokenAndCost	sqlite3_MFAW.c	/^typedef struct Fts3TokenAndCost Fts3TokenAndCost;$/;"	t	typeref:struct:Fts3TokenAndCost	file:
Fts3auxColstats	sqlite3_MFAW.c	/^  struct Fts3auxColstats {$/;"	s	struct:Fts3auxCursor	file:
Fts3auxCursor	sqlite3_MFAW.c	/^struct Fts3auxCursor {$/;"	s	file:
Fts3auxCursor	sqlite3_MFAW.c	/^typedef struct Fts3auxCursor Fts3auxCursor;$/;"	t	typeref:struct:Fts3auxCursor	file:
Fts3auxTable	sqlite3_MFAW.c	/^struct Fts3auxTable {$/;"	s	file:
Fts3auxTable	sqlite3_MFAW.c	/^typedef struct Fts3auxTable Fts3auxTable;$/;"	t	typeref:struct:Fts3auxTable	file:
Fts3tokCursor	sqlite3_MFAW.c	/^struct Fts3tokCursor {$/;"	s	file:
Fts3tokCursor	sqlite3_MFAW.c	/^typedef struct Fts3tokCursor Fts3tokCursor;$/;"	t	typeref:struct:Fts3tokCursor	file:
Fts3tokTable	sqlite3_MFAW.c	/^struct Fts3tokTable {$/;"	s	file:
Fts3tokTable	sqlite3_MFAW.c	/^typedef struct Fts3tokTable Fts3tokTable;$/;"	t	typeref:struct:Fts3tokTable	file:
FuncDef	sqlite3_MFAW.c	/^struct FuncDef {$/;"	s	file:
FuncDef	sqlite3_MFAW.c	/^typedef struct FuncDef FuncDef;$/;"	t	typeref:struct:FuncDef	file:
FuncDefHash	sqlite3_MFAW.c	/^struct FuncDefHash {$/;"	s	file:
FuncDefHash	sqlite3_MFAW.c	/^typedef struct FuncDefHash FuncDefHash;$/;"	t	typeref:struct:FuncDefHash	file:
FuncDestructor	sqlite3_MFAW.c	/^struct FuncDestructor {$/;"	s	file:
FuncDestructor	sqlite3_MFAW.c	/^typedef struct FuncDestructor FuncDestructor;$/;"	t	typeref:struct:FuncDestructor	file:
GETVARINT_INIT	sqlite3_MFAW.c	133413;"	d	file:
GETVARINT_STEP	sqlite3_MFAW.c	133410;"	d	file:
GLOBAL	sqlite3_MFAW.c	9258;"	d	file:
GLOBAL	sqlite3_MFAW.c	9264;"	d	file:
GlobUpperToLower	sqlite3_MFAW.c	97085;"	d	file:
GlobUpperToLower	sqlite3_MFAW.c	97088;"	d	file:
GlobUpperToLowerAscii	sqlite3_MFAW.c	97086;"	d	file:
GlobUpperToLowerAscii	sqlite3_MFAW.c	97089;"	d	file:
HANDLE_TO_WINFILE	sqlite3_MFAW.c	35258;"	d	file:
HASHSIZE	sqlite3_MFAW.c	151146;"	d	file:
HASHTABLE_HASH_1	sqlite3_MFAW.c	49465;"	d	file:
HASHTABLE_NPAGE	sqlite3_MFAW.c	49464;"	d	file:
HASHTABLE_NPAGE_ONE	sqlite3_MFAW.c	49473;"	d	file:
HASHTABLE_NSLOT	sqlite3_MFAW.c	49466;"	d	file:
HAVE_FULLFSYNC	sqlite3_MFAW.c	28885;"	d	file:
HAVE_FULLFSYNC	sqlite3_MFAW.c	28887;"	d	file:
HAVE_GETHOSTUUID	sqlite3_MFAW.c	25372;"	d	file:
HAVE_LOCALTIME_S	sqlite3_MFAW.c	15746;"	d	file:
HAVE_LOCALTIME_S	sqlite3_MFAW.c	15747;"	d	file:
HAVE_MREMAP	sqlite3_MFAW.c	25773;"	d	file:
HAVE_MREMAP	sqlite3_MFAW.c	25775;"	d	file:
HAVE_UTIME	sqlite3_MFAW.c	121;"	d	file:
HasRowid	sqlite3_MFAW.c	11576;"	d	file:
Hash	sqlite3_MFAW.c	/^struct Hash {$/;"	s	file:
Hash	sqlite3_MFAW.c	/^typedef struct Hash Hash;$/;"	t	typeref:struct:Hash	file:
HashElem	sqlite3_MFAW.c	/^struct HashElem {$/;"	s	file:
HashElem	sqlite3_MFAW.c	/^typedef struct HashElem HashElem;$/;"	t	typeref:struct:HashElem	file:
INCRINIT_NORMAL	sqlite3_MFAW.c	80037;"	d	file:
INCRINIT_ROOT	sqlite3_MFAW.c	80039;"	d	file:
INCRINIT_TASK	sqlite3_MFAW.c	80038;"	d	file:
INSERT_STR	mobibench.c	72;"	d	file:
INSERT_STR	mobibench_MFAW.c	72;"	d	file:
INSTALL	Makefile	/^INSTALL = install$/;"	m
INT16_TYPE	sqlite3_MFAW.c	8959;"	d	file:
INT16_TYPE	sqlite3_MFAW.c	8961;"	d	file:
INT8_TYPE	sqlite3_MFAW.c	8973;"	d	file:
INT8_TYPE	sqlite3_MFAW.c	8975;"	d	file:
INTERFACE	sqlite3_MFAW.c	123477;"	d	file:
INVALID_FILE_ATTRIBUTES	sqlite3_MFAW.c	33447;"	d	file:
INVALID_SET_FILE_POINTER	sqlite3_MFAW.c	35610;"	d	file:
IN_DECLARE_VTAB	sqlite3_MFAW.c	12614;"	d	file:
IN_DECLARE_VTAB	sqlite3_MFAW.c	12616;"	d	file:
IN_INDEX_EPH	sqlite3_MFAW.c	13675;"	d	file:
IN_INDEX_INDEX_ASC	sqlite3_MFAW.c	13676;"	d	file:
IN_INDEX_INDEX_DESC	sqlite3_MFAW.c	13677;"	d	file:
IN_INDEX_LOOP	sqlite3_MFAW.c	13684;"	d	file:
IN_INDEX_MEMBERSHIP	sqlite3_MFAW.c	13683;"	d	file:
IN_INDEX_NOOP	sqlite3_MFAW.c	13678;"	d	file:
IN_INDEX_NOOP_OK	sqlite3_MFAW.c	13682;"	d	file:
IN_INDEX_ROWID	sqlite3_MFAW.c	13674;"	d	file:
IOMETHODS	sqlite3_MFAW.c	30460;"	d	file:
IOTRACE	sqlite3_MFAW.c	13733;"	d	file:
IOTRACE	sqlite3_MFAW.c	13737;"	d	file:
ISAUTOVACUUM	sqlite3_MFAW.c	52796;"	d	file:
ISAUTOVACUUM	sqlite3_MFAW.c	52798;"	d	file:
IS_BIG_INT	sqlite3_MFAW.c	8544;"	d	file:
IS_LOCK_ERROR	sqlite3_MFAW.c	25434;"	d	file:
IcuCursor	sqlite3_MFAW.c	/^struct IcuCursor {$/;"	s	file:
IcuCursor	sqlite3_MFAW.c	/^typedef struct IcuCursor IcuCursor;$/;"	t	typeref:struct:IcuCursor	file:
IcuTokenizer	sqlite3_MFAW.c	/^struct IcuTokenizer {$/;"	s	file:
IcuTokenizer	sqlite3_MFAW.c	/^typedef struct IcuTokenizer IcuTokenizer;$/;"	t	typeref:struct:IcuTokenizer	file:
IdChar	sqlite3_MFAW.c	127248;"	d	file:
IdChar	sqlite3_MFAW.c	127266;"	d	file:
IdChar	sqlite3_MFAW.c	127715;"	d	file:
IdChar	sqlite3_MFAW.c	127719;"	d	file:
IdList	sqlite3_MFAW.c	/^struct IdList {$/;"	s	file:
IdList	sqlite3_MFAW.c	/^typedef struct IdList IdList;$/;"	t	typeref:struct:IdList	file:
IdList_item	sqlite3_MFAW.c	/^  struct IdList_item {$/;"	s	struct:IdList	file:
IfNotOmitAV	sqlite3_MFAW.c	53180;"	d	file:
IfNotOmitAV	sqlite3_MFAW.c	53182;"	d	file:
IgnorableOrderby	sqlite3_MFAW.c	12398;"	d	file:
InLoop	sqlite3_MFAW.c	/^      struct InLoop {$/;"	s	struct:WhereLevel::__anon16::__anon17	file:
IncrMerger	sqlite3_MFAW.c	/^struct IncrMerger {$/;"	s	file:
IncrMerger	sqlite3_MFAW.c	/^typedef struct IncrMerger IncrMerger;       \/* Read & merge multiple PMAs *\/$/;"	t	typeref:struct:IncrMerger	file:
Incrblob	sqlite3_MFAW.c	/^struct Incrblob {$/;"	s	file:
Incrblob	sqlite3_MFAW.c	/^typedef struct Incrblob Incrblob;$/;"	t	typeref:struct:Incrblob	file:
IncrmergeWriter	sqlite3_MFAW.c	/^struct IncrmergeWriter {$/;"	s	file:
IncrmergeWriter	sqlite3_MFAW.c	/^typedef struct IncrmergeWriter IncrmergeWriter;$/;"	t	typeref:struct:IncrmergeWriter	file:
Index	sqlite3_MFAW.c	/^struct Index {$/;"	s	file:
Index	sqlite3_MFAW.c	/^typedef struct Index Index;$/;"	t	typeref:struct:Index	file:
IndexSample	sqlite3_MFAW.c	/^struct IndexSample {$/;"	s	file:
IndexSample	sqlite3_MFAW.c	/^typedef struct IndexSample IndexSample;$/;"	t	typeref:struct:IndexSample	file:
InitData	sqlite3_MFAW.c	/^} InitData;$/;"	t	typeref:struct:__anon7	file:
IntegrityCk	sqlite3_MFAW.c	/^struct IntegrityCk {$/;"	s	file:
IntegrityCk	sqlite3_MFAW.c	/^typedef struct IntegrityCk IntegrityCk;$/;"	t	typeref:struct:IntegrityCk	file:
IsHiddenColumn	sqlite3_MFAW.c	11569;"	d	file:
IsHiddenColumn	sqlite3_MFAW.c	11572;"	d	file:
IsPowerOfTwo	sqlite3_MFAW.c	9230;"	d	file:
IsPrimaryKeyIndex	sqlite3_MFAW.c	11776;"	d	file:
IsStat3	sqlite3_MFAW.c	88285;"	d	file:
IsStat3	sqlite3_MFAW.c	88288;"	d	file:
IsStat3	sqlite3_MFAW.c	88291;"	d	file:
IsStat34	sqlite3_MFAW.c	88295;"	d	file:
IsStat4	sqlite3_MFAW.c	88284;"	d	file:
IsStat4	sqlite3_MFAW.c	88287;"	d	file:
IsStat4	sqlite3_MFAW.c	88290;"	d	file:
IsUniqueIndex	sqlite3_MFAW.c	11779;"	d	file:
IsVirtual	sqlite3_MFAW.c	11568;"	d	file:
IsVirtual	sqlite3_MFAW.c	11571;"	d	file:
JOURNAL_CHUNKSIZE	sqlite3_MFAW.c	80992;"	d	file:
JOURNAL_HDR_SZ	sqlite3_MFAW.c	42428;"	d	file:
JOURNAL_PG_SZ	sqlite3_MFAW.c	42422;"	d	file:
JT_CROSS	sqlite3_MFAW.c	12182;"	d	file:
JT_ERROR	sqlite3_MFAW.c	12187;"	d	file:
JT_INNER	sqlite3_MFAW.c	12181;"	d	file:
JT_LEFT	sqlite3_MFAW.c	12184;"	d	file:
JT_NATURAL	sqlite3_MFAW.c	12183;"	d	file:
JT_OUTER	sqlite3_MFAW.c	12186;"	d	file:
JT_RIGHT	sqlite3_MFAW.c	12185;"	d	file:
JournalFile	sqlite3_MFAW.c	/^struct JournalFile {$/;"	s	file:
JournalFile	sqlite3_MFAW.c	/^typedef struct JournalFile JournalFile;$/;"	t	typeref:struct:JournalFile	file:
JournalFileMethods	sqlite3_MFAW.c	/^static struct sqlite3_io_methods JournalFileMethods = {$/;"	v	typeref:struct:sqlite3_io_methods	file:
KeyClass	sqlite3_MFAW.c	/^typedef struct KeyClass KeyClass;$/;"	t	typeref:struct:KeyClass	file:
KeyInfo	sqlite3_MFAW.c	/^struct KeyInfo {$/;"	s	file:
KeyInfo	sqlite3_MFAW.c	/^typedef struct KeyInfo KeyInfo;$/;"	t	typeref:struct:KeyInfo	file:
LARGEST_INT64	sqlite3_MFAW.c	136177;"	d	file:
LARGEST_INT64	sqlite3_MFAW.c	9090;"	d	file:
LCS_ITERATOR_FINISHED	sqlite3_MFAW.c	149653;"	d	file:
LIKEFUNC	sqlite3_MFAW.c	11324;"	d	file:
LM	mobibench.c	345;"	d	file:
LM	mobibench_MFAW.c	345;"	d	file:
LOCKFILE_EXCLUSIVE_LOCK	sqlite3_MFAW.c	36123;"	d	file:
LOCKFILE_FAIL_IMMEDIATELY	sqlite3_MFAW.c	36119;"	d	file:
LOGMAX	sqlite3_MFAW.c	18610;"	d	file:
LONGDOUBLE_TYPE	sqlite3_MFAW.c	8834;"	d	file:
LONGDOUBLE_TYPE	sqlite3_MFAW.c	8979;"	d	file:
Latency_fp	mobibench.c	/^FILE* Latency_fp; \/\/ latency output$/;"	v
Latency_fp	mobibench_MFAW.c	/^FILE* Latency_fp; \/\/ latency output$/;"	v
Latency_state	mobibench.c	/^int Latency_state = 0; \/\/ flag for printing latency$/;"	v
Latency_state	mobibench_MFAW.c	/^int Latency_state = 0; \/\/ flag for printing latency$/;"	v
LcsIterator	sqlite3_MFAW.c	/^struct LcsIterator {$/;"	s	file:
LcsIterator	sqlite3_MFAW.c	/^typedef struct LcsIterator LcsIterator;$/;"	t	typeref:struct:LcsIterator	file:
LikeOp	sqlite3_MFAW.c	/^struct LikeOp {$/;"	s	file:
LimitVal	sqlite3_MFAW.c	/^struct LimitVal {$/;"	s	file:
LoadDoclistCtx	sqlite3_MFAW.c	/^struct LoadDoclistCtx {$/;"	s	file:
LoadDoclistCtx	sqlite3_MFAW.c	/^typedef struct LoadDoclistCtx LoadDoclistCtx;$/;"	t	typeref:struct:LoadDoclistCtx	file:
LogEst	sqlite3_MFAW.c	/^typedef INT16_TYPE LogEst;$/;"	t	file:
Lookaside	sqlite3_MFAW.c	/^struct Lookaside {$/;"	s	file:
Lookaside	sqlite3_MFAW.c	/^typedef struct Lookaside Lookaside;$/;"	t	typeref:struct:Lookaside	file:
LookasideSlot	sqlite3_MFAW.c	/^struct LookasideSlot {$/;"	s	file:
LookasideSlot	sqlite3_MFAW.c	/^typedef struct LookasideSlot LookasideSlot;$/;"	t	typeref:struct:LookasideSlot	file:
M	sqlite3_MFAW.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
MASKBIT	sqlite3_MFAW.c	12126;"	d	file:
MASKBIT32	sqlite3_MFAW.c	12127;"	d	file:
MASTER_NAME	sqlite3_MFAW.c	9208;"	d	file:
MASTER_ROOT	sqlite3_MFAW.c	9214;"	d	file:
MATRIX_A	mobibench.c	343;"	d	file:
MATRIX_A	mobibench_MFAW.c	343;"	d	file:
MAX	sqlite3_MFAW.c	132837;"	d	file:
MAX	sqlite3_MFAW.c	151405;"	d	file:
MAX	sqlite3_MFAW.c	8919;"	d	file:
MAX_6BYTE	sqlite3_MFAW.c	67751;"	d	file:
MAX_INCR_PHRASE_TOKENS	sqlite3_MFAW.c	137276;"	d	file:
MAX_PATH	sqlite3_MFAW.c	33331;"	d	file:
MAX_PATHNAME	sqlite3_MFAW.c	25424;"	d	file:
MAX_ROWID	sqlite3_MFAW.c	74944;"	d	file:
MAX_SECTOR_SIZE	sqlite3_MFAW.c	42087;"	d	file:
MAX_THREADS	mobibench.c	70;"	d	file:
MAX_THREADS	mobibench_MFAW.c	70;"	d	file:
MEM5LINK	sqlite3_MFAW.c	18673;"	d	file:
MEMCELLSIZE	sqlite3_MFAW.c	63931;"	d	file:
MEMDB	sqlite3_MFAW.c	42437;"	d	file:
MEMDB	sqlite3_MFAW.c	42439;"	d	file:
MEMTYPE_HEAP	sqlite3_MFAW.c	13778;"	d	file:
MEMTYPE_LOOKASIDE	sqlite3_MFAW.c	13779;"	d	file:
MEMTYPE_PCACHE	sqlite3_MFAW.c	13781;"	d	file:
MEMTYPE_SCRATCH	sqlite3_MFAW.c	13780;"	d	file:
MEM_AffMask	sqlite3_MFAW.c	14712;"	d	file:
MEM_Agg	sqlite3_MFAW.c	14729;"	d	file:
MEM_Blob	sqlite3_MFAW.c	14711;"	d	file:
MEM_Cleared	sqlite3_MFAW.c	14716;"	d	file:
MEM_Dyn	sqlite3_MFAW.c	14726;"	d	file:
MEM_Ephem	sqlite3_MFAW.c	14728;"	d	file:
MEM_Frame	sqlite3_MFAW.c	14714;"	d	file:
MEM_Int	sqlite3_MFAW.c	14709;"	d	file:
MEM_Null	sqlite3_MFAW.c	14707;"	d	file:
MEM_Real	sqlite3_MFAW.c	14710;"	d	file:
MEM_RowSet	sqlite3_MFAW.c	14713;"	d	file:
MEM_Static	sqlite3_MFAW.c	14727;"	d	file:
MEM_Str	sqlite3_MFAW.c	14708;"	d	file:
MEM_Term	sqlite3_MFAW.c	14725;"	d	file:
MEM_TypeMask	sqlite3_MFAW.c	14717;"	d	file:
MEM_Undefined	sqlite3_MFAW.c	14715;"	d	file:
MEM_Zero	sqlite3_MFAW.c	14730;"	d	file:
MEM_Zero	sqlite3_MFAW.c	14732;"	d	file:
MEM_Zero	sqlite3_MFAW.c	14733;"	d	file:
MFAW_af_list	sqlite3_MFAW.c	/^SQLITE_PRIVATE u64 MFAW_af_list = 0;$/;"	v
MIN	sqlite3_MFAW.c	132834;"	d	file:
MIN	sqlite3_MFAW.c	151408;"	d	file:
MIN	sqlite3_MFAW.c	8918;"	d	file:
MM	mobibench.c	342;"	d	file:
MM	mobibench_MFAW.c	342;"	d	file:
MMAP	mobibench.c	/^  MMAP,$/;"	e	enum:__anon30	file:
MMAP	mobibench_MFAW.c	/^  MMAP,$/;"	e	enum:__anon27	file:
MMAP_AS	mobibench.c	/^  MMAP_AS,$/;"	e	enum:__anon30	file:
MMAP_AS	mobibench_MFAW.c	/^  MMAP_AS,$/;"	e	enum:__anon27	file:
MMAP_S	mobibench.c	/^  MMAP_S,$/;"	e	enum:__anon30	file:
MMAP_S	mobibench_MFAW.c	/^  MMAP_S,$/;"	e	enum:__anon27	file:
MODE_READ	mobibench.c	/^  MODE_READ,$/;"	e	enum:__anon29	file:
MODE_READ	mobibench_MFAW.c	/^  MODE_READ,$/;"	e	enum:__anon26	file:
MODE_RND_READ	mobibench.c	/^  MODE_RND_READ,$/;"	e	enum:__anon29	file:
MODE_RND_READ	mobibench_MFAW.c	/^  MODE_RND_READ,$/;"	e	enum:__anon26	file:
MODE_RND_WRITE	mobibench.c	/^  MODE_RND_WRITE,$/;"	e	enum:__anon29	file:
MODE_RND_WRITE	mobibench_MFAW.c	/^  MODE_RND_WRITE,$/;"	e	enum:__anon26	file:
MODE_WRITE	mobibench.c	/^  MODE_WRITE,$/;"	e	enum:__anon29	file:
MODE_WRITE	mobibench_MFAW.c	/^  MODE_WRITE,$/;"	e	enum:__anon26	file:
MUTEX_LOGIC	sqlite3_MFAW.c	10852;"	d	file:
MUTEX_LOGIC	sqlite3_MFAW.c	10854;"	d	file:
MX_CELL	sqlite3_MFAW.c	52379;"	d	file:
MX_CELL_SIZE	sqlite3_MFAW.c	52372;"	d	file:
MX_CLOSE_ATTEMPT	sqlite3_MFAW.c	35690;"	d	file:
MX_SMALL	sqlite3_MFAW.c	17883;"	d	file:
MatchInfo	sqlite3_MFAW.c	/^struct MatchInfo {$/;"	s	file:
MatchInfo	sqlite3_MFAW.c	/^typedef struct MatchInfo MatchInfo;$/;"	t	typeref:struct:MatchInfo	file:
Mem	sqlite3_MFAW.c	/^struct Mem {$/;"	s	file:
Mem	sqlite3_MFAW.c	/^typedef struct Mem Mem;$/;"	t	typeref:struct:Mem	file:
Mem0Global	sqlite3_MFAW.c	/^static SQLITE_WSD struct Mem0Global {$/;"	s	file:
Mem3Block	sqlite3_MFAW.c	/^struct Mem3Block {$/;"	s	file:
Mem3Block	sqlite3_MFAW.c	/^typedef struct Mem3Block Mem3Block;$/;"	t	typeref:struct:Mem3Block	file:
Mem3Global	sqlite3_MFAW.c	/^static SQLITE_WSD struct Mem3Global {$/;"	s	file:
Mem5Global	sqlite3_MFAW.c	/^static SQLITE_WSD struct Mem5Global {$/;"	s	file:
Mem5Link	sqlite3_MFAW.c	/^struct Mem5Link {$/;"	s	file:
Mem5Link	sqlite3_MFAW.c	/^typedef struct Mem5Link Mem5Link;$/;"	t	typeref:struct:Mem5Link	file:
MemBlockHdr	sqlite3_MFAW.c	/^struct MemBlockHdr {$/;"	s	file:
MemJournal	sqlite3_MFAW.c	/^struct MemJournal {$/;"	s	file:
MemJournal	sqlite3_MFAW.c	/^typedef struct MemJournal MemJournal;$/;"	t	typeref:struct:MemJournal	file:
MemJournalMethods	sqlite3_MFAW.c	/^static const struct sqlite3_io_methods MemJournalMethods = {$/;"	v	typeref:struct:sqlite3_io_methods	file:
MemPage	sqlite3_MFAW.c	/^struct MemPage {$/;"	s	file:
MemPage	sqlite3_MFAW.c	/^typedef struct MemPage MemPage;$/;"	t	typeref:struct:MemPage	file:
MemSetTypeFlag	sqlite3_MFAW.c	14739;"	d	file:
MemValue	sqlite3_MFAW.c	/^  union MemValue {$/;"	u	struct:Mem	file:
MergeEngine	sqlite3_MFAW.c	/^struct MergeEngine {$/;"	s	file:
MergeEngine	sqlite3_MFAW.c	/^typedef struct MergeEngine MergeEngine;     \/* Merge PMAs together *\/$/;"	t	typeref:struct:MergeEngine	file:
Module	sqlite3_MFAW.c	/^struct Module {$/;"	s	file:
Module	sqlite3_MFAW.c	/^typedef struct Module Module;$/;"	t	typeref:struct:Module	file:
NB	sqlite3_MFAW.c	59530;"	d	file:
NCELL	sqlite3_MFAW.c	151351;"	d	file:
NCSIZE	sqlite3_MFAW.c	17387;"	d	file:
NC_AllowAgg	sqlite3_MFAW.c	12255;"	d	file:
NC_HasAgg	sqlite3_MFAW.c	12256;"	d	file:
NC_InAggFunc	sqlite3_MFAW.c	12258;"	d	file:
NC_IsCheck	sqlite3_MFAW.c	12257;"	d	file:
NC_MinMaxAgg	sqlite3_MFAW.c	12260;"	d	file:
NC_PartIdx	sqlite3_MFAW.c	12259;"	d	file:
NDEBUG	sqlite3_MFAW.c	132494;"	d	file:
NDEBUG	sqlite3_MFAW.c	132919;"	d	file:
NDEBUG	sqlite3_MFAW.c	8428;"	d	file:
NDEBUG	sqlite3_MFAW.c	8431;"	d	file:
NDELAY	sqlite3_MFAW.c	129448;"	d	file:
NEVER	sqlite3_MFAW.c	132890;"	d	file:
NEVER	sqlite3_MFAW.c	132893;"	d	file:
NEVER	sqlite3_MFAW.c	132898;"	d	file:
NEVER	sqlite3_MFAW.c	8504;"	d	file:
NEVER	sqlite3_MFAW.c	8507;"	d	file:
NEVER	sqlite3_MFAW.c	8510;"	d	file:
NN	mobibench.c	341;"	d	file:
NN	mobibench_MFAW.c	341;"	d	file:
NN	sqlite3_MFAW.c	59529;"	d	file:
NONE	mobibench.c	/^	NONE,$/;"	e	enum:__anon31	file:
NONE	mobibench_MFAW.c	/^	NONE,$/;"	e	enum:__anon28	file:
NORMAL	mobibench.c	/^	NORMAL,$/;"	e	enum:__anon30	file:
NORMAL	mobibench_MFAW.c	/^	NORMAL,$/;"	e	enum:__anon27	file:
NOT_WITHIN	sqlite3_MFAW.c	8029;"	d	file:
NO_LOCK	sqlite3_MFAW.c	10656;"	d	file:
NTDDI_WIN8	sqlite3_MFAW.c	33308;"	d	file:
NTDDI_WINBLUE	sqlite3_MFAW.c	33312;"	d	file:
N_HASH	sqlite3_MFAW.c	17889;"	d	file:
N_OR_COST	sqlite3_MFAW.c	115956;"	d	file:
N_SORT_BUCKET	sqlite3_MFAW.c	39840;"	d	file:
N_STATEMENT	sqlite3_MFAW.c	154061;"	d	file:
NameContext	sqlite3_MFAW.c	/^struct NameContext {$/;"	s	file:
NameContext	sqlite3_MFAW.c	/^typedef struct NameContext NameContext;$/;"	t	typeref:struct:NameContext	file:
NodeReader	sqlite3_MFAW.c	/^struct NodeReader {$/;"	s	file:
NodeReader	sqlite3_MFAW.c	/^typedef struct NodeReader NodeReader;$/;"	t	typeref:struct:NodeReader	file:
NodeWriter	sqlite3_MFAW.c	/^struct NodeWriter {$/;"	s	file:
NodeWriter	sqlite3_MFAW.c	/^typedef struct NodeWriter NodeWriter;$/;"	t	typeref:struct:NodeWriter	file:
ODIRECT	mobibench.c	/^  ODIRECT,$/;"	e	enum:__anon30	file:
ODIRECT	mobibench_MFAW.c	/^  ODIRECT,$/;"	e	enum:__anon27	file:
OE_Abort	sqlite3_MFAW.c	11650;"	d	file:
OE_Cascade	sqlite3_MFAW.c	11658;"	d	file:
OE_Default	sqlite3_MFAW.c	11660;"	d	file:
OE_Fail	sqlite3_MFAW.c	11651;"	d	file:
OE_Ignore	sqlite3_MFAW.c	11652;"	d	file:
OE_None	sqlite3_MFAW.c	11648;"	d	file:
OE_Replace	sqlite3_MFAW.c	11653;"	d	file:
OE_Restrict	sqlite3_MFAW.c	11655;"	d	file:
OE_Rollback	sqlite3_MFAW.c	11649;"	d	file:
OE_SetDflt	sqlite3_MFAW.c	11657;"	d	file:
OE_SetNull	sqlite3_MFAW.c	11656;"	d	file:
OMIT_TEMPDB	sqlite3_MFAW.c	8853;"	d	file:
OMIT_TEMPDB	sqlite3_MFAW.c	8855;"	d	file:
ONE_BYTE_INT	sqlite3_MFAW.c	67897;"	d	file:
OPFLAG_APPEND	sqlite3_MFAW.c	12635;"	d	file:
OPFLAG_BULKCSR	sqlite3_MFAW.c	12639;"	d	file:
OPFLAG_EPHEM	sqlite3_MFAW.c	12632;"	d	file:
OPFLAG_ISUPDATE	sqlite3_MFAW.c	12634;"	d	file:
OPFLAG_LASTROWID	sqlite3_MFAW.c	12633;"	d	file:
OPFLAG_LENGTHARG	sqlite3_MFAW.c	12637;"	d	file:
OPFLAG_NCHANGE	sqlite3_MFAW.c	12631;"	d	file:
OPFLAG_P2ISREG	sqlite3_MFAW.c	12641;"	d	file:
OPFLAG_PERMUTE	sqlite3_MFAW.c	12642;"	d	file:
OPFLAG_SEEKEQ	sqlite3_MFAW.c	12640;"	d	file:
OPFLAG_TYPEOFARG	sqlite3_MFAW.c	12638;"	d	file:
OPFLAG_USESEEKRESULT	sqlite3_MFAW.c	12636;"	d	file:
OPFLG_IN1	sqlite3_MFAW.c	9950;"	d	file:
OPFLG_IN2	sqlite3_MFAW.c	9951;"	d	file:
OPFLG_IN3	sqlite3_MFAW.c	9952;"	d	file:
OPFLG_INITIALIZER	sqlite3_MFAW.c	9955;"	d	file:
OPFLG_JUMP	sqlite3_MFAW.c	9949;"	d	file:
OPFLG_OUT2	sqlite3_MFAW.c	9953;"	d	file:
OPFLG_OUT3	sqlite3_MFAW.c	9954;"	d	file:
OP_Add	sqlite3_MFAW.c	9874;"	d	file:
OP_AddImm	sqlite3_MFAW.c	9822;"	d	file:
OP_Affinity	sqlite3_MFAW.c	9833;"	d	file:
OP_AggFinal	sqlite3_MFAW.c	9927;"	d	file:
OP_AggStep	sqlite3_MFAW.c	9795;"	d	file:
OP_And	sqlite3_MFAW.c	9857;"	d	file:
OP_AutoCommit	sqlite3_MFAW.c	9788;"	d	file:
OP_BitAnd	sqlite3_MFAW.c	9870;"	d	file:
OP_BitNot	sqlite3_MFAW.c	9881;"	d	file:
OP_BitOr	sqlite3_MFAW.c	9871;"	d	file:
OP_Blob	sqlite3_MFAW.c	9815;"	d	file:
OP_Cast	sqlite3_MFAW.c	9825;"	d	file:
OP_Checkpoint	sqlite3_MFAW.c	9796;"	d	file:
OP_Clear	sqlite3_MFAW.c	9903;"	d	file:
OP_Close	sqlite3_MFAW.c	9846;"	d	file:
OP_CollSeq	sqlite3_MFAW.c	9821;"	d	file:
OP_Column	sqlite3_MFAW.c	9832;"	d	file:
OP_Compare	sqlite3_MFAW.c	9827;"	d	file:
OP_Concat	sqlite3_MFAW.c	9879;"	d	file:
OP_Copy	sqlite3_MFAW.c	9818;"	d	file:
OP_Count	sqlite3_MFAW.c	9835;"	d	file:
OP_CreateIndex	sqlite3_MFAW.c	9905;"	d	file:
OP_CreateTable	sqlite3_MFAW.c	9906;"	d	file:
OP_DecrJumpZero	sqlite3_MFAW.c	9925;"	d	file:
OP_Delete	sqlite3_MFAW.c	9880;"	d	file:
OP_Destroy	sqlite3_MFAW.c	9902;"	d	file:
OP_Divide	sqlite3_MFAW.c	9877;"	d	file:
OP_DropIndex	sqlite3_MFAW.c	9910;"	d	file:
OP_DropTable	sqlite3_MFAW.c	9909;"	d	file:
OP_DropTrigger	sqlite3_MFAW.c	9911;"	d	file:
OP_EndCoroutine	sqlite3_MFAW.c	9806;"	d	file:
OP_Eq	sqlite3_MFAW.c	9864;"	d	file:
OP_Expire	sqlite3_MFAW.c	9929;"	d	file:
OP_Explain	sqlite3_MFAW.c	9942;"	d	file:
OP_FkCounter	sqlite3_MFAW.c	9919;"	d	file:
OP_FkIfZero	sqlite3_MFAW.c	9920;"	d	file:
OP_Found	sqlite3_MFAW.c	9854;"	d	file:
OP_Function	sqlite3_MFAW.c	9786;"	d	file:
OP_Ge	sqlite3_MFAW.c	9868;"	d	file:
OP_Gosub	sqlite3_MFAW.c	9802;"	d	file:
OP_Goto	sqlite3_MFAW.c	9801;"	d	file:
OP_Gt	sqlite3_MFAW.c	9865;"	d	file:
OP_Halt	sqlite3_MFAW.c	9809;"	d	file:
OP_HaltIfNull	sqlite3_MFAW.c	9808;"	d	file:
OP_IdxDelete	sqlite3_MFAW.c	9896;"	d	file:
OP_IdxGE	sqlite3_MFAW.c	9901;"	d	file:
OP_IdxGT	sqlite3_MFAW.c	9899;"	d	file:
OP_IdxInsert	sqlite3_MFAW.c	9895;"	d	file:
OP_IdxLE	sqlite3_MFAW.c	9898;"	d	file:
OP_IdxLT	sqlite3_MFAW.c	9900;"	d	file:
OP_IdxRowid	sqlite3_MFAW.c	9897;"	d	file:
OP_If	sqlite3_MFAW.c	9830;"	d	file:
OP_IfNeg	sqlite3_MFAW.c	9923;"	d	file:
OP_IfNot	sqlite3_MFAW.c	9831;"	d	file:
OP_IfNotZero	sqlite3_MFAW.c	9924;"	d	file:
OP_IfPos	sqlite3_MFAW.c	9922;"	d	file:
OP_IncrVacuum	sqlite3_MFAW.c	9928;"	d	file:
OP_Init	sqlite3_MFAW.c	9940;"	d	file:
OP_InitCoroutine	sqlite3_MFAW.c	9805;"	d	file:
OP_Insert	sqlite3_MFAW.c	9860;"	d	file:
OP_InsertInt	sqlite3_MFAW.c	9869;"	d	file:
OP_Int64	sqlite3_MFAW.c	9811;"	d	file:
OP_Integer	sqlite3_MFAW.c	9810;"	d	file:
OP_IntegrityCk	sqlite3_MFAW.c	9912;"	d	file:
OP_IsNull	sqlite3_MFAW.c	9861;"	d	file:
OP_JournalMode	sqlite3_MFAW.c	9797;"	d	file:
OP_Jump	sqlite3_MFAW.c	9828;"	d	file:
OP_JumpZeroIncr	sqlite3_MFAW.c	9926;"	d	file:
OP_Last	sqlite3_MFAW.c	9890;"	d	file:
OP_Le	sqlite3_MFAW.c	9866;"	d	file:
OP_LoadAnalysis	sqlite3_MFAW.c	9908;"	d	file:
OP_Lt	sqlite3_MFAW.c	9867;"	d	file:
OP_MakeRecord	sqlite3_MFAW.c	9834;"	d	file:
OP_MaxPgcnt	sqlite3_MFAW.c	9939;"	d	file:
OP_MemMax	sqlite3_MFAW.c	9921;"	d	file:
OP_Move	sqlite3_MFAW.c	9817;"	d	file:
OP_Multiply	sqlite3_MFAW.c	9876;"	d	file:
OP_MustBeInt	sqlite3_MFAW.c	9823;"	d	file:
OP_Ne	sqlite3_MFAW.c	9863;"	d	file:
OP_NewRowid	sqlite3_MFAW.c	9859;"	d	file:
OP_Next	sqlite3_MFAW.c	9794;"	d	file:
OP_NextIfOpen	sqlite3_MFAW.c	9792;"	d	file:
OP_NoConflict	sqlite3_MFAW.c	9852;"	d	file:
OP_Noop	sqlite3_MFAW.c	9941;"	d	file:
OP_Not	sqlite3_MFAW.c	9804;"	d	file:
OP_NotExists	sqlite3_MFAW.c	9855;"	d	file:
OP_NotFound	sqlite3_MFAW.c	9853;"	d	file:
OP_NotNull	sqlite3_MFAW.c	9862;"	d	file:
OP_Null	sqlite3_MFAW.c	9813;"	d	file:
OP_NullRow	sqlite3_MFAW.c	9889;"	d	file:
OP_Once	sqlite3_MFAW.c	9829;"	d	file:
OP_OpenAutoindex	sqlite3_MFAW.c	9841;"	d	file:
OP_OpenEphemeral	sqlite3_MFAW.c	9842;"	d	file:
OP_OpenPseudo	sqlite3_MFAW.c	9845;"	d	file:
OP_OpenRead	sqlite3_MFAW.c	9839;"	d	file:
OP_OpenWrite	sqlite3_MFAW.c	9840;"	d	file:
OP_Or	sqlite3_MFAW.c	9856;"	d	file:
OP_Pagecount	sqlite3_MFAW.c	9938;"	d	file:
OP_Param	sqlite3_MFAW.c	9917;"	d	file:
OP_ParseSchema	sqlite3_MFAW.c	9907;"	d	file:
OP_Permutation	sqlite3_MFAW.c	9826;"	d	file:
OP_Prev	sqlite3_MFAW.c	9793;"	d	file:
OP_PrevIfOpen	sqlite3_MFAW.c	9791;"	d	file:
OP_Program	sqlite3_MFAW.c	9916;"	d	file:
OP_ReadCookie	sqlite3_MFAW.c	9836;"	d	file:
OP_Real	sqlite3_MFAW.c	9918;"	d	file:
OP_RealAffinity	sqlite3_MFAW.c	9824;"	d	file:
OP_Remainder	sqlite3_MFAW.c	9878;"	d	file:
OP_ReopenIdx	sqlite3_MFAW.c	9838;"	d	file:
OP_ResetCount	sqlite3_MFAW.c	9883;"	d	file:
OP_ResetSorter	sqlite3_MFAW.c	9904;"	d	file:
OP_ResultRow	sqlite3_MFAW.c	9820;"	d	file:
OP_Return	sqlite3_MFAW.c	9803;"	d	file:
OP_Rewind	sqlite3_MFAW.c	9893;"	d	file:
OP_RowData	sqlite3_MFAW.c	9887;"	d	file:
OP_RowKey	sqlite3_MFAW.c	9886;"	d	file:
OP_RowSetAdd	sqlite3_MFAW.c	9913;"	d	file:
OP_RowSetRead	sqlite3_MFAW.c	9914;"	d	file:
OP_RowSetTest	sqlite3_MFAW.c	9915;"	d	file:
OP_Rowid	sqlite3_MFAW.c	9888;"	d	file:
OP_SCopy	sqlite3_MFAW.c	9819;"	d	file:
OP_Savepoint	sqlite3_MFAW.c	9787;"	d	file:
OP_Seek	sqlite3_MFAW.c	9851;"	d	file:
OP_SeekGE	sqlite3_MFAW.c	9849;"	d	file:
OP_SeekGT	sqlite3_MFAW.c	9850;"	d	file:
OP_SeekLE	sqlite3_MFAW.c	9848;"	d	file:
OP_SeekLT	sqlite3_MFAW.c	9847;"	d	file:
OP_Sequence	sqlite3_MFAW.c	9858;"	d	file:
OP_SequenceTest	sqlite3_MFAW.c	9844;"	d	file:
OP_SetCookie	sqlite3_MFAW.c	9837;"	d	file:
OP_ShiftLeft	sqlite3_MFAW.c	9872;"	d	file:
OP_ShiftRight	sqlite3_MFAW.c	9873;"	d	file:
OP_SoftNull	sqlite3_MFAW.c	9814;"	d	file:
OP_Sort	sqlite3_MFAW.c	9892;"	d	file:
OP_SorterCompare	sqlite3_MFAW.c	9884;"	d	file:
OP_SorterData	sqlite3_MFAW.c	9885;"	d	file:
OP_SorterInsert	sqlite3_MFAW.c	9894;"	d	file:
OP_SorterNext	sqlite3_MFAW.c	9790;"	d	file:
OP_SorterOpen	sqlite3_MFAW.c	9843;"	d	file:
OP_SorterSort	sqlite3_MFAW.c	9891;"	d	file:
OP_String	sqlite3_MFAW.c	9812;"	d	file:
OP_String8	sqlite3_MFAW.c	9882;"	d	file:
OP_Subtract	sqlite3_MFAW.c	9875;"	d	file:
OP_TableLock	sqlite3_MFAW.c	9930;"	d	file:
OP_Transaction	sqlite3_MFAW.c	9789;"	d	file:
OP_VBegin	sqlite3_MFAW.c	9931;"	d	file:
OP_VColumn	sqlite3_MFAW.c	9935;"	d	file:
OP_VCreate	sqlite3_MFAW.c	9932;"	d	file:
OP_VDestroy	sqlite3_MFAW.c	9933;"	d	file:
OP_VFilter	sqlite3_MFAW.c	9799;"	d	file:
OP_VNext	sqlite3_MFAW.c	9936;"	d	file:
OP_VOpen	sqlite3_MFAW.c	9934;"	d	file:
OP_VRename	sqlite3_MFAW.c	9937;"	d	file:
OP_VUpdate	sqlite3_MFAW.c	9800;"	d	file:
OP_Vacuum	sqlite3_MFAW.c	9798;"	d	file:
OP_Variable	sqlite3_MFAW.c	9816;"	d	file:
OP_Yield	sqlite3_MFAW.c	9807;"	d	file:
OSTRACE	sqlite3_MFAW.c	8519;"	d	file:
OSTRACE	sqlite3_MFAW.c	8522;"	d	file:
OSYNC	mobibench.c	/^  OSYNC,$/;"	e	enum:__anon30	file:
OSYNC	mobibench_MFAW.c	/^  OSYNC,$/;"	e	enum:__anon27	file:
OS_VXWORKS	sqlite3_MFAW.c	116;"	d	file:
OS_VXWORKS	sqlite3_MFAW.c	124;"	d	file:
O_BINARY	sqlite3_MFAW.c	25755;"	d	file:
O_LARGEFILE	sqlite3_MFAW.c	25745;"	d	file:
O_LARGEFILE	sqlite3_MFAW.c	25748;"	d	file:
O_LARGEFILE	sqlite3_MFAW.c	25749;"	d	file:
O_NOFOLLOW	sqlite3_MFAW.c	25752;"	d	file:
Op	sqlite3_MFAW.c	/^typedef struct VdbeOp Op;$/;"	t	typeref:struct:VdbeOp	file:
OpHelp	sqlite3_MFAW.c	25083;"	d	file:
OpHelp	sqlite3_MFAW.c	25085;"	d	file:
OpenCounter	sqlite3_MFAW.c	20061;"	d	file:
OpenCounter	sqlite3_MFAW.c	20063;"	d	file:
OpenCounter	sqlite3_MFAW.c	25731;"	d	file:
OpenCounter	sqlite3_MFAW.c	25733;"	d	file:
OpenCounter	sqlite3_MFAW.c	33250;"	d	file:
OpenCounter	sqlite3_MFAW.c	33252;"	d	file:
OptimizationDisabled	sqlite3_MFAW.c	11202;"	d	file:
OptimizationDisabled	sqlite3_MFAW.c	11205;"	d	file:
OptimizationEnabled	sqlite3_MFAW.c	11203;"	d	file:
OptimizationEnabled	sqlite3_MFAW.c	11206;"	d	file:
P4_ADVANCE	sqlite3_MFAW.c	9743;"	d	file:
P4_COLLSEQ	sqlite3_MFAW.c	9731;"	d	file:
P4_DYNAMIC	sqlite3_MFAW.c	9729;"	d	file:
P4_FUNCDEF	sqlite3_MFAW.c	9732;"	d	file:
P4_INT32	sqlite3_MFAW.c	9740;"	d	file:
P4_INT64	sqlite3_MFAW.c	9739;"	d	file:
P4_INTARRAY	sqlite3_MFAW.c	9741;"	d	file:
P4_KEYINFO	sqlite3_MFAW.c	9733;"	d	file:
P4_MEM	sqlite3_MFAW.c	9734;"	d	file:
P4_MPRINTF	sqlite3_MFAW.c	9737;"	d	file:
P4_NOTUSED	sqlite3_MFAW.c	9728;"	d	file:
P4_REAL	sqlite3_MFAW.c	9738;"	d	file:
P4_STATIC	sqlite3_MFAW.c	9730;"	d	file:
P4_SUBPROGRAM	sqlite3_MFAW.c	9742;"	d	file:
P4_TRANSIENT	sqlite3_MFAW.c	9735;"	d	file:
P4_VTAB	sqlite3_MFAW.c	9736;"	d	file:
P5_ConstraintCheck	sqlite3_MFAW.c	9748;"	d	file:
P5_ConstraintFK	sqlite3_MFAW.c	9749;"	d	file:
P5_ConstraintNotNull	sqlite3_MFAW.c	9746;"	d	file:
P5_ConstraintUnique	sqlite3_MFAW.c	9747;"	d	file:
PAGERID	sqlite3_MFAW.c	41789;"	d	file:
PAGERTRACE	sqlite3_MFAW.c	41778;"	d	file:
PAGER_CACHESPILL	sqlite3_MFAW.c	10211;"	d	file:
PAGER_CKPT_FULLFSYNC	sqlite3_MFAW.c	10210;"	d	file:
PAGER_ERROR	sqlite3_MFAW.c	42015;"	d	file:
PAGER_FLAGS_MASK	sqlite3_MFAW.c	10212;"	d	file:
PAGER_FULLFSYNC	sqlite3_MFAW.c	10209;"	d	file:
PAGER_GET_NOCONTENT	sqlite3_MFAW.c	10199;"	d	file:
PAGER_GET_READONLY	sqlite3_MFAW.c	10200;"	d	file:
PAGER_INCR	sqlite3_MFAW.c	42384;"	d	file:
PAGER_INCR	sqlite3_MFAW.c	42386;"	d	file:
PAGER_JOURNALMODE_DELETE	sqlite3_MFAW.c	10189;"	d	file:
PAGER_JOURNALMODE_MEMORY	sqlite3_MFAW.c	10193;"	d	file:
PAGER_JOURNALMODE_OFF	sqlite3_MFAW.c	10191;"	d	file:
PAGER_JOURNALMODE_PERSIST	sqlite3_MFAW.c	10190;"	d	file:
PAGER_JOURNALMODE_QUERY	sqlite3_MFAW.c	10188;"	d	file:
PAGER_JOURNALMODE_TRUNCATE	sqlite3_MFAW.c	10192;"	d	file:
PAGER_JOURNALMODE_WAL	sqlite3_MFAW.c	10194;"	d	file:
PAGER_LOCKINGMODE_EXCLUSIVE	sqlite3_MFAW.c	10183;"	d	file:
PAGER_LOCKINGMODE_NORMAL	sqlite3_MFAW.c	10182;"	d	file:
PAGER_LOCKINGMODE_QUERY	sqlite3_MFAW.c	10181;"	d	file:
PAGER_MAX_PGNO	sqlite3_MFAW.c	42455;"	d	file:
PAGER_MEMORY	sqlite3_MFAW.c	10176;"	d	file:
PAGER_MJ_PGNO	sqlite3_MFAW.c	10168;"	d	file:
PAGER_OMIT_JOURNAL	sqlite3_MFAW.c	10175;"	d	file:
PAGER_OPEN	sqlite3_MFAW.c	42009;"	d	file:
PAGER_READER	sqlite3_MFAW.c	42010;"	d	file:
PAGER_STAT_HIT	sqlite3_MFAW.c	42371;"	d	file:
PAGER_STAT_MISS	sqlite3_MFAW.c	42372;"	d	file:
PAGER_STAT_WRITE	sqlite3_MFAW.c	42373;"	d	file:
PAGER_SYNCHRONOUS_FULL	sqlite3_MFAW.c	10207;"	d	file:
PAGER_SYNCHRONOUS_MASK	sqlite3_MFAW.c	10208;"	d	file:
PAGER_SYNCHRONOUS_NORMAL	sqlite3_MFAW.c	10206;"	d	file:
PAGER_SYNCHRONOUS_OFF	sqlite3_MFAW.c	10205;"	d	file:
PAGER_WRITER_CACHEMOD	sqlite3_MFAW.c	42012;"	d	file:
PAGER_WRITER_DBMOD	sqlite3_MFAW.c	42013;"	d	file:
PAGER_WRITER_FINISHED	sqlite3_MFAW.c	42014;"	d	file:
PAGER_WRITER_LOCKED	sqlite3_MFAW.c	42011;"	d	file:
PARTLY_WITHIN	sqlite3_MFAW.c	8030;"	d	file:
PCACHE_DIRTYLIST_ADD	sqlite3_MFAW.c	39319;"	d	file:
PCACHE_DIRTYLIST_FRONT	sqlite3_MFAW.c	39320;"	d	file:
PCACHE_DIRTYLIST_REMOVE	sqlite3_MFAW.c	39318;"	d	file:
PCache	sqlite3_MFAW.c	/^struct PCache {$/;"	s	file:
PCache	sqlite3_MFAW.c	/^typedef struct PCache PCache;$/;"	t	typeref:struct:PCache	file:
PCache1	sqlite3_MFAW.c	/^struct PCache1 {$/;"	s	file:
PCache1	sqlite3_MFAW.c	/^typedef struct PCache1 PCache1;$/;"	t	typeref:struct:PCache1	file:
PCacheGlobal	sqlite3_MFAW.c	/^static SQLITE_WSD struct PCacheGlobal {$/;"	s	file:
PENDING_BYTE	sqlite3_MFAW.c	10718;"	d	file:
PENDING_BYTE	sqlite3_MFAW.c	10720;"	d	file:
PENDING_BYTE_PAGE	sqlite3_MFAW.c	52722;"	d	file:
PENDING_LOCK	sqlite3_MFAW.c	10659;"	d	file:
PGHDR_DIRTY	sqlite3_MFAW.c	10386;"	d	file:
PGHDR_DONT_WRITE	sqlite3_MFAW.c	10391;"	d	file:
PGHDR_MMAP	sqlite3_MFAW.c	10393;"	d	file:
PGHDR_NEED_READ	sqlite3_MFAW.c	10389;"	d	file:
PGHDR_NEED_SYNC	sqlite3_MFAW.c	10387;"	d	file:
PGHDR_REUSE_UNLIKELY	sqlite3_MFAW.c	10390;"	d	file:
PGroup	sqlite3_MFAW.c	/^struct PGroup {$/;"	s	file:
PGroup	sqlite3_MFAW.c	/^typedef struct PGroup PGroup;$/;"	t	typeref:struct:PGroup	file:
POSITION_LIST_END	sqlite3_MFAW.c	135094;"	d	file:
POS_COLUMN	sqlite3_MFAW.c	132875;"	d	file:
POS_END	sqlite3_MFAW.c	132876;"	d	file:
PROXY_CONCHVERSION	sqlite3_MFAW.c	32125;"	d	file:
PROXY_HEADERLEN	sqlite3_MFAW.c	32126;"	d	file:
PROXY_HOSTIDLEN	sqlite3_MFAW.c	32086;"	d	file:
PROXY_MAXCONCHLEN	sqlite3_MFAW.c	32128;"	d	file:
PROXY_PATHINDEX	sqlite3_MFAW.c	32127;"	d	file:
PTF_INTKEY	sqlite3_MFAW.c	52405;"	d	file:
PTF_LEAF	sqlite3_MFAW.c	52408;"	d	file:
PTF_LEAFDATA	sqlite3_MFAW.c	52407;"	d	file:
PTF_ZERODATA	sqlite3_MFAW.c	52406;"	d	file:
PTRMAP_BTREE	sqlite3_MFAW.c	52778;"	d	file:
PTRMAP_FREEPAGE	sqlite3_MFAW.c	52775;"	d	file:
PTRMAP_ISPAGE	sqlite3_MFAW.c	52741;"	d	file:
PTRMAP_OVERFLOW1	sqlite3_MFAW.c	52776;"	d	file:
PTRMAP_OVERFLOW2	sqlite3_MFAW.c	52777;"	d	file:
PTRMAP_PAGENO	sqlite3_MFAW.c	52739;"	d	file:
PTRMAP_PTROFFSET	sqlite3_MFAW.c	52740;"	d	file:
PTRMAP_ROOTPAGE	sqlite3_MFAW.c	52774;"	d	file:
Pager	sqlite3_MFAW.c	/^struct Pager {$/;"	s	file:
Pager	sqlite3_MFAW.c	/^typedef struct Pager Pager;$/;"	t	typeref:struct:Pager	file:
PagerSavepoint	sqlite3_MFAW.c	/^struct PagerSavepoint {$/;"	s	file:
PagerSavepoint	sqlite3_MFAW.c	/^typedef struct PagerSavepoint PagerSavepoint;$/;"	t	typeref:struct:PagerSavepoint	file:
Parse	sqlite3_MFAW.c	/^struct Parse {$/;"	s	file:
Parse	sqlite3_MFAW.c	/^typedef struct Parse Parse;$/;"	t	typeref:struct:Parse	file:
ParseContext	sqlite3_MFAW.c	/^struct ParseContext {$/;"	s	file:
ParseContext	sqlite3_MFAW.c	/^typedef struct ParseContext ParseContext;$/;"	t	typeref:struct:ParseContext	file:
PendingList	sqlite3_MFAW.c	/^struct PendingList {$/;"	s	file:
PendingList	sqlite3_MFAW.c	/^typedef struct PendingList PendingList;$/;"	t	typeref:struct:PendingList	file:
PgFreeslot	sqlite3_MFAW.c	/^struct PgFreeslot {$/;"	s	file:
PgFreeslot	sqlite3_MFAW.c	/^typedef struct PgFreeslot PgFreeslot;$/;"	t	typeref:struct:PgFreeslot	file:
PgHdr	sqlite3_MFAW.c	/^struct PgHdr {$/;"	s	file:
PgHdr	sqlite3_MFAW.c	/^typedef struct PgHdr PgHdr;$/;"	t	typeref:struct:PgHdr	file:
PgHdr1	sqlite3_MFAW.c	/^struct PgHdr1 {$/;"	s	file:
PgHdr1	sqlite3_MFAW.c	/^typedef struct PgHdr1 PgHdr1;$/;"	t	typeref:struct:PgHdr1	file:
Pgno	sqlite3_MFAW.c	/^typedef u32 Pgno;$/;"	t	file:
PmaReader	sqlite3_MFAW.c	/^struct PmaReader {$/;"	s	file:
PmaReader	sqlite3_MFAW.c	/^typedef struct PmaReader PmaReader;         \/* Incrementally read one PMA *\/$/;"	t	typeref:struct:PmaReader	file:
PmaWriter	sqlite3_MFAW.c	/^struct PmaWriter {$/;"	s	file:
PmaWriter	sqlite3_MFAW.c	/^typedef struct PmaWriter PmaWriter;         \/* Incrementally write one PMA *\/$/;"	t	typeref:struct:PmaWriter	file:
PragFlag_NeedSchema	sqlite3_MFAW.c	103284;"	d	file:
PragFlag_ReadOnly	sqlite3_MFAW.c	103285;"	d	file:
PragTyp_ACTIVATE_EXTENSIONS	sqlite3_MFAW.c	103278;"	d	file:
PragTyp_AUTO_VACUUM	sqlite3_MFAW.c	103243;"	d	file:
PragTyp_BUSY_TIMEOUT	sqlite3_MFAW.c	103245;"	d	file:
PragTyp_CACHE_SIZE	sqlite3_MFAW.c	103246;"	d	file:
PragTyp_CASE_SENSITIVE_LIKE	sqlite3_MFAW.c	103247;"	d	file:
PragTyp_COLLATION_LIST	sqlite3_MFAW.c	103248;"	d	file:
PragTyp_COMPILE_OPTIONS	sqlite3_MFAW.c	103249;"	d	file:
PragTyp_DATABASE_LIST	sqlite3_MFAW.c	103251;"	d	file:
PragTyp_DATA_STORE_DIRECTORY	sqlite3_MFAW.c	103250;"	d	file:
PragTyp_DEFAULT_CACHE_SIZE	sqlite3_MFAW.c	103252;"	d	file:
PragTyp_ENCODING	sqlite3_MFAW.c	103253;"	d	file:
PragTyp_FLAG	sqlite3_MFAW.c	103244;"	d	file:
PragTyp_FOREIGN_KEY_CHECK	sqlite3_MFAW.c	103254;"	d	file:
PragTyp_FOREIGN_KEY_LIST	sqlite3_MFAW.c	103255;"	d	file:
PragTyp_HEADER_VALUE	sqlite3_MFAW.c	103242;"	d	file:
PragTyp_HEXKEY	sqlite3_MFAW.c	103279;"	d	file:
PragTyp_INCREMENTAL_VACUUM	sqlite3_MFAW.c	103256;"	d	file:
PragTyp_INDEX_INFO	sqlite3_MFAW.c	103257;"	d	file:
PragTyp_INDEX_LIST	sqlite3_MFAW.c	103258;"	d	file:
PragTyp_INTEGRITY_CHECK	sqlite3_MFAW.c	103259;"	d	file:
PragTyp_JOURNAL_MODE	sqlite3_MFAW.c	103260;"	d	file:
PragTyp_JOURNAL_SIZE_LIMIT	sqlite3_MFAW.c	103261;"	d	file:
PragTyp_KEY	sqlite3_MFAW.c	103280;"	d	file:
PragTyp_LOCKING_MODE	sqlite3_MFAW.c	103263;"	d	file:
PragTyp_LOCK_PROXY_FILE	sqlite3_MFAW.c	103262;"	d	file:
PragTyp_LOCK_STATUS	sqlite3_MFAW.c	103282;"	d	file:
PragTyp_MMAP_SIZE	sqlite3_MFAW.c	103265;"	d	file:
PragTyp_PAGE_COUNT	sqlite3_MFAW.c	103264;"	d	file:
PragTyp_PAGE_SIZE	sqlite3_MFAW.c	103266;"	d	file:
PragTyp_PARSER_TRACE	sqlite3_MFAW.c	103283;"	d	file:
PragTyp_REKEY	sqlite3_MFAW.c	103281;"	d	file:
PragTyp_SECURE_DELETE	sqlite3_MFAW.c	103267;"	d	file:
PragTyp_SHRINK_MEMORY	sqlite3_MFAW.c	103268;"	d	file:
PragTyp_SOFT_HEAP_LIMIT	sqlite3_MFAW.c	103269;"	d	file:
PragTyp_STATS	sqlite3_MFAW.c	103270;"	d	file:
PragTyp_SYNCHRONOUS	sqlite3_MFAW.c	103271;"	d	file:
PragTyp_TABLE_INFO	sqlite3_MFAW.c	103272;"	d	file:
PragTyp_TEMP_STORE	sqlite3_MFAW.c	103273;"	d	file:
PragTyp_TEMP_STORE_DIRECTORY	sqlite3_MFAW.c	103274;"	d	file:
PragTyp_THREADS	sqlite3_MFAW.c	103275;"	d	file:
PragTyp_WAL_AUTOCHECKPOINT	sqlite3_MFAW.c	103276;"	d	file:
PragTyp_WAL_CHECKPOINT	sqlite3_MFAW.c	103277;"	d	file:
PrintfArguments	sqlite3_MFAW.c	/^struct PrintfArguments {$/;"	s	file:
PrintfArguments	sqlite3_MFAW.c	/^typedef struct PrintfArguments PrintfArguments;$/;"	t	typeref:struct:PrintfArguments	file:
READMARK_NOT_USED	sqlite3_MFAW.c	49339;"	d	file:
READY	mobibench.c	/^	READY,$/;"	e	enum:__anon31	file:
READY	mobibench_MFAW.c	/^	READY,$/;"	e	enum:__anon28	file:
READ_LOCK	sqlite3_MFAW.c	52473;"	d	file:
READ_UTF16BE	sqlite3_MFAW.c	23017;"	d	file:
READ_UTF16LE	sqlite3_MFAW.c	23007;"	d	file:
READ_UTF8	sqlite3_MFAW.c	150331;"	d	file:
READ_UTF8	sqlite3_MFAW.c	23054;"	d	file:
REARGUARD	sqlite3_MFAW.c	17382;"	d	file:
REGISTER_TRACE	sqlite3_MFAW.c	71302;"	d	file:
REGISTER_TRACE	sqlite3_MFAW.c	71304;"	d	file:
REPORT_Latency	mobibench.c	/^char REPORT_Latency[200]; \/\/ file name for latency output$/;"	v
REPORT_Latency	mobibench_MFAW.c	/^char REPORT_Latency[200]; \/\/ file name for latency output$/;"	v
REPORT_pIOPS	mobibench.c	/^char REPORT_pIOPS[200]; \/\/ file name for IOPS output$/;"	v
REPORT_pIOPS	mobibench_MFAW.c	/^char REPORT_pIOPS[200]; \/\/ file name for IOPS output$/;"	v
RESERVED_BYTE	sqlite3_MFAW.c	10722;"	d	file:
RESERVED_LOCK	sqlite3_MFAW.c	10658;"	d	file:
RNDAWAY	sqlite3_MFAW.c	153811;"	d	file:
RNDTOWARDS	sqlite3_MFAW.c	153810;"	d	file:
ROUND8	sqlite3_MFAW.c	9097;"	d	file:
ROUNDDOWN8	sqlite3_MFAW.c	9102;"	d	file:
ROWSET_ALLOCATION_SIZE	sqlite3_MFAW.c	41077;"	d	file:
ROWSET_ENTRY_PER_CHUNK	sqlite3_MFAW.c	41082;"	d	file:
ROWSET_NEXT	sqlite3_MFAW.c	41131;"	d	file:
ROWSET_SORTED	sqlite3_MFAW.c	41130;"	d	file:
RTREE_CACHE_SZ	sqlite3_MFAW.c	151264;"	d	file:
RTREE_COORD_INT32	sqlite3_MFAW.c	151202;"	d	file:
RTREE_COORD_REAL32	sqlite3_MFAW.c	151201;"	d	file:
RTREE_DECODE_COORD	sqlite3_MFAW.c	151969;"	d	file:
RTREE_DECODE_COORD	sqlite3_MFAW.c	151977;"	d	file:
RTREE_DECODE_COORD	sqlite3_MFAW.c	151983;"	d	file:
RTREE_DEFAULT_ROWEST	sqlite3_MFAW.c	151155;"	d	file:
RTREE_EQ	sqlite3_MFAW.c	151329;"	d	file:
RTREE_GE	sqlite3_MFAW.c	151332;"	d	file:
RTREE_GEOMETRY_MAGIC	sqlite3_MFAW.c	151389;"	d	file:
RTREE_GT	sqlite3_MFAW.c	151333;"	d	file:
RTREE_LE	sqlite3_MFAW.c	151330;"	d	file:
RTREE_LT	sqlite3_MFAW.c	151331;"	d	file:
RTREE_MATCH	sqlite3_MFAW.c	151334;"	d	file:
RTREE_MAXCELLS	sqlite3_MFAW.c	151247;"	d	file:
RTREE_MAX_DEPTH	sqlite3_MFAW.c	151256;"	d	file:
RTREE_MAX_DIMENSIONS	sqlite3_MFAW.c	151140;"	d	file:
RTREE_MINCELLS	sqlite3_MFAW.c	151245;"	d	file:
RTREE_MIN_ROWEST	sqlite3_MFAW.c	151156;"	d	file:
RTREE_OF_CURSOR	sqlite3_MFAW.c	151286;"	d	file:
RTREE_QUERY	sqlite3_MFAW.c	151335;"	d	file:
RTREE_QUEUE_TRACE	sqlite3_MFAW.c	152309;"	d	file:
RTREE_REINSERT	sqlite3_MFAW.c	151246;"	d	file:
RTREE_ZERO	sqlite3_MFAW.c	151212;"	d	file:
RTREE_ZERO	sqlite3_MFAW.c	151216;"	d	file:
RecordCompare	sqlite3_MFAW.c	/^typedef int (*RecordCompare)(int,const void*,UnpackedRecord*);$/;"	t	file:
Reinsert	sqlite3_MFAW.c	/^static int Reinsert($/;"	f	file:
RowSet	sqlite3_MFAW.c	/^struct RowSet {$/;"	s	file:
RowSet	sqlite3_MFAW.c	/^typedef struct RowSet RowSet;$/;"	t	typeref:struct:RowSet	file:
RowSetChunk	sqlite3_MFAW.c	/^struct RowSetChunk {$/;"	s	file:
RowSetEntry	sqlite3_MFAW.c	/^struct RowSetEntry {            $/;"	s	file:
Rtree	sqlite3_MFAW.c	/^struct Rtree {$/;"	s	file:
Rtree	sqlite3_MFAW.c	/^typedef struct Rtree Rtree;$/;"	t	typeref:struct:Rtree	file:
RtreeCell	sqlite3_MFAW.c	/^struct RtreeCell {$/;"	s	file:
RtreeCell	sqlite3_MFAW.c	/^typedef struct RtreeCell RtreeCell;$/;"	t	typeref:struct:RtreeCell	file:
RtreeConstraint	sqlite3_MFAW.c	/^struct RtreeConstraint {$/;"	s	file:
RtreeConstraint	sqlite3_MFAW.c	/^typedef struct RtreeConstraint RtreeConstraint;$/;"	t	typeref:struct:RtreeConstraint	file:
RtreeCoord	sqlite3_MFAW.c	/^typedef union RtreeCoord RtreeCoord;$/;"	t	typeref:union:RtreeCoord	file:
RtreeCoord	sqlite3_MFAW.c	/^union RtreeCoord {$/;"	u	file:
RtreeCursor	sqlite3_MFAW.c	/^struct RtreeCursor {$/;"	s	file:
RtreeCursor	sqlite3_MFAW.c	/^typedef struct RtreeCursor RtreeCursor;$/;"	t	typeref:struct:RtreeCursor	file:
RtreeDValue	sqlite3_MFAW.c	/^  typedef double RtreeDValue;              \/* High accuracy coordinate *\/$/;"	t	file:
RtreeDValue	sqlite3_MFAW.c	/^  typedef sqlite3_int64 RtreeDValue;       \/* High accuracy coordinate *\/$/;"	t	file:
RtreeGeomCallback	sqlite3_MFAW.c	/^struct RtreeGeomCallback {$/;"	s	file:
RtreeGeomCallback	sqlite3_MFAW.c	/^typedef struct RtreeGeomCallback RtreeGeomCallback;$/;"	t	typeref:struct:RtreeGeomCallback	file:
RtreeMatchArg	sqlite3_MFAW.c	/^struct RtreeMatchArg {$/;"	s	file:
RtreeMatchArg	sqlite3_MFAW.c	/^typedef struct RtreeMatchArg RtreeMatchArg;$/;"	t	typeref:struct:RtreeMatchArg	file:
RtreeNode	sqlite3_MFAW.c	/^struct RtreeNode {$/;"	s	file:
RtreeNode	sqlite3_MFAW.c	/^typedef struct RtreeNode RtreeNode;$/;"	t	typeref:struct:RtreeNode	file:
RtreeSearchPoint	sqlite3_MFAW.c	/^struct RtreeSearchPoint {$/;"	s	file:
RtreeSearchPoint	sqlite3_MFAW.c	/^typedef struct RtreeSearchPoint RtreeSearchPoint;$/;"	t	typeref:struct:RtreeSearchPoint	file:
RtreeValue	sqlite3_MFAW.c	/^  typedef float RtreeValue;                \/* Low accuracy coordinate *\/$/;"	t	file:
RtreeValue	sqlite3_MFAW.c	/^  typedef int RtreeValue;                  \/* Low accuracy coordinate *\/$/;"	t	file:
SAVEPOINT_BEGIN	sqlite3_MFAW.c	11351;"	d	file:
SAVEPOINT_RELEASE	sqlite3_MFAW.c	11352;"	d	file:
SAVEPOINT_ROLLBACK	sqlite3_MFAW.c	11353;"	d	file:
SAVE_SZ	sqlite3_MFAW.c	91146;"	d	file:
SCHEMA_ENC	sqlite3_MFAW.c	11140;"	d	file:
SCHEMA_TABLE	sqlite3_MFAW.c	9219;"	d	file:
SCRIPT_PRINT	mobibench.c	45;"	d	file:
SCRIPT_PRINT	mobibench.c	47;"	d	file:
SCRIPT_PRINT	mobibench_MFAW.c	45;"	d	file:
SCRIPT_PRINT	mobibench_MFAW.c	47;"	d	file:
SELECTTRACE	sqlite3_MFAW.c	106566;"	d	file:
SELECTTRACE	sqlite3_MFAW.c	106571;"	d	file:
SELECTTRACE_ENABLED	sqlite3_MFAW.c	9182;"	d	file:
SELECTTRACE_ENABLED	sqlite3_MFAW.c	9184;"	d	file:
SETBIT	sqlite3_MFAW.c	39171;"	d	file:
SET_FULLSYNC	sqlite3_MFAW.c	10604;"	d	file:
SF_Aggregate	sqlite3_MFAW.c	12310;"	d	file:
SF_Compound	sqlite3_MFAW.c	12314;"	d	file:
SF_Converted	sqlite3_MFAW.c	12321;"	d	file:
SF_Distinct	sqlite3_MFAW.c	12308;"	d	file:
SF_Expanded	sqlite3_MFAW.c	12312;"	d	file:
SF_HasTypeInfo	sqlite3_MFAW.c	12313;"	d	file:
SF_MaybeConvert	sqlite3_MFAW.c	12318;"	d	file:
SF_MinMaxAgg	sqlite3_MFAW.c	12320;"	d	file:
SF_MultiValue	sqlite3_MFAW.c	12316;"	d	file:
SF_NestedFrom	sqlite3_MFAW.c	12317;"	d	file:
SF_Recursive	sqlite3_MFAW.c	12319;"	d	file:
SF_Resolved	sqlite3_MFAW.c	12309;"	d	file:
SF_UsesEphemeral	sqlite3_MFAW.c	12311;"	d	file:
SF_Values	sqlite3_MFAW.c	12315;"	d	file:
SHARED_FIRST	sqlite3_MFAW.c	10723;"	d	file:
SHARED_LOCK	sqlite3_MFAW.c	10657;"	d	file:
SHARED_SIZE	sqlite3_MFAW.c	10724;"	d	file:
SIZE_100MB	mobibench.c	66;"	d	file:
SIZE_100MB	mobibench_MFAW.c	66;"	d	file:
SIZE_1KB	mobibench.c	69;"	d	file:
SIZE_1KB	mobibench_MFAW.c	69;"	d	file:
SIZE_1MB	mobibench.c	67;"	d	file:
SIZE_1MB	mobibench_MFAW.c	67;"	d	file:
SIZE_4KB	mobibench.c	68;"	d	file:
SIZE_4KB	mobibench_MFAW.c	68;"	d	file:
SLOT_2_0	sqlite3_MFAW.c	24199;"	d	file:
SLOT_4_2_0	sqlite3_MFAW.c	24200;"	d	file:
SMALLEST_INT64	sqlite3_MFAW.c	136178;"	d	file:
SMALLEST_INT64	sqlite3_MFAW.c	9091;"	d	file:
SORTER_MAX_MERGE_COUNT	sqlite3_MFAW.c	78435;"	d	file:
SORTER_TYPE_INTEGER	sqlite3_MFAW.c	78313;"	d	file:
SORTER_TYPE_TEXT	sqlite3_MFAW.c	78314;"	d	file:
SORTFLAG_UseSorter	sqlite3_MFAW.c	106602;"	d	file:
SPILLFLAG_NOSYNC	sqlite3_MFAW.c	42119;"	d	file:
SPILLFLAG_OFF	sqlite3_MFAW.c	42117;"	d	file:
SPILLFLAG_ROLLBACK	sqlite3_MFAW.c	42118;"	d	file:
SQLITE3_MUTEX_INITIALIZER	sqlite3_MFAW.c	19536;"	d	file:
SQLITE3_MUTEX_INITIALIZER	sqlite3_MFAW.c	19538;"	d	file:
SQLITE3_MUTEX_INITIALIZER	sqlite3_MFAW.c	20196;"	d	file:
SQLITE3_MUTEX_INITIALIZER	sqlite3_MFAW.c	20199;"	d	file:
SQLITE3_TEXT	sqlite3_MFAW.c	4097;"	d	file:
SQLITE_ABORT	sqlite3_MFAW.c	617;"	d	file:
SQLITE_ABORT_ROLLBACK	sqlite3_MFAW.c	700;"	d	file:
SQLITE_ACCESS_EXISTS	sqlite3_MFAW.c	1436;"	d	file:
SQLITE_ACCESS_READ	sqlite3_MFAW.c	1438;"	d	file:
SQLITE_ACCESS_READWRITE	sqlite3_MFAW.c	1437;"	d	file:
SQLITE_AFF_INTEGER	sqlite3_MFAW.c	11429;"	d	file:
SQLITE_AFF_MASK	sqlite3_MFAW.c	11438;"	d	file:
SQLITE_AFF_NONE	sqlite3_MFAW.c	11426;"	d	file:
SQLITE_AFF_NUMERIC	sqlite3_MFAW.c	11428;"	d	file:
SQLITE_AFF_REAL	sqlite3_MFAW.c	11430;"	d	file:
SQLITE_AFF_TEXT	sqlite3_MFAW.c	11427;"	d	file:
SQLITE_ALLOW_COVERING_INDEX_SCAN	sqlite3_MFAW.c	13945;"	d	file:
SQLITE_ALTER_TABLE	sqlite3_MFAW.c	2869;"	d	file:
SQLITE_AMALGAMATION	sqlite3_MFAW.c	21;"	d	file:
SQLITE_ANALYZE	sqlite3_MFAW.c	2871;"	d	file:
SQLITE_ANY	sqlite3_MFAW.c	4468;"	d	file:
SQLITE_API	sqlite3_MFAW.c	260;"	d	file:
SQLITE_ASCII	sqlite3_MFAW.c	8933;"	d	file:
SQLITE_ATTACH	sqlite3_MFAW.c	2867;"	d	file:
SQLITE_AUTH	sqlite3_MFAW.c	636;"	d	file:
SQLITE_AUTH_USER	sqlite3_MFAW.c	714;"	d	file:
SQLITE_AllOpts	sqlite3_MFAW.c	11196;"	d	file:
SQLITE_AutoIndex	sqlite3_MFAW.c	11169;"	d	file:
SQLITE_BIGENDIAN	sqlite3_MFAW.c	9067;"	d	file:
SQLITE_BIGENDIAN	sqlite3_MFAW.c	9074;"	d	file:
SQLITE_BIGENDIAN	sqlite3_MFAW.c	9080;"	d	file:
SQLITE_BIG_DBL	sqlite3_MFAW.c	8836;"	d	file:
SQLITE_BIG_DBL	sqlite3_MFAW.c	8844;"	d	file:
SQLITE_BLOB	sqlite3_MFAW.c	4090;"	d	file:
SQLITE_BUSY	sqlite3_MFAW.c	618;"	d	file:
SQLITE_BUSY_RECOVERY	sqlite3_MFAW.c	689;"	d	file:
SQLITE_BUSY_SNAPSHOT	sqlite3_MFAW.c	690;"	d	file:
SQLITE_BYTEORDER	sqlite3_MFAW.c	9066;"	d	file:
SQLITE_BYTEORDER	sqlite3_MFAW.c	9073;"	d	file:
SQLITE_BYTEORDER	sqlite3_MFAW.c	9079;"	d	file:
SQLITE_CANTOPEN	sqlite3_MFAW.c	627;"	d	file:
SQLITE_CANTOPEN_BKPT	sqlite3_MFAW.c	12936;"	d	file:
SQLITE_CANTOPEN_CONVPATH	sqlite3_MFAW.c	694;"	d	file:
SQLITE_CANTOPEN_FULLPATH	sqlite3_MFAW.c	693;"	d	file:
SQLITE_CANTOPEN_ISDIR	sqlite3_MFAW.c	692;"	d	file:
SQLITE_CANTOPEN_NOTEMPDIR	sqlite3_MFAW.c	691;"	d	file:
SQLITE_CDECL	sqlite3_MFAW.c	263;"	d	file:
SQLITE_CHECKPOINT_FULL	sqlite3_MFAW.c	7717;"	d	file:
SQLITE_CHECKPOINT_PASSIVE	sqlite3_MFAW.c	7716;"	d	file:
SQLITE_CHECKPOINT_RESTART	sqlite3_MFAW.c	7718;"	d	file:
SQLITE_CHECKPOINT_TRUNCATE	sqlite3_MFAW.c	7719;"	d	file:
SQLITE_CONFIG_COVERING_INDEX_SCAN	sqlite3_MFAW.c	2017;"	d	file:
SQLITE_CONFIG_GETMALLOC	sqlite3_MFAW.c	2002;"	d	file:
SQLITE_CONFIG_GETMUTEX	sqlite3_MFAW.c	2008;"	d	file:
SQLITE_CONFIG_GETPCACHE	sqlite3_MFAW.c	2012;"	d	file:
SQLITE_CONFIG_GETPCACHE2	sqlite3_MFAW.c	2016;"	d	file:
SQLITE_CONFIG_HEAP	sqlite3_MFAW.c	2005;"	d	file:
SQLITE_CONFIG_LOG	sqlite3_MFAW.c	2013;"	d	file:
SQLITE_CONFIG_LOOKASIDE	sqlite3_MFAW.c	2010;"	d	file:
SQLITE_CONFIG_MALLOC	sqlite3_MFAW.c	2001;"	d	file:
SQLITE_CONFIG_MEMSTATUS	sqlite3_MFAW.c	2006;"	d	file:
SQLITE_CONFIG_MMAP_SIZE	sqlite3_MFAW.c	2019;"	d	file:
SQLITE_CONFIG_MULTITHREAD	sqlite3_MFAW.c	1999;"	d	file:
SQLITE_CONFIG_MUTEX	sqlite3_MFAW.c	2007;"	d	file:
SQLITE_CONFIG_PAGECACHE	sqlite3_MFAW.c	2004;"	d	file:
SQLITE_CONFIG_PCACHE	sqlite3_MFAW.c	2011;"	d	file:
SQLITE_CONFIG_PCACHE2	sqlite3_MFAW.c	2015;"	d	file:
SQLITE_CONFIG_PCACHE_HDRSZ	sqlite3_MFAW.c	2021;"	d	file:
SQLITE_CONFIG_PMASZ	sqlite3_MFAW.c	2022;"	d	file:
SQLITE_CONFIG_SCRATCH	sqlite3_MFAW.c	2003;"	d	file:
SQLITE_CONFIG_SERIALIZED	sqlite3_MFAW.c	2000;"	d	file:
SQLITE_CONFIG_SINGLETHREAD	sqlite3_MFAW.c	1998;"	d	file:
SQLITE_CONFIG_SQLLOG	sqlite3_MFAW.c	2018;"	d	file:
SQLITE_CONFIG_URI	sqlite3_MFAW.c	2014;"	d	file:
SQLITE_CONFIG_WIN32_HEAPSIZE	sqlite3_MFAW.c	2020;"	d	file:
SQLITE_CONSTRAINT	sqlite3_MFAW.c	632;"	d	file:
SQLITE_CONSTRAINT_CHECK	sqlite3_MFAW.c	701;"	d	file:
SQLITE_CONSTRAINT_COMMITHOOK	sqlite3_MFAW.c	702;"	d	file:
SQLITE_CONSTRAINT_FOREIGNKEY	sqlite3_MFAW.c	703;"	d	file:
SQLITE_CONSTRAINT_FUNCTION	sqlite3_MFAW.c	704;"	d	file:
SQLITE_CONSTRAINT_NOTNULL	sqlite3_MFAW.c	705;"	d	file:
SQLITE_CONSTRAINT_PRIMARYKEY	sqlite3_MFAW.c	706;"	d	file:
SQLITE_CONSTRAINT_ROWID	sqlite3_MFAW.c	710;"	d	file:
SQLITE_CONSTRAINT_TRIGGER	sqlite3_MFAW.c	707;"	d	file:
SQLITE_CONSTRAINT_UNIQUE	sqlite3_MFAW.c	708;"	d	file:
SQLITE_CONSTRAINT_VTAB	sqlite3_MFAW.c	709;"	d	file:
SQLITE_COPY	sqlite3_MFAW.c	2876;"	d	file:
SQLITE_CORE	sqlite3_MFAW.c	101930;"	d	file:
SQLITE_CORE	sqlite3_MFAW.c	133367;"	d	file:
SQLITE_CORE	sqlite3_MFAW.c	20;"	d	file:
SQLITE_CORRUPT	sqlite3_MFAW.c	624;"	d	file:
SQLITE_CORRUPT_BKPT	sqlite3_MFAW.c	12934;"	d	file:
SQLITE_CORRUPT_VTAB	sqlite3_MFAW.c	695;"	d	file:
SQLITE_CREATE_INDEX	sqlite3_MFAW.c	2844;"	d	file:
SQLITE_CREATE_TABLE	sqlite3_MFAW.c	2845;"	d	file:
SQLITE_CREATE_TEMP_INDEX	sqlite3_MFAW.c	2846;"	d	file:
SQLITE_CREATE_TEMP_TABLE	sqlite3_MFAW.c	2847;"	d	file:
SQLITE_CREATE_TEMP_TRIGGER	sqlite3_MFAW.c	2848;"	d	file:
SQLITE_CREATE_TEMP_VIEW	sqlite3_MFAW.c	2849;"	d	file:
SQLITE_CREATE_TRIGGER	sqlite3_MFAW.c	2850;"	d	file:
SQLITE_CREATE_VIEW	sqlite3_MFAW.c	2851;"	d	file:
SQLITE_CREATE_VTABLE	sqlite3_MFAW.c	2872;"	d	file:
SQLITE_CacheSpill	sqlite3_MFAW.c	11150;"	d	file:
SQLITE_CkptFullFSync	sqlite3_MFAW.c	11149;"	d	file:
SQLITE_ColumnCache	sqlite3_MFAW.c	11185;"	d	file:
SQLITE_CountRows	sqlite3_MFAW.c	11153;"	d	file:
SQLITE_CoverIdxScan	sqlite3_MFAW.c	11190;"	d	file:
SQLITE_DBCONFIG_ENABLE_FKEY	sqlite3_MFAW.c	2083;"	d	file:
SQLITE_DBCONFIG_ENABLE_TRIGGER	sqlite3_MFAW.c	2084;"	d	file:
SQLITE_DBCONFIG_LOOKASIDE	sqlite3_MFAW.c	2082;"	d	file:
SQLITE_DBSTATUS_CACHE_HIT	sqlite3_MFAW.c	6832;"	d	file:
SQLITE_DBSTATUS_CACHE_MISS	sqlite3_MFAW.c	6833;"	d	file:
SQLITE_DBSTATUS_CACHE_USED	sqlite3_MFAW.c	6826;"	d	file:
SQLITE_DBSTATUS_CACHE_WRITE	sqlite3_MFAW.c	6834;"	d	file:
SQLITE_DBSTATUS_DEFERRED_FKS	sqlite3_MFAW.c	6835;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_HIT	sqlite3_MFAW.c	6829;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL	sqlite3_MFAW.c	6831;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE	sqlite3_MFAW.c	6830;"	d	file:
SQLITE_DBSTATUS_LOOKASIDE_USED	sqlite3_MFAW.c	6825;"	d	file:
SQLITE_DBSTATUS_MAX	sqlite3_MFAW.c	6836;"	d	file:
SQLITE_DBSTATUS_SCHEMA_USED	sqlite3_MFAW.c	6827;"	d	file:
SQLITE_DBSTATUS_STMT_USED	sqlite3_MFAW.c	6828;"	d	file:
SQLITE_DEBUG_OS_TRACE	sqlite3_MFAW.c	128133;"	d	file:
SQLITE_DEFAULT_AUTOVACUUM	sqlite3_MFAW.c	9372;"	d	file:
SQLITE_DEFAULT_CACHE_SIZE	sqlite3_MFAW.c	8163;"	d	file:
SQLITE_DEFAULT_FILE_FORMAT	sqlite3_MFAW.c	8866;"	d	file:
SQLITE_DEFAULT_FILE_PERMISSIONS	sqlite3_MFAW.c	25411;"	d	file:
SQLITE_DEFAULT_JOURNAL_SIZE_LIMIT	sqlite3_MFAW.c	10141;"	d	file:
SQLITE_DEFAULT_MEMSTATUS	sqlite3_MFAW.c	8362;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE	sqlite3_MFAW.c	9155;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE	sqlite3_MFAW.c	9159;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE	sqlite3_MFAW.c	9160;"	d	file:
SQLITE_DEFAULT_MMAP_SIZE_xc	sqlite3_MFAW.c	9156;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	sqlite3_MFAW.c	8212;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	sqlite3_MFAW.c	8215;"	d	file:
SQLITE_DEFAULT_PAGE_SIZE	sqlite3_MFAW.c	8216;"	d	file:
SQLITE_DEFAULT_PROXYDIR_PERMISSIONS	sqlite3_MFAW.c	25418;"	d	file:
SQLITE_DEFAULT_RECURSIVE_TRIGGERS	sqlite3_MFAW.c	8874;"	d	file:
SQLITE_DEFAULT_SECTOR_SIZE	sqlite3_MFAW.c	10611;"	d	file:
SQLITE_DEFAULT_WAL_AUTOCHECKPOINT	sqlite3_MFAW.c	8171;"	d	file:
SQLITE_DEFAULT_WORKER_THREADS	sqlite3_MFAW.c	8899;"	d	file:
SQLITE_DELETE	sqlite3_MFAW.c	2852;"	d	file:
SQLITE_DENY	sqlite3_MFAW.c	2821;"	d	file:
SQLITE_DEPRECATED	sqlite3_MFAW.c	282;"	d	file:
SQLITE_DETACH	sqlite3_MFAW.c	2868;"	d	file:
SQLITE_DETERMINISTIC	sqlite3_MFAW.c	4479;"	d	file:
SQLITE_DONE	sqlite3_MFAW.c	643;"	d	file:
SQLITE_DROP_INDEX	sqlite3_MFAW.c	2853;"	d	file:
SQLITE_DROP_TABLE	sqlite3_MFAW.c	2854;"	d	file:
SQLITE_DROP_TEMP_INDEX	sqlite3_MFAW.c	2855;"	d	file:
SQLITE_DROP_TEMP_TABLE	sqlite3_MFAW.c	2856;"	d	file:
SQLITE_DROP_TEMP_TRIGGER	sqlite3_MFAW.c	2857;"	d	file:
SQLITE_DROP_TEMP_VIEW	sqlite3_MFAW.c	2858;"	d	file:
SQLITE_DROP_TRIGGER	sqlite3_MFAW.c	2859;"	d	file:
SQLITE_DROP_VIEW	sqlite3_MFAW.c	2860;"	d	file:
SQLITE_DROP_VTABLE	sqlite3_MFAW.c	2873;"	d	file:
SQLITE_DYNAMIC	sqlite3_MFAW.c	9240;"	d	file:
SQLITE_DeferFKs	sqlite3_MFAW.c	11173;"	d	file:
SQLITE_DistinctOpt	sqlite3_MFAW.c	11189;"	d	file:
SQLITE_EBCDIC	sqlite3_MFAW.c	8931;"	d	file:
SQLITE_ECEL_DUP	sqlite3_MFAW.c	13240;"	d	file:
SQLITE_ECEL_FACTOR	sqlite3_MFAW.c	13241;"	d	file:
SQLITE_EMPTY	sqlite3_MFAW.c	629;"	d	file:
SQLITE_ENABLE_EXPLAIN_COMMENTS	sqlite3_MFAW.c	8438;"	d	file:
SQLITE_ENABLE_FTS3	sqlite3_MFAW.c	12945;"	d	file:
SQLITE_ENABLE_FTS3	sqlite3_MFAW.c	132503;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	sqlite3_MFAW.c	103222;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	sqlite3_MFAW.c	103224;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	sqlite3_MFAW.c	120;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	sqlite3_MFAW.c	25319;"	d	file:
SQLITE_ENABLE_LOCKING_STYLE	sqlite3_MFAW.c	25321;"	d	file:
SQLITE_ENABLE_STAT3	sqlite3_MFAW.c	9169;"	d	file:
SQLITE_ENABLE_STAT3_OR_STAT4	sqlite3_MFAW.c	9170;"	d	file:
SQLITE_ENABLE_STAT3_OR_STAT4	sqlite3_MFAW.c	9172;"	d	file:
SQLITE_ENABLE_STAT3_OR_STAT4	sqlite3_MFAW.c	9174;"	d	file:
SQLITE_ERROR	sqlite3_MFAW.c	614;"	d	file:
SQLITE_EXPERIMENTAL	sqlite3_MFAW.c	283;"	d	file:
SQLITE_EXTENSION_INIT1	sqlite3_MFAW.c	102437;"	d	file:
SQLITE_EXTENSION_INIT1	sqlite3_MFAW.c	102444;"	d	file:
SQLITE_EXTENSION_INIT2	sqlite3_MFAW.c	102438;"	d	file:
SQLITE_EXTENSION_INIT2	sqlite3_MFAW.c	102445;"	d	file:
SQLITE_EXTENSION_INIT3	sqlite3_MFAW.c	102439;"	d	file:
SQLITE_EXTENSION_INIT3	sqlite3_MFAW.c	102446;"	d	file:
SQLITE_EXTERN	sqlite3_MFAW.c	257;"	d	file:
SQLITE_EnableTrigger	sqlite3_MFAW.c	11172;"	d	file:
SQLITE_F2FS_ATOMIC	sqlite3_MFAW.c	25348;"	d	file:
SQLITE_FAIL	sqlite3_MFAW.c	7804;"	d	file:
SQLITE_FAULTINJECTOR_COUNT	sqlite3_MFAW.c	13656;"	d	file:
SQLITE_FAULTINJECTOR_MALLOC	sqlite3_MFAW.c	13655;"	d	file:
SQLITE_FCNTL_BUSYHANDLER	sqlite3_MFAW.c	1190;"	d	file:
SQLITE_FCNTL_CHUNK_SIZE	sqlite3_MFAW.c	1181;"	d	file:
SQLITE_FCNTL_COMMIT_PHASETWO	sqlite3_MFAW.c	1196;"	d	file:
SQLITE_FCNTL_DB_UNCHANGED	sqlite3_MFAW.c	10745;"	d	file:
SQLITE_FCNTL_FILE_POINTER	sqlite3_MFAW.c	1182;"	d	file:
SQLITE_FCNTL_GET_LOCKPROXYFILE	sqlite3_MFAW.c	1177;"	d	file:
SQLITE_FCNTL_HAS_MOVED	sqlite3_MFAW.c	1194;"	d	file:
SQLITE_FCNTL_LAST_ERRNO	sqlite3_MFAW.c	1179;"	d	file:
SQLITE_FCNTL_LOCKSTATE	sqlite3_MFAW.c	1176;"	d	file:
SQLITE_FCNTL_MMAP_SIZE	sqlite3_MFAW.c	1192;"	d	file:
SQLITE_FCNTL_OVERWRITE	sqlite3_MFAW.c	1186;"	d	file:
SQLITE_FCNTL_PERSIST_WAL	sqlite3_MFAW.c	1185;"	d	file:
SQLITE_FCNTL_POWERSAFE_OVERWRITE	sqlite3_MFAW.c	1188;"	d	file:
SQLITE_FCNTL_PRAGMA	sqlite3_MFAW.c	1189;"	d	file:
SQLITE_FCNTL_SET_LOCKPROXYFILE	sqlite3_MFAW.c	1178;"	d	file:
SQLITE_FCNTL_SIZE_HINT	sqlite3_MFAW.c	1180;"	d	file:
SQLITE_FCNTL_SYNC	sqlite3_MFAW.c	1195;"	d	file:
SQLITE_FCNTL_SYNC_OMITTED	sqlite3_MFAW.c	1183;"	d	file:
SQLITE_FCNTL_TEMPFILENAME	sqlite3_MFAW.c	1191;"	d	file:
SQLITE_FCNTL_TRACE	sqlite3_MFAW.c	1193;"	d	file:
SQLITE_FCNTL_VFSNAME	sqlite3_MFAW.c	1187;"	d	file:
SQLITE_FCNTL_WAL_BLOCK	sqlite3_MFAW.c	1198;"	d	file:
SQLITE_FCNTL_WIN32_AV_RETRY	sqlite3_MFAW.c	1184;"	d	file:
SQLITE_FCNTL_WIN32_SET_HANDLE	sqlite3_MFAW.c	1197;"	d	file:
SQLITE_FILE_HEADER	sqlite3_MFAW.c	52398;"	d	file:
SQLITE_FLOAT	sqlite3_MFAW.c	4089;"	d	file:
SQLITE_FORMAT	sqlite3_MFAW.c	637;"	d	file:
SQLITE_FREE	sqlite3_MFAW.c	17079;"	d	file:
SQLITE_FREE	sqlite3_MFAW.c	17091;"	d	file:
SQLITE_FSFLAGS_IS_MSDOS	sqlite3_MFAW.c	25396;"	d	file:
SQLITE_FTS3_DEFAULT_NEAR_PARAM	sqlite3_MFAW.c	139596;"	d	file:
SQLITE_FTS3_MAX_EXPR_DEPTH	sqlite3_MFAW.c	132804;"	d	file:
SQLITE_FULL	sqlite3_MFAW.c	626;"	d	file:
SQLITE_FUNCTION	sqlite3_MFAW.c	2874;"	d	file:
SQLITE_FUNC_CASE	sqlite3_MFAW.c	11273;"	d	file:
SQLITE_FUNC_COALESCE	sqlite3_MFAW.c	11279;"	d	file:
SQLITE_FUNC_CONSTANT	sqlite3_MFAW.c	11281;"	d	file:
SQLITE_FUNC_COUNT	sqlite3_MFAW.c	11278;"	d	file:
SQLITE_FUNC_ENCMASK	sqlite3_MFAW.c	11271;"	d	file:
SQLITE_FUNC_EPHEM	sqlite3_MFAW.c	11274;"	d	file:
SQLITE_FUNC_LENGTH	sqlite3_MFAW.c	11276;"	d	file:
SQLITE_FUNC_LIKE	sqlite3_MFAW.c	11272;"	d	file:
SQLITE_FUNC_MINMAX	sqlite3_MFAW.c	11282;"	d	file:
SQLITE_FUNC_NEEDCOLL	sqlite3_MFAW.c	11275;"	d	file:
SQLITE_FUNC_TYPEOF	sqlite3_MFAW.c	11277;"	d	file:
SQLITE_FUNC_UNLIKELY	sqlite3_MFAW.c	11280;"	d	file:
SQLITE_FactorOutConst	sqlite3_MFAW.c	11187;"	d	file:
SQLITE_ForeignKeys	sqlite3_MFAW.c	11168;"	d	file:
SQLITE_FullColNames	sqlite3_MFAW.c	11151;"	d	file:
SQLITE_FullFSync	sqlite3_MFAW.c	11148;"	d	file:
SQLITE_GET_LOCKPROXYFILE	sqlite3_MFAW.c	1201;"	d	file:
SQLITE_GroupByOrder	sqlite3_MFAW.c	11186;"	d	file:
SQLITE_HAVE_ISNAN	sqlite3_MFAW.c	8841;"	d	file:
SQLITE_HAVE_OS_TRACE	sqlite3_MFAW.c	8520;"	d	file:
SQLITE_HAVE_OS_TRACE	sqlite3_MFAW.c	8523;"	d	file:
SQLITE_HOMEGROWN_RECURSIVE_MUTEX	sqlite3_MFAW.c	118;"	d	file:
SQLITE_IDXTYPE_APPDEF	sqlite3_MFAW.c	11771;"	d	file:
SQLITE_IDXTYPE_PRIMARYKEY	sqlite3_MFAW.c	11773;"	d	file:
SQLITE_IDXTYPE_UNIQUE	sqlite3_MFAW.c	11772;"	d	file:
SQLITE_IGNORE	sqlite3_MFAW.c	2822;"	d	file:
SQLITE_INDEX_CONSTRAINT_EQ	sqlite3_MFAW.c	5830;"	d	file:
SQLITE_INDEX_CONSTRAINT_GE	sqlite3_MFAW.c	5834;"	d	file:
SQLITE_INDEX_CONSTRAINT_GT	sqlite3_MFAW.c	5831;"	d	file:
SQLITE_INDEX_CONSTRAINT_LE	sqlite3_MFAW.c	5832;"	d	file:
SQLITE_INDEX_CONSTRAINT_LT	sqlite3_MFAW.c	5833;"	d	file:
SQLITE_INDEX_CONSTRAINT_MATCH	sqlite3_MFAW.c	5835;"	d	file:
SQLITE_INSERT	sqlite3_MFAW.c	2861;"	d	file:
SQLITE_INTEGER	sqlite3_MFAW.c	4088;"	d	file:
SQLITE_INTEGRITY_CHECK_ERROR_MAX	sqlite3_MFAW.c	105055;"	d	file:
SQLITE_INTERNAL	sqlite3_MFAW.c	615;"	d	file:
SQLITE_INTERRUPT	sqlite3_MFAW.c	622;"	d	file:
SQLITE_INT_TO_PTR	sqlite3_MFAW.c	8304;"	d	file:
SQLITE_INT_TO_PTR	sqlite3_MFAW.c	8307;"	d	file:
SQLITE_INT_TO_PTR	sqlite3_MFAW.c	8310;"	d	file:
SQLITE_INT_TO_PTR	sqlite3_MFAW.c	8313;"	d	file:
SQLITE_IOCAP_ATOMIC	sqlite3_MFAW.c	774;"	d	file:
SQLITE_IOCAP_ATOMIC16K	sqlite3_MFAW.c	780;"	d	file:
SQLITE_IOCAP_ATOMIC1K	sqlite3_MFAW.c	776;"	d	file:
SQLITE_IOCAP_ATOMIC2K	sqlite3_MFAW.c	777;"	d	file:
SQLITE_IOCAP_ATOMIC32K	sqlite3_MFAW.c	781;"	d	file:
SQLITE_IOCAP_ATOMIC4K	sqlite3_MFAW.c	778;"	d	file:
SQLITE_IOCAP_ATOMIC512	sqlite3_MFAW.c	775;"	d	file:
SQLITE_IOCAP_ATOMIC64K	sqlite3_MFAW.c	782;"	d	file:
SQLITE_IOCAP_ATOMIC8K	sqlite3_MFAW.c	779;"	d	file:
SQLITE_IOCAP_IMMUTABLE	sqlite3_MFAW.c	787;"	d	file:
SQLITE_IOCAP_POWERSAFE_OVERWRITE	sqlite3_MFAW.c	786;"	d	file:
SQLITE_IOCAP_SAFE_APPEND	sqlite3_MFAW.c	783;"	d	file:
SQLITE_IOCAP_SEQUENTIAL	sqlite3_MFAW.c	784;"	d	file:
SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN	sqlite3_MFAW.c	785;"	d	file:
SQLITE_IOERR	sqlite3_MFAW.c	623;"	d	file:
SQLITE_IOERR_ACCESS	sqlite3_MFAW.c	674;"	d	file:
SQLITE_IOERR_BLOCKED	sqlite3_MFAW.c	672;"	d	file:
SQLITE_IOERR_CHECKRESERVEDLOCK	sqlite3_MFAW.c	675;"	d	file:
SQLITE_IOERR_CLOSE	sqlite3_MFAW.c	677;"	d	file:
SQLITE_IOERR_CONVPATH	sqlite3_MFAW.c	687;"	d	file:
SQLITE_IOERR_DELETE	sqlite3_MFAW.c	671;"	d	file:
SQLITE_IOERR_DELETE_NOENT	sqlite3_MFAW.c	684;"	d	file:
SQLITE_IOERR_DIR_CLOSE	sqlite3_MFAW.c	678;"	d	file:
SQLITE_IOERR_DIR_FSYNC	sqlite3_MFAW.c	666;"	d	file:
SQLITE_IOERR_FSTAT	sqlite3_MFAW.c	668;"	d	file:
SQLITE_IOERR_FSYNC	sqlite3_MFAW.c	665;"	d	file:
SQLITE_IOERR_GETTEMPPATH	sqlite3_MFAW.c	686;"	d	file:
SQLITE_IOERR_LOCK	sqlite3_MFAW.c	676;"	d	file:
SQLITE_IOERR_MMAP	sqlite3_MFAW.c	685;"	d	file:
SQLITE_IOERR_NOMEM	sqlite3_MFAW.c	673;"	d	file:
SQLITE_IOERR_RDLOCK	sqlite3_MFAW.c	670;"	d	file:
SQLITE_IOERR_READ	sqlite3_MFAW.c	662;"	d	file:
SQLITE_IOERR_SEEK	sqlite3_MFAW.c	683;"	d	file:
SQLITE_IOERR_SHMLOCK	sqlite3_MFAW.c	681;"	d	file:
SQLITE_IOERR_SHMMAP	sqlite3_MFAW.c	682;"	d	file:
SQLITE_IOERR_SHMOPEN	sqlite3_MFAW.c	679;"	d	file:
SQLITE_IOERR_SHMSIZE	sqlite3_MFAW.c	680;"	d	file:
SQLITE_IOERR_SHORT_READ	sqlite3_MFAW.c	663;"	d	file:
SQLITE_IOERR_TRUNCATE	sqlite3_MFAW.c	667;"	d	file:
SQLITE_IOERR_UNLOCK	sqlite3_MFAW.c	669;"	d	file:
SQLITE_IOERR_WRITE	sqlite3_MFAW.c	664;"	d	file:
SQLITE_IgnoreChecks	sqlite3_MFAW.c	11162;"	d	file:
SQLITE_InternChanges	sqlite3_MFAW.c	11147;"	d	file:
SQLITE_JUMPIFNULL	sqlite3_MFAW.c	11449;"	d	file:
SQLITE_LAST_ERRNO	sqlite3_MFAW.c	1203;"	d	file:
SQLITE_LIMIT_ATTACHED	sqlite3_MFAW.c	3410;"	d	file:
SQLITE_LIMIT_COLUMN	sqlite3_MFAW.c	3405;"	d	file:
SQLITE_LIMIT_COMPOUND_SELECT	sqlite3_MFAW.c	3407;"	d	file:
SQLITE_LIMIT_EXPR_DEPTH	sqlite3_MFAW.c	3406;"	d	file:
SQLITE_LIMIT_FUNCTION_ARG	sqlite3_MFAW.c	3409;"	d	file:
SQLITE_LIMIT_LENGTH	sqlite3_MFAW.c	3403;"	d	file:
SQLITE_LIMIT_LIKE_PATTERN_LENGTH	sqlite3_MFAW.c	3411;"	d	file:
SQLITE_LIMIT_SQL_LENGTH	sqlite3_MFAW.c	3404;"	d	file:
SQLITE_LIMIT_TRIGGER_DEPTH	sqlite3_MFAW.c	3413;"	d	file:
SQLITE_LIMIT_VARIABLE_NUMBER	sqlite3_MFAW.c	3412;"	d	file:
SQLITE_LIMIT_VDBE_OP	sqlite3_MFAW.c	3408;"	d	file:
SQLITE_LIMIT_WORKER_THREADS	sqlite3_MFAW.c	3414;"	d	file:
SQLITE_LITTLEENDIAN	sqlite3_MFAW.c	9068;"	d	file:
SQLITE_LITTLEENDIAN	sqlite3_MFAW.c	9075;"	d	file:
SQLITE_LITTLEENDIAN	sqlite3_MFAW.c	9081;"	d	file:
SQLITE_LOCKED	sqlite3_MFAW.c	619;"	d	file:
SQLITE_LOCKED_SHAREDCACHE	sqlite3_MFAW.c	688;"	d	file:
SQLITE_LOCKFILEEX_FLAGS	sqlite3_MFAW.c	36143;"	d	file:
SQLITE_LOCKFILE_FLAGS	sqlite3_MFAW.c	36134;"	d	file:
SQLITE_LOCK_EXCLUSIVE	sqlite3_MFAW.c	800;"	d	file:
SQLITE_LOCK_NONE	sqlite3_MFAW.c	796;"	d	file:
SQLITE_LOCK_PENDING	sqlite3_MFAW.c	799;"	d	file:
SQLITE_LOCK_RESERVED	sqlite3_MFAW.c	798;"	d	file:
SQLITE_LOCK_SHARED	sqlite3_MFAW.c	797;"	d	file:
SQLITE_LegacyFileFmt	sqlite3_MFAW.c	11164;"	d	file:
SQLITE_LoadExtension	sqlite3_MFAW.c	11171;"	d	file:
SQLITE_MAGIC_BUSY	sqlite3_MFAW.c	11223;"	d	file:
SQLITE_MAGIC_CLOSED	sqlite3_MFAW.c	11221;"	d	file:
SQLITE_MAGIC_ERROR	sqlite3_MFAW.c	11224;"	d	file:
SQLITE_MAGIC_OPEN	sqlite3_MFAW.c	11220;"	d	file:
SQLITE_MAGIC_SICK	sqlite3_MFAW.c	11222;"	d	file:
SQLITE_MAGIC_ZOMBIE	sqlite3_MFAW.c	11225;"	d	file:
SQLITE_MALLOC	sqlite3_MFAW.c	17078;"	d	file:
SQLITE_MALLOC	sqlite3_MFAW.c	17090;"	d	file:
SQLITE_MALLOCSIZE	sqlite3_MFAW.c	17081;"	d	file:
SQLITE_MALLOCSIZE	sqlite3_MFAW.c	17123;"	d	file:
SQLITE_MALLOCSIZE	sqlite3_MFAW.c	17127;"	d	file:
SQLITE_MALLOC_SOFT_LIMIT	sqlite3_MFAW.c	8403;"	d	file:
SQLITE_MAX_ATTACHED	sqlite3_MFAW.c	8180;"	d	file:
SQLITE_MAX_COLUMN	sqlite3_MFAW.c	8098;"	d	file:
SQLITE_MAX_COMPOUND_SELECT	sqlite3_MFAW.c	8135;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	sqlite3_MFAW.c	8227;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	sqlite3_MFAW.c	8230;"	d	file:
SQLITE_MAX_DEFAULT_PAGE_SIZE	sqlite3_MFAW.c	8231;"	d	file:
SQLITE_MAX_EXPR_DEPTH	sqlite3_MFAW.c	8123;"	d	file:
SQLITE_MAX_FILE_FORMAT	sqlite3_MFAW.c	8864;"	d	file:
SQLITE_MAX_FUNCTION_ARG	sqlite3_MFAW.c	8150;"	d	file:
SQLITE_MAX_LENGTH	sqlite3_MFAW.c	8077;"	d	file:
SQLITE_MAX_LIKE_PATTERN_LENGTH	sqlite3_MFAW.c	154577;"	d	file:
SQLITE_MAX_LIKE_PATTERN_LENGTH	sqlite3_MFAW.c	8251;"	d	file:
SQLITE_MAX_MMAP_SIZE	sqlite3_MFAW.c	9123;"	d	file:
SQLITE_MAX_MMAP_SIZE	sqlite3_MFAW.c	9124;"	d	file:
SQLITE_MAX_MMAP_SIZE	sqlite3_MFAW.c	9133;"	d	file:
SQLITE_MAX_MMAP_SIZE	sqlite3_MFAW.c	9134;"	d	file:
SQLITE_MAX_MMAP_SIZE	sqlite3_MFAW.c	9142;"	d	file:
SQLITE_MAX_MMAP_SIZE	sqlite3_MFAW.c	9144;"	d	file:
SQLITE_MAX_MMAP_SIZE_xc	sqlite3_MFAW.c	9146;"	d	file:
SQLITE_MAX_PAGE_COUNT	sqlite3_MFAW.c	8243;"	d	file:
SQLITE_MAX_PAGE_SIZE	sqlite3_MFAW.c	8203;"	d	file:
SQLITE_MAX_PAGE_SIZE	sqlite3_MFAW.c	8205;"	d	file:
SQLITE_MAX_PMASZ	sqlite3_MFAW.c	78130;"	d	file:
SQLITE_MAX_SCHEMA_RETRY	sqlite3_MFAW.c	14532;"	d	file:
SQLITE_MAX_SQL_LENGTH	sqlite3_MFAW.c	8109;"	d	file:
SQLITE_MAX_TRIGGER_DEPTH	sqlite3_MFAW.c	8262;"	d	file:
SQLITE_MAX_U32	sqlite3_MFAW.c	8995;"	d	file:
SQLITE_MAX_VARIABLE_NUMBER	sqlite3_MFAW.c	8188;"	d	file:
SQLITE_MAX_VDBE_OP	sqlite3_MFAW.c	8143;"	d	file:
SQLITE_MAX_WORKER_THREADS	sqlite3_MFAW.c	8892;"	d	file:
SQLITE_MAX_WORKER_THREADS	sqlite3_MFAW.c	8893;"	d	file:
SQLITE_MAX_WORKER_THREADS	sqlite3_MFAW.c	8896;"	d	file:
SQLITE_MAX_WORKER_THREADS	sqlite3_MFAW.c	8902;"	d	file:
SQLITE_MAX_WORKER_THREADS	sqlite3_MFAW.c	8903;"	d	file:
SQLITE_MINIMUM_FILE_DESCRIPTOR	sqlite3_MFAW.c	26032;"	d	file:
SQLITE_MISMATCH	sqlite3_MFAW.c	633;"	d	file:
SQLITE_MISUSE	sqlite3_MFAW.c	634;"	d	file:
SQLITE_MISUSE_BKPT	sqlite3_MFAW.c	12935;"	d	file:
SQLITE_MIXED_ENDIAN_64BIT_FLOAT	sqlite3_MFAW.c	8840;"	d	file:
SQLITE_MUTEX_FAST	sqlite3_MFAW.c	6467;"	d	file:
SQLITE_MUTEX_NOOP	sqlite3_MFAW.c	10834;"	d	file:
SQLITE_MUTEX_NREF	sqlite3_MFAW.c	19516;"	d	file:
SQLITE_MUTEX_NREF	sqlite3_MFAW.c	19518;"	d	file:
SQLITE_MUTEX_OMIT	sqlite3_MFAW.c	10826;"	d	file:
SQLITE_MUTEX_PTHREADS	sqlite3_MFAW.c	10830;"	d	file:
SQLITE_MUTEX_RECURSIVE	sqlite3_MFAW.c	6468;"	d	file:
SQLITE_MUTEX_STATIC_APP1	sqlite3_MFAW.c	6477;"	d	file:
SQLITE_MUTEX_STATIC_APP2	sqlite3_MFAW.c	6478;"	d	file:
SQLITE_MUTEX_STATIC_APP3	sqlite3_MFAW.c	6479;"	d	file:
SQLITE_MUTEX_STATIC_LRU	sqlite3_MFAW.c	6474;"	d	file:
SQLITE_MUTEX_STATIC_LRU2	sqlite3_MFAW.c	6475;"	d	file:
SQLITE_MUTEX_STATIC_MASTER	sqlite3_MFAW.c	6469;"	d	file:
SQLITE_MUTEX_STATIC_MEM	sqlite3_MFAW.c	6470;"	d	file:
SQLITE_MUTEX_STATIC_MEM2	sqlite3_MFAW.c	6471;"	d	file:
SQLITE_MUTEX_STATIC_OPEN	sqlite3_MFAW.c	6472;"	d	file:
SQLITE_MUTEX_STATIC_PMEM	sqlite3_MFAW.c	6476;"	d	file:
SQLITE_MUTEX_STATIC_PRNG	sqlite3_MFAW.c	6473;"	d	file:
SQLITE_MUTEX_W32	sqlite3_MFAW.c	10832;"	d	file:
SQLITE_NEED_ERR_NAME	sqlite3_MFAW.c	8534;"	d	file:
SQLITE_NEED_ERR_NAME	sqlite3_MFAW.c	8536;"	d	file:
SQLITE_NOINLINE	sqlite3_MFAW.c	8322;"	d	file:
SQLITE_NOINLINE	sqlite3_MFAW.c	8324;"	d	file:
SQLITE_NOINLINE	sqlite3_MFAW.c	8326;"	d	file:
SQLITE_NOLFS	sqlite3_MFAW.c	635;"	d	file:
SQLITE_NOMEM	sqlite3_MFAW.c	620;"	d	file:
SQLITE_NOTADB	sqlite3_MFAW.c	639;"	d	file:
SQLITE_NOTFOUND	sqlite3_MFAW.c	625;"	d	file:
SQLITE_NOTICE	sqlite3_MFAW.c	640;"	d	file:
SQLITE_NOTICE_RECOVER_ROLLBACK	sqlite3_MFAW.c	712;"	d	file:
SQLITE_NOTICE_RECOVER_WAL	sqlite3_MFAW.c	711;"	d	file:
SQLITE_NOTNULL	sqlite3_MFAW.c	11452;"	d	file:
SQLITE_NULL	sqlite3_MFAW.c	4091;"	d	file:
SQLITE_NULLEQ	sqlite3_MFAW.c	11451;"	d	file:
SQLITE_N_BTREE_META	sqlite3_MFAW.c	9365;"	d	file:
SQLITE_N_COLCACHE	sqlite3_MFAW.c	12440;"	d	file:
SQLITE_N_KEYWORD	sqlite3_MFAW.c	127225;"	d	file:
SQLITE_N_LIMIT	sqlite3_MFAW.c	10933;"	d	file:
SQLITE_NullCallback	sqlite3_MFAW.c	11156;"	d	file:
SQLITE_OK	sqlite3_MFAW.c	612;"	d	file:
SQLITE_OMIT_DATETIME_FUNCS	sqlite3_MFAW.c	8838;"	d	file:
SQLITE_OMIT_LOAD_EXTENSION	sqlite3_MFAW.c	119;"	d	file:
SQLITE_OMIT_TRACE	sqlite3_MFAW.c	8839;"	d	file:
SQLITE_OPEN_AUTOPROXY	sqlite3_MFAW.c	728;"	d	file:
SQLITE_OPEN_CREATE	sqlite3_MFAW.c	725;"	d	file:
SQLITE_OPEN_DELETEONCLOSE	sqlite3_MFAW.c	726;"	d	file:
SQLITE_OPEN_EXCLUSIVE	sqlite3_MFAW.c	727;"	d	file:
SQLITE_OPEN_FULLMUTEX	sqlite3_MFAW.c	739;"	d	file:
SQLITE_OPEN_MAIN_DB	sqlite3_MFAW.c	731;"	d	file:
SQLITE_OPEN_MAIN_JOURNAL	sqlite3_MFAW.c	734;"	d	file:
SQLITE_OPEN_MASTER_JOURNAL	sqlite3_MFAW.c	737;"	d	file:
SQLITE_OPEN_MEMORY	sqlite3_MFAW.c	730;"	d	file:
SQLITE_OPEN_NOMUTEX	sqlite3_MFAW.c	738;"	d	file:
SQLITE_OPEN_PRIVATECACHE	sqlite3_MFAW.c	741;"	d	file:
SQLITE_OPEN_READONLY	sqlite3_MFAW.c	723;"	d	file:
SQLITE_OPEN_READWRITE	sqlite3_MFAW.c	724;"	d	file:
SQLITE_OPEN_SHAREDCACHE	sqlite3_MFAW.c	740;"	d	file:
SQLITE_OPEN_SUBJOURNAL	sqlite3_MFAW.c	736;"	d	file:
SQLITE_OPEN_TEMP_DB	sqlite3_MFAW.c	732;"	d	file:
SQLITE_OPEN_TEMP_JOURNAL	sqlite3_MFAW.c	735;"	d	file:
SQLITE_OPEN_TRANSIENT_DB	sqlite3_MFAW.c	733;"	d	file:
SQLITE_OPEN_URI	sqlite3_MFAW.c	729;"	d	file:
SQLITE_OPEN_WAL	sqlite3_MFAW.c	742;"	d	file:
SQLITE_OS_OTHER	sqlite3_MFAW.c	10572;"	d	file:
SQLITE_OS_OTHER	sqlite3_MFAW.c	10576;"	d	file:
SQLITE_OS_OTHER	sqlite3_MFAW.c	117;"	d	file:
SQLITE_OS_UNIX	sqlite3_MFAW.c	10567;"	d	file:
SQLITE_OS_UNIX	sqlite3_MFAW.c	10568;"	d	file:
SQLITE_OS_UNIX	sqlite3_MFAW.c	10581;"	d	file:
SQLITE_OS_UNIX	sqlite3_MFAW.c	10584;"	d	file:
SQLITE_OS_UNIX	sqlite3_MFAW.c	10587;"	d	file:
SQLITE_OS_WIN	sqlite3_MFAW.c	10569;"	d	file:
SQLITE_OS_WIN	sqlite3_MFAW.c	10570;"	d	file:
SQLITE_OS_WIN	sqlite3_MFAW.c	10580;"	d	file:
SQLITE_OS_WIN	sqlite3_MFAW.c	10583;"	d	file:
SQLITE_OS_WIN	sqlite3_MFAW.c	10591;"	d	file:
SQLITE_OS_WINCE	sqlite3_MFAW.c	20129;"	d	file:
SQLITE_OS_WINCE	sqlite3_MFAW.c	20131;"	d	file:
SQLITE_OS_WINNT	sqlite3_MFAW.c	20121;"	d	file:
SQLITE_OS_WINRT	sqlite3_MFAW.c	20139;"	d	file:
SQLITE_OS_WIN_THREADS	sqlite3_MFAW.c	20158;"	d	file:
SQLITE_OS_WIN_THREADS	sqlite3_MFAW.c	20160;"	d	file:
SQLITE_OmitNoopJoin	sqlite3_MFAW.c	11194;"	d	file:
SQLITE_OrderByIdxJoin	sqlite3_MFAW.c	11191;"	d	file:
SQLITE_PERM	sqlite3_MFAW.c	616;"	d	file:
SQLITE_POWERSAFE_OVERWRITE	sqlite3_MFAW.c	8353;"	d	file:
SQLITE_PRAGMA	sqlite3_MFAW.c	2862;"	d	file:
SQLITE_PRINTF_INTERNAL	sqlite3_MFAW.c	13069;"	d	file:
SQLITE_PRINTF_SQLFUNC	sqlite3_MFAW.c	13070;"	d	file:
SQLITE_PRINT_BUF_SIZE	sqlite3_MFAW.c	21515;"	d	file:
SQLITE_PRIVATE	sqlite3_MFAW.c	23;"	d	file:
SQLITE_PROTOCOL	sqlite3_MFAW.c	628;"	d	file:
SQLITE_PTRSIZE	sqlite3_MFAW.c	9039;"	d	file:
SQLITE_PTRSIZE	sqlite3_MFAW.c	9042;"	d	file:
SQLITE_PTRSIZE	sqlite3_MFAW.c	9044;"	d	file:
SQLITE_PTR_TO_INT	sqlite3_MFAW.c	8305;"	d	file:
SQLITE_PTR_TO_INT	sqlite3_MFAW.c	8308;"	d	file:
SQLITE_PTR_TO_INT	sqlite3_MFAW.c	8311;"	d	file:
SQLITE_PTR_TO_INT	sqlite3_MFAW.c	8314;"	d	file:
SQLITE_PreferBuiltin	sqlite3_MFAW.c	11170;"	d	file:
SQLITE_QueryFlattener	sqlite3_MFAW.c	11184;"	d	file:
SQLITE_QueryOnly	sqlite3_MFAW.c	11174;"	d	file:
SQLITE_RANGE	sqlite3_MFAW.c	638;"	d	file:
SQLITE_READ	sqlite3_MFAW.c	2863;"	d	file:
SQLITE_READONLY	sqlite3_MFAW.c	621;"	d	file:
SQLITE_READONLY_CANTLOCK	sqlite3_MFAW.c	697;"	d	file:
SQLITE_READONLY_DBMOVED	sqlite3_MFAW.c	699;"	d	file:
SQLITE_READONLY_RECOVERY	sqlite3_MFAW.c	696;"	d	file:
SQLITE_READONLY_ROLLBACK	sqlite3_MFAW.c	698;"	d	file:
SQLITE_REALLOC	sqlite3_MFAW.c	17080;"	d	file:
SQLITE_REALLOC	sqlite3_MFAW.c	17092;"	d	file:
SQLITE_RECURSIVE	sqlite3_MFAW.c	2877;"	d	file:
SQLITE_REINDEX	sqlite3_MFAW.c	2870;"	d	file:
SQLITE_REPLACE	sqlite3_MFAW.c	7806;"	d	file:
SQLITE_ROLLBACK	sqlite3_MFAW.c	7802;"	d	file:
SQLITE_ROW	sqlite3_MFAW.c	642;"	d	file:
SQLITE_ReadUncommitted	sqlite3_MFAW.c	11163;"	d	file:
SQLITE_RecTriggers	sqlite3_MFAW.c	11167;"	d	file:
SQLITE_RecoveryMode	sqlite3_MFAW.c	11165;"	d	file:
SQLITE_ReverseOrder	sqlite3_MFAW.c	11166;"	d	file:
SQLITE_SAVEPOINT	sqlite3_MFAW.c	2875;"	d	file:
SQLITE_SCANSTAT_EST	sqlite3_MFAW.c	7857;"	d	file:
SQLITE_SCANSTAT_EXPLAIN	sqlite3_MFAW.c	7859;"	d	file:
SQLITE_SCANSTAT_NAME	sqlite3_MFAW.c	7858;"	d	file:
SQLITE_SCANSTAT_NLOOP	sqlite3_MFAW.c	7855;"	d	file:
SQLITE_SCANSTAT_NVISIT	sqlite3_MFAW.c	7856;"	d	file:
SQLITE_SCANSTAT_SELECTID	sqlite3_MFAW.c	7860;"	d	file:
SQLITE_SCHEMA	sqlite3_MFAW.c	630;"	d	file:
SQLITE_SELECT	sqlite3_MFAW.c	2864;"	d	file:
SQLITE_SET_LOCKPROXYFILE	sqlite3_MFAW.c	1202;"	d	file:
SQLITE_SHM_EXCLUSIVE	sqlite3_MFAW.c	1465;"	d	file:
SQLITE_SHM_LOCK	sqlite3_MFAW.c	1463;"	d	file:
SQLITE_SHM_NLOCK	sqlite3_MFAW.c	1475;"	d	file:
SQLITE_SHM_SHARED	sqlite3_MFAW.c	1464;"	d	file:
SQLITE_SHM_UNLOCK	sqlite3_MFAW.c	1462;"	d	file:
SQLITE_SKIP_UTF8	sqlite3_MFAW.c	12918;"	d	file:
SQLITE_SORTER_PMASZ	sqlite3_MFAW.c	13952;"	d	file:
SQLITE_SOURCE_ID	sqlite3_MFAW.c	324;"	d	file:
SQLITE_SO_ASC	sqlite3_MFAW.c	11409;"	d	file:
SQLITE_SO_DESC	sqlite3_MFAW.c	11410;"	d	file:
SQLITE_STAT4_SAMPLES	sqlite3_MFAW.c	88292;"	d	file:
SQLITE_STAT4_SAMPLES	sqlite3_MFAW.c	88293;"	d	file:
SQLITE_STAT4_SAMPLES	sqlite3_MFAW.c	88395;"	d	file:
SQLITE_STATIC	sqlite3_MFAW.c	4702;"	d	file:
SQLITE_STATUS_MALLOC_COUNT	sqlite3_MFAW.c	6708;"	d	file:
SQLITE_STATUS_MALLOC_SIZE	sqlite3_MFAW.c	6704;"	d	file:
SQLITE_STATUS_MEMORY_USED	sqlite3_MFAW.c	6699;"	d	file:
SQLITE_STATUS_PAGECACHE_OVERFLOW	sqlite3_MFAW.c	6701;"	d	file:
SQLITE_STATUS_PAGECACHE_SIZE	sqlite3_MFAW.c	6706;"	d	file:
SQLITE_STATUS_PAGECACHE_USED	sqlite3_MFAW.c	6700;"	d	file:
SQLITE_STATUS_PARSER_STACK	sqlite3_MFAW.c	6705;"	d	file:
SQLITE_STATUS_SCRATCH_OVERFLOW	sqlite3_MFAW.c	6703;"	d	file:
SQLITE_STATUS_SCRATCH_SIZE	sqlite3_MFAW.c	6707;"	d	file:
SQLITE_STATUS_SCRATCH_USED	sqlite3_MFAW.c	6702;"	d	file:
SQLITE_STDCALL	sqlite3_MFAW.c	266;"	d	file:
SQLITE_STMTSTATUS_AUTOINDEX	sqlite3_MFAW.c	6904;"	d	file:
SQLITE_STMTSTATUS_FULLSCAN_STEP	sqlite3_MFAW.c	6902;"	d	file:
SQLITE_STMTSTATUS_SORT	sqlite3_MFAW.c	6903;"	d	file:
SQLITE_STMTSTATUS_VM_STEP	sqlite3_MFAW.c	6905;"	d	file:
SQLITE_STOREP2	sqlite3_MFAW.c	11450;"	d	file:
SQLITE_SYNC_DATAONLY	sqlite3_MFAW.c	830;"	d	file:
SQLITE_SYNC_FULL	sqlite3_MFAW.c	829;"	d	file:
SQLITE_SYNC_MASK	sqlite3_MFAW.c	41567;"	d	file:
SQLITE_SYNC_NORMAL	sqlite3_MFAW.c	828;"	d	file:
SQLITE_SYSTEM_MALLOC	sqlite3_MFAW.c	8395;"	d	file:
SQLITE_ShortColNames	sqlite3_MFAW.c	11152;"	d	file:
SQLITE_SqlTrace	sqlite3_MFAW.c	11158;"	d	file:
SQLITE_Stat34	sqlite3_MFAW.c	11195;"	d	file:
SQLITE_SubqCoroutine	sqlite3_MFAW.c	11192;"	d	file:
SQLITE_TEMP_FILE_PREFIX	sqlite3_MFAW.c	10636;"	d	file:
SQLITE_TEMP_STORE	sqlite3_MFAW.c	8882;"	d	file:
SQLITE_TEMP_STORE_xc	sqlite3_MFAW.c	8883;"	d	file:
SQLITE_TESTCTRL_ALWAYS	sqlite3_MFAW.c	6567;"	d	file:
SQLITE_TESTCTRL_ASSERT	sqlite3_MFAW.c	6566;"	d	file:
SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS	sqlite3_MFAW.c	6564;"	d	file:
SQLITE_TESTCTRL_BITVEC_TEST	sqlite3_MFAW.c	6562;"	d	file:
SQLITE_TESTCTRL_BYTEORDER	sqlite3_MFAW.c	6576;"	d	file:
SQLITE_TESTCTRL_EXPLAIN_STMT	sqlite3_MFAW.c	6573;"	d	file:
SQLITE_TESTCTRL_FAULT_INSTALL	sqlite3_MFAW.c	6563;"	d	file:
SQLITE_TESTCTRL_FIRST	sqlite3_MFAW.c	6558;"	d	file:
SQLITE_TESTCTRL_IMPOSTER	sqlite3_MFAW.c	6579;"	d	file:
SQLITE_TESTCTRL_ISINIT	sqlite3_MFAW.c	6577;"	d	file:
SQLITE_TESTCTRL_ISKEYWORD	sqlite3_MFAW.c	6570;"	d	file:
SQLITE_TESTCTRL_LAST	sqlite3_MFAW.c	6580;"	d	file:
SQLITE_TESTCTRL_LOCALTIME_FAULT	sqlite3_MFAW.c	6572;"	d	file:
SQLITE_TESTCTRL_NEVER_CORRUPT	sqlite3_MFAW.c	6574;"	d	file:
SQLITE_TESTCTRL_OPTIMIZATIONS	sqlite3_MFAW.c	6569;"	d	file:
SQLITE_TESTCTRL_PENDING_BYTE	sqlite3_MFAW.c	6565;"	d	file:
SQLITE_TESTCTRL_PRNG_RESET	sqlite3_MFAW.c	6561;"	d	file:
SQLITE_TESTCTRL_PRNG_RESTORE	sqlite3_MFAW.c	6560;"	d	file:
SQLITE_TESTCTRL_PRNG_SAVE	sqlite3_MFAW.c	6559;"	d	file:
SQLITE_TESTCTRL_RESERVE	sqlite3_MFAW.c	6568;"	d	file:
SQLITE_TESTCTRL_SCRATCHMALLOC	sqlite3_MFAW.c	6571;"	d	file:
SQLITE_TESTCTRL_SORTER_MMAP	sqlite3_MFAW.c	6578;"	d	file:
SQLITE_TESTCTRL_VDBE_COVERAGE	sqlite3_MFAW.c	6575;"	d	file:
SQLITE_TEXT	sqlite3_MFAW.c	4093;"	d	file:
SQLITE_TEXT	sqlite3_MFAW.c	4095;"	d	file:
SQLITE_THREADSAFE	sqlite3_MFAW.c	8342;"	d	file:
SQLITE_THREADSAFE	sqlite3_MFAW.c	8344;"	d	file:
SQLITE_THREADS_IMPLEMENTED	sqlite3_MFAW.c	22671;"	d	file:
SQLITE_THREADS_IMPLEMENTED	sqlite3_MFAW.c	22739;"	d	file:
SQLITE_TOOBIG	sqlite3_MFAW.c	631;"	d	file:
SQLITE_TRANSACTION	sqlite3_MFAW.c	2865;"	d	file:
SQLITE_TRANSIENT	sqlite3_MFAW.c	4703;"	d	file:
SQLITE_Transitive	sqlite3_MFAW.c	11193;"	d	file:
SQLITE_UNIX_THREADS	sqlite3_MFAW.c	25404;"	d	file:
SQLITE_UPDATE	sqlite3_MFAW.c	2866;"	d	file:
SQLITE_USE_MALLOC_H	sqlite3_MFAW.c	17099;"	d	file:
SQLITE_USE_MALLOC_H	sqlite3_MFAW.c	17108;"	d	file:
SQLITE_USE_MALLOC_USABLE_SIZE	sqlite3_MFAW.c	17100;"	d	file:
SQLITE_USE_MSIZE	sqlite3_MFAW.c	17109;"	d	file:
SQLITE_USE_URI	sqlite3_MFAW.c	13937;"	d	file:
SQLITE_UTF16	sqlite3_MFAW.c	4467;"	d	file:
SQLITE_UTF16BE	sqlite3_MFAW.c	4466;"	d	file:
SQLITE_UTF16LE	sqlite3_MFAW.c	4465;"	d	file:
SQLITE_UTF16NATIVE	sqlite3_MFAW.c	9069;"	d	file:
SQLITE_UTF16NATIVE	sqlite3_MFAW.c	9076;"	d	file:
SQLITE_UTF16NATIVE	sqlite3_MFAW.c	9082;"	d	file:
SQLITE_UTF16_ALIGNED	sqlite3_MFAW.c	4469;"	d	file:
SQLITE_UTF8	sqlite3_MFAW.c	4464;"	d	file:
SQLITE_VERSION	sqlite3_MFAW.c	289;"	d	file:
SQLITE_VERSION	sqlite3_MFAW.c	322;"	d	file:
SQLITE_VERSION_NUMBER	sqlite3_MFAW.c	292;"	d	file:
SQLITE_VERSION_NUMBER	sqlite3_MFAW.c	323;"	d	file:
SQLITE_VTAB_CONSTRAINT_SUPPORT	sqlite3_MFAW.c	7776;"	d	file:
SQLITE_Vacuum	sqlite3_MFAW.c	11176;"	d	file:
SQLITE_VdbeAddopTrace	sqlite3_MFAW.c	11161;"	d	file:
SQLITE_VdbeEQP	sqlite3_MFAW.c	11175;"	d	file:
SQLITE_VdbeListing	sqlite3_MFAW.c	11159;"	d	file:
SQLITE_VdbeTrace	sqlite3_MFAW.c	11146;"	d	file:
SQLITE_W32_MUTEX_INITIALIZER	sqlite3_MFAW.c	20193;"	d	file:
SQLITE_WARNING	sqlite3_MFAW.c	641;"	d	file:
SQLITE_WARNING_AUTOINDEX	sqlite3_MFAW.c	713;"	d	file:
SQLITE_WIN32_DATA_DIRECTORY_TYPE	sqlite3_MFAW.c	33531;"	d	file:
SQLITE_WIN32_DBG_BUF_SIZE	sqlite3_MFAW.c	33523;"	d	file:
SQLITE_WIN32_GETVERSIONEX	sqlite3_MFAW.c	33321;"	d	file:
SQLITE_WIN32_GETVERSIONEX	sqlite3_MFAW.c	33323;"	d	file:
SQLITE_WIN32_HAS_ANSI	sqlite3_MFAW.c	33283;"	d	file:
SQLITE_WIN32_HAS_WIDE	sqlite3_MFAW.c	33292;"	d	file:
SQLITE_WIN32_HEAP_CREATE	sqlite3_MFAW.c	33563;"	d	file:
SQLITE_WIN32_HEAP_FLAGS	sqlite3_MFAW.c	33586;"	d	file:
SQLITE_WIN32_HEAP_INIT_SIZE	sqlite3_MFAW.c	33570;"	d	file:
SQLITE_WIN32_HEAP_MAX_SIZE	sqlite3_MFAW.c	33578;"	d	file:
SQLITE_WIN32_IOERR_RETRY	sqlite3_MFAW.c	35148;"	d	file:
SQLITE_WIN32_IOERR_RETRY_DELAY	sqlite3_MFAW.c	35151;"	d	file:
SQLITE_WIN32_MAX_ERRMSG_CHARS	sqlite3_MFAW.c	33379;"	d	file:
SQLITE_WIN32_MAX_PATH_BYTES	sqlite3_MFAW.c	33363;"	d	file:
SQLITE_WIN32_MAX_PATH_CHARS	sqlite3_MFAW.c	33339;"	d	file:
SQLITE_WIN32_TEMP_DIRECTORY_TYPE	sqlite3_MFAW.c	33539;"	d	file:
SQLITE_WIN32_VOLATILE	sqlite3_MFAW.c	20147;"	d	file:
SQLITE_WIN32_VOLATILE	sqlite3_MFAW.c	20149;"	d	file:
SQLITE_WINNT_MAX_PATH_BYTES	sqlite3_MFAW.c	33371;"	d	file:
SQLITE_WINNT_MAX_PATH_CHARS	sqlite3_MFAW.c	33354;"	d	file:
SQLITE_WSD	sqlite3_MFAW.c	9257;"	d	file:
SQLITE_WSD	sqlite3_MFAW.c	9263;"	d	file:
SQLITE_WriteSchema	sqlite3_MFAW.c	11160;"	d	file:
SQL_CHOMP_SEGDIR	sqlite3_MFAW.c	143303;"	d	file:
SQL_CONTENT_INSERT	sqlite3_MFAW.c	143287;"	d	file:
SQL_DELETE_ALL_CONTENT	sqlite3_MFAW.c	143271;"	d	file:
SQL_DELETE_ALL_DOCSIZE	sqlite3_MFAW.c	143274;"	d	file:
SQL_DELETE_ALL_SEGDIR	sqlite3_MFAW.c	143273;"	d	file:
SQL_DELETE_ALL_SEGMENTS	sqlite3_MFAW.c	143272;"	d	file:
SQL_DELETE_ALL_STAT	sqlite3_MFAW.c	143275;"	d	file:
SQL_DELETE_ALL_TERMS_SEGDIR	sqlite3_MFAW.c	143295;"	d	file:
SQL_DELETE_CONTENT	sqlite3_MFAW.c	143269;"	d	file:
SQL_DELETE_DOCSIZE	sqlite3_MFAW.c	143288;"	d	file:
SQL_DELETE_SEGDIR_ENTRY	sqlite3_MFAW.c	143300;"	d	file:
SQL_DELETE_SEGDIR_LEVEL	sqlite3_MFAW.c	143285;"	d	file:
SQL_DELETE_SEGDIR_RANGE	sqlite3_MFAW.c	143296;"	d	file:
SQL_DELETE_SEGMENTS_RANGE	sqlite3_MFAW.c	143286;"	d	file:
SQL_FIND_MERGE_LEVEL	sqlite3_MFAW.c	143298;"	d	file:
SQL_INSERT_SEGDIR	sqlite3_MFAW.c	143280;"	d	file:
SQL_INSERT_SEGMENTS	sqlite3_MFAW.c	143278;"	d	file:
SQL_IS_EMPTY	sqlite3_MFAW.c	143270;"	d	file:
SQL_MAX_LEAF_NODE_ESTIMATE	sqlite3_MFAW.c	143299;"	d	file:
SQL_NEXT_SEGMENTS_ID	sqlite3_MFAW.c	143279;"	d	file:
SQL_NEXT_SEGMENT_INDEX	sqlite3_MFAW.c	143277;"	d	file:
SQL_REPLACE_DOCSIZE	sqlite3_MFAW.c	143289;"	d	file:
SQL_REPLACE_STAT	sqlite3_MFAW.c	143292;"	d	file:
SQL_SEGMENT_IS_APPENDABLE	sqlite3_MFAW.c	143304;"	d	file:
SQL_SELECT_ALL_LANGID	sqlite3_MFAW.c	143297;"	d	file:
SQL_SELECT_ALL_PREFIX_LEVEL	sqlite3_MFAW.c	143294;"	d	file:
SQL_SELECT_CONTENT_BY_ROWID	sqlite3_MFAW.c	143276;"	d	file:
SQL_SELECT_DOCSIZE	sqlite3_MFAW.c	143290;"	d	file:
SQL_SELECT_INDEXES	sqlite3_MFAW.c	143305;"	d	file:
SQL_SELECT_LEVEL	sqlite3_MFAW.c	143281;"	d	file:
SQL_SELECT_LEVEL_COUNT	sqlite3_MFAW.c	143283;"	d	file:
SQL_SELECT_LEVEL_RANGE	sqlite3_MFAW.c	143282;"	d	file:
SQL_SELECT_LEVEL_RANGE2	sqlite3_MFAW.c	143308;"	d	file:
SQL_SELECT_MXLEVEL	sqlite3_MFAW.c	143306;"	d	file:
SQL_SELECT_SEGDIR	sqlite3_MFAW.c	143302;"	d	file:
SQL_SELECT_SEGDIR_MAX_LEVEL	sqlite3_MFAW.c	143284;"	d	file:
SQL_SELECT_STAT	sqlite3_MFAW.c	143291;"	d	file:
SQL_SHIFT_SEGDIR_ENTRY	sqlite3_MFAW.c	143301;"	d	file:
SQL_UPDATE_LEVEL	sqlite3_MFAW.c	143310;"	d	file:
SQL_UPDATE_LEVEL_IDX	sqlite3_MFAW.c	143309;"	d	file:
SQLiteThread	sqlite3_MFAW.c	/^struct SQLiteThread {$/;"	s	file:
SQLiteThread	sqlite3_MFAW.c	/^typedef struct SQLiteThread SQLiteThread;$/;"	t	typeref:struct:SQLiteThread	file:
SRCS	Makefile	/^SRCS = mobibench_MFAW.c \\$/;"	m
SRT_Coroutine	sqlite3_MFAW.c	12404;"	d	file:
SRT_Discard	sqlite3_MFAW.c	12391;"	d	file:
SRT_DistFifo	sqlite3_MFAW.c	12393;"	d	file:
SRT_DistQueue	sqlite3_MFAW.c	12395;"	d	file:
SRT_EphemTab	sqlite3_MFAW.c	12403;"	d	file:
SRT_Except	sqlite3_MFAW.c	12389;"	d	file:
SRT_Exists	sqlite3_MFAW.c	12390;"	d	file:
SRT_Fifo	sqlite3_MFAW.c	12392;"	d	file:
SRT_Mem	sqlite3_MFAW.c	12401;"	d	file:
SRT_Output	sqlite3_MFAW.c	12400;"	d	file:
SRT_Queue	sqlite3_MFAW.c	12394;"	d	file:
SRT_Set	sqlite3_MFAW.c	12402;"	d	file:
SRT_Table	sqlite3_MFAW.c	12405;"	d	file:
SRT_Union	sqlite3_MFAW.c	12388;"	d	file:
SRVAL	sqlite3_MFAW.c	78431;"	d	file:
START_CPU_CHECK	mobibench.c	267;"	d	file:
START_CPU_CHECK	mobibench_MFAW.c	267;"	d	file:
STAT_GET_NDLT	sqlite3_MFAW.c	88932;"	d	file:
STAT_GET_NEQ	sqlite3_MFAW.c	88930;"	d	file:
STAT_GET_NLT	sqlite3_MFAW.c	88931;"	d	file:
STAT_GET_ROWID	sqlite3_MFAW.c	88929;"	d	file:
STAT_GET_STAT1	sqlite3_MFAW.c	88928;"	d	file:
STRACCUM_NOMEM	sqlite3_MFAW.c	12762;"	d	file:
STRACCUM_TOOBIG	sqlite3_MFAW.c	12763;"	d	file:
STRICMP	sqlite3_MFAW.c	91926;"	d	file:
STR_FUNCTION	sqlite3_MFAW.c	11321;"	d	file:
SWAP	sqlite3_MFAW.c	8924;"	d	file:
SYDI	mobibench.c	/^  SYDI,$/;"	e	enum:__anon30	file:
SYDI	mobibench_MFAW.c	/^  SYDI,$/;"	e	enum:__anon27	file:
SYSCALL	sqlite3_MFAW.c	33663;"	d	file:
Savepoint	sqlite3_MFAW.c	/^struct Savepoint {$/;"	s	file:
Savepoint	sqlite3_MFAW.c	/^typedef struct Savepoint Savepoint;$/;"	t	typeref:struct:Savepoint	file:
ScanStatus	sqlite3_MFAW.c	/^struct ScanStatus {$/;"	s	file:
ScanStatus	sqlite3_MFAW.c	/^typedef struct ScanStatus ScanStatus;$/;"	t	typeref:struct:ScanStatus	file:
Schema	sqlite3_MFAW.c	/^struct Schema {$/;"	s	file:
Schema	sqlite3_MFAW.c	/^typedef struct Schema Schema;$/;"	t	typeref:struct:Schema	file:
ScratchFreeslot	sqlite3_MFAW.c	/^typedef struct ScratchFreeslot {$/;"	s	file:
ScratchFreeslot	sqlite3_MFAW.c	/^} ScratchFreeslot;$/;"	t	typeref:struct:ScratchFreeslot	file:
SegmentNode	sqlite3_MFAW.c	/^struct SegmentNode {$/;"	s	file:
SegmentNode	sqlite3_MFAW.c	/^typedef struct SegmentNode SegmentNode;$/;"	t	typeref:struct:SegmentNode	file:
SegmentWriter	sqlite3_MFAW.c	/^struct SegmentWriter {$/;"	s	file:
SegmentWriter	sqlite3_MFAW.c	/^typedef struct SegmentWriter SegmentWriter;$/;"	t	typeref:struct:SegmentWriter	file:
Select	sqlite3_MFAW.c	/^struct Select {$/;"	s	file:
Select	sqlite3_MFAW.c	/^typedef struct Select Select;$/;"	t	typeref:struct:Select	file:
SelectDest	sqlite3_MFAW.c	/^struct SelectDest {$/;"	s	file:
SelectDest	sqlite3_MFAW.c	/^typedef struct SelectDest SelectDest;$/;"	t	typeref:struct:SelectDest	file:
ShmRegion	sqlite3_MFAW.c	/^  struct ShmRegion {$/;"	s	struct:winShmNode	file:
SimulateDiskfullError	sqlite3_MFAW.c	20039;"	d	file:
SimulateDiskfullError	sqlite3_MFAW.c	20053;"	d	file:
SimulateDiskfullError	sqlite3_MFAW.c	25709;"	d	file:
SimulateDiskfullError	sqlite3_MFAW.c	25723;"	d	file:
SimulateDiskfullError	sqlite3_MFAW.c	33228;"	d	file:
SimulateDiskfullError	sqlite3_MFAW.c	33242;"	d	file:
SimulateIOError	sqlite3_MFAW.c	20030;"	d	file:
SimulateIOError	sqlite3_MFAW.c	20052;"	d	file:
SimulateIOError	sqlite3_MFAW.c	25700;"	d	file:
SimulateIOError	sqlite3_MFAW.c	25722;"	d	file:
SimulateIOError	sqlite3_MFAW.c	33219;"	d	file:
SimulateIOError	sqlite3_MFAW.c	33241;"	d	file:
SimulateIOErrorBenign	sqlite3_MFAW.c	20029;"	d	file:
SimulateIOErrorBenign	sqlite3_MFAW.c	20051;"	d	file:
SimulateIOErrorBenign	sqlite3_MFAW.c	25699;"	d	file:
SimulateIOErrorBenign	sqlite3_MFAW.c	25721;"	d	file:
SimulateIOErrorBenign	sqlite3_MFAW.c	33218;"	d	file:
SimulateIOErrorBenign	sqlite3_MFAW.c	33240;"	d	file:
SizeofArray	sqlite3_MFAW.c	132830;"	d	file:
SnippetFragment	sqlite3_MFAW.c	/^struct SnippetFragment {$/;"	s	file:
SnippetFragment	sqlite3_MFAW.c	/^typedef struct SnippetFragment SnippetFragment;$/;"	t	typeref:struct:SnippetFragment	file:
SnippetIter	sqlite3_MFAW.c	/^struct SnippetIter {$/;"	s	file:
SnippetIter	sqlite3_MFAW.c	/^typedef struct SnippetIter SnippetIter;$/;"	t	typeref:struct:SnippetIter	file:
SnippetPhrase	sqlite3_MFAW.c	/^struct SnippetPhrase {$/;"	s	file:
SnippetPhrase	sqlite3_MFAW.c	/^typedef struct SnippetPhrase SnippetPhrase;$/;"	t	typeref:struct:SnippetPhrase	file:
SortByDimension	sqlite3_MFAW.c	/^static void SortByDimension($/;"	f	file:
SortByDistance	sqlite3_MFAW.c	/^static void SortByDistance($/;"	f	file:
SortCtx	sqlite3_MFAW.c	/^struct SortCtx {$/;"	s	file:
SortCtx	sqlite3_MFAW.c	/^typedef struct SortCtx SortCtx;$/;"	t	typeref:struct:SortCtx	file:
SortSubtask	sqlite3_MFAW.c	/^struct SortSubtask {$/;"	s	file:
SortSubtask	sqlite3_MFAW.c	/^typedef struct SortSubtask SortSubtask;     \/* A sub-task in the sort process *\/$/;"	t	typeref:struct:SortSubtask	file:
SorterCompare	sqlite3_MFAW.c	/^typedef int (*SorterCompare)(SortSubtask*,int*,const void*,int,const void*,int);$/;"	t	file:
SorterFile	sqlite3_MFAW.c	/^struct SorterFile {$/;"	s	file:
SorterFile	sqlite3_MFAW.c	/^typedef struct SorterFile SorterFile;       \/* Temporary file object wrapper *\/$/;"	t	typeref:struct:SorterFile	file:
SorterList	sqlite3_MFAW.c	/^struct SorterList {$/;"	s	file:
SorterList	sqlite3_MFAW.c	/^typedef struct SorterList SorterList;       \/* In-memory list of records *\/$/;"	t	typeref:struct:SorterList	file:
SorterRecord	sqlite3_MFAW.c	/^struct SorterRecord {$/;"	s	file:
SorterRecord	sqlite3_MFAW.c	/^typedef struct SorterRecord SorterRecord;   \/* A record being sorted *\/$/;"	t	typeref:struct:SorterRecord	file:
SplitNode	sqlite3_MFAW.c	/^static int SplitNode($/;"	f	file:
Sqlite3Config	sqlite3_MFAW.c	/^struct Sqlite3Config {$/;"	s	file:
SrcCount	sqlite3_MFAW.c	/^struct SrcCount {$/;"	s	file:
SrcList	sqlite3_MFAW.c	/^struct SrcList {$/;"	s	file:
SrcList	sqlite3_MFAW.c	/^typedef struct SrcList SrcList;$/;"	t	typeref:struct:SrcList	file:
SrcList_item	sqlite3_MFAW.c	/^  struct SrcList_item {$/;"	s	struct:SrcList	file:
Stat4Accum	sqlite3_MFAW.c	/^struct Stat4Accum {$/;"	s	file:
Stat4Accum	sqlite3_MFAW.c	/^typedef struct Stat4Accum Stat4Accum;$/;"	t	typeref:struct:Stat4Accum	file:
Stat4Sample	sqlite3_MFAW.c	/^struct Stat4Sample {$/;"	s	file:
Stat4Sample	sqlite3_MFAW.c	/^typedef struct Stat4Sample Stat4Sample;$/;"	t	typeref:struct:Stat4Sample	file:
StatCell	sqlite3_MFAW.c	/^struct StatCell {$/;"	s	file:
StatCell	sqlite3_MFAW.c	/^typedef struct StatCell StatCell;$/;"	t	typeref:struct:StatCell	file:
StatCursor	sqlite3_MFAW.c	/^struct StatCursor {$/;"	s	file:
StatCursor	sqlite3_MFAW.c	/^typedef struct StatCursor StatCursor;$/;"	t	typeref:struct:StatCursor	file:
StatPage	sqlite3_MFAW.c	/^struct StatPage {$/;"	s	file:
StatPage	sqlite3_MFAW.c	/^typedef struct StatPage StatPage;$/;"	t	typeref:struct:StatPage	file:
StatTable	sqlite3_MFAW.c	/^struct StatTable {$/;"	s	file:
StatTable	sqlite3_MFAW.c	/^typedef struct StatTable StatTable;$/;"	t	typeref:struct:StatTable	file:
StrAccum	sqlite3_MFAW.c	/^struct StrAccum {$/;"	s	file:
StrAccum	sqlite3_MFAW.c	/^typedef struct StrAccum StrAccum;$/;"	t	typeref:struct:StrAccum	file:
StrBuffer	sqlite3_MFAW.c	/^struct StrBuffer {$/;"	s	file:
StrBuffer	sqlite3_MFAW.c	/^typedef struct StrBuffer StrBuffer;$/;"	t	typeref:struct:StrBuffer	file:
Stringify	sqlite3_MFAW.c	70968;"	d	file:
SubProgram	sqlite3_MFAW.c	/^struct SubProgram {$/;"	s	file:
SubProgram	sqlite3_MFAW.c	/^typedef struct SubProgram SubProgram;$/;"	t	typeref:struct:SubProgram	file:
SumCtx	sqlite3_MFAW.c	/^struct SumCtx {$/;"	s	file:
SumCtx	sqlite3_MFAW.c	/^typedef struct SumCtx SumCtx;$/;"	t	typeref:struct:SumCtx	file:
TEMP_MASTER_NAME	sqlite3_MFAW.c	9209;"	d	file:
TERM_ANDINFO	sqlite3_MFAW.c	116071;"	d	file:
TERM_CODED	sqlite3_MFAW.c	116068;"	d	file:
TERM_COPIED	sqlite3_MFAW.c	116069;"	d	file:
TERM_DYNAMIC	sqlite3_MFAW.c	116066;"	d	file:
TERM_LIKE	sqlite3_MFAW.c	116080;"	d	file:
TERM_LIKECOND	sqlite3_MFAW.c	116079;"	d	file:
TERM_LIKEOPT	sqlite3_MFAW.c	116078;"	d	file:
TERM_ORINFO	sqlite3_MFAW.c	116070;"	d	file:
TERM_OR_OK	sqlite3_MFAW.c	116072;"	d	file:
TERM_VIRTUAL	sqlite3_MFAW.c	116067;"	d	file:
TERM_VNULL	sqlite3_MFAW.c	116074;"	d	file:
TERM_VNULL	sqlite3_MFAW.c	116076;"	d	file:
TESTBIT	sqlite3_MFAW.c	39173;"	d	file:
TESTONLY	sqlite3_MFAW.c	132928;"	d	file:
TESTONLY	sqlite3_MFAW.c	132930;"	d	file:
TESTONLY	sqlite3_MFAW.c	8468;"	d	file:
TESTONLY	sqlite3_MFAW.c	8470;"	d	file:
TF_Autoincrement	sqlite3_MFAW.c	11556;"	d	file:
TF_Ephemeral	sqlite3_MFAW.c	11554;"	d	file:
TF_HasPrimaryKey	sqlite3_MFAW.c	11555;"	d	file:
TF_OOOHidden	sqlite3_MFAW.c	11559;"	d	file:
TF_Readonly	sqlite3_MFAW.c	11553;"	d	file:
TF_Virtual	sqlite3_MFAW.c	11557;"	d	file:
TF_WithoutRowid	sqlite3_MFAW.c	11558;"	d	file:
THREE_BYTE_INT	sqlite3_MFAW.c	67899;"	d	file:
TIMER_ELAPSED	sqlite3_MFAW.c	20009;"	d	file:
TIMER_ELAPSED	sqlite3_MFAW.c	20013;"	d	file:
TIMER_ELAPSED	sqlite3_MFAW.c	25679;"	d	file:
TIMER_ELAPSED	sqlite3_MFAW.c	25683;"	d	file:
TIMER_ELAPSED	sqlite3_MFAW.c	33198;"	d	file:
TIMER_ELAPSED	sqlite3_MFAW.c	33202;"	d	file:
TIMER_END	sqlite3_MFAW.c	20008;"	d	file:
TIMER_END	sqlite3_MFAW.c	20012;"	d	file:
TIMER_END	sqlite3_MFAW.c	25678;"	d	file:
TIMER_END	sqlite3_MFAW.c	25682;"	d	file:
TIMER_END	sqlite3_MFAW.c	33197;"	d	file:
TIMER_END	sqlite3_MFAW.c	33201;"	d	file:
TIMER_START	sqlite3_MFAW.c	20007;"	d	file:
TIMER_START	sqlite3_MFAW.c	20011;"	d	file:
TIMER_START	sqlite3_MFAW.c	25677;"	d	file:
TIMER_START	sqlite3_MFAW.c	25681;"	d	file:
TIMER_START	sqlite3_MFAW.c	33196;"	d	file:
TIMER_START	sqlite3_MFAW.c	33200;"	d	file:
TK_ABORT	sqlite3_MFAW.c	8687;"	d	file:
TK_ACTION	sqlite3_MFAW.c	8688;"	d	file:
TK_ADD	sqlite3_MFAW.c	8800;"	d	file:
TK_AFTER	sqlite3_MFAW.c	8689;"	d	file:
TK_AGG_COLUMN	sqlite3_MFAW.c	8814;"	d	file:
TK_AGG_FUNCTION	sqlite3_MFAW.c	8813;"	d	file:
TK_ALL	sqlite3_MFAW.c	8774;"	d	file:
TK_ALTER	sqlite3_MFAW.c	8799;"	d	file:
TK_ANALYZE	sqlite3_MFAW.c	8690;"	d	file:
TK_AND	sqlite3_MFAW.c	8730;"	d	file:
TK_ANY	sqlite3_MFAW.c	8728;"	d	file:
TK_AS	sqlite3_MFAW.c	8682;"	d	file:
TK_ASC	sqlite3_MFAW.c	8691;"	d	file:
TK_ATTACH	sqlite3_MFAW.c	8692;"	d	file:
TK_AUTOINCR	sqlite3_MFAW.c	8764;"	d	file:
TK_BEFORE	sqlite3_MFAW.c	8693;"	d	file:
TK_BEGIN	sqlite3_MFAW.c	8663;"	d	file:
TK_BETWEEN	sqlite3_MFAW.c	8732;"	d	file:
TK_BITAND	sqlite3_MFAW.c	8743;"	d	file:
TK_BITNOT	sqlite3_MFAW.c	8754;"	d	file:
TK_BITOR	sqlite3_MFAW.c	8744;"	d	file:
TK_BLOB	sqlite3_MFAW.c	8792;"	d	file:
TK_BY	sqlite3_MFAW.c	8694;"	d	file:
TK_CASCADE	sqlite3_MFAW.c	8695;"	d	file:
TK_CASE	sqlite3_MFAW.c	8794;"	d	file:
TK_CAST	sqlite3_MFAW.c	8696;"	d	file:
TK_CHECK	sqlite3_MFAW.c	8762;"	d	file:
TK_COLLATE	sqlite3_MFAW.c	8753;"	d	file:
TK_COLUMN	sqlite3_MFAW.c	8812;"	d	file:
TK_COLUMNKW	sqlite3_MFAW.c	8697;"	d	file:
TK_COMMA	sqlite3_MFAW.c	8684;"	d	file:
TK_COMMIT	sqlite3_MFAW.c	8668;"	d	file:
TK_CONCAT	sqlite3_MFAW.c	8752;"	d	file:
TK_CONFLICT	sqlite3_MFAW.c	8698;"	d	file:
TK_CONSTRAINT	sqlite3_MFAW.c	8757;"	d	file:
TK_CREATE	sqlite3_MFAW.c	8675;"	d	file:
TK_CTIME_KW	sqlite3_MFAW.c	8727;"	d	file:
TK_DATABASE	sqlite3_MFAW.c	8699;"	d	file:
TK_DEFAULT	sqlite3_MFAW.c	8758;"	d	file:
TK_DEFERRABLE	sqlite3_MFAW.c	8770;"	d	file:
TK_DEFERRED	sqlite3_MFAW.c	8665;"	d	file:
TK_DELETE	sqlite3_MFAW.c	8767;"	d	file:
TK_DESC	sqlite3_MFAW.c	8700;"	d	file:
TK_DETACH	sqlite3_MFAW.c	8701;"	d	file:
TK_DISTINCT	sqlite3_MFAW.c	8779;"	d	file:
TK_DOT	sqlite3_MFAW.c	8780;"	d	file:
TK_DROP	sqlite3_MFAW.c	8772;"	d	file:
TK_EACH	sqlite3_MFAW.c	8702;"	d	file:
TK_ELSE	sqlite3_MFAW.c	8797;"	d	file:
TK_END	sqlite3_MFAW.c	8669;"	d	file:
TK_END_OF_FILE	sqlite3_MFAW.c	8807;"	d	file:
TK_EQ	sqlite3_MFAW.c	8737;"	d	file:
TK_ESCAPE	sqlite3_MFAW.c	8742;"	d	file:
TK_EXCEPT	sqlite3_MFAW.c	8775;"	d	file:
TK_EXCLUSIVE	sqlite3_MFAW.c	8667;"	d	file:
TK_EXISTS	sqlite3_MFAW.c	8678;"	d	file:
TK_EXPLAIN	sqlite3_MFAW.c	8660;"	d	file:
TK_FAIL	sqlite3_MFAW.c	8703;"	d	file:
TK_FLOAT	sqlite3_MFAW.c	8791;"	d	file:
TK_FOR	sqlite3_MFAW.c	8704;"	d	file:
TK_FOREIGN	sqlite3_MFAW.c	8771;"	d	file:
TK_FROM	sqlite3_MFAW.c	8781;"	d	file:
TK_FUNCTION	sqlite3_MFAW.c	8811;"	d	file:
TK_GE	sqlite3_MFAW.c	8741;"	d	file:
TK_GROUP	sqlite3_MFAW.c	8785;"	d	file:
TK_GT	sqlite3_MFAW.c	8738;"	d	file:
TK_HAVING	sqlite3_MFAW.c	8786;"	d	file:
TK_ID	sqlite3_MFAW.c	8685;"	d	file:
TK_IF	sqlite3_MFAW.c	8676;"	d	file:
TK_IGNORE	sqlite3_MFAW.c	8705;"	d	file:
TK_ILLEGAL	sqlite3_MFAW.c	8808;"	d	file:
TK_IMMEDIATE	sqlite3_MFAW.c	8666;"	d	file:
TK_IN	sqlite3_MFAW.c	8733;"	d	file:
TK_INDEX	sqlite3_MFAW.c	8798;"	d	file:
TK_INDEXED	sqlite3_MFAW.c	8686;"	d	file:
TK_INITIALLY	sqlite3_MFAW.c	8706;"	d	file:
TK_INSERT	sqlite3_MFAW.c	8766;"	d	file:
TK_INSTEAD	sqlite3_MFAW.c	8707;"	d	file:
TK_INTEGER	sqlite3_MFAW.c	8790;"	d	file:
TK_INTERSECT	sqlite3_MFAW.c	8776;"	d	file:
TK_INTO	sqlite3_MFAW.c	8789;"	d	file:
TK_IS	sqlite3_MFAW.c	8731;"	d	file:
TK_ISNOT	sqlite3_MFAW.c	8806;"	d	file:
TK_ISNULL	sqlite3_MFAW.c	8734;"	d	file:
TK_JOIN	sqlite3_MFAW.c	8782;"	d	file:
TK_JOIN_KW	sqlite3_MFAW.c	8756;"	d	file:
TK_KEY	sqlite3_MFAW.c	8711;"	d	file:
TK_LE	sqlite3_MFAW.c	8739;"	d	file:
TK_LIKE_KW	sqlite3_MFAW.c	8708;"	d	file:
TK_LIMIT	sqlite3_MFAW.c	8787;"	d	file:
TK_LP	sqlite3_MFAW.c	8680;"	d	file:
TK_LSHIFT	sqlite3_MFAW.c	8745;"	d	file:
TK_LT	sqlite3_MFAW.c	8740;"	d	file:
TK_MATCH	sqlite3_MFAW.c	8709;"	d	file:
TK_MINUS	sqlite3_MFAW.c	8748;"	d	file:
TK_NE	sqlite3_MFAW.c	8736;"	d	file:
TK_NO	sqlite3_MFAW.c	8710;"	d	file:
TK_NOT	sqlite3_MFAW.c	8677;"	d	file:
TK_NOTNULL	sqlite3_MFAW.c	8735;"	d	file:
TK_NULL	sqlite3_MFAW.c	8759;"	d	file:
TK_OF	sqlite3_MFAW.c	8712;"	d	file:
TK_OFFSET	sqlite3_MFAW.c	8713;"	d	file:
TK_ON	sqlite3_MFAW.c	8765;"	d	file:
TK_OR	sqlite3_MFAW.c	8729;"	d	file:
TK_ORDER	sqlite3_MFAW.c	8784;"	d	file:
TK_PLAN	sqlite3_MFAW.c	8662;"	d	file:
TK_PLUS	sqlite3_MFAW.c	8747;"	d	file:
TK_PRAGMA	sqlite3_MFAW.c	8714;"	d	file:
TK_PRIMARY	sqlite3_MFAW.c	8760;"	d	file:
TK_QUERY	sqlite3_MFAW.c	8661;"	d	file:
TK_RAISE	sqlite3_MFAW.c	8715;"	d	file:
TK_RECURSIVE	sqlite3_MFAW.c	8716;"	d	file:
TK_REFERENCES	sqlite3_MFAW.c	8763;"	d	file:
TK_REGISTER	sqlite3_MFAW.c	8817;"	d	file:
TK_REINDEX	sqlite3_MFAW.c	8725;"	d	file:
TK_RELEASE	sqlite3_MFAW.c	8672;"	d	file:
TK_REM	sqlite3_MFAW.c	8751;"	d	file:
TK_RENAME	sqlite3_MFAW.c	8726;"	d	file:
TK_REPLACE	sqlite3_MFAW.c	8717;"	d	file:
TK_RESTRICT	sqlite3_MFAW.c	8718;"	d	file:
TK_ROLLBACK	sqlite3_MFAW.c	8670;"	d	file:
TK_ROW	sqlite3_MFAW.c	8719;"	d	file:
TK_RP	sqlite3_MFAW.c	8681;"	d	file:
TK_RSHIFT	sqlite3_MFAW.c	8746;"	d	file:
TK_SAVEPOINT	sqlite3_MFAW.c	8671;"	d	file:
TK_SELECT	sqlite3_MFAW.c	8777;"	d	file:
TK_SEMI	sqlite3_MFAW.c	8659;"	d	file:
TK_SET	sqlite3_MFAW.c	8769;"	d	file:
TK_SLASH	sqlite3_MFAW.c	8750;"	d	file:
TK_SPACE	sqlite3_MFAW.c	8809;"	d	file:
TK_STAR	sqlite3_MFAW.c	8749;"	d	file:
TK_STRING	sqlite3_MFAW.c	8755;"	d	file:
TK_TABLE	sqlite3_MFAW.c	8674;"	d	file:
TK_TEMP	sqlite3_MFAW.c	8679;"	d	file:
TK_THEN	sqlite3_MFAW.c	8796;"	d	file:
TK_TO	sqlite3_MFAW.c	8673;"	d	file:
TK_TO_BLOB	sqlite3_MFAW.c	8802;"	d	file:
TK_TO_INT	sqlite3_MFAW.c	8804;"	d	file:
TK_TO_NUMERIC	sqlite3_MFAW.c	8803;"	d	file:
TK_TO_REAL	sqlite3_MFAW.c	8805;"	d	file:
TK_TO_TEXT	sqlite3_MFAW.c	8801;"	d	file:
TK_TRANSACTION	sqlite3_MFAW.c	8664;"	d	file:
TK_TRIGGER	sqlite3_MFAW.c	8720;"	d	file:
TK_UMINUS	sqlite3_MFAW.c	8815;"	d	file:
TK_UNCLOSED_STRING	sqlite3_MFAW.c	8810;"	d	file:
TK_UNION	sqlite3_MFAW.c	8773;"	d	file:
TK_UNIQUE	sqlite3_MFAW.c	8761;"	d	file:
TK_UPDATE	sqlite3_MFAW.c	8768;"	d	file:
TK_UPLUS	sqlite3_MFAW.c	8816;"	d	file:
TK_USING	sqlite3_MFAW.c	8783;"	d	file:
TK_VACUUM	sqlite3_MFAW.c	8721;"	d	file:
TK_VALUES	sqlite3_MFAW.c	8778;"	d	file:
TK_VARIABLE	sqlite3_MFAW.c	8793;"	d	file:
TK_VIEW	sqlite3_MFAW.c	8722;"	d	file:
TK_VIRTUAL	sqlite3_MFAW.c	8723;"	d	file:
TK_WHEN	sqlite3_MFAW.c	8795;"	d	file:
TK_WHERE	sqlite3_MFAW.c	8788;"	d	file:
TK_WITH	sqlite3_MFAW.c	8724;"	d	file:
TK_WITHOUT	sqlite3_MFAW.c	8683;"	d	file:
TOKEN	sqlite3_MFAW.c	126686;"	d	file:
TRACE	sqlite3_MFAW.c	53152;"	d	file:
TRACE_IDX_INPUTS	sqlite3_MFAW.c	/^static void TRACE_IDX_INPUTS(sqlite3_index_info *p){$/;"	f	file:
TRACE_IDX_INPUTS	sqlite3_MFAW.c	117912;"	d	file:
TRACE_IDX_OUTPUTS	sqlite3_MFAW.c	/^static void TRACE_IDX_OUTPUTS(sqlite3_index_info *p){$/;"	f	file:
TRACE_IDX_OUTPUTS	sqlite3_MFAW.c	117913;"	d	file:
TRANS_NONE	sqlite3_MFAW.c	52520;"	d	file:
TRANS_READ	sqlite3_MFAW.c	52521;"	d	file:
TRANS_WRITE	sqlite3_MFAW.c	52522;"	d	file:
TRIGGER_AFTER	sqlite3_MFAW.c	12681;"	d	file:
TRIGGER_BEFORE	sqlite3_MFAW.c	12680;"	d	file:
TWOPOWER31	sqlite3_MFAW.c	24656;"	d	file:
TWOPOWER32	sqlite3_MFAW.c	24655;"	d	file:
TWO_BYTE_INT	sqlite3_MFAW.c	67898;"	d	file:
TabResult	sqlite3_MFAW.c	/^typedef struct TabResult {$/;"	s	file:
TabResult	sqlite3_MFAW.c	/^} TabResult;$/;"	t	typeref:struct:TabResult	file:
Table	sqlite3_MFAW.c	/^struct Table {$/;"	s	file:
Table	sqlite3_MFAW.c	/^typedef struct Table Table;$/;"	t	typeref:struct:Table	file:
TableLock	sqlite3_MFAW.c	/^struct TableLock {$/;"	s	file:
TableLock	sqlite3_MFAW.c	/^typedef struct TableLock TableLock;$/;"	t	typeref:struct:TableLock	file:
TermOffset	sqlite3_MFAW.c	/^struct TermOffset {$/;"	s	file:
TermOffset	sqlite3_MFAW.c	/^typedef struct TermOffset TermOffset;$/;"	t	typeref:struct:TermOffset	file:
TermOffsetCtx	sqlite3_MFAW.c	/^struct TermOffsetCtx {$/;"	s	file:
TermOffsetCtx	sqlite3_MFAW.c	/^typedef struct TermOffsetCtx TermOffsetCtx;$/;"	t	typeref:struct:TermOffsetCtx	file:
TermSelect	sqlite3_MFAW.c	/^struct TermSelect {$/;"	s	file:
TermSelect	sqlite3_MFAW.c	/^typedef struct TermSelect TermSelect;$/;"	t	typeref:struct:TermSelect	file:
Token	sqlite3_MFAW.c	/^struct Token {$/;"	s	file:
Token	sqlite3_MFAW.c	/^typedef struct Token Token;$/;"	t	typeref:struct:Token	file:
TokenDoclist	sqlite3_MFAW.c	/^struct TokenDoclist {$/;"	s	file:
TokenDoclist	sqlite3_MFAW.c	/^typedef struct TokenDoclist TokenDoclist;$/;"	t	typeref:struct:TokenDoclist	file:
TreeView	sqlite3_MFAW.c	/^struct TreeView {$/;"	s	file:
TreeView	sqlite3_MFAW.c	/^typedef struct TreeView TreeView;$/;"	t	typeref:struct:TreeView	file:
TrigEvent	sqlite3_MFAW.c	/^struct TrigEvent { int a; IdList * b; };$/;"	s	file:
Trigger	sqlite3_MFAW.c	/^struct Trigger {$/;"	s	file:
Trigger	sqlite3_MFAW.c	/^typedef struct Trigger Trigger;$/;"	t	typeref:struct:Trigger	file:
TriggerPrg	sqlite3_MFAW.c	/^struct TriggerPrg {$/;"	s	file:
TriggerPrg	sqlite3_MFAW.c	/^typedef struct TriggerPrg TriggerPrg;$/;"	t	typeref:struct:TriggerPrg	file:
TriggerStep	sqlite3_MFAW.c	/^struct TriggerStep {$/;"	s	file:
TriggerStep	sqlite3_MFAW.c	/^typedef struct TriggerStep TriggerStep;$/;"	t	typeref:struct:TriggerStep	file:
UAUTH_Admin	sqlite3_MFAW.c	10997;"	d	file:
UAUTH_Fail	sqlite3_MFAW.c	10995;"	d	file:
UAUTH_Unknown	sqlite3_MFAW.c	10994;"	d	file:
UAUTH_User	sqlite3_MFAW.c	10996;"	d	file:
UINT16_TYPE	sqlite3_MFAW.c	8952;"	d	file:
UINT16_TYPE	sqlite3_MFAW.c	8954;"	d	file:
UINT32_TYPE	sqlite3_MFAW.c	8945;"	d	file:
UINT32_TYPE	sqlite3_MFAW.c	8947;"	d	file:
UINT8_TYPE	sqlite3_MFAW.c	8966;"	d	file:
UINT8_TYPE	sqlite3_MFAW.c	8968;"	d	file:
UM	mobibench.c	344;"	d	file:
UM	mobibench_MFAW.c	344;"	d	file:
UNICODE_STRING_MAX_CHARS	sqlite3_MFAW.c	33346;"	d	file:
UNIXFILE_BLOCK	sqlite3_MFAW.c	25536;"	d	file:
UNIXFILE_DELETE	sqlite3_MFAW.c	25532;"	d	file:
UNIXFILE_DIRSYNC	sqlite3_MFAW.c	25527;"	d	file:
UNIXFILE_DIRSYNC	sqlite3_MFAW.c	25529;"	d	file:
UNIXFILE_EXCL	sqlite3_MFAW.c	25523;"	d	file:
UNIXFILE_NOLOCK	sqlite3_MFAW.c	25534;"	d	file:
UNIXFILE_PERSIST_WAL	sqlite3_MFAW.c	25525;"	d	file:
UNIXFILE_PSOW	sqlite3_MFAW.c	25531;"	d	file:
UNIXFILE_RDONLY	sqlite3_MFAW.c	25524;"	d	file:
UNIXFILE_URI	sqlite3_MFAW.c	25533;"	d	file:
UNIXFILE_WARNED	sqlite3_MFAW.c	25535;"	d	file:
UNIXVFS	sqlite3_MFAW.c	32955;"	d	file:
UNIX_SHM_BASE	sqlite3_MFAW.c	29571;"	d	file:
UNIX_SHM_DMS	sqlite3_MFAW.c	29572;"	d	file:
UNKNOWN_LOCK	sqlite3_MFAW.c	42065;"	d	file:
UNUSED_PARAMETER	sqlite3_MFAW.c	132913;"	d	file:
UNUSED_PARAMETER	sqlite3_MFAW.c	151126;"	d	file:
UNUSED_PARAMETER	sqlite3_MFAW.c	9284;"	d	file:
UNUSED_PARAMETER2	sqlite3_MFAW.c	9285;"	d	file:
UNUSED_VARIABLE_VALUE	sqlite3_MFAW.c	33395;"	d	file:
UPDATE_MAX_BLOBSIZE	sqlite3_MFAW.c	70925;"	d	file:
UPDATE_MAX_BLOBSIZE	sqlite3_MFAW.c	70927;"	d	file:
UPDATE_STR	mobibench.c	73;"	d	file:
UPDATE_STR	mobibench_MFAW.c	73;"	d	file:
USAGE	mobibench.c	2199;"	d	file:
USAGE	mobibench_MFAW.c	2221;"	d	file:
USEFETCH	sqlite3_MFAW.c	42447;"	d	file:
USEFETCH	sqlite3_MFAW.c	42449;"	d	file:
UnixUnusedFd	sqlite3_MFAW.c	/^struct UnixUnusedFd {$/;"	s	file:
UnixUnusedFd	sqlite3_MFAW.c	/^typedef struct UnixUnusedFd UnixUnusedFd;     \/* An unused file descriptor *\/$/;"	t	typeref:struct:UnixUnusedFd	file:
UnpackedRecord	sqlite3_MFAW.c	/^struct UnpackedRecord {$/;"	s	file:
UnpackedRecord	sqlite3_MFAW.c	/^typedef struct UnpackedRecord UnpackedRecord;$/;"	t	typeref:struct:UnpackedRecord	file:
UpperToLower	sqlite3_MFAW.c	23671;"	d	file:
VDBE_MAGIC_DEAD	sqlite3_MFAW.c	14895;"	d	file:
VDBE_MAGIC_HALT	sqlite3_MFAW.c	14894;"	d	file:
VDBE_MAGIC_INIT	sqlite3_MFAW.c	14892;"	d	file:
VDBE_MAGIC_RUN	sqlite3_MFAW.c	14893;"	d	file:
VDBE_OFFSET_LINENO	sqlite3_MFAW.c	10095;"	d	file:
VDBE_OFFSET_LINENO	sqlite3_MFAW.c	10101;"	d	file:
VERSION_NUM	mobibench.c	40;"	d	file:
VERSION_NUM	mobibench_MFAW.c	40;"	d	file:
VFUNCTION	sqlite3_MFAW.c	11315;"	d	file:
VTAB_SCHEMA	sqlite3_MFAW.c	155348;"	d	file:
VTable	sqlite3_MFAW.c	/^struct VTable {$/;"	s	file:
VTable	sqlite3_MFAW.c	/^typedef struct VTable VTable;$/;"	t	typeref:struct:VTable	file:
VVA_ONLY	sqlite3_MFAW.c	8482;"	d	file:
VVA_ONLY	sqlite3_MFAW.c	8484;"	d	file:
ValueNewStat4Ctx	sqlite3_MFAW.c	/^struct ValueNewStat4Ctx {$/;"	s	file:
Vdbe	sqlite3_MFAW.c	/^struct Vdbe {$/;"	s	file:
Vdbe	sqlite3_MFAW.c	/^typedef struct Vdbe Vdbe;$/;"	t	typeref:struct:Vdbe	file:
VdbeBranchTaken	sqlite3_MFAW.c	70947;"	d	file:
VdbeBranchTaken	sqlite3_MFAW.c	70949;"	d	file:
VdbeComment	sqlite3_MFAW.c	10053;"	d	file:
VdbeComment	sqlite3_MFAW.c	10062;"	d	file:
VdbeCoverage	sqlite3_MFAW.c	10091;"	d	file:
VdbeCoverage	sqlite3_MFAW.c	10097;"	d	file:
VdbeCoverageAlwaysTaken	sqlite3_MFAW.c	10093;"	d	file:
VdbeCoverageAlwaysTaken	sqlite3_MFAW.c	10099;"	d	file:
VdbeCoverageIf	sqlite3_MFAW.c	10092;"	d	file:
VdbeCoverageIf	sqlite3_MFAW.c	10098;"	d	file:
VdbeCoverageNeverTaken	sqlite3_MFAW.c	10094;"	d	file:
VdbeCoverageNeverTaken	sqlite3_MFAW.c	10100;"	d	file:
VdbeCursor	sqlite3_MFAW.c	/^struct VdbeCursor {$/;"	s	file:
VdbeCursor	sqlite3_MFAW.c	/^typedef struct VdbeCursor VdbeCursor;$/;"	t	typeref:struct:VdbeCursor	file:
VdbeFrame	sqlite3_MFAW.c	/^struct VdbeFrame {$/;"	s	file:
VdbeFrame	sqlite3_MFAW.c	/^typedef struct VdbeFrame VdbeFrame;$/;"	t	typeref:struct:VdbeFrame	file:
VdbeFrameMem	sqlite3_MFAW.c	14658;"	d	file:
VdbeMemDynamic	sqlite3_MFAW.c	14947;"	d	file:
VdbeModuleComment	sqlite3_MFAW.c	10057;"	d	file:
VdbeModuleComment	sqlite3_MFAW.c	10059;"	d	file:
VdbeModuleComment	sqlite3_MFAW.c	10064;"	d	file:
VdbeNoopComment	sqlite3_MFAW.c	10055;"	d	file:
VdbeNoopComment	sqlite3_MFAW.c	10063;"	d	file:
VdbeOp	sqlite3_MFAW.c	/^struct VdbeOp {$/;"	s	file:
VdbeOp	sqlite3_MFAW.c	/^typedef struct VdbeOp VdbeOp;$/;"	t	typeref:struct:VdbeOp	file:
VdbeOpIter	sqlite3_MFAW.c	/^struct VdbeOpIter {$/;"	s	file:
VdbeOpIter	sqlite3_MFAW.c	/^typedef struct VdbeOpIter VdbeOpIter;$/;"	t	typeref:struct:VdbeOpIter	file:
VdbeOpList	sqlite3_MFAW.c	/^struct VdbeOpList {$/;"	s	file:
VdbeOpList	sqlite3_MFAW.c	/^typedef struct VdbeOpList VdbeOpList;$/;"	t	typeref:struct:VdbeOpList	file:
VdbeSorter	sqlite3_MFAW.c	/^struct VdbeSorter {$/;"	s	file:
VdbeSorter	sqlite3_MFAW.c	/^typedef struct VdbeSorter VdbeSorter;$/;"	t	typeref:struct:VdbeSorter	file:
VtabCtx	sqlite3_MFAW.c	/^struct VtabCtx {$/;"	s	file:
VtabCtx	sqlite3_MFAW.c	/^typedef struct VtabCtx VtabCtx;$/;"	t	typeref:struct:VtabCtx	file:
WALINDEX_HDR_SIZE	sqlite3_MFAW.c	49349;"	d	file:
WALINDEX_LOCK_OFFSET	sqlite3_MFAW.c	49347;"	d	file:
WALINDEX_LOCK_RESERVED	sqlite3_MFAW.c	49348;"	d	file:
WALINDEX_MAX_VERSION	sqlite3_MFAW.c	49242;"	d	file:
WALINDEX_PGSZ	sqlite3_MFAW.c	49476;"	d	file:
WALTRACE	sqlite3_MFAW.c	49223;"	d	file:
WALTRACE	sqlite3_MFAW.c	49225;"	d	file:
WAL_ALL_BUT_WRITE	sqlite3_MFAW.c	49249;"	d	file:
WAL_CKPT_LOCK	sqlite3_MFAW.c	49250;"	d	file:
WAL_EXCLUSIVE_MODE	sqlite3_MFAW.c	49413;"	d	file:
WAL_FRAME_HDRSIZE	sqlite3_MFAW.c	49352;"	d	file:
WAL_HDRSIZE	sqlite3_MFAW.c	49356;"	d	file:
WAL_HEAPMEMORY_MODE	sqlite3_MFAW.c	49414;"	d	file:
WAL_MAGIC	sqlite3_MFAW.c	49367;"	d	file:
WAL_MAX_VERSION	sqlite3_MFAW.c	49241;"	d	file:
WAL_NORMAL_MODE	sqlite3_MFAW.c	49412;"	d	file:
WAL_NREADER	sqlite3_MFAW.c	49253;"	d	file:
WAL_RDONLY	sqlite3_MFAW.c	49420;"	d	file:
WAL_RDWR	sqlite3_MFAW.c	49419;"	d	file:
WAL_READ_LOCK	sqlite3_MFAW.c	49252;"	d	file:
WAL_RECOVER_LOCK	sqlite3_MFAW.c	49251;"	d	file:
WAL_RETRY	sqlite3_MFAW.c	51059;"	d	file:
WAL_SAVEPOINT_NDATA	sqlite3_MFAW.c	41590;"	d	file:
WAL_SHM_RDONLY	sqlite3_MFAW.c	49421;"	d	file:
WAL_SYNC_TRANSACTIONS	sqlite3_MFAW.c	41566;"	d	file:
WAL_WRITE_LOCK	sqlite3_MFAW.c	49248;"	d	file:
WHERETRACE	sqlite3_MFAW.c	115824;"	d	file:
WHERETRACE	sqlite3_MFAW.c	115827;"	d	file:
WHERETRACE_ENABLED	sqlite3_MFAW.c	115825;"	d	file:
WHERE_AUTO_INDEX	sqlite3_MFAW.c	116265;"	d	file:
WHERE_BOTH_LIMIT	sqlite3_MFAW.c	116257;"	d	file:
WHERE_BTM_LIMIT	sqlite3_MFAW.c	116256;"	d	file:
WHERE_COLUMN_EQ	sqlite3_MFAW.c	116250;"	d	file:
WHERE_COLUMN_IN	sqlite3_MFAW.c	116252;"	d	file:
WHERE_COLUMN_NULL	sqlite3_MFAW.c	116253;"	d	file:
WHERE_COLUMN_RANGE	sqlite3_MFAW.c	116251;"	d	file:
WHERE_CONSTRAINT	sqlite3_MFAW.c	116254;"	d	file:
WHERE_DISTINCTBY	sqlite3_MFAW.c	12204;"	d	file:
WHERE_DISTINCT_NOOP	sqlite3_MFAW.c	12211;"	d	file:
WHERE_DISTINCT_ORDERED	sqlite3_MFAW.c	12213;"	d	file:
WHERE_DISTINCT_UNIQUE	sqlite3_MFAW.c	12212;"	d	file:
WHERE_DISTINCT_UNORDERED	sqlite3_MFAW.c	12214;"	d	file:
WHERE_DUPLICATES_OK	sqlite3_MFAW.c	12198;"	d	file:
WHERE_FORCE_TABLE	sqlite3_MFAW.c	12200;"	d	file:
WHERE_GROUPBY	sqlite3_MFAW.c	12203;"	d	file:
WHERE_IDX_ONLY	sqlite3_MFAW.c	116258;"	d	file:
WHERE_INDEXED	sqlite3_MFAW.c	116260;"	d	file:
WHERE_IN_ABLE	sqlite3_MFAW.c	116262;"	d	file:
WHERE_IPK	sqlite3_MFAW.c	116259;"	d	file:
WHERE_LOOP_XFER_SZ	sqlite3_MFAW.c	115935;"	d	file:
WHERE_MULTI_OR	sqlite3_MFAW.c	116264;"	d	file:
WHERE_NO_AUTOINDEX	sqlite3_MFAW.c	12202;"	d	file:
WHERE_OMIT_OPEN_CLOSE	sqlite3_MFAW.c	12199;"	d	file:
WHERE_ONEPASS_DESIRED	sqlite3_MFAW.c	12197;"	d	file:
WHERE_ONEROW	sqlite3_MFAW.c	116263;"	d	file:
WHERE_ONETABLE_ONLY	sqlite3_MFAW.c	12201;"	d	file:
WHERE_ORDERBY_MAX	sqlite3_MFAW.c	12196;"	d	file:
WHERE_ORDERBY_MIN	sqlite3_MFAW.c	12195;"	d	file:
WHERE_ORDERBY_NORMAL	sqlite3_MFAW.c	12194;"	d	file:
WHERE_PARTIALIDX	sqlite3_MFAW.c	116268;"	d	file:
WHERE_REOPEN_IDX	sqlite3_MFAW.c	12207;"	d	file:
WHERE_SKIPSCAN	sqlite3_MFAW.c	116266;"	d	file:
WHERE_SORTBYGROUP	sqlite3_MFAW.c	12206;"	d	file:
WHERE_TOP_LIMIT	sqlite3_MFAW.c	116255;"	d	file:
WHERE_UNQ_WANTED	sqlite3_MFAW.c	116267;"	d	file:
WHERE_VIRTUALTABLE	sqlite3_MFAW.c	116261;"	d	file:
WHERE_WANT_DISTINCT	sqlite3_MFAW.c	12205;"	d	file:
WINCE_DELETION_ATTEMPTS	sqlite3_MFAW.c	35712;"	d	file:
WINFILE_PERSIST_WAL	sqlite3_MFAW.c	33516;"	d	file:
WINFILE_PSOW	sqlite3_MFAW.c	33517;"	d	file:
WINFILE_RDONLY	sqlite3_MFAW.c	33515;"	d	file:
WINMEM_MAGIC1	sqlite3_MFAW.c	33607;"	d	file:
WINMEM_MAGIC2	sqlite3_MFAW.c	33608;"	d	file:
WIN_SHM_BASE	sqlite3_MFAW.c	36712;"	d	file:
WIN_SHM_DMS	sqlite3_MFAW.c	36713;"	d	file:
WO_ALL	sqlite3_MFAW.c	116242;"	d	file:
WO_AND	sqlite3_MFAW.c	116238;"	d	file:
WO_EQ	sqlite3_MFAW.c	116230;"	d	file:
WO_EQUIV	sqlite3_MFAW.c	116239;"	d	file:
WO_GE	sqlite3_MFAW.c	116234;"	d	file:
WO_GT	sqlite3_MFAW.c	116233;"	d	file:
WO_IN	sqlite3_MFAW.c	116229;"	d	file:
WO_ISNULL	sqlite3_MFAW.c	116236;"	d	file:
WO_LE	sqlite3_MFAW.c	116232;"	d	file:
WO_LT	sqlite3_MFAW.c	116231;"	d	file:
WO_MATCH	sqlite3_MFAW.c	116235;"	d	file:
WO_NOOP	sqlite3_MFAW.c	116240;"	d	file:
WO_OR	sqlite3_MFAW.c	116237;"	d	file:
WO_SINGLE	sqlite3_MFAW.c	116243;"	d	file:
WRC_Abort	sqlite3_MFAW.c	12886;"	d	file:
WRC_Continue	sqlite3_MFAW.c	12884;"	d	file:
WRC_Prune	sqlite3_MFAW.c	12885;"	d	file:
WRITE_LOCK	sqlite3_MFAW.c	52474;"	d	file:
WRITE_UTF16BE	sqlite3_MFAW.c	22995;"	d	file:
WRITE_UTF16LE	sqlite3_MFAW.c	22983;"	d	file:
WRITE_UTF8	sqlite3_MFAW.c	150343;"	d	file:
WRITE_UTF8	sqlite3_MFAW.c	22963;"	d	file:
Wal	sqlite3_MFAW.c	/^struct Wal {$/;"	s	file:
Wal	sqlite3_MFAW.c	/^typedef struct Wal Wal;$/;"	t	typeref:struct:Wal	file:
WalCkptInfo	sqlite3_MFAW.c	/^struct WalCkptInfo {$/;"	s	file:
WalCkptInfo	sqlite3_MFAW.c	/^typedef struct WalCkptInfo WalCkptInfo;$/;"	t	typeref:struct:WalCkptInfo	file:
WalIndexHdr	sqlite3_MFAW.c	/^struct WalIndexHdr {$/;"	s	file:
WalIndexHdr	sqlite3_MFAW.c	/^typedef struct WalIndexHdr WalIndexHdr;$/;"	t	typeref:struct:WalIndexHdr	file:
WalIterator	sqlite3_MFAW.c	/^struct WalIterator {$/;"	s	file:
WalIterator	sqlite3_MFAW.c	/^typedef struct WalIterator WalIterator;$/;"	t	typeref:struct:WalIterator	file:
WalSegment	sqlite3_MFAW.c	/^  struct WalSegment {$/;"	s	struct:WalIterator	file:
WalWriter	sqlite3_MFAW.c	/^typedef struct WalWriter {$/;"	s	file:
WalWriter	sqlite3_MFAW.c	/^} WalWriter;$/;"	t	typeref:struct:WalWriter	file:
Walker	sqlite3_MFAW.c	/^struct Walker {$/;"	s	file:
Walker	sqlite3_MFAW.c	/^typedef struct Walker Walker;$/;"	t	typeref:struct:Walker	file:
WhereAndInfo	sqlite3_MFAW.c	/^struct WhereAndInfo {$/;"	s	file:
WhereAndInfo	sqlite3_MFAW.c	/^typedef struct WhereAndInfo WhereAndInfo;$/;"	t	typeref:struct:WhereAndInfo	file:
WhereClause	sqlite3_MFAW.c	/^struct WhereClause {$/;"	s	file:
WhereClause	sqlite3_MFAW.c	/^typedef struct WhereClause WhereClause;$/;"	t	typeref:struct:WhereClause	file:
WhereInfo	sqlite3_MFAW.c	/^struct WhereInfo {$/;"	s	file:
WhereInfo	sqlite3_MFAW.c	/^typedef struct WhereInfo WhereInfo;$/;"	t	typeref:struct:WhereInfo	file:
WhereLevel	sqlite3_MFAW.c	/^struct WhereLevel {$/;"	s	file:
WhereLevel	sqlite3_MFAW.c	/^typedef struct WhereLevel WhereLevel;$/;"	t	typeref:struct:WhereLevel	file:
WhereLoop	sqlite3_MFAW.c	/^struct WhereLoop {$/;"	s	file:
WhereLoop	sqlite3_MFAW.c	/^typedef struct WhereLoop WhereLoop;$/;"	t	typeref:struct:WhereLoop	file:
WhereLoopBuilder	sqlite3_MFAW.c	/^struct WhereLoopBuilder {$/;"	s	file:
WhereLoopBuilder	sqlite3_MFAW.c	/^typedef struct WhereLoopBuilder WhereLoopBuilder;$/;"	t	typeref:struct:WhereLoopBuilder	file:
WhereMaskSet	sqlite3_MFAW.c	/^struct WhereMaskSet {$/;"	s	file:
WhereMaskSet	sqlite3_MFAW.c	/^typedef struct WhereMaskSet WhereMaskSet;$/;"	t	typeref:struct:WhereMaskSet	file:
WhereOrCost	sqlite3_MFAW.c	/^struct WhereOrCost {$/;"	s	file:
WhereOrCost	sqlite3_MFAW.c	/^typedef struct WhereOrCost WhereOrCost;$/;"	t	typeref:struct:WhereOrCost	file:
WhereOrInfo	sqlite3_MFAW.c	/^struct WhereOrInfo {$/;"	s	file:
WhereOrInfo	sqlite3_MFAW.c	/^typedef struct WhereOrInfo WhereOrInfo;$/;"	t	typeref:struct:WhereOrInfo	file:
WhereOrSet	sqlite3_MFAW.c	/^struct WhereOrSet {$/;"	s	file:
WhereOrSet	sqlite3_MFAW.c	/^typedef struct WhereOrSet WhereOrSet;$/;"	t	typeref:struct:WhereOrSet	file:
WherePath	sqlite3_MFAW.c	/^struct WherePath {$/;"	s	file:
WherePath	sqlite3_MFAW.c	/^typedef struct WherePath WherePath;$/;"	t	typeref:struct:WherePath	file:
WhereScan	sqlite3_MFAW.c	/^struct WhereScan {$/;"	s	file:
WhereScan	sqlite3_MFAW.c	/^typedef struct WhereScan WhereScan;$/;"	t	typeref:struct:WhereScan	file:
WhereTerm	sqlite3_MFAW.c	/^struct WhereTerm {$/;"	s	file:
WhereTerm	sqlite3_MFAW.c	/^typedef struct WhereTerm WhereTerm;$/;"	t	typeref:struct:WhereTerm	file:
With	sqlite3_MFAW.c	/^struct With {$/;"	s	file:
With	sqlite3_MFAW.c	/^typedef struct With With;$/;"	t	typeref:struct:With	file:
Y	sqlite3_MFAW.c	/^  int Y, M, D;       \/* Year, month, and day *\/$/;"	m	struct:DateTime	file:
YYACTIONTYPE	sqlite3_MFAW.c	123515;"	d	file:
YYCODETYPE	sqlite3_MFAW.c	123513;"	d	file:
YYFALLBACK	sqlite3_MFAW.c	123546;"	d	file:
YYMINORTYPE	sqlite3_MFAW.c	/^} YYMINORTYPE;$/;"	t	typeref:union:__anon22	file:
YYNOCODE	sqlite3_MFAW.c	123514;"	d	file:
YYNOERRORRECOVERY	sqlite3_MFAW.c	123328;"	d	file:
YYNRULE	sqlite3_MFAW.c	123545;"	d	file:
YYNSTATE	sqlite3_MFAW.c	123544;"	d	file:
YYSTACKDEPTH	sqlite3_MFAW.c	123538;"	d	file:
YYWILDCARD	sqlite3_MFAW.c	123516;"	d	file:
YY_ACCEPT_ACTION	sqlite3_MFAW.c	123548;"	d	file:
YY_ACTTAB_COUNT	sqlite3_MFAW.c	123615;"	d	file:
YY_ERROR_ACTION	sqlite3_MFAW.c	123549;"	d	file:
YY_NO_ACTION	sqlite3_MFAW.c	123547;"	d	file:
YY_REDUCE_COUNT	sqlite3_MFAW.c	123970;"	d	file:
YY_REDUCE_MAX	sqlite3_MFAW.c	123972;"	d	file:
YY_REDUCE_MIN	sqlite3_MFAW.c	123971;"	d	file:
YY_REDUCE_USE_DFLT	sqlite3_MFAW.c	123969;"	d	file:
YY_SHIFT_COUNT	sqlite3_MFAW.c	123921;"	d	file:
YY_SHIFT_MAX	sqlite3_MFAW.c	123923;"	d	file:
YY_SHIFT_MIN	sqlite3_MFAW.c	123922;"	d	file:
YY_SHIFT_USE_DFLT	sqlite3_MFAW.c	123920;"	d	file:
_BSD_SOURCE	sqlite3_MFAW.c	168;"	d	file:
_BTREE_H_	sqlite3_MFAW.c	9360;"	d	file:
_FILE_OFFSET_BITS	sqlite3_MFAW.c	157;"	d	file:
_FTS3_HASH_H_	sqlite3_MFAW.c	132697;"	d	file:
_FTS3_TOKENIZER_H_	sqlite3_MFAW.c	132535;"	d	file:
_FTSINT_H	sqlite3_MFAW.c	132491;"	d	file:
_GNU_SOURCE	sqlite3_MFAW.c	164;"	d	file:
_HWTIME_H_	sqlite3_MFAW.c	19932;"	d	file:
_HWTIME_H_	sqlite3_MFAW.c	25602;"	d	file:
_HWTIME_H_	sqlite3_MFAW.c	33121;"	d	file:
_HWTIME_H_	sqlite3_MFAW.c	71332;"	d	file:
_LARGEFILE_SOURCE	sqlite3_MFAW.c	159;"	d	file:
_LARGE_FILE	sqlite3_MFAW.c	155;"	d	file:
_MSVC_H_	sqlite3_MFAW.c	67;"	d	file:
_OS_COMMON_H_	sqlite3_MFAW.c	19893;"	d	file:
_OS_COMMON_H_	sqlite3_MFAW.c	25563;"	d	file:
_OS_COMMON_H_	sqlite3_MFAW.c	33082;"	d	file:
_OS_SETUP_H_	sqlite3_MFAW.c	10555;"	d	file:
_OS_WIN_H_	sqlite3_MFAW.c	20091;"	d	file:
_PAGER_H_	sqlite3_MFAW.c	10133;"	d	file:
_SHM_RDLCK	sqlite3_MFAW.c	36719;"	d	file:
_SHM_UNLCK	sqlite3_MFAW.c	36718;"	d	file:
_SHM_WRLCK	sqlite3_MFAW.c	36720;"	d	file:
_SQLITE3EXT_H_	sqlite3_MFAW.c	101952;"	d	file:
_SQLITE3RTREE_H_	sqlite3_MFAW.c	7939;"	d	file:
_SQLITE3_H_	sqlite3_MFAW.c	242;"	d	file:
_SQLITEINT_H_	sqlite3_MFAW.c	42;"	d	file:
_SQLITE_HASH_H_	sqlite3_MFAW.c	8573;"	d	file:
_SQLITE_OS_C_	sqlite3_MFAW.c	16487;"	d	file:
_SQLITE_OS_C_	sqlite3_MFAW.c	16488;"	d	file:
_SQLITE_OS_H_	sqlite3_MFAW.c	10531;"	d	file:
_SQLITE_VDBE_H_	sqlite3_MFAW.c	9641;"	d	file:
_USE_32BIT_TIME_T	sqlite3_MFAW.c	200;"	d	file:
_VDBEINT_H_	sqlite3_MFAW.c	14525;"	d	file:
_WAL_H_	sqlite3_MFAW.c	41560;"	d	file:
_XOPEN_SOURCE	sqlite3_MFAW.c	8413;"	d	file:
__USE_GNU	mobibench.c	25;"	d	file:
__USE_GNU	mobibench_MFAW.c	25;"	d	file:
__declspec	sqlite3_MFAW.c	/^  __declspec(naked) __inline sqlite_uint64 __cdecl sqlite3Hwtime(void){$/;"	f
__declspec	sqlite3_MFAW.c	/^__declspec(dllexport)$/;"	f
_fts3ht	sqlite3_MFAW.c	/^  struct _fts3ht {        \/* the hash table *\/$/;"	s	struct:Fts3Hash	file:
_ht	sqlite3_MFAW.c	/^  struct _ht {              \/* the hash table *\/$/;"	s	struct:Hash	file:
_sqliteZone_	sqlite3_MFAW.c	/^static malloc_zone_t* _sqliteZone_;$/;"	v	file:
a	sqlite3_MFAW.c	/^  FuncDef *a[23];       \/* Hash table for functions *\/$/;"	m	struct:FuncDefHash	file:
a	sqlite3_MFAW.c	/^  Stat4Sample *a;           \/* Array of mxSample Stat4Sample objects *\/$/;"	m	struct:Stat4Accum	file:
a	sqlite3_MFAW.c	/^  WhereLevel a[1];          \/* Information about each nest loop in WHERE *\/$/;"	m	struct:WhereInfo	file:
a	sqlite3_MFAW.c	/^  WhereOrCost a[N_OR_COST];   \/* Set of best costs *\/$/;"	m	struct:WhereOrSet	file:
a	sqlite3_MFAW.c	/^  WhereTerm *a;            \/* Each a[] describes a term of the WHERE cluase *\/$/;"	m	struct:WhereClause	file:
a	sqlite3_MFAW.c	/^  char *a;                        \/* Pointer to allocation *\/$/;"	m	struct:Blob	file:
a	sqlite3_MFAW.c	/^  } *a;                  \/* Alloc a power of two greater or equal to nExpr *\/$/;"	m	struct:ExprList	typeref:struct:ExprList::ExprList_item	file:
a	sqlite3_MFAW.c	/^  } *a;$/;"	m	struct:IdList	typeref:struct:IdList::IdList_item	file:
a	sqlite3_MFAW.c	/^  } a[1];             \/* One entry for each identifier on the list *\/$/;"	m	struct:SrcList	typeref:struct:SrcList::SrcList_item	file:
a	sqlite3_MFAW.c	/^  } a[1];$/;"	m	struct:With	typeref:struct:With::Cte	file:
a	sqlite3_MFAW.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:
aAction	sqlite3_MFAW.c	/^  u8 aAction[2];        \/* ON DELETE and ON UPDATE actions, respectively *\/$/;"	m	struct:FKey	file:
aAll	sqlite3_MFAW.c	/^  char *aAll;                    \/* Array containing doclist (or NULL) *\/$/;"	m	struct:Fts3Doclist	file:
aAlloc	sqlite3_MFAW.c	/^  u8 *aAlloc;                 \/* Space for aKey if aBuffer and pMap wont work *\/$/;"	m	struct:PmaReader	file:
aAvgEq	sqlite3_MFAW.c	/^  tRowcnt *aAvgEq;         \/* Average nEq values for keys not in aSample *\/$/;"	m	struct:Index	file:
aBest	sqlite3_MFAW.c	/^  Stat4Sample *aBest;       \/* Array of nCol best samples *\/$/;"	m	struct:Stat4Accum	file:
aBitmap	sqlite3_MFAW.c	/^    BITVEC_TELEM aBitmap[BITVEC_NELEM];    \/* Bitmap representation *\/$/;"	m	union:Bitvec::__anon13	file:
aBuffer	sqlite3_MFAW.c	/^  char *aBuffer;                  \/* Buffer to merge doclists in *\/$/;"	m	struct:Fts3MultiSegReader	file:
aBuffer	sqlite3_MFAW.c	/^  u8 *aBuffer;                    \/* Pointer to write buffer *\/$/;"	m	struct:PmaWriter	file:
aBuffer	sqlite3_MFAW.c	/^  u8 *aBuffer;                \/* Current read buffer *\/$/;"	m	struct:PmaReader	file:
aCell	sqlite3_MFAW.c	/^  StatCell *aCell;                \/* Array of parsed cells *\/$/;"	m	struct:StatPage	file:
aCellIdx	sqlite3_MFAW.c	/^  u8 *aCellIdx;        \/* The cell index area *\/$/;"	m	struct:MemPage	file:
aChar	sqlite3_MFAW.c	/^  UChar *aChar;               \/* Copy of input using utf-16 encoding *\/$/;"	m	struct:IcuCursor	file:
aCksum	sqlite3_MFAW.c	/^  u32 aCksum[2];                  \/* Checksum over all prior fields *\/$/;"	m	struct:WalIndexHdr	file:
aCol	sqlite3_MFAW.c	/^  Column *aCol;        \/* Information about each column *\/$/;"	m	struct:Table	file:
aCol	sqlite3_MFAW.c	/^  } *aCol;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_col	file:
aCol	sqlite3_MFAW.c	/^  } aCol[1];            \/* One entry for each of nCol columns *\/$/;"	m	struct:FKey	typeref:struct:FKey::sColMap	file:
aColCache	sqlite3_MFAW.c	/^  } aColCache[SQLITE_N_COLCACHE];  \/* One for each column cache entry *\/$/;"	m	struct:Parse	typeref:struct:Parse::yColCache	file:
aColName	sqlite3_MFAW.c	/^  Mem *aColName;          \/* Column names to return *\/$/;"	m	struct:Vdbe	file:
aColl	sqlite3_MFAW.c	/^  CollSeq *aColl[1];  \/* Collating sequence for each term of the key *\/$/;"	m	struct:KeyInfo	file:
aCollSeq	sqlite3_MFAW.c	/^  Hash aCollSeq;                \/* All collating sequences *\/$/;"	m	struct:sqlite3	file:
aColmask	sqlite3_MFAW.c	/^  u32 aColmask[2];        \/* Masks of old.*, new.* columns accessed *\/$/;"	m	struct:TriggerPrg	file:
aConstraint	sqlite3_MFAW.c	/^  RtreeConstraint *aConstraint;     \/* Search constraints. *\/$/;"	m	struct:RtreeCursor	file:
aConstraint	sqlite3_MFAW.c	/^  } *aConstraint;            \/* Table of WHERE clause constraints *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint	file:
aConstraintUsage	sqlite3_MFAW.c	/^  } *aConstraintUsage;$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
aCoord	sqlite3_MFAW.c	/^  RtreeCoord aCoord[RTREE_MAX_DIMENSIONS*2];  \/* Bounding box coordinates *\/$/;"	m	struct:RtreeCell	file:
aCoord	sqlite3_MFAW.c	/^  sqlite3_rtree_dbl *aCoord;        \/* Coordinates of node or entry to check *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
aCounter	sqlite3_MFAW.c	/^  u32 aCounter[5];        \/* Counters used by sqlite3_stmt_status() *\/$/;"	m	struct:Vdbe	file:
aCtrl	sqlite3_MFAW.c	/^  u8 *aCtrl;$/;"	m	struct:Mem5Global	file:
aData	sqlite3_MFAW.c	/^  char *aData;                    \/* Node data *\/$/;"	m	struct:SegmentNode	file:
aData	sqlite3_MFAW.c	/^  char *aData;                    \/* Pointer to block from malloc() *\/$/;"	m	struct:SegmentWriter	file:
aData	sqlite3_MFAW.c	/^  char *aData;$/;"	m	struct:PendingList	file:
aData	sqlite3_MFAW.c	/^  u8 *aData;           \/* Pointer to disk image of the page data *\/$/;"	m	struct:MemPage	file:
aDataEnd	sqlite3_MFAW.c	/^  u8 *aDataEnd;        \/* One byte past the end of usable data *\/$/;"	m	struct:MemPage	file:
aDb	sqlite3_MFAW.c	/^  Db *aDb;                      \/* All backends *\/$/;"	m	struct:sqlite3	file:
aDbStatic	sqlite3_MFAW.c	/^  Db aDbStatic[2];              \/* Static space for the 2 default backends *\/$/;"	m	struct:sqlite3	file:
aDigits	sqlite3_MFAW.c	/^static const char aDigits[] = "0123456789ABCDEF0123456789abcdef";$/;"	v	file:
aDoclist	sqlite3_MFAW.c	/^  char *aDoclist;                 \/* List of docids for full-text queries *\/$/;"	m	struct:Fts3Cursor	file:
aDoclist	sqlite3_MFAW.c	/^  char *aDoclist;                 \/* Pointer to doclist buffer *\/$/;"	m	struct:Fts3MultiSegReader	file:
aDoclist	sqlite3_MFAW.c	/^  char *aDoclist;                 \/* Pointer to doclist of current entry *\/$/;"	m	struct:Fts3SegReader	file:
aDoclist	sqlite3_MFAW.c	/^  const char *aDoclist;           \/* Pointer to doclist *\/$/;"	m	struct:NodeReader	file:
aEntry	sqlite3_MFAW.c	/^  struct RowSetEntry aEntry[ROWSET_ENTRY_PER_CHUNK]; \/* Allocated entries *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetEntry	file:
aEquiv	sqlite3_MFAW.c	/^  int aEquiv[22];            \/* Cursor,Column pairs for equivalence classes *\/$/;"	m	struct:WhereScan	file:
aExt	sqlite3_MFAW.c	/^  void (**aExt)(void);   \/* Pointers to the extension init functions *\/$/;"	m	struct:sqlite3AutoExtList	file:
aExtension	sqlite3_MFAW.c	/^  void **aExtension;            \/* Array of shared library handles *\/$/;"	m	struct:sqlite3	file:
aFile	sqlite3_MFAW.c	/^  SorterFile aFile[2];            \/* aFile[0] for reading, [1] for writing *\/$/;"	m	struct:IncrMerger	file:
aFrameCksum	sqlite3_MFAW.c	/^  u32 aFrameCksum[2];             \/* Checksum of last frame in log *\/$/;"	m	struct:WalIndexHdr	file:
aFunc	sqlite3_MFAW.c	/^  FuncDefHash aFunc;            \/* Hash table of connection functions *\/$/;"	m	struct:sqlite3	file:
aFunc	sqlite3_MFAW.c	/^  } *aFunc;$/;"	m	struct:AggInfo	typeref:struct:AggInfo::AggInfo_func	file:
aHardLimit	sqlite3_MFAW.c	/^static const int aHardLimit[] = {$/;"	v	file:
aHash	sqlite3_MFAW.c	/^    u32 aHash[BITVEC_NINT];      \/* Hash table representation *\/$/;"	m	union:Bitvec::__anon13	file:
aHash	sqlite3_MFAW.c	/^  RtreeNode *aHash[HASHSIZE]; \/* Hash table of in-memory nodes. *\/ $/;"	m	struct:Rtree	file:
aInLoop	sqlite3_MFAW.c	/^      } *aInLoop;           \/* Information about each nested IN operator *\/$/;"	m	struct:WhereLevel::__anon16::__anon17	typeref:struct:WhereLevel::__anon16::__anon17::InLoop	file:
aIndent	sqlite3_MFAW.c	/^  u16 aIndent[100];  \/* Levels of indentation *\/$/;"	m	struct:Explain	file:
aIndex	sqlite3_MFAW.c	/^    ht_slot *aIndex;              \/* i0, i1, i2... such that aPgno[iN] ascend *\/$/;"	m	struct:WalIterator::WalSegment	file:
aIndex	sqlite3_MFAW.c	/^  } *aIndex;$/;"	m	struct:Fts3Table	typeref:struct:Fts3Table::Fts3Index	file:
aInput	sqlite3_MFAW.c	/^  const unsigned char *aInput;    \/* Input text being tokenized *\/$/;"	m	struct:unicode_cursor	file:
aJournalMagic	sqlite3_MFAW.c	/^static const unsigned char aJournalMagic[] = {$/;"	v	file:
aKey	sqlite3_MFAW.c	/^  u8 *aKey;                   \/* Pointer to current key *\/$/;"	m	struct:PmaReader	file:
aLTerm	sqlite3_MFAW.c	/^  WhereTerm **aLTerm;   \/* WhereTerms used *\/$/;"	m	struct:WhereLoop	file:
aLTermSpace	sqlite3_MFAW.c	/^  WhereTerm *aLTermSpace[3];  \/* Initial aLTerm[] space *\/$/;"	m	struct:WhereLoop	file:
aLabel	sqlite3_MFAW.c	/^  int *aLabel;         \/* Space to hold the labels *\/$/;"	m	struct:Parse	file:
aLimit	sqlite3_MFAW.c	/^  int aLimit[SQLITE_N_LIMIT];   \/* Limits *\/$/;"	m	struct:sqlite3	file:
aLoop	sqlite3_MFAW.c	/^  WhereLoop **aLoop;    \/* Array of WhereLoop objects implementing this path *\/$/;"	m	struct:WherePath	file:
aMI	sqlite3_MFAW.c	/^  u32 *aMI;$/;"	m	struct:Fts3Expr	file:
aMap	sqlite3_MFAW.c	/^  u8 *aMap;                   \/* Pointer to mapping of entire file *\/$/;"	m	struct:PmaReader	file:
aMatchinfo	sqlite3_MFAW.c	/^  u32 *aMatchinfo;                \/* Information about most recent match *\/$/;"	m	struct:Fts3Cursor	file:
aMatchinfo	sqlite3_MFAW.c	/^  u32 *aMatchinfo;                \/* Pre-allocated buffer *\/$/;"	m	struct:MatchInfo	file:
aMem	sqlite3_MFAW.c	/^  Mem *aMem;              \/* Array of memory cells for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aMem	sqlite3_MFAW.c	/^  Mem *aMem;              \/* The memory locations *\/$/;"	m	struct:Vdbe	file:
aMem	sqlite3_MFAW.c	/^  Mem *aMem;          \/* Values *\/$/;"	m	struct:UnpackedRecord	file:
aMemory	sqlite3_MFAW.c	/^  u8 *aMemory;                    \/* If non-NULL, bulk memory to hold pList *\/$/;"	m	struct:SorterList	file:
aModule	sqlite3_MFAW.c	/^  Hash aModule;                 \/* populated by sqlite3_create_module() *\/$/;"	m	struct:sqlite3	file:
aNode	sqlite3_MFAW.c	/^  RtreeNode *aNode[RTREE_CACHE_SZ]; \/* Rtree node cache *\/$/;"	m	struct:RtreeCursor	file:
aNode	sqlite3_MFAW.c	/^  char *aNode;                    \/* Pointer to node data (or NULL) *\/$/;"	m	struct:Fts3SegReader	file:
aNode	sqlite3_MFAW.c	/^  const char *aNode;$/;"	m	struct:NodeReader	file:
aNodeWriter	sqlite3_MFAW.c	/^  NodeWriter aNodeWriter[FTS_MAX_APPENDABLE_HEIGHT];$/;"	m	struct:IncrmergeWriter	file:
aOffset	sqlite3_MFAW.c	/^  int *aOffset;               \/* Offsets of each character in utf-8 input *\/$/;"	m	struct:IcuCursor	file:
aOffset	sqlite3_MFAW.c	/^  u32 *aOffset;         \/* Pointer to aType[nField] *\/$/;"	m	struct:VdbeCursor	file:
aOnceFlag	sqlite3_MFAW.c	/^  u8 *aOnceFlag;          \/* Array of OP_Once flags for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aOnceFlag	sqlite3_MFAW.c	/^  u8 *aOnceFlag;          \/* Flags for OP_Once *\/$/;"	m	struct:Vdbe	file:
aOp	sqlite3_MFAW.c	/^  Op *aOp;                \/* Program instructions for parent frame *\/$/;"	m	struct:VdbeFrame	file:
aOp	sqlite3_MFAW.c	/^  Op *aOp;                \/* Space to hold the virtual machine's program *\/$/;"	m	struct:Vdbe	file:
aOp	sqlite3_MFAW.c	/^  VdbeOp *aOp;                  \/* Array of opcodes for sub-program *\/$/;"	m	struct:SubProgram	file:
aOrderBy	sqlite3_MFAW.c	/^  } *aOrderBy;               \/* The ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	typeref:struct:sqlite3_index_info::sqlite3_index_orderby	file:
aOverflow	sqlite3_MFAW.c	/^  Pgno *aOverflow;          \/* Cache of overflow page locations *\/$/;"	m	struct:BtCursor	file:
aOvfl	sqlite3_MFAW.c	/^  u32 *aOvfl;                     \/* Array of overflow page numbers *\/$/;"	m	struct:StatCell	file:
aPadding	sqlite3_MFAW.c	/^  char aPadding[32];$/;"	m	struct:unixFile	file:
aPage	sqlite3_MFAW.c	/^  StatPage aPage[32];$/;"	m	struct:StatCursor	file:
aParam	sqlite3_MFAW.c	/^  RtreeDValue aParam[1];      \/* Values for parameters to the SQL function *\/$/;"	m	struct:RtreeMatchArg	file:
aParam	sqlite3_MFAW.c	/^  sqlite3_rtree_dbl *aParam;        \/* value of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
aParam	sqlite3_MFAW.c	/^  sqlite3_rtree_dbl *aParam;      \/* Parameters passed to SQL geom function *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
aPgRef	sqlite3_MFAW.c	/^  u8 *aPgRef;       \/* 1 bit per page in the db (see above) *\/$/;"	m	struct:IntegrityCk	file:
aPgno	sqlite3_MFAW.c	/^    u32 *aPgno;                   \/* Array of page numbers. *\/$/;"	m	struct:WalIterator::WalSegment	file:
aPhrase	sqlite3_MFAW.c	/^  SnippetPhrase *aPhrase;         \/* Array of size nPhrase *\/$/;"	m	struct:SnippetIter	file:
aPoint	sqlite3_MFAW.c	/^  RtreeSearchPoint *aPoint;         \/* Priority queue for search points *\/$/;"	m	struct:RtreeCursor	file:
aPool	sqlite3_MFAW.c	/^  Mem3Block *aPool;$/;"	m	struct:Mem3Global	file:
aPragmaNames	sqlite3_MFAW.c	/^} aPragmaNames[] = {$/;"	v	typeref:struct:sPragmaNames	file:
aPrefix	sqlite3_MFAW.c	/^static const char aPrefix[] = "-x0\\000X0";$/;"	v	file:
aReadMark	sqlite3_MFAW.c	/^  u32 aReadMark[WAL_NREADER];     \/* Reader marks *\/$/;"	m	struct:WalCkptInfo	file:
aReadr	sqlite3_MFAW.c	/^  PmaReader *aReadr;         \/* Array of PmaReaders to merge data from *\/$/;"	m	struct:MergeEngine	file:
aRegion	sqlite3_MFAW.c	/^  } *aRegion;$/;"	m	struct:winShmNode	typeref:struct:winShmNode::ShmRegion	file:
aRow	sqlite3_MFAW.c	/^  const u8 *aRow;       \/* Data for the current row, if all on one page *\/$/;"	m	struct:VdbeCursor	file:
aRowid	sqlite3_MFAW.c	/^    u8 *aRowid;                     \/* Key for WITHOUT ROWID tables *\/$/;"	m	union:Stat4Sample::__anon15	file:
aSalt	sqlite3_MFAW.c	/^  u32 aSalt[2];                   \/* Two salt values copied from WAL header *\/$/;"	m	struct:WalIndexHdr	file:
aSample	sqlite3_MFAW.c	/^  IndexSample *aSample;    \/* Samples of the left-most key *\/$/;"	m	struct:Index	file:
aSavepoint	sqlite3_MFAW.c	/^  PagerSavepoint *aSavepoint; \/* Array of active savepoints *\/$/;"	m	struct:Pager	file:
aScan	sqlite3_MFAW.c	/^  ScanStatus *aScan;      \/* Scan definitions for sqlite3_stmt_scanstatus() *\/$/;"	m	struct:Vdbe	file:
aSegment	sqlite3_MFAW.c	/^  } aSegment[1];                  \/* One for every 32KB page in the wal-index *\/$/;"	m	struct:WalIterator	typeref:struct:WalIterator::WalSegment	file:
aSemName	sqlite3_MFAW.c	/^  char aSemName[MAX_PATHNAME+2];  \/* Name of that semaphore *\/$/;"	m	struct:unixInodeInfo	file:
aSortOrder	sqlite3_MFAW.c	/^  u8 *aSortOrder;          \/* for each column: True==DESC, False==ASC *\/$/;"	m	struct:Index	file:
aSortOrder	sqlite3_MFAW.c	/^  u8 *aSortOrder;     \/* Sort order for each column. *\/$/;"	m	struct:KeyInfo	file:
aStat	sqlite3_MFAW.c	/^  int aStat[3];               \/* Total cache hits, misses and writes *\/$/;"	m	struct:Pager	file:
aStat	sqlite3_MFAW.c	/^  } *aStat;$/;"	m	struct:Fts3auxCursor	typeref:struct:Fts3auxCursor::Fts3auxColstats	file:
aStatic	sqlite3_MFAW.c	/^  WhereTerm aStatic[1];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:
aStatic	sqlite3_MFAW.c	/^  WhereTerm aStatic[8];    \/* Initial static space for a[] *\/$/;"	m	struct:WhereClause	file:
aStmt	sqlite3_MFAW.c	/^  sqlite3_stmt *aStmt[40];$/;"	m	struct:Fts3Table	file:
aSyscall	sqlite3_MFAW.c	/^} aSyscall[] = {$/;"	v	typeref:struct:unix_syscall	file:
aSyscall	sqlite3_MFAW.c	/^} aSyscall[] = {$/;"	v	typeref:struct:win_syscall	file:
aTableLock	sqlite3_MFAW.c	/^  TableLock *aTableLock; \/* Required table locks for shared-cache mode *\/$/;"	m	struct:Parse	file:
aTask	sqlite3_MFAW.c	/^  SortSubtask aTask[1];           \/* One or more subtasks *\/$/;"	m	struct:VdbeSorter	file:
aTempReg	sqlite3_MFAW.c	/^  int aTempReg[8];     \/* Holding area for temporary registers *\/$/;"	m	struct:Parse	file:
aTerm	sqlite3_MFAW.c	/^  TermOffset *aTerm;$/;"	m	struct:TermOffsetCtx	file:
aToken	sqlite3_MFAW.c	/^  Fts3PhraseToken aToken[1]; \/* One entry for each token in the phrase *\/$/;"	m	struct:Fts3Phrase	file:
aTree	sqlite3_MFAW.c	/^  int *aTree;                \/* Current state of incremental merge *\/$/;"	m	struct:MergeEngine	file:
aType	sqlite3_MFAW.c	/^  u32 aType[1];         \/* Type values for all entries in the record *\/$/;"	m	struct:VdbeCursor	file:
aVTrans	sqlite3_MFAW.c	/^  VTable **aVTrans;             \/* Virtual tables with open transactions *\/$/;"	m	struct:sqlite3	file:
aVar	sqlite3_MFAW.c	/^  Mem *aVar;              \/* Values for the OP_Variable opcode. *\/$/;"	m	struct:Vdbe	file:
aWalData	sqlite3_MFAW.c	/^  u32 aWalData[WAL_SAVEPOINT_NDATA];        \/* WAL savepoint context *\/$/;"	m	struct:PagerSavepoint	file:
aaOutput	sqlite3_MFAW.c	/^  char *aaOutput[16];             \/* Malloc'd output buffers *\/$/;"	m	struct:TermSelect	file:
abNotindexed	sqlite3_MFAW.c	/^  u8 *abNotindexed;               \/* True for 'notindexed' columns *\/$/;"	m	struct:Fts3Table	file:
absFunc	sqlite3_MFAW.c	/^static void absFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
accError	sqlite3_MFAW.c	/^  u8   accError;       \/* STRACCUM_NOMEM or STRACCUM_TOOBIG *\/$/;"	m	struct:StrAccum	file:
accessPayload	sqlite3_MFAW.c	/^static int accessPayload($/;"	f	file:
actionName	sqlite3_MFAW.c	/^static const char *actionName(u8 action){$/;"	f	file:
addAggInfoColumn	sqlite3_MFAW.c	/^static int addAggInfoColumn(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addAggInfoFunc	sqlite3_MFAW.c	/^static int addAggInfoFunc(sqlite3 *db, AggInfo *pInfo){$/;"	f	file:
addArgumentToVtab	sqlite3_MFAW.c	/^static void addArgumentToVtab(Parse *pParse){$/;"	f	file:
addColOffset	sqlite3_MFAW.c	/^  int addColOffset;    \/* Offset in CREATE TABLE stmt to add a new column *\/$/;"	m	struct:Table	file:
addModuleArgument	sqlite3_MFAW.c	/^static void addModuleArgument(sqlite3 *db, Table *pTable, char *zArg){$/;"	f	file:
addScanStatus	sqlite3_MFAW.c	/^static void addScanStatus($/;"	f	file:
addScanStatus	sqlite3_MFAW.c	119458;"	d	file:
addToBlockedList	sqlite3_MFAW.c	/^static void addToBlockedList(sqlite3 *db){$/;"	f	file:
addToSavepointBitvecs	sqlite3_MFAW.c	/^static int addToSavepointBitvecs(Pager *pPager, Pgno pgno){$/;"	f	file:
addToVTrans	sqlite3_MFAW.c	/^static void addToVTrans(sqlite3 *db, VTable *pVTab){$/;"	f	file:
addWhereTerm	sqlite3_MFAW.c	/^static void addWhereTerm($/;"	f	file:
addrBody	sqlite3_MFAW.c	/^  int addrBody;         \/* Beginning of the body of this loop *\/$/;"	m	struct:WhereLevel	file:
addrBrk	sqlite3_MFAW.c	/^  int addrBrk;          \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereLevel	file:
addrCont	sqlite3_MFAW.c	/^  int addrCont;         \/* Jump here to continue with the next loop cycle *\/$/;"	m	struct:WhereLevel	file:
addrCrTab	sqlite3_MFAW.c	/^  int addrCrTab;       \/* Address of OP_CreateTable opcode on CREATE TABLE *\/$/;"	m	struct:Parse	file:
addrExplain	sqlite3_MFAW.c	/^  int addrExplain;                \/* OP_Explain for loop *\/$/;"	m	struct:ScanStatus	file:
addrFillSub	sqlite3_MFAW.c	/^    int addrFillSub;  \/* Address of subroutine to manifest a subquery *\/$/;"	m	struct:SrcList::SrcList_item	file:
addrFirst	sqlite3_MFAW.c	/^  int addrFirst;        \/* First instruction of interior of the loop *\/$/;"	m	struct:WhereLevel	file:
addrInTop	sqlite3_MFAW.c	/^        int addrInTop;         \/* Top of the IN loop *\/$/;"	m	struct:WhereLevel::__anon16::__anon17::InLoop	file:
addrLikeRep	sqlite3_MFAW.c	/^  int addrLikeRep;      \/* LIKE range processing address *\/$/;"	m	struct:WhereLevel	file:
addrLoop	sqlite3_MFAW.c	/^  int addrLoop;                   \/* Address of "loops" counter *\/$/;"	m	struct:ScanStatus	file:
addrNxt	sqlite3_MFAW.c	/^  int addrNxt;          \/* Jump here to start the next IN combination *\/$/;"	m	struct:WhereLevel	file:
addrOpenEphm	sqlite3_MFAW.c	/^  int addrOpenEphm[2];   \/* OP_OpenEphem opcodes related to this select *\/$/;"	m	struct:Select	file:
addrSkip	sqlite3_MFAW.c	/^  int addrSkip;         \/* Jump here for next iteration of skip-scan *\/$/;"	m	struct:WhereLevel	file:
addrSkipPK	sqlite3_MFAW.c	/^  int addrSkipPK;      \/* Address of instruction to skip PRIMARY KEY index *\/$/;"	m	struct:Parse	file:
addrSortIndex	sqlite3_MFAW.c	/^  int addrSortIndex;    \/* Address of the OP_SorterOpen or OP_OpenEphemeral *\/$/;"	m	struct:SortCtx	file:
addrTnct	sqlite3_MFAW.c	/^  int addrTnct;   \/* Address of OP_OpenEphemeral opcode for tabTnct *\/$/;"	m	struct:DistinctCtx	file:
addrVisit	sqlite3_MFAW.c	/^  int addrVisit;                  \/* Address of "rows visited" counter *\/$/;"	m	struct:ScanStatus	file:
addrVisit	sqlite3_MFAW.c	/^  int addrVisit;        \/* Address at which row is visited *\/$/;"	m	struct:WhereLevel	file:
adjustStats	sqlite3_MFAW.c	/^static void adjustStats(int iSize, int increment){$/;"	f	file:
affSdst	sqlite3_MFAW.c	/^  char affSdst;        \/* Affinity used when eDest==SRT_Set *\/$/;"	m	struct:SelectDest	file:
affinity	sqlite3_MFAW.c	/^  char affinity;         \/* The affinity of the column or 0 if not a column *\/$/;"	m	struct:Expr	file:
affinity	sqlite3_MFAW.c	/^  char affinity;   \/* One of the SQLITE_AFF_... values *\/$/;"	m	struct:Column	file:
afpCheckReservedLock	sqlite3_MFAW.c	/^static int afpCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
afpClose	sqlite3_MFAW.c	/^static int afpClose(sqlite3_file *id) {$/;"	f	file:
afpLock	sqlite3_MFAW.c	/^static int afpLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
afpLockingContext	sqlite3_MFAW.c	/^struct afpLockingContext {$/;"	s	file:
afpLockingContext	sqlite3_MFAW.c	/^typedef struct afpLockingContext afpLockingContext;$/;"	t	typeref:struct:afpLockingContext	file:
afpSetLock	sqlite3_MFAW.c	/^static int afpSetLock($/;"	f	file:
afpUnlock	sqlite3_MFAW.c	/^static int afpUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
afpfsByteRangeLock2FSCTL	sqlite3_MFAW.c	28124;"	d	file:
aggregate_context	sqlite3_MFAW.c	/^  void * (*aggregate_context)(sqlite3_context*,int nBytes);$/;"	m	struct:sqlite3_api_routines	file:
aggregate_count	sqlite3_MFAW.c	/^  int  (*aggregate_count)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
ai	sqlite3_MFAW.c	/^    int *ai;               \/* Used when p4type is P4_INTARRAY *\/$/;"	m	union:VdbeOp::__anon1	file:
aiColumn	sqlite3_MFAW.c	/^  i16 *aiColumn;           \/* Which columns are used by this index.  1st is 0 *\/$/;"	m	struct:Index	file:
aiCurOnePass	sqlite3_MFAW.c	/^  int aiCurOnePass[2];      \/* OP_OpenWrite cursors for the ONEPASS opt *\/$/;"	m	struct:WhereInfo	file:
aiException	sqlite3_MFAW.c	/^  int *aiException;$/;"	m	struct:unicode_tokenizer	file:
aiFreelist	sqlite3_MFAW.c	/^  int aiFreelist[LOGMAX+1];$/;"	m	struct:Mem5Global	file:
aiHash	sqlite3_MFAW.c	/^  u32 aiHash[N_HASH];        \/* For sizes MX_SMALL+1 and larger *\/$/;"	m	struct:Mem3Global	file:
aiIdx	sqlite3_MFAW.c	/^  u16 aiIdx[BTCURSOR_MAX_DEPTH];        \/* Current index in apPage[i] *\/$/;"	m	struct:BtCursor	file:
aiOvfl	sqlite3_MFAW.c	/^  u16 aiOvfl[5];       \/* Insert the i-th overflow cell before the aiOvfl-th$/;"	m	struct:MemPage	file:
aiRowEst	sqlite3_MFAW.c	/^  tRowcnt *aiRowEst;       \/* Non-logarithmic stat1 data for this index *\/$/;"	m	struct:Index	file:
aiRowLogEst	sqlite3_MFAW.c	/^  LogEst *aiRowLogEst;     \/* From ANALYZE: Est. rows selected by each column *\/$/;"	m	struct:Index	file:
aiSmall	sqlite3_MFAW.c	/^  u32 aiSmall[MX_SMALL-1];   \/* For sizes 2 through MX_SMALL, inclusive *\/$/;"	m	struct:Mem3Global	file:
alarmArg	sqlite3_MFAW.c	/^  void *alarmArg;$/;"	m	struct:Mem0Global	file:
alarmBusy	sqlite3_MFAW.c	/^  int alarmBusy;$/;"	m	struct:Mem3Global	file:
alarmCallback	sqlite3_MFAW.c	/^  void (*alarmCallback)(void*, sqlite3_int64,int);$/;"	m	struct:Mem0Global	file:
alarmThreshold	sqlite3_MFAW.c	/^  sqlite3_int64 alarmThreshold;$/;"	m	struct:Mem0Global	file:
allSpaces	sqlite3_MFAW.c	/^static int allSpaces(const char *z, int n){$/;"	f	file:
allocSpace	sqlite3_MFAW.c	/^static void *allocSpace($/;"	f	file:
allocateBtreePage	sqlite3_MFAW.c	/^static int allocateBtreePage($/;"	f	file:
allocateCursor	sqlite3_MFAW.c	/^static VdbeCursor *allocateCursor($/;"	f	file:
allocateIndexInfo	sqlite3_MFAW.c	/^static sqlite3_index_info *allocateIndexInfo($/;"	f	file:
allocateSpace	sqlite3_MFAW.c	/^static int allocateSpace(MemPage *pPage, int nByte, int *pIdx){$/;"	f	file:
allocateTempSpace	sqlite3_MFAW.c	/^static void allocateTempSpace(BtShared *pBt){$/;"	f	file:
allowedOp	sqlite3_MFAW.c	/^static int allowedOp(int op){$/;"	f	file:
anDLt	sqlite3_MFAW.c	/^  tRowcnt *anDLt;                 \/* sqlite_stat4.nDLt *\/$/;"	m	struct:Stat4Sample	file:
anDLt	sqlite3_MFAW.c	/^  tRowcnt *anDLt;   \/* Est. number of distinct keys less than this sample *\/$/;"	m	struct:IndexSample	file:
anEq	sqlite3_MFAW.c	/^  tRowcnt *anEq;                  \/* sqlite_stat4.nEq *\/$/;"	m	struct:Stat4Sample	file:
anEq	sqlite3_MFAW.c	/^  tRowcnt *anEq;    \/* Est. number of rows where the key equals this sample *\/$/;"	m	struct:IndexSample	file:
anExec	sqlite3_MFAW.c	/^  i64 *anExec;            \/* Event counters from parent frame *\/$/;"	m	struct:VdbeFrame	file:
anExec	sqlite3_MFAW.c	/^  i64 *anExec;            \/* Number of times each op has been executed *\/$/;"	m	struct:Vdbe	file:
anLt	sqlite3_MFAW.c	/^  tRowcnt *anLt;                  \/* sqlite_stat4.nLt *\/$/;"	m	struct:Stat4Sample	file:
anLt	sqlite3_MFAW.c	/^  tRowcnt *anLt;    \/* Est. number of rows where key is less than this sample *\/$/;"	m	struct:IndexSample	file:
anOutput	sqlite3_MFAW.c	/^  int anOutput[16];               \/* Size each output buffer in bytes *\/$/;"	m	struct:TermSelect	file:
anQueue	sqlite3_MFAW.c	/^  u32 anQueue[RTREE_MAX_DEPTH+1];   \/* Number of queued entries by iLevel *\/$/;"	m	struct:RtreeCursor	file:
anQueue	sqlite3_MFAW.c	/^  unsigned int *anQueue;            \/* Number of pending entries in the queue *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
anStat	sqlite3_MFAW.c	/^  int anStat[3];          \/* 0: hits.  1: size misses.  2: full misses *\/$/;"	m	struct:Lookaside	file:
analysisInfo	sqlite3_MFAW.c	/^struct analysisInfo {$/;"	s	file:
analysisInfo	sqlite3_MFAW.c	/^typedef struct analysisInfo analysisInfo;$/;"	t	typeref:struct:analysisInfo	file:
analysisLoader	sqlite3_MFAW.c	/^static int analysisLoader(void *pData, int argc, char **argv, char **NotUsed){$/;"	f	file:
analyzeAggregate	sqlite3_MFAW.c	/^static int analyzeAggregate(Walker *pWalker, Expr *pExpr){$/;"	f	file:
analyzeAggregatesInSelect	sqlite3_MFAW.c	/^static int analyzeAggregatesInSelect(Walker *pWalker, Select *pSelect){$/;"	f	file:
analyzeDatabase	sqlite3_MFAW.c	/^static void analyzeDatabase(Parse *pParse, int iDb){$/;"	f	file:
analyzeOneTable	sqlite3_MFAW.c	/^static void analyzeOneTable($/;"	f	file:
analyzeTable	sqlite3_MFAW.c	/^static void analyzeTable(Parse *pParse, Table *pTab, Index *pOnlyIdx){$/;"	f	file:
apArg	sqlite3_MFAW.c	/^  Mem **apArg;            \/* Arguments to currently executing user function *\/$/;"	m	struct:Vdbe	file:
apArg	sqlite3_MFAW.c	/^  sqlite3_value **apArg;   \/* The argument values *\/$/;"	m	struct:PrintfArguments	file:
apCsr	sqlite3_MFAW.c	/^  VdbeCursor **apCsr;     \/* Array of Vdbe cursors for parent frame *\/$/;"	m	struct:VdbeFrame	file:
apCsr	sqlite3_MFAW.c	/^  VdbeCursor **apCsr;     \/* One element of this array for each open cursor *\/$/;"	m	struct:Vdbe	file:
apHash	sqlite3_MFAW.c	/^  PgHdr1 **apHash;                    \/* Hash table for fast lookup by key *\/$/;"	m	struct:PCache1	file:
apOvfl	sqlite3_MFAW.c	/^  u8 *apOvfl[5];       \/* Pointers to the body of overflow cells *\/$/;"	m	struct:MemPage	file:
apPage	sqlite3_MFAW.c	/^  MemPage *apPage[BTCURSOR_MAX_DEPTH];  \/* Pages from root to current page *\/$/;"	m	struct:BtCursor	file:
apRegion	sqlite3_MFAW.c	/^  char **apRegion;           \/* Array of mapped shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
apSegment	sqlite3_MFAW.c	/^  Fts3SegReader **apSegment;      \/* Array of Fts3SegReader objects *\/$/;"	m	struct:Fts3MultiSegReader	file:
apSub	sqlite3_MFAW.c	/^    Bitvec *apSub[BITVEC_NPTR];  \/* Recursive representation *\/$/;"	m	union:Bitvec::__anon13	file:
apSub	sqlite3_MFAW.c	/^  SubProgram **apSub;        \/* Array of subprograms *\/$/;"	m	struct:VdbeOpIter	file:
apTrigger	sqlite3_MFAW.c	/^  Trigger *apTrigger[2];\/* Triggers for aAction[] actions *\/$/;"	m	struct:FKey	file:
apVtabLock	sqlite3_MFAW.c	/^  Table **apVtabLock;       \/* Pointer to virtual tables needing locking *\/$/;"	m	struct:Parse	file:
apWiData	sqlite3_MFAW.c	/^  volatile u32 **apWiData;   \/* Pointer to wal-index content in memory *\/$/;"	m	struct:Wal	file:
apiOomError	sqlite3_MFAW.c	/^static SQLITE_NOINLINE int apiOomError(sqlite3 *db){$/;"	f	file:
applyAffinity	sqlite3_MFAW.c	/^static void applyAffinity($/;"	f	file:
applyNumericAffinity	sqlite3_MFAW.c	/^static void applyNumericAffinity(Mem *pRec, int bTryForInt){$/;"	f	file:
approx	sqlite3_MFAW.c	/^  u8 approx;        \/* True if non-integer value was input to the sum *\/$/;"	m	struct:SumCtx	file:
arg_num	mobibench.c	/^	int arg_num;$/;"	m	struct:script_entry	file:
arg_num	mobibench_MFAW.c	/^	int arg_num;$/;"	m	struct:script_entry	file:
args	mobibench.c	/^	char* args[3];$/;"	m	struct:script_entry	file:
args	mobibench_MFAW.c	/^	char* args[3];$/;"	m	struct:script_entry	file:
argvIndex	sqlite3_MFAW.c	/^    int argvIndex;           \/* if >0, constraint is part of argv to xFilter *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
assertCellInfo	sqlite3_MFAW.c	/^  static void assertCellInfo(BtCursor *pCur){$/;"	f	file:
assertCellInfo	sqlite3_MFAW.c	57093;"	d	file:
assertMutexHeld	sqlite3_MFAW.c	131880;"	d	file:
assertParentIndex	sqlite3_MFAW.c	/^static void assertParentIndex(MemPage *pParent, int iIdx, Pgno iChild){$/;"	f	file:
assertParentIndex	sqlite3_MFAW.c	57668;"	d	file:
assertTruncateConstraint	sqlite3_MFAW.c	/^static void assertTruncateConstraint(Pager *pPager){$/;"	f	file:
assertTruncateConstraint	sqlite3_MFAW.c	45493;"	d	file:
assertTruncateConstraintCb	sqlite3_MFAW.c	/^static void assertTruncateConstraintCb(PgHdr *pPg){$/;"	f	file:
assert_pager_state	sqlite3_MFAW.c	/^static int assert_pager_state(Pager *p){$/;"	f	file:
atEOF	sqlite3_MFAW.c	/^  u8 atEOF;                         \/* True if at end of search *\/$/;"	m	struct:RtreeCursor	file:
attachBackupObject	sqlite3_MFAW.c	/^static void attachBackupObject(sqlite3_backup *p){$/;"	f	file:
attachFunc	sqlite3_MFAW.c	/^static void attachFunc($/;"	f	file:
auth	sqlite3_MFAW.c	/^  sqlite3_userauth auth;        \/* User authentication information *\/$/;"	m	struct:sqlite3	file:
authLevel	sqlite3_MFAW.c	/^  u8 authLevel;                 \/* Current authentication level *\/$/;"	m	struct:sqlite3_userauth	file:
autoCommit	sqlite3_MFAW.c	/^  u8 autoCommit;                \/* The auto-commit flag. *\/$/;"	m	struct:sqlite3	file:
autoIncBegin	sqlite3_MFAW.c	/^static int autoIncBegin($/;"	f	file:
autoIncBegin	sqlite3_MFAW.c	100035;"	d	file:
autoIncStep	sqlite3_MFAW.c	/^static void autoIncStep(Parse *pParse, int memId, int regRowid){$/;"	f	file:
autoIncStep	sqlite3_MFAW.c	100036;"	d	file:
autoVacuum	sqlite3_MFAW.c	/^  u8 autoVacuum;        \/* True if auto-vacuum is enabled *\/$/;"	m	struct:BtShared	file:
autoVacuumCommit	sqlite3_MFAW.c	/^static int autoVacuumCommit(BtShared *pBt){$/;"	f	file:
auto_extension	sqlite3_MFAW.c	/^  int (*auto_extension)(void(*)(void));$/;"	m	struct:sqlite3_api_routines	file:
autolockIoFinder	sqlite3_MFAW.c	/^  *(*const autolockIoFinder)(const char*,unixFile*) = autolockIoFinderImpl;$/;"	v	file:
autolockIoFinderImpl	sqlite3_MFAW.c	/^static const sqlite3_io_methods *autolockIoFinderImpl($/;"	f	file:
avgFinalize	sqlite3_MFAW.c	/^static void avgFinalize(sqlite3_context *context){$/;"	f	file:
azCol	sqlite3_MFAW.c	/^  const char **azCol;                 \/* Array of column names for fts3 table *\/$/;"	m	struct:ParseContext	file:
azColl	sqlite3_MFAW.c	/^  char **azColl;           \/* Array of collation sequence names for index *\/$/;"	m	struct:Index	file:
azColumn	sqlite3_MFAW.c	/^  char **azColumn;                \/* column names.  malloced *\/$/;"	m	struct:Fts3Table	file:
azCompileOpt	sqlite3_MFAW.c	/^static const char * const azCompileOpt[] = {$/;"	v	file:
azFileLock	sqlite3_MFAW.c	/^static const char *azFileLock(int eFileLock){$/;"	f	file:
azModuleArg	sqlite3_MFAW.c	/^  char **azModuleArg;  \/* Text of all module args. [0] is module name *\/$/;"	m	struct:Table	file:
azResult	sqlite3_MFAW.c	/^  char **azResult;   \/* Accumulated output *\/$/;"	m	struct:TabResult	file:
azVar	sqlite3_MFAW.c	/^  char **azVar;             \/* Pointers to names of parameters *\/$/;"	m	struct:Parse	file:
azVar	sqlite3_MFAW.c	/^  char **azVar;           \/* Name of variables *\/$/;"	m	struct:Vdbe	file:
b	sqlite3_MFAW.c	/^struct TrigEvent { int a; IdList * b; };$/;"	m	struct:TrigEvent	file:
bBusy	sqlite3_MFAW.c	/^  u8 bBusy;            \/* Prevent endless loops on corrupt database files *\/$/;"	m	struct:MemPage	file:
bConstraint	sqlite3_MFAW.c	/^  u8 bConstraint;           \/* True if constraints are supported *\/$/;"	m	struct:VTable	file:
bCoreMutex	sqlite3_MFAW.c	/^  int bCoreMutex;                   \/* True to enable core mutexing *\/$/;"	m	struct:Sqlite3Config	file:
bDeclared	sqlite3_MFAW.c	/^  int bDeclared;      \/* True after sqlite3_declare_vtab() is called *\/$/;"	m	struct:VtabCtx	file:
bDeferred	sqlite3_MFAW.c	/^  u8 bDeferred;              \/* True if this expression is entirely deferred *\/$/;"	m	struct:Fts3Expr	file:
bDesc	sqlite3_MFAW.c	/^  u8 bDesc;                       \/* True to sort in descending order *\/$/;"	m	struct:Fts3Cursor	file:
bDescIdx	sqlite3_MFAW.c	/^  u8 bDescIdx;                    \/* True if doclists are in reverse order *\/$/;"	m	struct:Fts3Table	file:
bDestLocked	sqlite3_MFAW.c	/^  int bDestLocked;         \/* True once a write-transaction is open on pDest *\/$/;"	m	struct:sqlite3_backup	file:
bDoTruncate	sqlite3_MFAW.c	/^  u8 bDoTruncate;       \/* True to truncate db on commit *\/$/;"	m	struct:BtShared	file:
bDone	sqlite3_MFAW.c	/^  int bDone;                      \/* Set if thread is finished but not joined *\/$/;"	m	struct:SortSubtask	file:
bEnabled	sqlite3_MFAW.c	/^  u8 bEnabled;            \/* False to disable new lookaside allocations *\/$/;"	m	struct:Lookaside	file:
bEof	sqlite3_MFAW.c	/^  int bEof;                       \/* Set to true when merge is finished *\/$/;"	m	struct:IncrMerger	file:
bEof	sqlite3_MFAW.c	/^  u8 bEof;                   \/* True this expression is at EOF already *\/$/;"	m	struct:Fts3Expr	file:
bExclusive	sqlite3_MFAW.c	/^  BOOL bExclusive;    \/* Indicates an exclusive lock has been obtained *\/$/;"	m	struct:winceLock	file:
bFirst	sqlite3_MFAW.c	/^  int bFirst;                     \/* True if token must appear at position 0 *\/$/;"	m	struct:Fts3PhraseToken	file:
bFreeList	sqlite3_MFAW.c	/^  int bFreeList;                 \/* True if pList should be sqlite3_free()d *\/$/;"	m	struct:Fts3Doclist	file:
bFreeWith	sqlite3_MFAW.c	/^  u8 bFreeWith;             \/* True if pWith should be freed with parser *\/$/;"	m	struct:Parse	file:
bFts4	sqlite3_MFAW.c	/^  int bFts4;                          \/* True to allow FTS4-only syntax *\/$/;"	m	struct:ParseContext	file:
bFts4	sqlite3_MFAW.c	/^  u8 bFts4;                       \/* True for FTS4, false for FTS3 *\/$/;"	m	struct:Fts3Table	file:
bFullMutex	sqlite3_MFAW.c	/^  int bFullMutex;                   \/* True to enable full mutexing *\/$/;"	m	struct:Sqlite3Config	file:
bHasDocsize	sqlite3_MFAW.c	/^  u8 bHasDocsize;                 \/* True if %_docsize table exists *\/$/;"	m	struct:Fts3Table	file:
bHasStat	sqlite3_MFAW.c	/^  u8 bHasStat;                    \/* True if %_stat table exists (2==unknown) *\/$/;"	m	struct:Fts3Table	file:
bIgnore	sqlite3_MFAW.c	/^  int bIgnore;$/;"	m	struct:TokenDoclist	file:
bIgnoreSavepoint	sqlite3_MFAW.c	/^  u8 bIgnoreSavepoint;            \/* True to ignore xSavepoint invocations *\/$/;"	m	struct:Fts3Table	file:
bIncr	sqlite3_MFAW.c	/^  int bIncr;                 \/* True if doclist is loaded incrementally *\/$/;"	m	struct:Fts3Phrase	file:
bIsReader	sqlite3_MFAW.c	/^  bft bIsReader:1;        \/* True for statements that read *\/$/;"	m	struct:Vdbe	file:
bLine	sqlite3_MFAW.c	/^  u8  bLine[100];         \/* Draw vertical in column i if bLine[i] is true *\/$/;"	m	struct:TreeView	file:
bLocaltimeFault	sqlite3_MFAW.c	/^  int bLocaltimeFault;              \/* True to fail localtime() calls *\/$/;"	m	struct:Sqlite3Config	file:
bLookup	sqlite3_MFAW.c	/^  int bLookup;                    \/* True if a lookup of a single entry. *\/$/;"	m	struct:Fts3MultiSegReader	file:
bLookup	sqlite3_MFAW.c	/^  u8 bLookup;                     \/* True for a lookup only *\/$/;"	m	struct:Fts3SegReader	file:
bMalloced	sqlite3_MFAW.c	/^  u8 bMalloced;           \/* True if pStart obtained from sqlite3_malloc() *\/$/;"	m	struct:Lookaside	file:
bMemstat	sqlite3_MFAW.c	/^  int bMemstat;                     \/* True to enable memory status *\/$/;"	m	struct:Sqlite3Config	file:
bNoIncrDoclist	sqlite3_MFAW.c	/^  int bNoIncrDoclist;$/;"	m	struct:Fts3Table	file:
bNoLeafData	sqlite3_MFAW.c	/^  u8 bNoLeafData;                 \/* If true, store 0 for segment size *\/$/;"	m	struct:IncrmergeWriter	file:
bNot	sqlite3_MFAW.c	/^  int bNot;         \/* True if the NOT keyword is present *\/$/;"	m	struct:LikeOp	file:
bOpenUri	sqlite3_MFAW.c	/^  int bOpenUri;                     \/* True to interpret filenames as URIs *\/$/;"	m	struct:Sqlite3Config	file:
bOwned	sqlite3_MFAW.c	/^  BOOL bOwned;  \/* Do we own the heap (i.e. destroy it on shutdown)? *\/$/;"	m	struct:winMemData	file:
bPending	sqlite3_MFAW.c	/^  BOOL bPending;      \/* Indicates a pending lock has been obtained *\/$/;"	m	struct:winceLock	file:
bPoint	sqlite3_MFAW.c	/^  u8 bPoint;                        \/* True if sPoint is valid *\/$/;"	m	struct:RtreeCursor	file:
bProcessLock	sqlite3_MFAW.c	/^  unsigned char bProcessLock;     \/* An exclusive process lock is held *\/$/;"	m	struct:unixInodeInfo	file:
bPurgeable	sqlite3_MFAW.c	/^  int bPurgeable;                     \/* True if cache is purgeable *\/$/;"	m	struct:PCache1	file:
bPurgeable	sqlite3_MFAW.c	/^  u8 bPurgeable;                      \/* True if pages are on backing store *\/$/;"	m	struct:PCache	file:
bRemoveDiacritic	sqlite3_MFAW.c	/^  int bRemoveDiacritic;$/;"	m	struct:unicode_tokenizer	file:
bReserved	sqlite3_MFAW.c	/^  BOOL bReserved;     \/* Indicates a reserved lock has been obtained *\/$/;"	m	struct:winceLock	file:
bRestart	sqlite3_MFAW.c	/^  int bRestart;$/;"	m	struct:Fts3MultiSegReader	file:
bSpanIsTab	sqlite3_MFAW.c	/^    unsigned bSpanIsTab :1; \/* zSpan holds DB.TABLE.COLUMN *\/$/;"	m	struct:ExprList::ExprList_item	file:
bStart	sqlite3_MFAW.c	/^  u8 bStart;                 \/* True if iDocid is valid *\/$/;"	m	struct:Fts3Expr	file:
bUnderPressure	sqlite3_MFAW.c	/^  int bUnderPressure;            \/* True if low on PAGECACHE memory *\/$/;"	m	struct:PCacheGlobal	file:
bUnordered	sqlite3_MFAW.c	/^  unsigned bUnordered:1;   \/* Use this index for == or IN queries only *\/$/;"	m	struct:Index	file:
bUseCis	sqlite3_MFAW.c	/^  int bUseCis;                      \/* Use covering indices for full-scans *\/$/;"	m	struct:Sqlite3Config	file:
bUseFetch	sqlite3_MFAW.c	/^  u8 bUseFetch;               \/* True to use xFetch() *\/$/;"	m	struct:Pager	file:
bUsePMA	sqlite3_MFAW.c	/^  u8 bUsePMA;                     \/* True if one or more PMAs created *\/$/;"	m	struct:VdbeSorter	file:
bUseThread	sqlite3_MFAW.c	/^  int bUseThread;                 \/* True to use a bg thread for this object *\/$/;"	m	struct:IncrMerger	file:
bUseThreads	sqlite3_MFAW.c	/^  u8 bUseThreads;                 \/* True to use background threads *\/$/;"	m	struct:VdbeSorter	file:
bVarOnly	sqlite3_MFAW.c	/^  int bVarOnly;       \/* Check for variable references only *\/$/;"	m	struct:DbFixer	file:
b_quiet	mobibench.c	/^int b_quiet = 0;$/;"	v
b_quiet	mobibench_MFAW.c	/^int b_quiet = 0;$/;"	v
b_replay_script	mobibench.c	/^int b_replay_script = 0;$/;"	v
b_replay_script	mobibench_MFAW.c	/^int b_replay_script = 0;$/;"	v
backtrace	sqlite3_MFAW.c	17350;"	d	file:
backtrace_symbols_fd	sqlite3_MFAW.c	17351;"	d	file:
backupOnePage	sqlite3_MFAW.c	/^static int backupOnePage($/;"	f	file:
backupTruncateFile	sqlite3_MFAW.c	/^static int backupTruncateFile(sqlite3_file *pFile, i64 iSize){$/;"	f	file:
backup_finish	sqlite3_MFAW.c	/^  int (*backup_finish)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_init	sqlite3_MFAW.c	/^  sqlite3_backup *(*backup_init)(sqlite3*,const char*,sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
backup_pagecount	sqlite3_MFAW.c	/^  int (*backup_pagecount)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_remaining	sqlite3_MFAW.c	/^  int (*backup_remaining)(sqlite3_backup*);$/;"	m	struct:sqlite3_api_routines	file:
backup_step	sqlite3_MFAW.c	/^  int (*backup_step)(sqlite3_backup*,int);$/;"	m	struct:sqlite3_api_routines	file:
balance	sqlite3_MFAW.c	/^static int balance(BtCursor *pCur){$/;"	f	file:
balance_deeper	sqlite3_MFAW.c	/^static int balance_deeper(MemPage *pRoot, MemPage **ppChild){$/;"	f	file:
balance_nonroot	sqlite3_MFAW.c	/^static int balance_nonroot($/;"	f	file:
balance_quick	sqlite3_MFAW.c	/^static int balance_quick(MemPage *pParent, MemPage *pPage, u8 *pSpace){$/;"	f	file:
base	sqlite3_MFAW.c	/^  etByte base;             \/* The base for radix conversion *\/$/;"	m	struct:et_info	file:
base	sqlite3_MFAW.c	/^  sqlite3_tokenizer base;      \/* Base class *\/$/;"	m	struct:porter_tokenizer	file:
base	sqlite3_MFAW.c	/^  sqlite3_tokenizer base;$/;"	m	struct:IcuTokenizer	file:
base	sqlite3_MFAW.c	/^  sqlite3_tokenizer base;$/;"	m	struct:simple_tokenizer	file:
base	sqlite3_MFAW.c	/^  sqlite3_tokenizer base;$/;"	m	struct:unicode_tokenizer	file:
base	sqlite3_MFAW.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:IcuCursor	file:
base	sqlite3_MFAW.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:porter_tokenizer_cursor	file:
base	sqlite3_MFAW.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:simple_tokenizer_cursor	file:
base	sqlite3_MFAW.c	/^  sqlite3_tokenizer_cursor base;$/;"	m	struct:unicode_cursor	file:
base	sqlite3_MFAW.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Table	file:
base	sqlite3_MFAW.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3auxTable	file:
base	sqlite3_MFAW.c	/^  sqlite3_vtab base;              \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3tokTable	file:
base	sqlite3_MFAW.c	/^  sqlite3_vtab base;          \/* Base class.  Must be first *\/$/;"	m	struct:Rtree	file:
base	sqlite3_MFAW.c	/^  sqlite3_vtab base;$/;"	m	struct:StatTable	file:
base	sqlite3_MFAW.c	/^  sqlite3_vtab_cursor base;         \/* Base class.  Must be first *\/$/;"	m	struct:RtreeCursor	file:
base	sqlite3_MFAW.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3Cursor	file:
base	sqlite3_MFAW.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3auxCursor	file:
base	sqlite3_MFAW.c	/^  sqlite3_vtab_cursor base;       \/* Base class used by SQLite core *\/$/;"	m	struct:Fts3tokCursor	file:
base	sqlite3_MFAW.c	/^  sqlite3_vtab_cursor base;$/;"	m	struct:StatCursor	file:
bft	sqlite3_MFAW.c	/^typedef unsigned bft;  \/* Bit Field Type *\/$/;"	t	file:
bigEndCksum	sqlite3_MFAW.c	/^  u8 bigEndCksum;                 \/* True if checksums in WAL are big-endian *\/$/;"	m	struct:WalIndexHdr	file:
binCollFunc	sqlite3_MFAW.c	/^static int binCollFunc($/;"	f	file:
binaryCompareP5	sqlite3_MFAW.c	/^static u8 binaryCompareP5(Expr *pExpr1, Expr *pExpr2, int jumpIfNull){$/;"	f	file:
binaryToUnaryIfNull	sqlite3_MFAW.c	/^  static void binaryToUnaryIfNull(Parse *pParse, Expr *pY, Expr *pA, int op){$/;"	f	file:
bindText	sqlite3_MFAW.c	/^static int bindText($/;"	f	file:
bind_blob	sqlite3_MFAW.c	/^  int  (*bind_blob)(sqlite3_stmt*,int,const void*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_blob64	sqlite3_MFAW.c	/^  int (*bind_blob64)(sqlite3_stmt*,int,const void*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:
bind_double	sqlite3_MFAW.c	/^  int  (*bind_double)(sqlite3_stmt*,int,double);$/;"	m	struct:sqlite3_api_routines	file:
bind_int	sqlite3_MFAW.c	/^  int  (*bind_int)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_int64	sqlite3_MFAW.c	/^  int  (*bind_int64)(sqlite3_stmt*,int,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:
bind_null	sqlite3_MFAW.c	/^  int  (*bind_null)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_count	sqlite3_MFAW.c	/^  int  (*bind_parameter_count)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_index	sqlite3_MFAW.c	/^  int  (*bind_parameter_index)(sqlite3_stmt*,const char*zName);$/;"	m	struct:sqlite3_api_routines	file:
bind_parameter_name	sqlite3_MFAW.c	/^  const char * (*bind_parameter_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
bind_text	sqlite3_MFAW.c	/^  int  (*bind_text)(sqlite3_stmt*,int,const char*,int n,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_text16	sqlite3_MFAW.c	/^  int  (*bind_text16)(sqlite3_stmt*,int,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
bind_text64	sqlite3_MFAW.c	/^  int (*bind_text64)(sqlite3_stmt*,int,const char*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:
bind_value	sqlite3_MFAW.c	/^  int  (*bind_value)(sqlite3_stmt*,int,const sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
bind_zeroblob	sqlite3_MFAW.c	/^  int (*bind_zeroblob)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
bindir	Makefile	/^bindir = $(prefix)\/bin$/;"	m
blobGrowBuffer	sqlite3_MFAW.c	/^static void blobGrowBuffer(Blob *pBlob, int nMin, int *pRc){$/;"	f	file:
blobReadWrite	sqlite3_MFAW.c	/^static int blobReadWrite($/;"	f	file:
blobSeekToRow	sqlite3_MFAW.c	/^static int blobSeekToRow(Incrblob *p, sqlite3_int64 iRow, char **pzErr){$/;"	f	file:
blob_bytes	sqlite3_MFAW.c	/^  int (*blob_bytes)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:
blob_close	sqlite3_MFAW.c	/^  int (*blob_close)(sqlite3_blob*);$/;"	m	struct:sqlite3_api_routines	file:
blob_open	sqlite3_MFAW.c	/^  int (*blob_open)(sqlite3*,const char*,const char*,const char*,sqlite3_int64,$/;"	m	struct:sqlite3_api_routines	file:
blob_read	sqlite3_MFAW.c	/^  int (*blob_read)(sqlite3_blob*,void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
blob_reopen	sqlite3_MFAW.c	/^  int (*blob_reopen)(sqlite3_blob*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
blob_write	sqlite3_MFAW.c	/^  int (*blob_write)(sqlite3_blob*,const void*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
block	sqlite3_MFAW.c	/^  Blob block;                     \/* Current block image *\/$/;"	m	struct:NodeWriter	file:
btree	sqlite3_MFAW.c	/^    } btree;$/;"	m	union:WhereLoop::__anon18	typeref:struct:WhereLoop::__anon18::__anon19	file:
btreeClearHasContent	sqlite3_MFAW.c	/^static void btreeClearHasContent(BtShared *pBt){$/;"	f	file:
btreeCreateTable	sqlite3_MFAW.c	/^static int btreeCreateTable(Btree *p, int *piTable, int createTabFlags){$/;"	f	file:
btreeCursor	sqlite3_MFAW.c	/^static int btreeCursor($/;"	f	file:
btreeDropTable	sqlite3_MFAW.c	/^static int btreeDropTable(Btree *p, Pgno iTable, int *piMoved){$/;"	f	file:
btreeEndTransaction	sqlite3_MFAW.c	/^static void btreeEndTransaction(Btree *p){$/;"	f	file:
btreeGetHasContent	sqlite3_MFAW.c	/^static int btreeGetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreeGetPage	sqlite3_MFAW.c	/^static int btreeGetPage($/;"	f	file:
btreeHeapInsert	sqlite3_MFAW.c	/^static void btreeHeapInsert(u32 *aHeap, u32 x){$/;"	f	file:
btreeHeapPull	sqlite3_MFAW.c	/^static int btreeHeapPull(u32 *aHeap, u32 *pOut){$/;"	f	file:
btreeInitPage	sqlite3_MFAW.c	/^static int btreeInitPage(MemPage *pPage){$/;"	f	file:
btreeIntegrity	sqlite3_MFAW.c	52783;"	d	file:
btreeInvokeBusyHandler	sqlite3_MFAW.c	/^static int btreeInvokeBusyHandler(void *pArg){$/;"	f	file:
btreeLockCarefully	sqlite3_MFAW.c	/^static void SQLITE_NOINLINE btreeLockCarefully(Btree *p){$/;"	f	file:
btreeMask	sqlite3_MFAW.c	/^  yDbMask btreeMask;      \/* Bitmask of db->aDb[] entries referenced *\/$/;"	m	struct:Vdbe	file:
btreeMoveto	sqlite3_MFAW.c	/^static int btreeMoveto($/;"	f	file:
btreeNext	sqlite3_MFAW.c	/^static SQLITE_NOINLINE int btreeNext(BtCursor *pCur, int *pRes){$/;"	f	file:
btreePageFromDbPage	sqlite3_MFAW.c	/^static MemPage *btreePageFromDbPage(DbPage *pDbPage, Pgno pgno, BtShared *pBt){$/;"	f	file:
btreePageLookup	sqlite3_MFAW.c	/^static MemPage *btreePageLookup(BtShared *pBt, Pgno pgno){$/;"	f	file:
btreePagecount	sqlite3_MFAW.c	/^static Pgno btreePagecount(BtShared *pBt){$/;"	f	file:
btreeParseCell	sqlite3_MFAW.c	/^static void btreeParseCell($/;"	f	file:
btreeParseCellPtr	sqlite3_MFAW.c	/^static void btreeParseCellPtr($/;"	f	file:
btreePrevious	sqlite3_MFAW.c	/^static SQLITE_NOINLINE int btreePrevious(BtCursor *pCur, int *pRes){$/;"	f	file:
btreeReleaseAllCursorPages	sqlite3_MFAW.c	/^static void btreeReleaseAllCursorPages(BtCursor *pCur){$/;"	f	file:
btreeRestoreCursorPosition	sqlite3_MFAW.c	/^static int btreeRestoreCursorPosition(BtCursor *pCur){$/;"	f	file:
btreeSetHasContent	sqlite3_MFAW.c	/^static int btreeSetHasContent(BtShared *pBt, Pgno pgno){$/;"	f	file:
btsFlags	sqlite3_MFAW.c	/^  u16 btsFlags;         \/* Boolean parameters.  See BTS_* macros below *\/$/;"	m	struct:BtShared	file:
busy	sqlite3_MFAW.c	/^    u8 busy;                    \/* TRUE if currently initializing *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
busyHandler	sqlite3_MFAW.c	/^  BusyHandler busyHandler;      \/* Busy callback *\/$/;"	m	struct:sqlite3	file:
busyTimeout	sqlite3_MFAW.c	/^  int busyTimeout;              \/* Busy handler timeout, in msec *\/$/;"	m	struct:sqlite3	file:
busy_handler	sqlite3_MFAW.c	/^  int  (*busy_handler)(sqlite3*,int(*)(void*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
busy_timeout	sqlite3_MFAW.c	/^  int  (*busy_timeout)(sqlite3*,int ms);$/;"	m	struct:sqlite3_api_routines	file:
cId	sqlite3_MFAW.c	/^  char cId;             \/* Symbolic ID of this loop for debugging use *\/$/;"	m	struct:WhereLoop	file:
cType	sqlite3_MFAW.c	/^static const char cType[] = {$/;"	v	file:
cacheCtr	sqlite3_MFAW.c	/^  u32 cacheCtr;           \/* VdbeCursor row cache generation counter *\/$/;"	m	struct:Vdbe	file:
cacheEntryClear	sqlite3_MFAW.c	/^static void cacheEntryClear(Parse *pParse, struct yColCache *p){$/;"	f	file:
cacheStatus	sqlite3_MFAW.c	/^  u32 cacheStatus;      \/* Cache is valid if this matches Vdbe.cacheCtr *\/$/;"	m	struct:VdbeCursor	file:
cache_size	sqlite3_MFAW.c	/^  int cache_size;      \/* Number of pages to use in the cache *\/$/;"	m	struct:Schema	file:
callCollNeeded	sqlite3_MFAW.c	/^static void callCollNeeded(sqlite3 *db, int enc, const char *zName){$/;"	f	file:
callFinaliser	sqlite3_MFAW.c	/^static void callFinaliser(sqlite3 *db, int offset){$/;"	f	file:
callStatGet	sqlite3_MFAW.c	/^static void callStatGet(Vdbe *v, int regStat4, int iParam, int regOut){$/;"	f	file:
cancel_auto_extension	sqlite3_MFAW.c	/^  int (*cancel_auto_extension)(void(*)(void));$/;"	m	struct:sqlite3_api_routines	file:
cb	sqlite3_MFAW.c	/^  RtreeGeomCallback cb;       \/* Info about the callback functions *\/$/;"	m	struct:RtreeMatchArg	file:
cdateFunc	sqlite3_MFAW.c	/^static void cdateFunc($/;"	f	file:
cellArea	sqlite3_MFAW.c	/^static RtreeDValue cellArea(Rtree *pRtree, RtreeCell *p){$/;"	f	file:
cellContains	sqlite3_MFAW.c	/^static int cellContains(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:
cellGrowth	sqlite3_MFAW.c	/^static RtreeDValue cellGrowth(Rtree *pRtree, RtreeCell *p, RtreeCell *pCell){$/;"	f	file:
cellMargin	sqlite3_MFAW.c	/^static RtreeDValue cellMargin(Rtree *pRtree, RtreeCell *p){$/;"	f	file:
cellOffset	sqlite3_MFAW.c	/^  u16 cellOffset;      \/* Index in aData of first cell pointer *\/$/;"	m	struct:MemPage	file:
cellOverlap	sqlite3_MFAW.c	/^static RtreeDValue cellOverlap($/;"	f	file:
cellSize	sqlite3_MFAW.c	/^static u16 cellSize(MemPage *pPage, int iCell){$/;"	f	file:
cellSizePtr	sqlite3_MFAW.c	/^static u16 cellSizePtr(MemPage *pPage, u8 *pCell){$/;"	f	file:
cellUnion	sqlite3_MFAW.c	/^static void cellUnion(Rtree *pRtree, RtreeCell *p1, RtreeCell *p2){$/;"	f	file:
chain	sqlite3_MFAW.c	/^    Fts3HashElem *chain;     \/* Pointer to first entry with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:
chain	sqlite3_MFAW.c	/^    HashElem *chain;           \/* Pointer to first entry with this hash *\/$/;"	m	struct:Hash::_ht	file:
changeCntOn	sqlite3_MFAW.c	/^  bft changeCntOn:1;      \/* True to update the change-counter *\/$/;"	m	struct:Vdbe	file:
changeCountDone	sqlite3_MFAW.c	/^  u8 changeCountDone;         \/* Set after incrementing the change-counter *\/$/;"	m	struct:Pager	file:
changeTempStorage	sqlite3_MFAW.c	/^static int changeTempStorage(Parse *pParse, const char *zStorageType){$/;"	f	file:
changes	sqlite3_MFAW.c	/^  int  (*changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
changes	sqlite3_MFAW.c	/^static void changes($/;"	f	file:
charFunc	sqlite3_MFAW.c	/^static void charFunc($/;"	f	file:
charMap	sqlite3_MFAW.c	126914;"	d	file:
charMap	sqlite3_MFAW.c	126917;"	d	file:
charset	sqlite3_MFAW.c	/^  etByte charset;          \/* Offset into aDigits[] of the digits string *\/$/;"	m	struct:et_info	file:
checkActiveVdbeCnt	sqlite3_MFAW.c	/^static void checkActiveVdbeCnt(sqlite3 *db){$/;"	f	file:
checkActiveVdbeCnt	sqlite3_MFAW.c	67073;"	d	file:
checkAppendMsg	sqlite3_MFAW.c	/^static void checkAppendMsg($/;"	f	file:
checkColumnOverlap	sqlite3_MFAW.c	/^static int checkColumnOverlap(IdList *pIdList, ExprList *pEList){$/;"	f	file:
checkForMultiColumnSelectError	sqlite3_MFAW.c	/^static int checkForMultiColumnSelectError($/;"	f	file:
checkList	sqlite3_MFAW.c	/^static void checkList($/;"	f	file:
checkListProperties	sqlite3_MFAW.c	/^static void checkListProperties(sqlite3 *db){$/;"	f	file:
checkListProperties	sqlite3_MFAW.c	131925;"	d	file:
checkPage	sqlite3_MFAW.c	/^static void checkPage(PgHdr *pPg){$/;"	f	file:
checkPtrmap	sqlite3_MFAW.c	/^static void checkPtrmap($/;"	f	file:
checkReadTransaction	sqlite3_MFAW.c	/^static int checkReadTransaction(sqlite3 *db, Btree *p){$/;"	f	file:
checkRef	sqlite3_MFAW.c	/^static int checkRef(IntegrityCk *pCheck, Pgno iPage){$/;"	f	file:
checkSavepointCount	sqlite3_MFAW.c	/^static int checkSavepointCount(sqlite3 *db){$/;"	f	file:
checkSchema	sqlite3_MFAW.c	/^  u8 checkSchema;      \/* Causes schema cookie check after an error *\/$/;"	m	struct:Parse	file:
checkTreePage	sqlite3_MFAW.c	/^static int checkTreePage($/;"	f	file:
childPtrSize	sqlite3_MFAW.c	/^  u8 childPtrSize;     \/* 0 if leaf==1.  4 if leaf==0 *\/$/;"	m	struct:MemPage	file:
ckBase	sqlite3_MFAW.c	/^  int ckBase;          \/* Base register of data during check constraints *\/$/;"	m	struct:Parse	file:
ckptLock	sqlite3_MFAW.c	/^  u8 ckptLock;               \/* True if holding a checkpoint lock *\/$/;"	m	struct:Wal	file:
ckptSyncFlags	sqlite3_MFAW.c	/^  u8 ckptSyncFlags;           \/* SYNC_NORMAL or SYNC_FULL for checkpoint *\/$/;"	m	struct:Pager	file:
cksumInit	sqlite3_MFAW.c	/^  u32 cksumInit;              \/* Quasi-random value added to every checksum *\/$/;"	m	struct:Pager	file:
clearAllSharedCacheTableLocks	sqlite3_MFAW.c	/^static void clearAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
clearAllSharedCacheTableLocks	sqlite3_MFAW.c	53229;"	d	file:
clearCell	sqlite3_MFAW.c	/^static int clearCell($/;"	f	file:
clearDatabasePage	sqlite3_MFAW.c	/^static int clearDatabasePage($/;"	f	file:
clearSelect	sqlite3_MFAW.c	/^static void clearSelect(sqlite3 *db, Select *p, int bFree){$/;"	f	file:
clearState	mobibench.c	/^void clearState(void)$/;"	f
clearState	mobibench_MFAW.c	/^void clearState(void)$/;"	f
clearYMD_HMS_TZ	sqlite3_MFAW.c	/^static void clearYMD_HMS_TZ(DateTime *p){$/;"	f	file:
clear_bindings	sqlite3_MFAW.c	/^  int (*clear_bindings)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
close	sqlite3_MFAW.c	/^  int  (*close)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
closeAllCursors	sqlite3_MFAW.c	/^static void closeAllCursors(Vdbe *p){$/;"	f	file:
closeCursorsInFrame	sqlite3_MFAW.c	/^static void closeCursorsInFrame(Vdbe *p){$/;"	f	file:
closePendingFds	sqlite3_MFAW.c	/^static void closePendingFds(unixFile *pFile){$/;"	f	file:
closeUnixFile	sqlite3_MFAW.c	/^static int closeUnixFile(sqlite3_file *id){$/;"	f	file:
close_v2	sqlite3_MFAW.c	/^  int (*close_v2)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
cmd	mobibench.c	/^	char* cmd;$/;"	m	struct:script_entry	file:
cmd	mobibench_MFAW.c	/^	char* cmd;$/;"	m	struct:script_entry	file:
cnt	sqlite3_MFAW.c	/^  i64 cnt;          \/* Number of elements summed *\/$/;"	m	struct:SumCtx	file:
cnt	sqlite3_MFAW.c	/^  int cnt;    \/* Number of entries without a matching leave *\/$/;"	m	struct:sqlite3_debug_mutex	file:
cnt	sqlite3_MFAW.c	/^  u32 cnt;                 \/* Number of times this instruction was executed *\/$/;"	m	struct:VdbeOp	file:
codeAllEqualityTerms	sqlite3_MFAW.c	/^static int codeAllEqualityTerms($/;"	f	file:
codeApplyAffinity	sqlite3_MFAW.c	/^static void codeApplyAffinity(Parse *pParse, int base, int n, char *zAff){$/;"	f	file:
codeAttach	sqlite3_MFAW.c	/^static void codeAttach($/;"	f	file:
codeCompare	sqlite3_MFAW.c	/^static int codeCompare($/;"	f	file:
codeDistinct	sqlite3_MFAW.c	/^static void codeDistinct($/;"	f	file:
codeEqualityTerm	sqlite3_MFAW.c	/^static int codeEqualityTerm($/;"	f	file:
codeInteger	sqlite3_MFAW.c	/^static void codeInteger(Parse *pParse, Expr *pExpr, int negFlag, int iMem){$/;"	f	file:
codeOffset	sqlite3_MFAW.c	/^static void codeOffset($/;"	f	file:
codeOneLoopStart	sqlite3_MFAW.c	/^static Bitmask codeOneLoopStart($/;"	f	file:
codeReal	sqlite3_MFAW.c	/^static void codeReal(Vdbe *v, const char *z, int negateFlag, int iMem){$/;"	f	file:
codeRowTrigger	sqlite3_MFAW.c	/^static TriggerPrg *codeRowTrigger($/;"	f	file:
codeTableLocks	sqlite3_MFAW.c	/^static void codeTableLocks(Parse *pParse){$/;"	f	file:
codeTableLocks	sqlite3_MFAW.c	90993;"	d	file:
codeTriggerProgram	sqlite3_MFAW.c	/^static int codeTriggerProgram($/;"	f	file:
colFlags	sqlite3_MFAW.c	/^  u8 colFlags;     \/* Boolean properties.  See COLFLAG_ defines below *\/$/;"	m	struct:Column	file:
colNamesSet	sqlite3_MFAW.c	/^  u8 colNamesSet;      \/* TRUE after OP_ColumnName has been issued to pVdbe *\/$/;"	m	struct:Parse	file:
colUsed	sqlite3_MFAW.c	/^    Bitmask colUsed;  \/* Bit N (1<<N) set if column N of pTab is used *\/$/;"	m	struct:SrcList::SrcList_item	file:
collationMatch	sqlite3_MFAW.c	/^static int collationMatch(const char *zColl, Index *pIndex){$/;"	f	file:
collation_needed	sqlite3_MFAW.c	/^  int  (*collation_needed)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines	file:
collation_needed16	sqlite3_MFAW.c	/^  int  (*collation_needed16)(sqlite3*,void*,void(*)(void*,sqlite3*,$/;"	m	struct:sqlite3_api_routines	file:
columnIndex	sqlite3_MFAW.c	/^static int columnIndex(Table *pTab, const char *zCol){$/;"	f	file:
columnMallocFailure	sqlite3_MFAW.c	/^static void columnMallocFailure(sqlite3_stmt *pStmt)$/;"	f	file:
columnMem	sqlite3_MFAW.c	/^static Mem *columnMem(sqlite3_stmt *pStmt, int i){$/;"	f	file:
columnName	sqlite3_MFAW.c	/^static const void *columnName($/;"	f	file:
columnNullValue	sqlite3_MFAW.c	/^static const Mem *columnNullValue(void){$/;"	f	file:
columnType	sqlite3_MFAW.c	107852;"	d	file:
columnTypeImpl	sqlite3_MFAW.c	/^static const char *columnTypeImpl($/;"	f	file:
column_blob	sqlite3_MFAW.c	/^  const void * (*column_blob)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_bytes	sqlite3_MFAW.c	/^  int  (*column_bytes)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_bytes16	sqlite3_MFAW.c	/^  int  (*column_bytes16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_count	sqlite3_MFAW.c	/^  int  (*column_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
column_database_name	sqlite3_MFAW.c	/^  const char * (*column_database_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_database_name16	sqlite3_MFAW.c	/^  const void * (*column_database_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_decltype	sqlite3_MFAW.c	/^  const char * (*column_decltype)(sqlite3_stmt*,int i);$/;"	m	struct:sqlite3_api_routines	file:
column_decltype16	sqlite3_MFAW.c	/^  const void * (*column_decltype16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_double	sqlite3_MFAW.c	/^  double  (*column_double)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_int	sqlite3_MFAW.c	/^  int  (*column_int)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_int64	sqlite3_MFAW.c	/^  sqlite_int64  (*column_int64)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_name	sqlite3_MFAW.c	/^  const char * (*column_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_name16	sqlite3_MFAW.c	/^  const void * (*column_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_origin_name	sqlite3_MFAW.c	/^  const char * (*column_origin_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_origin_name16	sqlite3_MFAW.c	/^  const void * (*column_origin_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_table_name	sqlite3_MFAW.c	/^  const char * (*column_table_name)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_table_name16	sqlite3_MFAW.c	/^  const void * (*column_table_name16)(sqlite3_stmt*,int);$/;"	m	struct:sqlite3_api_routines	file:
column_text	sqlite3_MFAW.c	/^  const unsigned char * (*column_text)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_text16	sqlite3_MFAW.c	/^  const void * (*column_text16)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_type	sqlite3_MFAW.c	/^  int  (*column_type)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
column_value	sqlite3_MFAW.c	/^  sqlite3_value* (*column_value)(sqlite3_stmt*,int iCol);$/;"	m	struct:sqlite3_api_routines	file:
columnsInIndex	sqlite3_MFAW.c	/^static Bitmask columnsInIndex(Index *pIdx){$/;"	f	file:
commit_hook	sqlite3_MFAW.c	/^  void * (*commit_hook)(sqlite3*,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
compare2pow63	sqlite3_MFAW.c	/^static int compare2pow63(const char *zNum, int incr){$/;"	f	file:
compareInfo	sqlite3_MFAW.c	/^struct compareInfo {$/;"	s	file:
comparisonAffinity	sqlite3_MFAW.c	/^static char comparisonAffinity(Expr *pExpr){$/;"	f	file:
compileoption_get	sqlite3_MFAW.c	/^  const char *(*compileoption_get)(int);$/;"	m	struct:sqlite3_api_routines	file:
compileoption_used	sqlite3_MFAW.c	/^  int (*compileoption_used)(const char*);$/;"	m	struct:sqlite3_api_routines	file:
compileoptiongetFunc	sqlite3_MFAW.c	/^static void compileoptiongetFunc($/;"	f	file:
compileoptionusedFunc	sqlite3_MFAW.c	/^static void compileoptionusedFunc($/;"	f	file:
complete	sqlite3_MFAW.c	/^  int  (*complete)(const char*sql);$/;"	m	struct:sqlite3_api_routines	file:
complete16	sqlite3_MFAW.c	/^  int  (*complete16)(const void*sql);$/;"	m	struct:sqlite3_api_routines	file:
computeHMS	sqlite3_MFAW.c	/^static void computeHMS(DateTime *p){$/;"	f	file:
computeJD	sqlite3_MFAW.c	/^static void computeJD(DateTime *p){$/;"	f	file:
computeLimitRegisters	sqlite3_MFAW.c	/^static void computeLimitRegisters(Parse *pParse, Select *p, int iBreak){$/;"	f	file:
computeNumericType	sqlite3_MFAW.c	/^static u16 SQLITE_NOINLINE computeNumericType(Mem *pMem){$/;"	f	file:
computeYMD	sqlite3_MFAW.c	/^static void computeYMD(DateTime *p){$/;"	f	file:
computeYMD_HMS	sqlite3_MFAW.c	/^static void computeYMD_HMS(DateTime *p){$/;"	f	file:
conchFile	sqlite3_MFAW.c	/^  unixFile *conchFile;         \/* Open conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchFilePath	sqlite3_MFAW.c	/^  char *conchFilePath;         \/* Name of the conch file *\/$/;"	m	struct:proxyLockingContext	file:
conchHeld	sqlite3_MFAW.c	/^  int conchHeld;               \/* 1 if the conch is held, -1 if lockless *\/$/;"	m	struct:proxyLockingContext	file:
connectionIsBusy	sqlite3_MFAW.c	/^static int connectionIsBusy(sqlite3 *db){$/;"	f	file:
constraintName	sqlite3_MFAW.c	/^  Token constraintName;\/* Name of the constraint currently being parsed *\/$/;"	m	struct:Parse	file:
constructAutomaticIndex	sqlite3_MFAW.c	/^static void constructAutomaticIndex($/;"	f	file:
contextMalloc	sqlite3_MFAW.c	/^static void *contextMalloc(sqlite3_context *context, i64 nByte){$/;"	f	file:
context_db_handle	sqlite3_MFAW.c	/^  sqlite3 *(*context_db_handle)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
convertCompoundSelectToSubquery	sqlite3_MFAW.c	/^static int convertCompoundSelectToSubquery(Walker *pWalker, Select *p){$/;"	f	file:
convertToWithoutRowidTable	sqlite3_MFAW.c	/^static void convertToWithoutRowidTable(Parse *pParse, Table *pTab){$/;"	f	file:
cookieMask	sqlite3_MFAW.c	/^  yDbMask cookieMask;  \/* Bitmask of schema verified databases *\/$/;"	m	struct:Parse	file:
cookieValue	sqlite3_MFAW.c	/^  int cookieValue[SQLITE_MAX_ATTACHED+2];  \/* Values of cookies to verify *\/$/;"	m	struct:Parse	file:
copyKey	sqlite3_MFAW.c	/^  char copyKey;           \/* True if copy of key made on insert *\/$/;"	m	struct:Fts3Hash	file:
copyNodeContent	sqlite3_MFAW.c	/^static void copyNodeContent(MemPage *pFrom, MemPage *pTo, int *pRC){$/;"	f	file:
copyPayload	sqlite3_MFAW.c	/^static int copyPayload($/;"	f	file:
copy_stemmer	sqlite3_MFAW.c	/^static void copy_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:
corruptSchema	sqlite3_MFAW.c	/^static void corruptSchema($/;"	f	file:
costMult	sqlite3_MFAW.c	/^  LogEst costMult;     \/* Cost multiplier for using this table *\/$/;"	m	struct:Table	file:
count	mobibench.c	/^	int count;$/;"	m	struct:script_thread_time	file:
count	mobibench_MFAW.c	/^	int count;$/;"	m	struct:script_thread_time	file:
count	sqlite3_MFAW.c	/^    int count;                 \/* Number of entries with this hash *\/$/;"	m	struct:Hash::_ht	file:
count	sqlite3_MFAW.c	/^    int count;               \/* Number of entries with this hash *\/$/;"	m	struct:Fts3Hash::_fts3ht	file:
count	sqlite3_MFAW.c	/^  int count;              \/* Number of entries in this table *\/$/;"	m	struct:Fts3Hash	file:
count	sqlite3_MFAW.c	/^  unsigned int count;       \/* Number of entries in this table *\/$/;"	m	struct:Hash	file:
countFinalize	sqlite3_MFAW.c	/^static void countFinalize(sqlite3_context *context){$/;"	f	file:
countStep	sqlite3_MFAW.c	/^static void countStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
countValidCursors	sqlite3_MFAW.c	/^static int countValidCursors(BtShared *pBt, int wrOnly){$/;"	f	file:
covered	sqlite3_MFAW.c	/^  u64 covered;                    \/* Mask of query phrases covered *\/$/;"	m	struct:SnippetFragment	file:
cpuUsage	mobibench.c	/^void cpuUsage(int startEnd)$/;"	f
cpuUsage	mobibench_MFAW.c	/^void cpuUsage(int startEnd)$/;"	f
cpu_active	mobibench.c	/^float cpu_active = 0;$/;"	v
cpu_active	mobibench_MFAW.c	/^float cpu_active = 0;$/;"	v
cpu_idle	mobibench.c	/^float cpu_idle = 0;$/;"	v
cpu_idle	mobibench_MFAW.c	/^float cpu_idle = 0;$/;"	v
cpu_iowait	mobibench.c	/^float cpu_iowait = 0;$/;"	v
cpu_iowait	mobibench_MFAW.c	/^float cpu_iowait = 0;$/;"	v
createAggContext	sqlite3_MFAW.c	/^static SQLITE_NOINLINE void *createAggContext(sqlite3_context *p, int nByte){$/;"	f	file:
createCollation	sqlite3_MFAW.c	/^static int createCollation($/;"	f	file:
createFile	sqlite3_MFAW.c	/^static int createFile(JournalFile *p){$/;"	f	file:
createMask	sqlite3_MFAW.c	/^static void createMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:
createModule	sqlite3_MFAW.c	/^static int createModule($/;"	f	file:
createTableStmt	sqlite3_MFAW.c	/^static char *createTableStmt(sqlite3 *db, Table *p){$/;"	f	file:
create_collation	sqlite3_MFAW.c	/^  int  (*create_collation)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_collation16	sqlite3_MFAW.c	/^  int  (*create_collation16)(sqlite3*,const void*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_collation_v2	sqlite3_MFAW.c	/^  int (*create_collation_v2)(sqlite3*,const char*,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function	sqlite3_MFAW.c	/^  int  (*create_function)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function16	sqlite3_MFAW.c	/^  int  (*create_function16)(sqlite3*,const void*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_function_v2	sqlite3_MFAW.c	/^  int (*create_function_v2)(sqlite3*,const char*,int,int,void*,$/;"	m	struct:sqlite3_api_routines	file:
create_module	sqlite3_MFAW.c	/^  int (*create_module)(sqlite3*,const char*,const sqlite3_module*,void*);$/;"	m	struct:sqlite3_api_routines	file:
create_module_v2	sqlite3_MFAW.c	/^  int (*create_module_v2)(sqlite3*,const char*,const sqlite3_module*,void*,$/;"	m	struct:sqlite3_api_routines	file:
cs_total	mobibench.c	/^int cs_total = 0;$/;"	v
cs_total	mobibench_MFAW.c	/^int cs_total = 0;$/;"	v
cs_voluntary	mobibench.c	/^int cs_voluntary = 0;$/;"	v
cs_voluntary	mobibench_MFAW.c	/^int cs_voluntary = 0;$/;"	v
csr	sqlite3_MFAW.c	/^  Fts3MultiSegReader csr;        \/* Must be right after "base" *\/$/;"	m	struct:Fts3auxCursor	file:
ctimeFunc	sqlite3_MFAW.c	/^static void ctimeFunc($/;"	f	file:
ctimestampFunc	sqlite3_MFAW.c	/^static void ctimestampFunc($/;"	f	file:
ctrlFlags	sqlite3_MFAW.c	/^  u8 ctrlFlags;           \/* Flags.  See WINFILE_* below *\/$/;"	m	struct:winFile	file:
ctrlFlags	sqlite3_MFAW.c	/^  unsigned short int ctrlFlags;       \/* Behavioral bits.  UNIXFILE_* flags *\/$/;"	m	struct:unixFile	file:
curFlags	sqlite3_MFAW.c	/^  u8 curFlags;              \/* zero or more BTCF_* flags defined below *\/$/;"	m	struct:BtCursor	file:
current	sqlite3_MFAW.c	/^  Stat4Sample current;      \/* Current row as a Stat4Sample *\/$/;"	m	struct:Stat4Accum	file:
currentCount	sqlite3_MFAW.c	/^  u32 currentCount;   \/* Current number of distinct checkouts *\/$/;"	m	struct:Mem5Global	file:
currentOut	sqlite3_MFAW.c	/^  u32 currentOut;     \/* Current checkout, including internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
currentTimeFunc	sqlite3_MFAW.c	/^static void currentTimeFunc($/;"	f	file:
cursorHoldsMutex	sqlite3_MFAW.c	/^static int cursorHoldsMutex(BtCursor *p){$/;"	f	file:
cycles	sqlite3_MFAW.c	/^  u64 cycles;              \/* Total time spent executing this instruction *\/$/;"	m	struct:VdbeOp	file:
data	sqlite3_MFAW.c	/^  void *data;                  \/* Data associated with this element *\/$/;"	m	struct:HashElem	file:
data	sqlite3_MFAW.c	/^  void *data;                \/* Data associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
data_count	sqlite3_MFAW.c	/^  int  (*data_count)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
databaseIsUnmoved	sqlite3_MFAW.c	/^static int databaseIsUnmoved(Pager *pPager){$/;"	f	file:
dateFunc	sqlite3_MFAW.c	/^static void dateFunc($/;"	f	file:
datetimeFunc	sqlite3_MFAW.c	/^static void datetimeFunc($/;"	f	file:
db	sqlite3_MFAW.c	/^  sqlite3 *db;                    \/* Database connection *\/$/;"	m	struct:VdbeSorter	file:
db	sqlite3_MFAW.c	/^  sqlite3 *db;                    \/* The database connection *\/$/;"	m	struct:Fts3Table	file:
db	sqlite3_MFAW.c	/^  sqlite3 *db;                   \/* The database connection *\/$/;"	m	struct:RowSet	file:
db	sqlite3_MFAW.c	/^  sqlite3 *db;                \/* Host database connection *\/$/;"	m	struct:Rtree	file:
db	sqlite3_MFAW.c	/^  sqlite3 *db;              \/* Database connection associated with this table *\/$/;"	m	struct:VTable	file:
db	sqlite3_MFAW.c	/^  sqlite3 *db;              \/* Database connection, for malloc() *\/$/;"	m	struct:Stat4Accum	file:
db	sqlite3_MFAW.c	/^  sqlite3 *db;            \/* The associated database *\/$/;"	m	struct:Incrblob	file:
db	sqlite3_MFAW.c	/^  sqlite3 *db;            \/* The database connection that owns this statement *\/$/;"	m	struct:Vdbe	file:
db	sqlite3_MFAW.c	/^  sqlite3 *db;          \/* Database connection currently using this Btree *\/$/;"	m	struct:BtShared	file:
db	sqlite3_MFAW.c	/^  sqlite3 *db;         \/* Optional database for lookaside.  Can be NULL *\/$/;"	m	struct:StrAccum	file:
db	sqlite3_MFAW.c	/^  sqlite3 *db;         \/* The main database structure *\/$/;"	m	struct:Parse	file:
db	sqlite3_MFAW.c	/^  sqlite3 *db;        \/* The associated database connection *\/$/;"	m	struct:Mem	file:
db	sqlite3_MFAW.c	/^  sqlite3 *db;        \/* The database being initialized *\/$/;"	m	struct:__anon7	file:
db	sqlite3_MFAW.c	/^  sqlite3 *db;        \/* The database connection *\/$/;"	m	struct:KeyInfo	file:
db	sqlite3_MFAW.c	/^  sqlite3 *db;       \/* The database connection holding this btree *\/$/;"	m	struct:Btree	file:
db	sqlite3_MFAW.c	/^  sqlite3 *db;$/;"	m	struct:StatTable	file:
db	sqlite3_MFAW.c	/^  sqlite3 *db;$/;"	m	struct:analysisInfo	file:
dbFileSize	sqlite3_MFAW.c	/^  Pgno dbFileSize;            \/* Number of pages in the database file *\/$/;"	m	struct:Pager	file:
dbFileVers	sqlite3_MFAW.c	/^  char dbFileVers[16];        \/* Changes whenever database file changes *\/$/;"	m	struct:Pager	file:
dbHintSize	sqlite3_MFAW.c	/^  Pgno dbHintSize;            \/* Value passed to FCNTL_SIZE_HINT call *\/$/;"	m	struct:Pager	file:
dbOptFlags	sqlite3_MFAW.c	/^  u16 dbOptFlags;               \/* Flags to enable\/disable optimizations *\/$/;"	m	struct:sqlite3	file:
dbOrigSize	sqlite3_MFAW.c	/^  Pgno dbOrigSize;            \/* dbSize before the current transaction *\/$/;"	m	struct:Pager	file:
dbPath	sqlite3_MFAW.c	/^  char *dbPath;                \/* Name of the open file *\/$/;"	m	struct:proxyLockingContext	file:
dbPath	sqlite3_MFAW.c	/^  const char *dbPath;             \/* Name of the open file *\/$/;"	m	struct:afpLockingContext	file:
dbSize	sqlite3_MFAW.c	/^  Pgno dbSize;                \/* Number of pages in the database *\/$/;"	m	struct:Pager	file:
dbUpdate	sqlite3_MFAW.c	/^  unsigned char dbUpdate;        \/* True if any part of database file changed *\/$/;"	m	struct:unixFile	file:
db_config	sqlite3_MFAW.c	/^  int (*db_config)(sqlite3*,int,...);$/;"	m	struct:sqlite3_api_routines	file:
db_filename	sqlite3_MFAW.c	/^  const char *(*db_filename)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
db_handle	sqlite3_MFAW.c	/^  sqlite3 * (*db_handle)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
db_init_show	mobibench.c	/^int db_init_show = 0;$/;"	v
db_init_show	mobibench_MFAW.c	/^int db_init_show = 0;$/;"	v
db_interval	mobibench.c	/^int db_interval = 0;$/;"	v
db_interval	mobibench_MFAW.c	/^int db_interval = 0;$/;"	v
db_journal_mode	mobibench.c	/^int db_journal_mode;$/;"	v
db_journal_mode	mobibench_MFAW.c	/^int db_journal_mode;$/;"	v
db_mode	mobibench.c	/^int db_mode;$/;"	v
db_mode	mobibench_MFAW.c	/^int db_mode;$/;"	v
db_mutex	sqlite3_MFAW.c	/^  sqlite3_mutex *(*db_mutex)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
db_readonly	sqlite3_MFAW.c	/^  int (*db_readonly)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
db_release_memory	sqlite3_MFAW.c	/^  int (*db_release_memory)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
db_status	sqlite3_MFAW.c	/^  int (*db_status)(sqlite3*,int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:
db_sync_mode	mobibench.c	/^int db_sync_mode;$/;"	v
db_sync_mode	mobibench_MFAW.c	/^int db_sync_mode;$/;"	v
db_test_enable	mobibench.c	/^int db_test_enable;$/;"	v
db_test_enable	mobibench_MFAW.c	/^int db_test_enable;$/;"	v
db_transactions	mobibench.c	/^int db_transactions;$/;"	v
db_transactions	mobibench_MFAW.c	/^int db_transactions;$/;"	v
debugMutexAlloc	sqlite3_MFAW.c	/^static sqlite3_mutex *debugMutexAlloc(int id){$/;"	f	file:
debugMutexEnd	sqlite3_MFAW.c	/^static int debugMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexEnter	sqlite3_MFAW.c	/^static void debugMutexEnter(sqlite3_mutex *pX){$/;"	f	file:
debugMutexFree	sqlite3_MFAW.c	/^static void debugMutexFree(sqlite3_mutex *pX){$/;"	f	file:
debugMutexHeld	sqlite3_MFAW.c	/^static int debugMutexHeld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexInit	sqlite3_MFAW.c	/^static int debugMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
debugMutexLeave	sqlite3_MFAW.c	/^static void debugMutexLeave(sqlite3_mutex *pX){$/;"	f	file:
debugMutexNotheld	sqlite3_MFAW.c	/^static int debugMutexNotheld(sqlite3_mutex *pX){$/;"	f	file:
debugMutexTry	sqlite3_MFAW.c	/^static int debugMutexTry(sqlite3_mutex *pX){$/;"	f	file:
declareVtab	sqlite3_MFAW.c	/^  u8 declareVtab;           \/* True if inside sqlite3_declare_vtab() *\/$/;"	m	struct:Parse	file:
declare_vtab	sqlite3_MFAW.c	/^  int (*declare_vtab)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
decodeFlags	sqlite3_MFAW.c	/^static int decodeFlags(MemPage *pPage, int flagByte){$/;"	f	file:
decodeIntArray	sqlite3_MFAW.c	/^static void decodeIntArray($/;"	f	file:
default_rc	sqlite3_MFAW.c	/^  i8 default_rc;      \/* Comparison result if keys are equal *\/$/;"	m	struct:UnpackedRecord	file:
deferredMoveto	sqlite3_MFAW.c	/^  u8 deferredMoveto;    \/* A call to sqlite3BtreeMoveto() is needed *\/$/;"	m	struct:VdbeCursor	file:
defragmentPage	sqlite3_MFAW.c	/^static int defragmentPage(MemPage *pPage){$/;"	f	file:
deleteCell	sqlite3_MFAW.c	/^static int deleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell, int iHeight){$/;"	f	file:
delim	sqlite3_MFAW.c	/^  char delim[128];             \/* flag ASCII delimiters *\/$/;"	m	struct:simple_tokenizer	file:
desc	sqlite3_MFAW.c	/^     unsigned char desc;       \/* True for DESC.  False for ASC. *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:
deserializeGeometry	sqlite3_MFAW.c	/^static int deserializeGeometry(sqlite3_value *pValue, RtreeConstraint *pCons){$/;"	f	file:
destroyRootPage	sqlite3_MFAW.c	/^static void destroyRootPage(Parse *pParse, int iTable, int iDb){$/;"	f	file:
destroyTable	sqlite3_MFAW.c	/^static void destroyTable(Parse *pParse, Table *pTab){$/;"	f	file:
detachFunc	sqlite3_MFAW.c	/^static void detachFunc($/;"	f	file:
dev	sqlite3_MFAW.c	/^  dev_t dev;                  \/* Device number *\/$/;"	m	struct:unixFileId	file:
deviceCharacteristics	sqlite3_MFAW.c	/^  int deviceCharacteristics;          \/* Precomputed device characteristics *\/$/;"	m	struct:unixFile	file:
dfltLockMode	sqlite3_MFAW.c	/^  u8 dfltLockMode;              \/* Default locking-mode for attached dbs *\/$/;"	m	struct:sqlite3	file:
directMode	sqlite3_MFAW.c	/^  u8 directMode;          \/* Direct rendering mode means take data directly$/;"	m	struct:AggInfo	file:
disableTerm	sqlite3_MFAW.c	/^static void disableTerm(WhereLevel *pLevel, WhereTerm *pTerm){$/;"	f	file:
disableTriggers	sqlite3_MFAW.c	/^  u8 disableTriggers;  \/* True to disable triggers *\/$/;"	m	struct:Parse	file:
disable_simulated_io_errors	sqlite3_MFAW.c	/^void disable_simulated_io_errors(void){$/;"	f
disable_simulated_io_errors	sqlite3_MFAW.c	10328;"	d	file:
disable_simulated_io_errors	sqlite3_MFAW.c	45376;"	d	file:
disallow	sqlite3_MFAW.c	/^  int disallow; \/* Do not allow memory allocation *\/$/;"	m	struct:__anon9	file:
disconnectAllVtab	sqlite3_MFAW.c	/^static void disconnectAllVtab(sqlite3 *db){$/;"	f	file:
displayComment	sqlite3_MFAW.c	/^static int displayComment($/;"	f	file:
displayP4	sqlite3_MFAW.c	/^static char *displayP4(Op *pOp, char *zTemp, int nTemp){$/;"	f	file:
doNotSpill	sqlite3_MFAW.c	/^  u8 doNotSpill;              \/* Do not spill the cache when non-zero *\/$/;"	m	struct:Pager	file:
doWalCallbacks	sqlite3_MFAW.c	/^static int doWalCallbacks(sqlite3 *db){$/;"	f	file:
do_script	mobibench.c	/^int do_script(struct script_entry* se, struct script_thread_time* st)$/;"	f
do_script	mobibench_MFAW.c	/^int do_script(struct script_entry* se, struct script_thread_time* st)$/;"	f
doclist	sqlite3_MFAW.c	/^  Fts3Doclist doclist;$/;"	m	struct:Fts3Phrase	file:
doingRerun	sqlite3_MFAW.c	/^  bft doingRerun:1;       \/* True if rerunning after an auto-reprepare *\/$/;"	m	struct:Vdbe	file:
done	sqlite3_MFAW.c	/^    unsigned done :1;       \/* A flag to indicate when processing is finished *\/$/;"	m	struct:ExprList::ExprList_item	file:
done	sqlite3_MFAW.c	/^  int done;                      \/* Set to true when thread finishes *\/$/;"	m	struct:SQLiteThread	file:
dotlockCheckReservedLock	sqlite3_MFAW.c	/^static int dotlockCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
dotlockClose	sqlite3_MFAW.c	/^static int dotlockClose(sqlite3_file *id) {$/;"	f	file:
dotlockLock	sqlite3_MFAW.c	/^static int dotlockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
dotlockUnlock	sqlite3_MFAW.c	/^static int dotlockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
double	sqlite3_MFAW.c	476;"	d	file:
double	sqlite3_MFAW.c	7917;"	d	file:
double	sqlite3_MFAW.c	8832;"	d	file:
doubleConsonant	sqlite3_MFAW.c	/^static int doubleConsonant(const char *z){$/;"	f	file:
doubleToInt64	sqlite3_MFAW.c	/^static i64 doubleToInt64(double r){$/;"	f	file:
downgradeAllSharedCacheTableLocks	sqlite3_MFAW.c	/^static void downgradeAllSharedCacheTableLocks(Btree *p){$/;"	f	file:
downgradeAllSharedCacheTableLocks	sqlite3_MFAW.c	53230;"	d	file:
dropCell	sqlite3_MFAW.c	/^static void dropCell(MemPage *pPage, int idx, int sz, int *pRC){$/;"	f	file:
drop_caches	mobibench.c	/^void drop_caches(void)$/;"	f
drop_caches	mobibench_MFAW.c	/^void drop_caches(void)$/;"	f
dup8bytes	sqlite3_MFAW.c	/^static char *dup8bytes(Vdbe *v, const char *in){$/;"	f	file:
dupedExprNodeSize	sqlite3_MFAW.c	/^static int dupedExprNodeSize(Expr *p, int flags){$/;"	f	file:
dupedExprSize	sqlite3_MFAW.c	/^static int dupedExprSize(Expr *p, int flags){$/;"	f	file:
dupedExprStructSize	sqlite3_MFAW.c	/^static int dupedExprStructSize(Expr *p, int flags){$/;"	f	file:
eCode	sqlite3_MFAW.c	/^  u8 eCode;                                 \/* A small processing code *\/$/;"	m	struct:Walker	file:
eCoordType	sqlite3_MFAW.c	/^  u8 eCoordType;              \/* RTREE_COORD_REAL32 or RTREE_COORD_INT32 *\/$/;"	m	struct:Rtree	file:
eCreate	sqlite3_MFAW.c	/^  u8 eCreate;                         \/* eCreate value for for xFetch() *\/$/;"	m	struct:PCache	file:
eDest	sqlite3_MFAW.c	/^  u8 eDest;            \/* How to dispose of the results.  On of SRT_* above. *\/$/;"	m	struct:SelectDest	file:
eDistinct	sqlite3_MFAW.c	/^  u8 eDistinct;             \/* One of the WHERE_DISTINCT_* values below *\/$/;"	m	struct:WhereInfo	file:
eEndLoopOp	sqlite3_MFAW.c	/^        u8 eEndLoopOp;         \/* IN Loop terminator. OP_Next or OP_Prev *\/$/;"	m	struct:WhereLevel::__anon16::__anon17::InLoop	file:
eEvalmode	sqlite3_MFAW.c	/^  int eEvalmode;                  \/* An FTS3_EVAL_XX constant *\/$/;"	m	struct:Fts3Cursor	file:
eFWErr	sqlite3_MFAW.c	/^  int eFWErr;                     \/* Non-zero if in an error state *\/$/;"	m	struct:PmaWriter	file:
eFileLock	sqlite3_MFAW.c	/^  unsigned char eFileLock;            \/* The type of lock held on this fd *\/$/;"	m	struct:unixFile	file:
eFileLock	sqlite3_MFAW.c	/^  unsigned char eFileLock;        \/* One of SHARED_LOCK, RESERVED_LOCK etc. *\/$/;"	m	struct:unixInodeInfo	file:
eLock	sqlite3_MFAW.c	/^  u8 eLock;                   \/* Current lock held on database file *\/$/;"	m	struct:Pager	file:
eLock	sqlite3_MFAW.c	/^  u8 eLock;             \/* READ_LOCK or WRITE_LOCK *\/$/;"	m	struct:BtLock	file:
eOperator	sqlite3_MFAW.c	/^  Token eOperator;  \/* "like" or "glob" or "regexp" *\/$/;"	m	struct:LikeOp	file:
eOperator	sqlite3_MFAW.c	/^  u16 eOperator;          \/* A WO_xx value describing <op> *\/$/;"	m	struct:WhereTerm	file:
eOrconf	sqlite3_MFAW.c	/^  u8 eOrconf;          \/* Default ON CONFLICT policy for trigger steps *\/$/;"	m	struct:Parse	file:
eParentWithin	sqlite3_MFAW.c	/^  int eParentWithin;                \/* Visibility of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
ePragTyp	sqlite3_MFAW.c	/^  u8 ePragTyp;              \/* PragTyp_XXX value *\/$/;"	m	struct:sPragmaNames	file:
eSearch	sqlite3_MFAW.c	/^  i16 eSearch;                    \/* Search strategy (see below) *\/$/;"	m	struct:Fts3Cursor	file:
eState	sqlite3_MFAW.c	/^  u8 eState;                  \/* Pager state (OPEN, READER, WRITER_LOCKED..) *\/$/;"	m	struct:Pager	file:
eState	sqlite3_MFAW.c	/^  u8 eState;                \/* One of the CURSOR_XXX constants (see below) *\/$/;"	m	struct:BtCursor	file:
eTnctType	sqlite3_MFAW.c	/^  u8 eTnctType;   \/* One of the WHERE_DISTINCT_* operators *\/$/;"	m	struct:DistinctCtx	file:
eTriggerOp	sqlite3_MFAW.c	/^  u8 eTriggerOp;       \/* TK_UPDATE, TK_INSERT or TK_DELETE *\/$/;"	m	struct:Parse	file:
eType	sqlite3_MFAW.c	/^  int eType;                 \/* One of the FTSQUERY_XXX values defined below *\/$/;"	m	struct:Fts3Expr	file:
eType	sqlite3_MFAW.c	/^  u8 eType;                           \/* Allocation type code *\/$/;"	m	struct:MemBlockHdr	file:
eWithin	sqlite3_MFAW.c	/^  int eWithin;                      \/* OUT: Visiblity *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
eWithin	sqlite3_MFAW.c	/^  u8 eWithin;            \/* PARTLY_WITHIN or FULLY_WITHIN *\/$/;"	m	struct:RtreeSearchPoint	file:
ebcdicToAscii	sqlite3_MFAW.c	/^const unsigned char ebcdicToAscii[] = {$/;"	v
editPage	sqlite3_MFAW.c	/^static void editPage($/;"	f	file:
enable_shared_cache	sqlite3_MFAW.c	/^  int  (*enable_shared_cache)(int);$/;"	m	struct:sqlite3_api_routines	file:
enable_simulated_io_errors	sqlite3_MFAW.c	/^void enable_simulated_io_errors(void){$/;"	f
enable_simulated_io_errors	sqlite3_MFAW.c	10329;"	d	file:
enable_simulated_io_errors	sqlite3_MFAW.c	45377;"	d	file:
enc	sqlite3_MFAW.c	/^  u8  enc;            \/* SQLITE_UTF8, SQLITE_UTF16BE, SQLITE_UTF16LE *\/$/;"	m	struct:Mem	file:
enc	sqlite3_MFAW.c	/^  u8 enc;                       \/* Text encoding *\/$/;"	m	struct:sqlite3	file:
enc	sqlite3_MFAW.c	/^  u8 enc;               \/* Text encoding handled by xCmp() *\/$/;"	m	struct:CollSeq	file:
enc	sqlite3_MFAW.c	/^  u8 enc;              \/* Text encoding used by this database *\/$/;"	m	struct:Schema	file:
enc	sqlite3_MFAW.c	/^  u8 enc;             \/* Text encoding - one of the SQLITE_UTF* values *\/$/;"	m	struct:KeyInfo	file:
end	mobibench.c	/^	long long end;$/;"	m	struct:script_thread_time	file:
end	mobibench_MFAW.c	/^	long long end;$/;"	m	struct:script_thread_time	file:
ended	mobibench.c	/^	int ended;$/;"	m	struct:script_thread_time	file:
ended	mobibench_MFAW.c	/^	int ended;$/;"	m	struct:script_thread_time	file:
endpoint	sqlite3_MFAW.c	/^  FilePoint endpoint;             \/* Pointer to the end of the file *\/$/;"	m	struct:MemJournal	file:
enlargeAndAppend	sqlite3_MFAW.c	/^static void SQLITE_NOINLINE enlargeAndAppend(StrAccum *p, const char *z, int N){$/;"	f	file:
enterMutex	sqlite3_MFAW.c	/^static void enterMutex(void){$/;"	f	file:
errCode	sqlite3_MFAW.c	/^  int errCode;                  \/* Most recent error code (SQLITE_*) *\/$/;"	m	struct:sqlite3	file:
errCode	sqlite3_MFAW.c	/^  int errCode;                \/* One of several kinds of errors *\/$/;"	m	struct:Pager	file:
errCode	sqlite3_MFAW.c	/^  u8 errCode;         \/* Error detected by xRecordCompare (CORRUPT or NOMEM) *\/$/;"	m	struct:UnpackedRecord	file:
errMask	sqlite3_MFAW.c	/^  int errMask;                  \/* & result codes with this before returning *\/$/;"	m	struct:sqlite3	file:
errMsg	sqlite3_MFAW.c	/^  StrAccum errMsg;  \/* Accumulate the error message text here *\/$/;"	m	struct:IntegrityCk	file:
errcode	sqlite3_MFAW.c	/^  int  (*errcode)(sqlite3*db);$/;"	m	struct:sqlite3_api_routines	file:
errlogFunc	sqlite3_MFAW.c	/^static void errlogFunc($/;"	f	file:
errmsg	sqlite3_MFAW.c	/^  const char * (*errmsg)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
errmsg16	sqlite3_MFAW.c	/^  const void * (*errmsg16)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
errorAction	sqlite3_MFAW.c	/^  u8 errorAction;         \/* Recovery action to do in case of an error *\/$/;"	m	struct:Vdbe	file:
errstr	sqlite3_MFAW.c	/^  const char *(*errstr)(int);$/;"	m	struct:sqlite3_api_routines	file:
estLog	sqlite3_MFAW.c	/^static LogEst estLog(LogEst N){$/;"	f	file:
estimateIndexWidth	sqlite3_MFAW.c	/^static void estimateIndexWidth(Index *pIdx){$/;"	f	file:
estimateTableWidth	sqlite3_MFAW.c	/^static void estimateTableWidth(Table *pTab){$/;"	f	file:
estimatedCost	sqlite3_MFAW.c	/^  double estimatedCost;           \/* Estimated cost of using this index *\/$/;"	m	struct:sqlite3_index_info	file:
estimatedRows	sqlite3_MFAW.c	/^  sqlite3_int64 estimatedRows;    \/* Estimated number of rows returned *\/$/;"	m	struct:sqlite3_index_info	file:
etBUFSIZE	sqlite3_MFAW.c	21517;"	d	file:
etByte	sqlite3_MFAW.c	/^typedef unsigned char etByte;$/;"	t	file:
etCHARX	sqlite3_MFAW.c	21376;"	d	file:
etDYNSTRING	sqlite3_MFAW.c	21374;"	d	file:
etEXP	sqlite3_MFAW.c	21370;"	d	file:
etFLOAT	sqlite3_MFAW.c	21369;"	d	file:
etGENERIC	sqlite3_MFAW.c	21371;"	d	file:
etINVALID	sqlite3_MFAW.c	21387;"	d	file:
etORDINAL	sqlite3_MFAW.c	21385;"	d	file:
etPERCENT	sqlite3_MFAW.c	21375;"	d	file:
etPOINTER	sqlite3_MFAW.c	21383;"	d	file:
etRADIX	sqlite3_MFAW.c	21368;"	d	file:
etSIZE	sqlite3_MFAW.c	21372;"	d	file:
etSQLESCAPE	sqlite3_MFAW.c	21378;"	d	file:
etSQLESCAPE2	sqlite3_MFAW.c	21379;"	d	file:
etSQLESCAPE3	sqlite3_MFAW.c	21384;"	d	file:
etSRCLIST	sqlite3_MFAW.c	21382;"	d	file:
etSTRING	sqlite3_MFAW.c	21373;"	d	file:
etTOKEN	sqlite3_MFAW.c	21381;"	d	file:
et_getdigit	sqlite3_MFAW.c	/^static char et_getdigit(LONGDOUBLE_TYPE *val, int *cnt){$/;"	f	file:
et_info	sqlite3_MFAW.c	/^typedef struct et_info {   \/* Information about each format field *\/$/;"	s	file:
et_info	sqlite3_MFAW.c	/^} et_info;$/;"	t	typeref:struct:et_info	file:
exclMask	sqlite3_MFAW.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShm	file:
exclMask	sqlite3_MFAW.c	/^  u16 exclMask;              \/* Mask of exclusive locks held *\/$/;"	m	struct:winShm	file:
exclMask	sqlite3_MFAW.c	/^  u8 exclMask;               \/* Mask of exclusive locks held *\/$/;"	m	struct:unixShmNode	file:
exclusiveMode	sqlite3_MFAW.c	/^  u8 exclusiveMode;           \/* Boolean. True if locking_mode==EXCLUSIVE *\/$/;"	m	struct:Pager	file:
exclusiveMode	sqlite3_MFAW.c	/^  u8 exclusiveMode;          \/* Non-zero if connection is in exclusive mode *\/$/;"	m	struct:Wal	file:
exec	sqlite3_MFAW.c	/^  int  (*exec)(sqlite3*,const char*,sqlite3_callback,void*,char**);$/;"	m	struct:sqlite3_api_routines	file:
execExecSql	sqlite3_MFAW.c	/^static int execExecSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:
execSql	sqlite3_MFAW.c	/^static int execSql(sqlite3 *db, char **pzErrMsg, const char *zSql){$/;"	f	file:
exec_sql	mobibench.c	1233;"	d	file:
exec_sql	mobibench_MFAW.c	1233;"	d	file:
expired	sqlite3_MFAW.c	/^  bft expired:1;          \/* True if the VM needs to be recompiled *\/$/;"	m	struct:Vdbe	file:
expired	sqlite3_MFAW.c	/^  int  (*expired)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
explain	sqlite3_MFAW.c	/^  bft explain:2;          \/* True if EXPLAIN present on SQL command *\/$/;"	m	struct:Vdbe	file:
explain	sqlite3_MFAW.c	/^  u8 explain;               \/* True if the EXPLAIN flag is found on the query *\/$/;"	m	struct:Parse	file:
explainAppendTerm	sqlite3_MFAW.c	/^static void explainAppendTerm($/;"	f	file:
explainComposite	sqlite3_MFAW.c	/^static void explainComposite($/;"	f	file:
explainComposite	sqlite3_MFAW.c	107697;"	d	file:
explainIndexRange	sqlite3_MFAW.c	/^static void explainIndexRange(StrAccum *pStr, WhereLoop *pLoop, Table *pTab){$/;"	f	file:
explainOneScan	sqlite3_MFAW.c	/^static int explainOneScan($/;"	f	file:
explainOneScan	sqlite3_MFAW.c	119427;"	d	file:
explainSetInteger	sqlite3_MFAW.c	107655;"	d	file:
explainSetInteger	sqlite3_MFAW.c	107660;"	d	file:
explainSimpleCount	sqlite3_MFAW.c	/^static void explainSimpleCount($/;"	f	file:
explainSimpleCount	sqlite3_MFAW.c	111233;"	d	file:
explainTempTable	sqlite3_MFAW.c	/^static void explainTempTable(Parse *pParse, const char *zUsage){$/;"	f	file:
explainTempTable	sqlite3_MFAW.c	107659;"	d	file:
expmask	sqlite3_MFAW.c	/^  u32 expmask;            \/* Binding to these vars invalidates VM *\/$/;"	m	struct:Vdbe	file:
exprAlwaysFalse	sqlite3_MFAW.c	/^static int exprAlwaysFalse(Expr *p){$/;"	f	file:
exprAlwaysTrue	sqlite3_MFAW.c	/^static int exprAlwaysTrue(Expr *p){$/;"	f	file:
exprAnalyze	sqlite3_MFAW.c	/^static void exprAnalyze($/;"	f	file:
exprAnalyzeAll	sqlite3_MFAW.c	/^static void exprAnalyzeAll($/;"	f	file:
exprAnalyzeOrTerm	sqlite3_MFAW.c	/^static void exprAnalyzeOrTerm($/;"	f	file:
exprCodeBetween	sqlite3_MFAW.c	/^static void exprCodeBetween($/;"	f	file:
exprCommute	sqlite3_MFAW.c	/^static void exprCommute(Parse *pParse, Expr *pExpr){$/;"	f	file:
exprDup	sqlite3_MFAW.c	/^static Expr *exprDup(sqlite3 *db, Expr *p, int flags, u8 **pzBuffer){$/;"	f	file:
exprIsConst	sqlite3_MFAW.c	/^static int exprIsConst(Expr *p, int initFlag, int iCur){$/;"	f	file:
exprListTableUsage	sqlite3_MFAW.c	/^static Bitmask exprListTableUsage(WhereMaskSet *pMaskSet, ExprList *pList){$/;"	f	file:
exprNodeIsConstant	sqlite3_MFAW.c	/^static int exprNodeIsConstant(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprProbability	sqlite3_MFAW.c	/^static int exprProbability(Expr *p){$/;"	f	file:
exprSelectTableUsage	sqlite3_MFAW.c	/^static Bitmask exprSelectTableUsage(WhereMaskSet *pMaskSet, Select *pS){$/;"	f	file:
exprSetHeight	sqlite3_MFAW.c	/^static void exprSetHeight(Expr *p){$/;"	f	file:
exprSetHeight	sqlite3_MFAW.c	83304;"	d	file:
exprSrcCount	sqlite3_MFAW.c	/^static int exprSrcCount(Walker *pWalker, Expr *pExpr){$/;"	f	file:
exprStructSize	sqlite3_MFAW.c	/^static int exprStructSize(Expr *p){$/;"	f	file:
exprTableColumn	sqlite3_MFAW.c	/^static Expr *exprTableColumn($/;"	f	file:
exprTableRegister	sqlite3_MFAW.c	/^static Expr *exprTableRegister($/;"	f	file:
exprTableUsage	sqlite3_MFAW.c	/^static Bitmask exprTableUsage(WhereMaskSet *pMaskSet, Expr *p){$/;"	f	file:
exprToRegister	sqlite3_MFAW.c	/^static void exprToRegister(Expr *p, int iReg){$/;"	f	file:
exprToString	sqlite3_MFAW.c	/^static char *exprToString(Fts3Expr *pExpr, char *zBuf){$/;"	f	file:
exprWalkNoop	sqlite3_MFAW.c	/^static int exprWalkNoop(Walker *NotUsed, Expr *NotUsed2){$/;"	f	file:
extended_errcode	sqlite3_MFAW.c	/^  int (*extended_errcode)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
extended_result_codes	sqlite3_MFAW.c	/^  int (*extended_result_codes)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:
f	sqlite3_MFAW.c	/^  RtreeValue f;      \/* Floating point value *\/$/;"	m	union:RtreeCoord	file:
fErrorOrAux	sqlite3_MFAW.c	/^  u8 fErrorOrAux;       \/* isError!=0 or pVdbe->pAuxData modified *\/$/;"	m	struct:sqlite3_context	file:
fcntlSizeHint	sqlite3_MFAW.c	/^static int fcntlSizeHint(unixFile *pFile, i64 nByte){$/;"	f	file:
fd	sqlite3_MFAW.c	/^  int fd;                           \/* file desc to assoc this lock with *\/$/;"	m	struct:ByteRangeLockPB2	file:
fd	sqlite3_MFAW.c	/^  int fd;                   \/* File descriptor to close *\/$/;"	m	struct:UnixUnusedFd	file:
fd	sqlite3_MFAW.c	/^  sqlite3_file *fd;           \/* File descriptor for database *\/$/;"	m	struct:Pager	file:
fd_lock	mobibench.c	/^pthread_mutex_t fd_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v
fd_lock	mobibench_MFAW.c	/^pthread_mutex_t fd_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v
fd_new	mobibench.c	/^	int* fd_new;$/;"	m	struct:script_fd_conv	file:
fd_new	mobibench_MFAW.c	/^	int* fd_new;$/;"	m	struct:script_fd_conv	file:
fd_org	mobibench.c	/^	int* fd_org;$/;"	m	struct:script_fd_conv	file:
fd_org	mobibench_MFAW.c	/^	int* fd_org;$/;"	m	struct:script_fd_conv	file:
fdatasync	sqlite3_MFAW.c	28876;"	d	file:
fetchPayload	sqlite3_MFAW.c	/^static const void *fetchPayload($/;"	f	file:
file	sqlite3_MFAW.c	/^  SorterFile file;                \/* Temp file for level-0 PMAs *\/$/;"	m	struct:SortSubtask	file:
file2	sqlite3_MFAW.c	/^  SorterFile file2;               \/* Space for other PMAs *\/$/;"	m	struct:SortSubtask	file:
fileHasMoved	sqlite3_MFAW.c	/^static int fileHasMoved(unixFile *pFile){$/;"	f	file:
fileId	sqlite3_MFAW.c	/^  struct unixFileId fileId;       \/* The lookup key *\/$/;"	m	struct:unixInodeInfo	typeref:struct:unixInodeInfo::unixFileId	file:
file_control	sqlite3_MFAW.c	/^  int (*file_control)(sqlite3*,const char*,int,void*);$/;"	m	struct:sqlite3_api_routines	file:
file_format	sqlite3_MFAW.c	/^  u8 file_format;      \/* Schema format version for this file *\/$/;"	m	struct:Schema	file:
file_sync_mode_t	mobibench.c	/^} file_sync_mode_t;$/;"	t	typeref:enum:__anon30	file:
file_sync_mode_t	mobibench_MFAW.c	/^} file_sync_mode_t;$/;"	t	typeref:enum:__anon27	file:
file_test_mode_t	mobibench.c	/^} file_test_mode_t;$/;"	t	typeref:enum:__anon29	file:
file_test_mode_t	mobibench_MFAW.c	/^} file_test_mode_t;$/;"	t	typeref:enum:__anon26	file:
filebytes64	mobibench.c	/^long long filebytes64;$/;"	v
filebytes64	mobibench_MFAW.c	/^long long filebytes64;$/;"	v
fillInCell	sqlite3_MFAW.c	/^static int fillInCell($/;"	f	file:
fillInUnixFile	sqlite3_MFAW.c	/^static int fillInUnixFile($/;"	f	file:
filter	sqlite3_MFAW.c	/^  Fts3SegFilter filter;$/;"	m	struct:Fts3auxCursor	file:
finalDbSize	sqlite3_MFAW.c	/^static Pgno finalDbSize(BtShared *pBt, Pgno nOrig, Pgno nFree){$/;"	f	file:
finalize	sqlite3_MFAW.c	/^  int  (*finalize)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
finalizeAggFunctions	sqlite3_MFAW.c	/^static void finalizeAggFunctions(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
findBtree	sqlite3_MFAW.c	/^static Btree *findBtree(sqlite3 *pErrorDb, sqlite3 *pDb, const char *zDb){$/;"	f	file:
findCell	sqlite3_MFAW.c	54077;"	d	file:
findCellv2	sqlite3_MFAW.c	54079;"	d	file:
findCollSeqEntry	sqlite3_MFAW.c	/^static CollSeq *findCollSeqEntry($/;"	f	file:
findCreateFileMode	sqlite3_MFAW.c	/^static int findCreateFileMode($/;"	f	file:
findElementWithHash	sqlite3_MFAW.c	/^static HashElem *findElementWithHash($/;"	f	file:
findIndexCol	sqlite3_MFAW.c	/^static int findIndexCol($/;"	f	file:
findIndexOrPrimaryKey	sqlite3_MFAW.c	/^static Index *findIndexOrPrimaryKey($/;"	f	file:
findInodeInfo	sqlite3_MFAW.c	/^static int findInodeInfo($/;"	f	file:
findLeafNode	sqlite3_MFAW.c	/^static int findLeafNode($/;"	f	file:
findNextHostParameter	sqlite3_MFAW.c	/^static int findNextHostParameter(const char *zSql, int *pnToken){$/;"	f	file:
findOverflowCell	sqlite3_MFAW.c	/^static u8 *findOverflowCell(MemPage *pPage, int iCell){$/;"	f	file:
findReusableFd	sqlite3_MFAW.c	/^static UnixUnusedFd *findReusableFd(const char *zPath, int flags){$/;"	f	file:
findRightmost	sqlite3_MFAW.c	/^static Select *findRightmost(Select *p){$/;"	f	file:
findTerm	sqlite3_MFAW.c	/^static WhereTerm *findTerm($/;"	f	file:
finder_type	sqlite3_MFAW.c	/^typedef const sqlite3_io_methods *(*finder_type)(const char*,unixFile*);$/;"	t	file:
first	sqlite3_MFAW.c	/^  Fts3HashElem *first;    \/* The first element of the array *\/$/;"	m	struct:Fts3Hash	file:
first	sqlite3_MFAW.c	/^  HashElem *first;          \/* The first element of the array *\/$/;"	m	struct:Hash	file:
fixBoundingBox	sqlite3_MFAW.c	/^static int fixBoundingBox(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
fixLeafParent	sqlite3_MFAW.c	/^static int fixLeafParent(Rtree *pRtree, RtreeNode *pLeaf){$/;"	f	file:
fkActionTrigger	sqlite3_MFAW.c	/^static Trigger *fkActionTrigger($/;"	f	file:
fkChildIsModified	sqlite3_MFAW.c	/^static int fkChildIsModified($/;"	f	file:
fkLookupParent	sqlite3_MFAW.c	/^static void fkLookupParent($/;"	f	file:
fkParentIsModified	sqlite3_MFAW.c	/^static int fkParentIsModified($/;"	f	file:
fkScanChildren	sqlite3_MFAW.c	/^static void fkScanChildren($/;"	f	file:
fkTriggerDelete	sqlite3_MFAW.c	/^static void fkTriggerDelete(sqlite3 *dbMem, Trigger *p){$/;"	f	file:
fkeyHash	sqlite3_MFAW.c	/^  Hash fkeyHash;       \/* All foreign keys by referenced table name *\/$/;"	m	struct:Schema	file:
flags	sqlite3_MFAW.c	/^  etByte flags;            \/* One or more of FLAG_ constants below *\/$/;"	m	struct:et_info	file:
flags	sqlite3_MFAW.c	/^  int flags;                      \/* xOpen flags *\/$/;"	m	struct:JournalFile	file:
flags	sqlite3_MFAW.c	/^  int flags;                    \/* Miscellaneous flags. See below *\/$/;"	m	struct:sqlite3	file:
flags	sqlite3_MFAW.c	/^  int flags;                \/* Flags this file descriptor was opened with *\/$/;"	m	struct:UnixUnusedFd	file:
flags	sqlite3_MFAW.c	/^  int flags;              \/* Copy of "flags" passed to sqlite3_blob_open() *\/$/;"	m	struct:Incrblob	file:
flags	sqlite3_MFAW.c	/^  int flags;$/;"	m	struct:Fts3SegFilter	file:
flags	sqlite3_MFAW.c	/^  u16 flags;                     \/* PGHDR flags defined below *\/$/;"	m	struct:PgHdr	file:
flags	sqlite3_MFAW.c	/^  u16 flags;          \/* Some combination of MEM_Null, MEM_Str, MEM_Dyn, etc. *\/$/;"	m	struct:Mem	file:
flags	sqlite3_MFAW.c	/^  u32 flags;             \/* Various flags.  EP_* See below *\/$/;"	m	struct:Expr	file:
flags	sqlite3_MFAW.c	/^  u8 flags;                       \/* Copy of flags byte *\/$/;"	m	struct:StatPage	file:
flattenSubquery	sqlite3_MFAW.c	/^static int flattenSubquery($/;"	f	file:
float	sqlite3_MFAW.c	8833;"	d	file:
floatSwap	sqlite3_MFAW.c	/^static u64 floatSwap(u64 in){$/;"	f	file:
flockCheckReservedLock	sqlite3_MFAW.c	/^static int flockCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
flockClose	sqlite3_MFAW.c	/^static int flockClose(sqlite3_file *id) {$/;"	f	file:
flockLock	sqlite3_MFAW.c	/^static int flockLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
flockUnlock	sqlite3_MFAW.c	/^static int flockUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
fmtinfo	sqlite3_MFAW.c	/^static const et_info fmtinfo[] = {$/;"	v	file:
fmttype	sqlite3_MFAW.c	/^  char fmttype;            \/* The format field code letter *\/$/;"	m	struct:et_info	file:
free	sqlite3_MFAW.c	/^  void  (*free)(void*);$/;"	m	struct:sqlite3_api_routines	file:
freeCursorConstraints	sqlite3_MFAW.c	/^static void freeCursorConstraints(RtreeCursor *pCsr){$/;"	f	file:
freeEphemeralFunction	sqlite3_MFAW.c	/^static void freeEphemeralFunction(sqlite3 *db, FuncDef *pDef){$/;"	f	file:
freeIndex	sqlite3_MFAW.c	/^static void freeIndex(sqlite3 *db, Index *p){$/;"	f	file:
freeP4	sqlite3_MFAW.c	/^static void freeP4(sqlite3 *db, int p4type, void *p4){$/;"	f	file:
freePage	sqlite3_MFAW.c	/^static void freePage(MemPage *pPage, int *pRC){$/;"	f	file:
freePage2	sqlite3_MFAW.c	/^static int freePage2(BtShared *pBt, MemPage *pMemPage, Pgno iPage){$/;"	f	file:
freeSpace	sqlite3_MFAW.c	/^static int freeSpace(MemPage *pPage, u16 iStart, u16 iSize){$/;"	f	file:
freeTempSpace	sqlite3_MFAW.c	/^static void freeTempSpace(BtShared *pBt){$/;"	f	file:
free_table	sqlite3_MFAW.c	/^  void  (*free_table)(char**result);$/;"	m	struct:sqlite3_api_routines	file:
fsFlags	sqlite3_MFAW.c	/^  unsigned fsFlags;                   \/* cached details from statfs() *\/$/;"	m	struct:unixFile	file:
fts3AllocateSegdirIdx	sqlite3_MFAW.c	/^static int fts3AllocateSegdirIdx($/;"	f	file:
fts3AppendToNode	sqlite3_MFAW.c	/^static int fts3AppendToNode($/;"	f	file:
fts3Appendf	sqlite3_MFAW.c	/^static void fts3Appendf($/;"	f	file:
fts3BeginMethod	sqlite3_MFAW.c	/^static int fts3BeginMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3BestIndexMethod	sqlite3_MFAW.c	/^static int fts3BestIndexMethod(sqlite3_vtab *pVTab, sqlite3_index_info *pInfo){$/;"	f	file:
fts3BestSnippet	sqlite3_MFAW.c	/^static int fts3BestSnippet($/;"	f	file:
fts3BinCompare	sqlite3_MFAW.c	/^static int fts3BinCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:
fts3BinHash	sqlite3_MFAW.c	/^static int fts3BinHash(const void *pKey, int nKey){$/;"	f	file:
fts3ChecksumEntry	sqlite3_MFAW.c	/^static u64 fts3ChecksumEntry($/;"	f	file:
fts3ChecksumIndex	sqlite3_MFAW.c	/^static u64 fts3ChecksumIndex($/;"	f	file:
fts3CloseMethod	sqlite3_MFAW.c	/^static int fts3CloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3ColumnFilter	sqlite3_MFAW.c	/^static void fts3ColumnFilter($/;"	f	file:
fts3ColumnMethod	sqlite3_MFAW.c	/^static int fts3ColumnMethod($/;"	f	file:
fts3ColumnlistCopy	sqlite3_MFAW.c	/^static void fts3ColumnlistCopy(char **pp, char **ppPoslist){$/;"	f	file:
fts3ColumnlistCount	sqlite3_MFAW.c	/^static int fts3ColumnlistCount(char **ppCollist){$/;"	f	file:
fts3CommitMethod	sqlite3_MFAW.c	/^static int fts3CommitMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3CompareElemByTerm	sqlite3_MFAW.c	/^static int SQLITE_CDECL fts3CompareElemByTerm($/;"	f	file:
fts3ConnectMethod	sqlite3_MFAW.c	/^static int fts3ConnectMethod($/;"	f	file:
fts3ContentColumns	sqlite3_MFAW.c	/^static int fts3ContentColumns($/;"	f	file:
fts3CreateMethod	sqlite3_MFAW.c	/^static int fts3CreateMethod($/;"	f	file:
fts3CreateTables	sqlite3_MFAW.c	/^static int fts3CreateTables(Fts3Table *p){$/;"	f	file:
fts3CursorSeek	sqlite3_MFAW.c	/^static int fts3CursorSeek(sqlite3_context *pContext, Fts3Cursor *pCsr){$/;"	f	file:
fts3CursorSeekStmt	sqlite3_MFAW.c	/^static int fts3CursorSeekStmt(Fts3Cursor *pCsr, sqlite3_stmt **ppStmt){$/;"	f	file:
fts3DatabasePageSize	sqlite3_MFAW.c	/^static void fts3DatabasePageSize(int *pRc, Fts3Table *p){$/;"	f	file:
fts3DbExec	sqlite3_MFAW.c	/^static void fts3DbExec($/;"	f	file:
fts3DeclareVtab	sqlite3_MFAW.c	/^static void fts3DeclareVtab(int *pRc, Fts3Table *p){$/;"	f	file:
fts3DecodeIntArray	sqlite3_MFAW.c	/^static void fts3DecodeIntArray($/;"	f	file:
fts3DeleteAll	sqlite3_MFAW.c	/^static int fts3DeleteAll(Fts3Table *p, int bContent){$/;"	f	file:
fts3DeleteByRowid	sqlite3_MFAW.c	/^static int fts3DeleteByRowid($/;"	f	file:
fts3DeleteSegdir	sqlite3_MFAW.c	/^static int fts3DeleteSegdir($/;"	f	file:
fts3DeleteSegment	sqlite3_MFAW.c	/^static int fts3DeleteSegment($/;"	f	file:
fts3DeleteTerms	sqlite3_MFAW.c	/^static void fts3DeleteTerms( $/;"	f	file:
fts3DestroyMethod	sqlite3_MFAW.c	/^static int fts3DestroyMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3DisconnectMethod	sqlite3_MFAW.c	/^static int fts3DisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3DoAutoincrmerge	sqlite3_MFAW.c	/^static int fts3DoAutoincrmerge($/;"	f	file:
fts3DoIncrmerge	sqlite3_MFAW.c	/^static int fts3DoIncrmerge($/;"	f	file:
fts3DoIntegrityCheck	sqlite3_MFAW.c	/^static int fts3DoIntegrityCheck($/;"	f	file:
fts3DoOptimize	sqlite3_MFAW.c	/^static int fts3DoOptimize(Fts3Table *p, int bReturnDone){$/;"	f	file:
fts3DoRebuild	sqlite3_MFAW.c	/^static int fts3DoRebuild(Fts3Table *p){$/;"	f	file:
fts3DocidRange	sqlite3_MFAW.c	/^static sqlite3_int64 fts3DocidRange(sqlite3_value *pVal, i64 iDefault){$/;"	f	file:
fts3DoclistCountDocids	sqlite3_MFAW.c	/^static int fts3DoclistCountDocids(char *aList, int nList){$/;"	f	file:
fts3DoclistOrMerge	sqlite3_MFAW.c	/^static int fts3DoclistOrMerge($/;"	f	file:
fts3DoclistPhraseMerge	sqlite3_MFAW.c	/^static int fts3DoclistPhraseMerge($/;"	f	file:
fts3EncodeIntArray	sqlite3_MFAW.c	/^static void fts3EncodeIntArray($/;"	f	file:
fts3EofMethod	sqlite3_MFAW.c	/^static int fts3EofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3EvalAllocateReaders	sqlite3_MFAW.c	/^static void fts3EvalAllocateReaders($/;"	f	file:
fts3EvalAverageDocsize	sqlite3_MFAW.c	/^static int fts3EvalAverageDocsize(Fts3Cursor *pCsr, int *pnPage){$/;"	f	file:
fts3EvalDeferredPhrase	sqlite3_MFAW.c	/^static int fts3EvalDeferredPhrase(Fts3Cursor *pCsr, Fts3Phrase *pPhrase){$/;"	f	file:
fts3EvalDlPhraseNext	sqlite3_MFAW.c	/^static void fts3EvalDlPhraseNext($/;"	f	file:
fts3EvalGatherStats	sqlite3_MFAW.c	/^static int fts3EvalGatherStats($/;"	f	file:
fts3EvalIncrPhraseNext	sqlite3_MFAW.c	/^static int fts3EvalIncrPhraseNext($/;"	f	file:
fts3EvalInvalidatePoslist	sqlite3_MFAW.c	/^static void fts3EvalInvalidatePoslist(Fts3Phrase *pPhrase){$/;"	f	file:
fts3EvalNearTest	sqlite3_MFAW.c	/^static int fts3EvalNearTest(Fts3Expr *pExpr, int *pRc){$/;"	f	file:
fts3EvalNearTrim	sqlite3_MFAW.c	/^static int fts3EvalNearTrim($/;"	f	file:
fts3EvalNext	sqlite3_MFAW.c	/^static int fts3EvalNext(Fts3Cursor *pCsr){$/;"	f	file:
fts3EvalNextRow	sqlite3_MFAW.c	/^static void fts3EvalNextRow($/;"	f	file:
fts3EvalPhraseLoad	sqlite3_MFAW.c	/^static int fts3EvalPhraseLoad($/;"	f	file:
fts3EvalPhraseMergeToken	sqlite3_MFAW.c	/^static int fts3EvalPhraseMergeToken($/;"	f	file:
fts3EvalPhraseNext	sqlite3_MFAW.c	/^static int fts3EvalPhraseNext($/;"	f	file:
fts3EvalPhraseStart	sqlite3_MFAW.c	/^static int fts3EvalPhraseStart(Fts3Cursor *pCsr, int bOptOk, Fts3Phrase *p){$/;"	f	file:
fts3EvalRestart	sqlite3_MFAW.c	/^static void fts3EvalRestart($/;"	f	file:
fts3EvalSelectDeferred	sqlite3_MFAW.c	/^static int fts3EvalSelectDeferred($/;"	f	file:
fts3EvalStart	sqlite3_MFAW.c	/^static int fts3EvalStart(Fts3Cursor *pCsr){$/;"	f	file:
fts3EvalStartReaders	sqlite3_MFAW.c	/^static void fts3EvalStartReaders($/;"	f	file:
fts3EvalTestDeferredAndNear	sqlite3_MFAW.c	/^static int fts3EvalTestDeferredAndNear(Fts3Cursor *pCsr, int *pRc){$/;"	f	file:
fts3EvalTestExpr	sqlite3_MFAW.c	/^static int fts3EvalTestExpr($/;"	f	file:
fts3EvalTokenCosts	sqlite3_MFAW.c	/^static void fts3EvalTokenCosts($/;"	f	file:
fts3EvalUpdateCounts	sqlite3_MFAW.c	/^static void fts3EvalUpdateCounts(Fts3Expr *pExpr){$/;"	f	file:
fts3ExprBalance	sqlite3_MFAW.c	/^static int fts3ExprBalance(Fts3Expr **pp, int nMaxDepth){$/;"	f	file:
fts3ExprCheckDepth	sqlite3_MFAW.c	/^static int fts3ExprCheckDepth(Fts3Expr *p, int nMaxDepth){$/;"	f	file:
fts3ExprGlobalHitsCb	sqlite3_MFAW.c	/^static int fts3ExprGlobalHitsCb($/;"	f	file:
fts3ExprIterate	sqlite3_MFAW.c	/^static int fts3ExprIterate($/;"	f	file:
fts3ExprIterate2	sqlite3_MFAW.c	/^static int fts3ExprIterate2($/;"	f	file:
fts3ExprLHitsCb	sqlite3_MFAW.c	/^static int fts3ExprLHitsCb($/;"	f	file:
fts3ExprLoadDoclists	sqlite3_MFAW.c	/^static int fts3ExprLoadDoclists($/;"	f	file:
fts3ExprLoadDoclistsCb	sqlite3_MFAW.c	/^static int fts3ExprLoadDoclistsCb(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprLocalHitsCb	sqlite3_MFAW.c	/^static int fts3ExprLocalHitsCb($/;"	f	file:
fts3ExprParse	sqlite3_MFAW.c	/^static int fts3ExprParse($/;"	f	file:
fts3ExprParseUnbalanced	sqlite3_MFAW.c	/^static int fts3ExprParseUnbalanced($/;"	f	file:
fts3ExprPhraseCount	sqlite3_MFAW.c	/^static int fts3ExprPhraseCount(Fts3Expr *pExpr){$/;"	f	file:
fts3ExprPhraseCountCb	sqlite3_MFAW.c	/^static int fts3ExprPhraseCountCb(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprTermOffsetInit	sqlite3_MFAW.c	/^static int fts3ExprTermOffsetInit(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3ExprTest	sqlite3_MFAW.c	/^static void fts3ExprTest($/;"	f	file:
fts3FilterMethod	sqlite3_MFAW.c	/^static int fts3FilterMethod($/;"	f	file:
fts3FindElementByHash	sqlite3_MFAW.c	/^static Fts3HashElem *fts3FindElementByHash($/;"	f	file:
fts3FindFunctionMethod	sqlite3_MFAW.c	/^static int fts3FindFunctionMethod($/;"	f	file:
fts3FreeExprNode	sqlite3_MFAW.c	/^static void fts3FreeExprNode(Fts3Expr *p){$/;"	f	file:
fts3FunctionArg	sqlite3_MFAW.c	/^static int fts3FunctionArg($/;"	f	file:
fts3GetDeltaPosition	sqlite3_MFAW.c	/^static void fts3GetDeltaPosition(char **pp, int *piPos){$/;"	f	file:
fts3GetDeltaVarint	sqlite3_MFAW.c	/^static void fts3GetDeltaVarint(char **pp, sqlite3_int64 *pVal){$/;"	f	file:
fts3GetDeltaVarint3	sqlite3_MFAW.c	/^static void fts3GetDeltaVarint3($/;"	f	file:
fts3GetMatchinfo	sqlite3_MFAW.c	/^static int fts3GetMatchinfo($/;"	f	file:
fts3GetReverseVarint	sqlite3_MFAW.c	/^static void fts3GetReverseVarint($/;"	f	file:
fts3GetVarint32	sqlite3_MFAW.c	133291;"	d	file:
fts3Getint	sqlite3_MFAW.c	/^static int fts3Getint(const char **pz){$/;"	f	file:
fts3GobbleInt	sqlite3_MFAW.c	/^static int fts3GobbleInt(const char **pp, int *pnOut){$/;"	f	file:
fts3HashClear	sqlite3_MFAW.c	132765;"	d	file:
fts3HashCount	sqlite3_MFAW.c	132789;"	d	file:
fts3HashData	sqlite3_MFAW.c	132782;"	d	file:
fts3HashFind	sqlite3_MFAW.c	132764;"	d	file:
fts3HashFindElem	sqlite3_MFAW.c	132766;"	d	file:
fts3HashFirst	sqlite3_MFAW.c	132780;"	d	file:
fts3HashFree	sqlite3_MFAW.c	/^static void fts3HashFree(void *p){$/;"	f	file:
fts3HashInit	sqlite3_MFAW.c	132762;"	d	file:
fts3HashInsert	sqlite3_MFAW.c	132763;"	d	file:
fts3HashInsertElement	sqlite3_MFAW.c	/^static void fts3HashInsertElement($/;"	f	file:
fts3HashKey	sqlite3_MFAW.c	132783;"	d	file:
fts3HashKeysize	sqlite3_MFAW.c	132784;"	d	file:
fts3HashMalloc	sqlite3_MFAW.c	/^static void *fts3HashMalloc(int n){$/;"	f	file:
fts3HashNext	sqlite3_MFAW.c	132781;"	d	file:
fts3IncrmergeAppend	sqlite3_MFAW.c	/^static int fts3IncrmergeAppend($/;"	f	file:
fts3IncrmergeChomp	sqlite3_MFAW.c	/^static int fts3IncrmergeChomp($/;"	f	file:
fts3IncrmergeCsr	sqlite3_MFAW.c	/^static int fts3IncrmergeCsr($/;"	f	file:
fts3IncrmergeHintLoad	sqlite3_MFAW.c	/^static int fts3IncrmergeHintLoad(Fts3Table *p, Blob *pHint){$/;"	f	file:
fts3IncrmergeHintPop	sqlite3_MFAW.c	/^static int fts3IncrmergeHintPop(Blob *pHint, i64 *piAbsLevel, int *pnInput){$/;"	f	file:
fts3IncrmergeHintPush	sqlite3_MFAW.c	/^static void fts3IncrmergeHintPush($/;"	f	file:
fts3IncrmergeHintStore	sqlite3_MFAW.c	/^static int fts3IncrmergeHintStore(Fts3Table *p, Blob *pHint){$/;"	f	file:
fts3IncrmergeLoad	sqlite3_MFAW.c	/^static int fts3IncrmergeLoad($/;"	f	file:
fts3IncrmergeOutputIdx	sqlite3_MFAW.c	/^static int fts3IncrmergeOutputIdx( $/;"	f	file:
fts3IncrmergePush	sqlite3_MFAW.c	/^static int fts3IncrmergePush($/;"	f	file:
fts3IncrmergeRelease	sqlite3_MFAW.c	/^static void fts3IncrmergeRelease($/;"	f	file:
fts3IncrmergeWriter	sqlite3_MFAW.c	/^static int fts3IncrmergeWriter( $/;"	f	file:
fts3InitVtab	sqlite3_MFAW.c	/^static int fts3InitVtab($/;"	f	file:
fts3InsertData	sqlite3_MFAW.c	/^static int fts3InsertData($/;"	f	file:
fts3InsertDocsize	sqlite3_MFAW.c	/^static void fts3InsertDocsize($/;"	f	file:
fts3InsertTerms	sqlite3_MFAW.c	/^static int fts3InsertTerms($/;"	f	file:
fts3IntegrityCheck	sqlite3_MFAW.c	/^static int fts3IntegrityCheck(Fts3Table *p, int *pbOk){$/;"	f	file:
fts3IsAppendable	sqlite3_MFAW.c	/^static int fts3IsAppendable(Fts3Table *p, sqlite3_int64 iEnd, int *pbRes){$/;"	f	file:
fts3IsEmpty	sqlite3_MFAW.c	/^static int fts3IsEmpty(Fts3Table *p, sqlite3_value *pRowid, int *pisEmpty){$/;"	f	file:
fts3IsSpecialColumn	sqlite3_MFAW.c	/^static int fts3IsSpecialColumn($/;"	f	file:
fts3LcsIteratorAdvance	sqlite3_MFAW.c	/^static int fts3LcsIteratorAdvance(LcsIterator *pIter){$/;"	f	file:
fts3LogMerge	sqlite3_MFAW.c	/^static void fts3LogMerge(int nMerge, sqlite3_int64 iAbsLevel){$/;"	f	file:
fts3LogMerge	sqlite3_MFAW.c	143124;"	d	file:
fts3MallocZero	sqlite3_MFAW.c	/^static void *fts3MallocZero(int nByte){$/;"	f	file:
fts3MatchinfoCheck	sqlite3_MFAW.c	/^static int fts3MatchinfoCheck($/;"	f	file:
fts3MatchinfoFunc	sqlite3_MFAW.c	/^static void fts3MatchinfoFunc($/;"	f	file:
fts3MatchinfoLcs	sqlite3_MFAW.c	/^static int fts3MatchinfoLcs(Fts3Cursor *pCsr, MatchInfo *pInfo){$/;"	f	file:
fts3MatchinfoLcsCb	sqlite3_MFAW.c	/^static int fts3MatchinfoLcsCb($/;"	f	file:
fts3MatchinfoSelectDoctotal	sqlite3_MFAW.c	/^static int fts3MatchinfoSelectDoctotal($/;"	f	file:
fts3MatchinfoSize	sqlite3_MFAW.c	/^static int fts3MatchinfoSize(MatchInfo *pInfo, char cArg){$/;"	f	file:
fts3MatchinfoValues	sqlite3_MFAW.c	/^static int fts3MatchinfoValues($/;"	f	file:
fts3Module	sqlite3_MFAW.c	/^static const sqlite3_module fts3Module = {$/;"	v	file:
fts3MsrBufferData	sqlite3_MFAW.c	/^static int fts3MsrBufferData($/;"	f	file:
fts3NextMethod	sqlite3_MFAW.c	/^static int fts3NextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3NodeAddTerm	sqlite3_MFAW.c	/^static int fts3NodeAddTerm($/;"	f	file:
fts3NodeFree	sqlite3_MFAW.c	/^static void fts3NodeFree(SegmentNode *pTree){$/;"	f	file:
fts3NodeWrite	sqlite3_MFAW.c	/^static int fts3NodeWrite($/;"	f	file:
fts3OffsetsFunc	sqlite3_MFAW.c	/^static void fts3OffsetsFunc($/;"	f	file:
fts3OpenMethod	sqlite3_MFAW.c	/^static int fts3OpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3OptimizeFunc	sqlite3_MFAW.c	/^static void fts3OptimizeFunc($/;"	f	file:
fts3PendingListAppend	sqlite3_MFAW.c	/^static int fts3PendingListAppend($/;"	f	file:
fts3PendingListAppendVarint	sqlite3_MFAW.c	/^static int fts3PendingListAppendVarint($/;"	f	file:
fts3PendingListDelete	sqlite3_MFAW.c	/^static void fts3PendingListDelete(PendingList *pList){$/;"	f	file:
fts3PendingTermsAdd	sqlite3_MFAW.c	/^static int fts3PendingTermsAdd($/;"	f	file:
fts3PendingTermsAddOne	sqlite3_MFAW.c	/^static int fts3PendingTermsAddOne($/;"	f	file:
fts3PendingTermsDocid	sqlite3_MFAW.c	/^static int fts3PendingTermsDocid($/;"	f	file:
fts3PoslistCopy	sqlite3_MFAW.c	/^static void fts3PoslistCopy(char **pp, char **ppPoslist){$/;"	f	file:
fts3PoslistMerge	sqlite3_MFAW.c	/^static void fts3PoslistMerge($/;"	f	file:
fts3PoslistNearMerge	sqlite3_MFAW.c	/^static int fts3PoslistNearMerge($/;"	f	file:
fts3PoslistPhraseMerge	sqlite3_MFAW.c	/^static int fts3PoslistPhraseMerge($/;"	f	file:
fts3PrefixCompress	sqlite3_MFAW.c	/^static int fts3PrefixCompress($/;"	f	file:
fts3PrefixParameter	sqlite3_MFAW.c	/^static int fts3PrefixParameter($/;"	f	file:
fts3PromoteSegments	sqlite3_MFAW.c	/^static int fts3PromoteSegments($/;"	f	file:
fts3PutColNumber	sqlite3_MFAW.c	/^static int fts3PutColNumber(char **pp, int iCol){$/;"	f	file:
fts3PutDeltaVarint	sqlite3_MFAW.c	/^static void fts3PutDeltaVarint($/;"	f	file:
fts3PutDeltaVarint3	sqlite3_MFAW.c	/^static void fts3PutDeltaVarint3($/;"	f	file:
fts3QuoteId	sqlite3_MFAW.c	/^static char *fts3QuoteId(char const *zInput){$/;"	f	file:
fts3ReadEndBlockField	sqlite3_MFAW.c	/^static void fts3ReadEndBlockField($/;"	f	file:
fts3ReadExprList	sqlite3_MFAW.c	/^static char *fts3ReadExprList(Fts3Table *p, const char *zFunc, int *pRc){$/;"	f	file:
fts3ReadNextPos	sqlite3_MFAW.c	/^static void fts3ReadNextPos($/;"	f	file:
fts3ReallocOrFree	sqlite3_MFAW.c	/^static void *fts3ReallocOrFree(void *pOrig, int nNew){$/;"	f	file:
fts3Rehash	sqlite3_MFAW.c	/^static int fts3Rehash(Fts3Hash *pH, int new_size){$/;"	f	file:
fts3ReleaseMethod	sqlite3_MFAW.c	/^static int fts3ReleaseMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3RemoveElementByHash	sqlite3_MFAW.c	/^static void fts3RemoveElementByHash($/;"	f	file:
fts3RemoveSegdirEntry	sqlite3_MFAW.c	/^static int fts3RemoveSegdirEntry($/;"	f	file:
fts3RenameMethod	sqlite3_MFAW.c	/^static int fts3RenameMethod($/;"	f	file:
fts3RepackSegdirLevel	sqlite3_MFAW.c	/^static int fts3RepackSegdirLevel($/;"	f	file:
fts3ReversePoslist	sqlite3_MFAW.c	/^static void fts3ReversePoslist(char *pStart, char **ppPoslist){$/;"	f	file:
fts3RollbackMethod	sqlite3_MFAW.c	/^static int fts3RollbackMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3RollbackToMethod	sqlite3_MFAW.c	/^static int fts3RollbackToMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3RowidMethod	sqlite3_MFAW.c	/^static int fts3RowidMethod(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){$/;"	f	file:
fts3SavepointMethod	sqlite3_MFAW.c	/^static int fts3SavepointMethod(sqlite3_vtab *pVtab, int iSavepoint){$/;"	f	file:
fts3ScanInteriorNode	sqlite3_MFAW.c	/^static int fts3ScanInteriorNode($/;"	f	file:
fts3SegReaderCmp	sqlite3_MFAW.c	/^static int fts3SegReaderCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderCursor	sqlite3_MFAW.c	/^static int fts3SegReaderCursor($/;"	f	file:
fts3SegReaderCursorAddZero	sqlite3_MFAW.c	/^static int fts3SegReaderCursorAddZero($/;"	f	file:
fts3SegReaderCursorAppend	sqlite3_MFAW.c	/^static int fts3SegReaderCursorAppend($/;"	f	file:
fts3SegReaderCursorFree	sqlite3_MFAW.c	/^static void fts3SegReaderCursorFree(Fts3MultiSegReader *pSegcsr){$/;"	f	file:
fts3SegReaderDoclistCmp	sqlite3_MFAW.c	/^static int fts3SegReaderDoclistCmp(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderDoclistCmpRev	sqlite3_MFAW.c	/^static int fts3SegReaderDoclistCmpRev(Fts3SegReader *pLhs, Fts3SegReader *pRhs){$/;"	f	file:
fts3SegReaderFirstDocid	sqlite3_MFAW.c	/^static int fts3SegReaderFirstDocid(Fts3Table *pTab, Fts3SegReader *pReader){$/;"	f	file:
fts3SegReaderIncrRead	sqlite3_MFAW.c	/^static int fts3SegReaderIncrRead(Fts3SegReader *pReader){$/;"	f	file:
fts3SegReaderIsPending	sqlite3_MFAW.c	143209;"	d	file:
fts3SegReaderIsRootOnly	sqlite3_MFAW.c	143210;"	d	file:
fts3SegReaderNext	sqlite3_MFAW.c	/^static int fts3SegReaderNext($/;"	f	file:
fts3SegReaderNextDocid	sqlite3_MFAW.c	/^static int fts3SegReaderNextDocid($/;"	f	file:
fts3SegReaderRequire	sqlite3_MFAW.c	/^static int fts3SegReaderRequire(Fts3SegReader *pReader, char *pFrom, int nByte){$/;"	f	file:
fts3SegReaderSetEof	sqlite3_MFAW.c	/^static void fts3SegReaderSetEof(Fts3SegReader *pSeg){$/;"	f	file:
fts3SegReaderSort	sqlite3_MFAW.c	/^static void fts3SegReaderSort($/;"	f	file:
fts3SegReaderStart	sqlite3_MFAW.c	/^static int fts3SegReaderStart($/;"	f	file:
fts3SegReaderTermCmp	sqlite3_MFAW.c	/^static int fts3SegReaderTermCmp($/;"	f	file:
fts3SegWriterAdd	sqlite3_MFAW.c	/^static int fts3SegWriterAdd($/;"	f	file:
fts3SegWriterFlush	sqlite3_MFAW.c	/^static int fts3SegWriterFlush($/;"	f	file:
fts3SegWriterFree	sqlite3_MFAW.c	/^static void fts3SegWriterFree(SegmentWriter *pWriter){$/;"	f	file:
fts3SegmentIsMaxLevel	sqlite3_MFAW.c	/^static int fts3SegmentIsMaxLevel(Fts3Table *p, i64 iAbsLevel, int *pbMax){$/;"	f	file:
fts3SegmentMaxLevel	sqlite3_MFAW.c	/^static int fts3SegmentMaxLevel($/;"	f	file:
fts3SegmentMerge	sqlite3_MFAW.c	/^static int fts3SegmentMerge($/;"	f	file:
fts3SelectDocsize	sqlite3_MFAW.c	/^static int fts3SelectDocsize($/;"	f	file:
fts3SelectLeaf	sqlite3_MFAW.c	/^static int fts3SelectLeaf($/;"	f	file:
fts3SetEstimatedRows	sqlite3_MFAW.c	/^static void fts3SetEstimatedRows(sqlite3_index_info *pIdxInfo, i64 nRow){$/;"	f	file:
fts3SetHasStat	sqlite3_MFAW.c	/^static int fts3SetHasStat(Fts3Table *p){$/;"	f	file:
fts3SnippetAdvance	sqlite3_MFAW.c	/^static void fts3SnippetAdvance(char **ppIter, int *piIter, int iNext){$/;"	f	file:
fts3SnippetDetails	sqlite3_MFAW.c	/^static void fts3SnippetDetails($/;"	f	file:
fts3SnippetFindPositions	sqlite3_MFAW.c	/^static int fts3SnippetFindPositions(Fts3Expr *pExpr, int iPhrase, void *ctx){$/;"	f	file:
fts3SnippetFunc	sqlite3_MFAW.c	/^static void fts3SnippetFunc($/;"	f	file:
fts3SnippetNextCandidate	sqlite3_MFAW.c	/^static int fts3SnippetNextCandidate(SnippetIter *pIter){$/;"	f	file:
fts3SnippetShift	sqlite3_MFAW.c	/^static int fts3SnippetShift($/;"	f	file:
fts3SnippetText	sqlite3_MFAW.c	/^static int fts3SnippetText($/;"	f	file:
fts3SpecialInsert	sqlite3_MFAW.c	/^static int fts3SpecialInsert(Fts3Table *p, sqlite3_value *pVal){$/;"	f	file:
fts3SqlExec	sqlite3_MFAW.c	/^static void fts3SqlExec($/;"	f	file:
fts3SqlStmt	sqlite3_MFAW.c	/^static int fts3SqlStmt($/;"	f	file:
fts3StartNode	sqlite3_MFAW.c	/^static void fts3StartNode(Blob *pNode, int iHeight, sqlite3_int64 iChild){$/;"	f	file:
fts3StrCompare	sqlite3_MFAW.c	/^static int fts3StrCompare(const void *pKey1, int n1, const void *pKey2, int n2){$/;"	f	file:
fts3StrHash	sqlite3_MFAW.c	/^static int fts3StrHash(const void *pKey, int nKey){$/;"	f	file:
fts3StringAppend	sqlite3_MFAW.c	/^static int fts3StringAppend($/;"	f	file:
fts3SyncMethod	sqlite3_MFAW.c	/^static int fts3SyncMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3TermCmp	sqlite3_MFAW.c	/^static int fts3TermCmp($/;"	f	file:
fts3TermSegReaderCursor	sqlite3_MFAW.c	/^static int fts3TermSegReaderCursor($/;"	f	file:
fts3TermSelect	sqlite3_MFAW.c	/^static int fts3TermSelect($/;"	f	file:
fts3TermSelectFinishMerge	sqlite3_MFAW.c	/^static int fts3TermSelectFinishMerge(Fts3Table *p, TermSelect *pTS){$/;"	f	file:
fts3TermSelectMerge	sqlite3_MFAW.c	/^static int fts3TermSelectMerge($/;"	f	file:
fts3TreeFinishNode	sqlite3_MFAW.c	/^static int fts3TreeFinishNode($/;"	f	file:
fts3TruncateNode	sqlite3_MFAW.c	/^static int fts3TruncateNode($/;"	f	file:
fts3TruncateSegment	sqlite3_MFAW.c	/^static int fts3TruncateSegment($/;"	f	file:
fts3UpdateDocTotals	sqlite3_MFAW.c	/^static void fts3UpdateDocTotals($/;"	f	file:
fts3UpdateMethod	sqlite3_MFAW.c	/^static int fts3UpdateMethod($/;"	f	file:
fts3WriteExprList	sqlite3_MFAW.c	/^static char *fts3WriteExprList(Fts3Table *p, const char *zFunc, int *pRc){$/;"	f	file:
fts3WriteSegdir	sqlite3_MFAW.c	/^static int fts3WriteSegdir($/;"	f	file:
fts3WriteSegment	sqlite3_MFAW.c	/^static int fts3WriteSegment($/;"	f	file:
fts3Writelock	sqlite3_MFAW.c	/^static int fts3Writelock(Fts3Table *p){$/;"	f	file:
fts3_isalnum	sqlite3_MFAW.c	/^static int fts3_isalnum(int x){$/;"	f	file:
fts3auxBestIndexMethod	sqlite3_MFAW.c	/^static int fts3auxBestIndexMethod($/;"	f	file:
fts3auxCloseMethod	sqlite3_MFAW.c	/^static int fts3auxCloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxColumnMethod	sqlite3_MFAW.c	/^static int fts3auxColumnMethod($/;"	f	file:
fts3auxConnectMethod	sqlite3_MFAW.c	/^static int fts3auxConnectMethod($/;"	f	file:
fts3auxDisconnectMethod	sqlite3_MFAW.c	/^static int fts3auxDisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3auxEofMethod	sqlite3_MFAW.c	/^static int fts3auxEofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxFilterMethod	sqlite3_MFAW.c	/^static int fts3auxFilterMethod($/;"	f	file:
fts3auxGrowStatArray	sqlite3_MFAW.c	/^static int fts3auxGrowStatArray(Fts3auxCursor *pCsr, int nSize){$/;"	f	file:
fts3auxNextMethod	sqlite3_MFAW.c	/^static int fts3auxNextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3auxOpenMethod	sqlite3_MFAW.c	/^static int fts3auxOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3auxRowidMethod	sqlite3_MFAW.c	/^static int fts3auxRowidMethod($/;"	f	file:
fts3isspace	sqlite3_MFAW.c	/^static int fts3isspace(char c){$/;"	f	file:
fts3tokBestIndexMethod	sqlite3_MFAW.c	/^static int fts3tokBestIndexMethod($/;"	f	file:
fts3tokCloseMethod	sqlite3_MFAW.c	/^static int fts3tokCloseMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3tokColumnMethod	sqlite3_MFAW.c	/^static int fts3tokColumnMethod($/;"	f	file:
fts3tokConnectMethod	sqlite3_MFAW.c	/^static int fts3tokConnectMethod($/;"	f	file:
fts3tokDequoteArray	sqlite3_MFAW.c	/^static int fts3tokDequoteArray($/;"	f	file:
fts3tokDisconnectMethod	sqlite3_MFAW.c	/^static int fts3tokDisconnectMethod(sqlite3_vtab *pVtab){$/;"	f	file:
fts3tokEofMethod	sqlite3_MFAW.c	/^static int fts3tokEofMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3tokFilterMethod	sqlite3_MFAW.c	/^static int fts3tokFilterMethod($/;"	f	file:
fts3tokNextMethod	sqlite3_MFAW.c	/^static int fts3tokNextMethod(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
fts3tokOpenMethod	sqlite3_MFAW.c	/^static int fts3tokOpenMethod(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCsr){$/;"	f	file:
fts3tokQueryTokenizer	sqlite3_MFAW.c	/^static int fts3tokQueryTokenizer($/;"	f	file:
fts3tokResetCursor	sqlite3_MFAW.c	/^static void fts3tokResetCursor(Fts3tokCursor *pCsr){$/;"	f	file:
fts3tokRowidMethod	sqlite3_MFAW.c	/^static int fts3tokRowidMethod($/;"	f	file:
ftsCompareFunction	sqlite3_MFAW.c	/^static int (*ftsCompareFunction(int keyClass))(const void*,int,const void*,int){$/;"	f	file:
ftsHashFunction	sqlite3_MFAW.c	/^static int (*ftsHashFunction(int keyClass))(const void*,int){$/;"	f	file:
fullSync	sqlite3_MFAW.c	/^  u8 fullSync;                \/* Do extra syncs of the journal for robustness *\/$/;"	m	struct:Pager	file:
full_fsync	sqlite3_MFAW.c	/^static int full_fsync(int fd, int fullSync, int dataOnly){$/;"	f	file:
funcFlags	sqlite3_MFAW.c	/^  u16 funcFlags;       \/* Some combination of SQLITE_FUNC_* *\/$/;"	m	struct:FuncDef	file:
functionDestroy	sqlite3_MFAW.c	/^static void functionDestroy(sqlite3 *db, FuncDef *p){$/;"	f	file:
functionSearch	sqlite3_MFAW.c	/^static FuncDef *functionSearch($/;"	f	file:
gScriptEntry	mobibench.c	/^struct script_entry* gScriptEntry = {0, };$/;"	v	typeref:struct:script_entry
gScriptEntry	mobibench_MFAW.c	/^struct script_entry* gScriptEntry = {0, };$/;"	v	typeref:struct:script_entry
gScriptFdConv	mobibench.c	/^struct script_fd_conv gScriptFdConv = {0, };$/;"	v	typeref:struct:script_fd_conv
gScriptFdConv	mobibench_MFAW.c	/^struct script_fd_conv gScriptFdConv = {0, };$/;"	v	typeref:struct:script_fd_conv
gScriptThreadTime	mobibench.c	/^struct script_thread_time* gScriptThreadTime = {0, };$/;"	v	typeref:struct:script_thread_time
gScriptThreadTime	mobibench_MFAW.c	/^struct script_thread_time* gScriptThreadTime = {0, };$/;"	v	typeref:struct:script_thread_time
g_access	mobibench.c	/^int g_access, g_sync;$/;"	v
g_access	mobibench_MFAW.c	/^int g_access, g_sync;$/;"	v
g_elapsed	sqlite3_MFAW.c	/^static sqlite_uint64 g_elapsed;$/;"	v	file:
g_err_string	mobibench.c	/^char* g_err_string;$/;"	v
g_err_string	mobibench_MFAW.c	/^char* g_err_string;$/;"	v
g_start	sqlite3_MFAW.c	/^static sqlite_uint64 g_start;$/;"	v	file:
g_state	mobibench.c	/^int g_state = 0;$/;"	v
g_state	mobibench_MFAW.c	/^int g_state = 0;$/;"	v
g_sync	mobibench.c	/^int g_access, g_sync;$/;"	v
g_sync	mobibench_MFAW.c	/^int g_access, g_sync;$/;"	v
generateColumnNames	sqlite3_MFAW.c	/^static void generateColumnNames($/;"	f	file:
generateColumnTypes	sqlite3_MFAW.c	/^static void generateColumnTypes($/;"	f	file:
generateOutputSubroutine	sqlite3_MFAW.c	/^static int generateOutputSubroutine($/;"	f	file:
generateSortTail	sqlite3_MFAW.c	/^static void generateSortTail($/;"	f	file:
generateWithRecursiveQuery	sqlite3_MFAW.c	/^static void generateWithRecursiveQuery($/;"	f	file:
genrand64_int64	mobibench.c	/^unsigned long long genrand64_int64(void)$/;"	f
genrand64_int64	mobibench_MFAW.c	/^unsigned long long genrand64_int64(void)$/;"	f
geomCallback	sqlite3_MFAW.c	/^static void geomCallback(sqlite3_context *ctx, int nArg, sqlite3_value **aArg){$/;"	f	file:
get2byte	sqlite3_MFAW.c	155421;"	d	file:
get2byte	sqlite3_MFAW.c	52829;"	d	file:
get2byteNotZero	sqlite3_MFAW.c	53164;"	d	file:
get4byte	sqlite3_MFAW.c	52831;"	d	file:
getAbsoluteLevel	sqlite3_MFAW.c	/^static sqlite3_int64 getAbsoluteLevel($/;"	f	file:
getAndInitPage	sqlite3_MFAW.c	/^static int getAndInitPage($/;"	f	file:
getAutoVacuum	sqlite3_MFAW.c	/^static int getAutoVacuum(const char *z){$/;"	f	file:
getCellInfo	sqlite3_MFAW.c	/^  static void getCellInfo(BtCursor *pCur){$/;"	f	file:
getCellInfo	sqlite3_MFAW.c	57108;"	d	file:
getDigits	sqlite3_MFAW.c	/^static int getDigits(const char *zDate, ...){$/;"	f	file:
getDoubleArg	sqlite3_MFAW.c	/^static double getDoubleArg(PrintfArguments *p){$/;"	f	file:
getIntArg	sqlite3_MFAW.c	/^static sqlite3_int64 getIntArg(PrintfArguments *p){$/;"	f	file:
getIntFromStmt	sqlite3_MFAW.c	/^static int getIntFromStmt(sqlite3 *db, const char *zSql, int *piVal){$/;"	f	file:
getLocalPayload	sqlite3_MFAW.c	/^static void getLocalPayload($/;"	f	file:
getLockingMode	sqlite3_MFAW.c	/^static int getLockingMode(const char *z){$/;"	f	file:
getMask	sqlite3_MFAW.c	/^static Bitmask getMask(WhereMaskSet *pMaskSet, int iCursor){$/;"	f	file:
getNextNode	sqlite3_MFAW.c	/^static int getNextNode($/;"	f	file:
getNextString	sqlite3_MFAW.c	/^static int getNextString($/;"	f	file:
getNextToken	sqlite3_MFAW.c	/^static int getNextToken($/;"	f	file:
getNodeSize	sqlite3_MFAW.c	/^static int getNodeSize($/;"	f	file:
getOverflowPage	sqlite3_MFAW.c	/^static int getOverflowPage($/;"	f	file:
getPageReferenced	sqlite3_MFAW.c	/^static int getPageReferenced(IntegrityCk *pCheck, Pgno iPg){$/;"	f	file:
getRowTrigger	sqlite3_MFAW.c	/^static TriggerPrg *getRowTrigger($/;"	f	file:
getSafetyLevel	sqlite3_MFAW.c	/^static u8 getSafetyLevel(const char *z, int omitFull, u8 dflt){$/;"	f	file:
getState	mobibench.c	/^int getState(void)$/;"	f
getState	mobibench_MFAW.c	/^int getState(void)$/;"	f
getTempStore	sqlite3_MFAW.c	/^static int getTempStore(const char *z){$/;"	f	file:
getTextArg	sqlite3_MFAW.c	/^static char *getTextArg(PrintfArguments *p){$/;"	f	file:
getVarint	sqlite3_MFAW.c	13406;"	d	file:
getVarint32	sqlite3_MFAW.c	13401;"	d	file:
get_autocommit	sqlite3_MFAW.c	/^  int  (*get_autocommit)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
get_auxdata	sqlite3_MFAW.c	/^  void * (*get_auxdata)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
get_con_switches	mobibench.c	/^void get_con_switches()$/;"	f
get_con_switches	mobibench_MFAW.c	/^void get_con_switches()$/;"	f
get_current_utime	mobibench.c	/^long long get_current_utime(void)$/;"	f
get_current_utime	mobibench_MFAW.c	/^long long get_current_utime(void)$/;"	f
get_journal_mode_string	mobibench.c	/^char* get_journal_mode_string(int journal_mode)$/;"	f
get_journal_mode_string	mobibench_MFAW.c	/^char* get_journal_mode_string(int journal_mode)$/;"	f
get_new_fd	mobibench.c	/^int get_new_fd(int fd_org)$/;"	f
get_new_fd	mobibench_MFAW.c	/^int get_new_fd(int fd_org)$/;"	f
get_path	mobibench.c	/^void get_path(pid_t j_pid, pid_t j_tid)$/;"	f
get_path	mobibench_MFAW.c	/^void get_path(pid_t j_pid, pid_t j_tid)$/;"	f
get_relative_utime	mobibench.c	/^long long get_relative_utime(long long start)$/;"	f
get_relative_utime	mobibench_MFAW.c	/^long long get_relative_utime(long long start)$/;"	f
get_table	sqlite3_MFAW.c	/^  int  (*get_table)(sqlite3*,const char*,char***,int*,int*,char**);$/;"	m	struct:sqlite3_api_routines	file:
globInfo	sqlite3_MFAW.c	/^static const struct compareInfo globInfo = { '*', '?', '[', 0 };$/;"	v	typeref:struct:compareInfo	file:
global_recover	sqlite3_MFAW.c	/^  int  (*global_recover)(void);$/;"	m	struct:sqlite3_api_routines	file:
groupConcatFinalize	sqlite3_MFAW.c	/^static void groupConcatFinalize(sqlite3_context *context){$/;"	f	file:
groupConcatStep	sqlite3_MFAW.c	/^static void groupConcatStep($/;"	f	file:
growOpArray	sqlite3_MFAW.c	/^static int growOpArray(Vdbe *v, int nOp){$/;"	f	file:
growVTrans	sqlite3_MFAW.c	/^static int growVTrans(sqlite3 *db){$/;"	f	file:
grp	sqlite3_MFAW.c	/^  PGroup grp;                    \/* The global PGroup for mode (2) *\/$/;"	m	struct:PCacheGlobal	file:
h	sqlite3_MFAW.c	/^  HANDLE h;               \/* Handle for accessing the file *\/$/;"	m	struct:winFile	file:
h	sqlite3_MFAW.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
h	sqlite3_MFAW.c	/^  int h;                              \/* The file descriptor *\/$/;"	m	struct:unixFile	file:
h	sqlite3_MFAW.c	/^  int h;                     \/* Open file descriptor *\/$/;"	m	struct:unixShmNode	file:
hFile	sqlite3_MFAW.c	/^  winFile hFile;             \/* File handle from winOpen *\/$/;"	m	struct:winShmNode	file:
hHeap	sqlite3_MFAW.c	/^  HANDLE hHeap; \/* The handle to our heap. *\/$/;"	m	struct:winMemData	file:
hMap	sqlite3_MFAW.c	/^    HANDLE hMap;             \/* File handle from CreateFileMapping *\/$/;"	m	struct:winShmNode::ShmRegion	file:
hMap	sqlite3_MFAW.c	/^  HANDLE hMap;                  \/* Handle for accessing memory mapping *\/$/;"	m	struct:winFile	file:
hMutex	sqlite3_MFAW.c	/^  HANDLE hMutex;          \/* Mutex used to control access to shared lock *\/$/;"	m	struct:winFile	file:
hPending	sqlite3_MFAW.c	/^    Fts3Hash hPending;            \/* Pending terms table for this index *\/$/;"	m	struct:Fts3Table::Fts3Index	file:
hShared	sqlite3_MFAW.c	/^  HANDLE hShared;         \/* Shared memory segment used for locking *\/$/;"	m	struct:winFile	file:
handleDeferredMoveto	sqlite3_MFAW.c	/^static int SQLITE_NOINLINE handleDeferredMoveto(VdbeCursor *p){$/;"	f	file:
handleMovedCursor	sqlite3_MFAW.c	/^static int SQLITE_NOINLINE handleMovedCursor(VdbeCursor *p){$/;"	f	file:
hasBeenUsed	sqlite3_MFAW.c	/^  u8 hasBeenUsed;             \/* True if any content previously read from this pager*\/$/;"	m	struct:Pager	file:
hasColumn	sqlite3_MFAW.c	/^static int hasColumn(const i16 *aiCol, int nCol, int x){$/;"	f	file:
hasCompound	sqlite3_MFAW.c	/^  u8 hasCompound;      \/* Need to invoke convertCompoundSelectToSubquery() *\/$/;"	m	struct:Parse	file:
hasHotJournal	sqlite3_MFAW.c	/^static int hasHotJournal(Pager *pPager, int *pExists){$/;"	f	file:
hasMutex	sqlite3_MFAW.c	/^  u8 hasMutex;               \/* True if holding the unixShmNode mutex *\/$/;"	m	struct:unixShm	file:
hasMutex	sqlite3_MFAW.c	/^  u8 hasMutex;               \/* True if holding the winShmNode mutex *\/$/;"	m	struct:winShm	file:
hasReadConflicts	sqlite3_MFAW.c	/^static int hasReadConflicts(Btree *pBtree, Pgno iRoot){$/;"	f	file:
hasReadConflicts	sqlite3_MFAW.c	53232;"	d	file:
hasSharedCacheTableLock	sqlite3_MFAW.c	/^static int hasSharedCacheTableLock($/;"	f	file:
hasSharedCacheTableLock	sqlite3_MFAW.c	53231;"	d	file:
hasVowel	sqlite3_MFAW.c	/^static int hasVowel(const char *z){$/;"	f	file:
hashDestroy	sqlite3_MFAW.c	/^static void hashDestroy(void *p){$/;"	f	file:
hdr	sqlite3_MFAW.c	/^    } hdr;$/;"	m	union:Mem3Block::__anon10	typeref:struct:Mem3Block::__anon10::__anon11	file:
hdr	sqlite3_MFAW.c	/^  WalIndexHdr hdr;           \/* Wal-index header for current transaction *\/$/;"	m	struct:Wal	file:
hdrOffset	sqlite3_MFAW.c	/^  u8 hdrOffset;        \/* 100 for page 1.  0 otherwise *\/$/;"	m	struct:MemPage	file:
heightOfExpr	sqlite3_MFAW.c	/^static void heightOfExpr(Expr *p, int *pnHeight){$/;"	f	file:
heightOfExprList	sqlite3_MFAW.c	/^static void heightOfExprList(ExprList *p, int *pnHeight){$/;"	f	file:
heightOfSelect	sqlite3_MFAW.c	/^static void heightOfSelect(Select *p, int *pnHeight){$/;"	f	file:
help	mobibench.c	/^char *help[] = {$/;"	v
help	mobibench_MFAW.c	/^char *help[] = {$/;"	v
hexFunc	sqlite3_MFAW.c	/^static void hexFunc($/;"	f	file:
hexdigits	sqlite3_MFAW.c	/^static const char hexdigits[] = {$/;"	v	file:
hints	sqlite3_MFAW.c	/^  u8 hints;                             \/* As configured by CursorSetHints() *\/$/;"	m	struct:BtCursor	file:
hlmask	sqlite3_MFAW.c	/^  u64 hlmask;                     \/* Mask of snippet terms to highlight *\/$/;"	m	struct:SnippetFragment	file:
ht	sqlite3_MFAW.c	/^  } *ht;$/;"	m	struct:Fts3Hash	typeref:struct:Fts3Hash::_fts3ht	file:
ht	sqlite3_MFAW.c	/^  } *ht;$/;"	m	struct:Hash	typeref:struct:Hash::_ht	file:
ht_slot	sqlite3_MFAW.c	/^typedef u16 ht_slot;$/;"	t	file:
htsize	sqlite3_MFAW.c	/^  int htsize;             \/* Number of buckets in the hash table *\/$/;"	m	struct:Fts3Hash	file:
htsize	sqlite3_MFAW.c	/^  unsigned int htsize;      \/* Number of buckets in the hash table *\/$/;"	m	struct:Hash	file:
i	sqlite3_MFAW.c	/^    i64 i;              \/* Integer value used when MEM_Int is set in flags *\/$/;"	m	union:Mem::MemValue	file:
i	sqlite3_MFAW.c	/^    int i;                 \/* Integer value if p4type==P4_INT32 *\/$/;"	m	union:VdbeOp::__anon1	file:
i	sqlite3_MFAW.c	/^  int i;             \/* Integer value *\/$/;"	m	union:RtreeCoord	file:
i	sqlite3_MFAW.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
i16	sqlite3_MFAW.c	/^typedef INT16_TYPE i16;            \/* 2-byte signed integer *\/$/;"	t	file:
i16	sqlite3_MFAW.c	/^typedef short int i16;            \/* 2-byte (or larger) signed integer *\/$/;"	t	file:
i64	sqlite3_MFAW.c	/^typedef sqlite3_int64 i64;        \/* 8-byte signed integer *\/$/;"	t	file:
i64	sqlite3_MFAW.c	/^typedef sqlite3_int64 i64;$/;"	t	file:
i64	sqlite3_MFAW.c	/^typedef sqlite_int64 i64;          \/* 8-byte signed integer *\/$/;"	t	file:
i8	sqlite3_MFAW.c	/^typedef INT8_TYPE i8;              \/* 1-byte signed integer *\/$/;"	t	file:
iAbsLevel	sqlite3_MFAW.c	/^  sqlite3_int64 iAbsLevel;        \/* Absolute level of input segments *\/$/;"	m	struct:IncrmergeWriter	file:
iAddr	sqlite3_MFAW.c	/^  int iAddr;                 \/* Address of next instruction to return *\/$/;"	m	struct:VdbeOpIter	file:
iAgg	sqlite3_MFAW.c	/^  i16 iAgg;              \/* Which entry in pAggInfo->aCol[] or ->aFunc[] *\/$/;"	m	struct:Expr	file:
iAlias	sqlite3_MFAW.c	/^        u16 iAlias;           \/* Index into Parse.aAlias[] for zName *\/$/;"	m	struct:ExprList::ExprList_item::__anon5::__anon6	file:
iArg	sqlite3_MFAW.c	/^  int iArg;                       \/* Index of function argument. *\/$/;"	m	struct:AuxData	file:
iArg	sqlite3_MFAW.c	/^  u32 iArg;                 \/* Extra argument *\/$/;"	m	struct:sPragmaNames	file:
iBatch	sqlite3_MFAW.c	/^  int iBatch;                    \/* Current insert batch *\/$/;"	m	struct:RowSet	file:
iBlock	sqlite3_MFAW.c	/^  sqlite3_int64 iBlock;           \/* Current block id *\/$/;"	m	struct:NodeWriter	file:
iBreak	sqlite3_MFAW.c	/^  int iBreak;               \/* Jump here to break out of the loop *\/$/;"	m	struct:WhereInfo	file:
iBufEnd	sqlite3_MFAW.c	/^  int iBufEnd;                    \/* Last byte of buffer to write *\/$/;"	m	struct:PmaWriter	file:
iBufStart	sqlite3_MFAW.c	/^  int iBufStart;                  \/* First byte of buffer to write *\/$/;"	m	struct:PmaWriter	file:
iCacheCnt	sqlite3_MFAW.c	/^  int iCacheCnt;       \/* Counter used to generate aColCache[].lru values *\/$/;"	m	struct:Parse	file:
iCacheLevel	sqlite3_MFAW.c	/^  int iCacheLevel;     \/* ColCache valid when aColCache[].iLevel<=iCacheLevel *\/$/;"	m	struct:Parse	file:
iCallback	sqlite3_MFAW.c	/^  u32 iCallback;             \/* Value to pass to log callback (or 0) *\/$/;"	m	struct:Wal	file:
iCell	sqlite3_MFAW.c	/^  int iCell;$/;"	m	struct:StatPage	file:
iCell	sqlite3_MFAW.c	/^  u8 iCell;              \/* Cell index within the node *\/$/;"	m	struct:RtreeSearchPoint	file:
iChange	sqlite3_MFAW.c	/^  u32 iChange;                    \/* Counter incremented each transaction *\/$/;"	m	struct:WalIndexHdr	file:
iChild	sqlite3_MFAW.c	/^  sqlite3_int64 iChild;           \/* Pointer to child node *\/$/;"	m	struct:NodeReader	file:
iChildPg	sqlite3_MFAW.c	/^  u32 iChildPg;                   \/* Child node (or 0 if this is a leaf) *\/$/;"	m	struct:StatCell	file:
iCol	sqlite3_MFAW.c	/^  int iCol;                       \/* Column of table to populate aTerm for *\/$/;"	m	struct:TermOffsetCtx	file:
iCol	sqlite3_MFAW.c	/^  int iCol;                       \/* Column snippet is extracted from *\/$/;"	m	struct:SnippetFragment	file:
iCol	sqlite3_MFAW.c	/^  int iCol;                       \/* Column token must occur in *\/$/;"	m	struct:Fts3DeferredToken	file:
iCol	sqlite3_MFAW.c	/^  int iCol;                       \/* Current value of 'col' column *\/$/;"	m	struct:Fts3auxCursor	file:
iCol	sqlite3_MFAW.c	/^  int iCol;                       \/* Extract snippet from this column *\/$/;"	m	struct:SnippetIter	file:
iCol	sqlite3_MFAW.c	/^  int iCol;                       \/* If !isPSample, the reason for inclusion *\/$/;"	m	struct:Stat4Sample	file:
iCol	sqlite3_MFAW.c	/^  int iCol;                       \/* The column the token must match *\/$/;"	m	struct:Fts3TokenAndCost	file:
iCol	sqlite3_MFAW.c	/^  int iCol;               \/* Table column this handle is open on *\/$/;"	m	struct:Incrblob	file:
iCol	sqlite3_MFAW.c	/^  int iCol;$/;"	m	struct:Fts3SegFilter	file:
iColFilter	sqlite3_MFAW.c	/^  int iColFilter;                 \/* If >=0, filter for this column *\/$/;"	m	struct:Fts3MultiSegReader	file:
iColumn	sqlite3_MFAW.c	/^     int iColumn;              \/* Column number *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_orderby	file:
iColumn	sqlite3_MFAW.c	/^     int iColumn;              \/* Column on left-hand side of constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
iColumn	sqlite3_MFAW.c	/^    i16 iColumn;          \/* Table column number *\/$/;"	m	struct:Parse::yColCache	file:
iColumn	sqlite3_MFAW.c	/^    int iColumn;             \/* Column number within the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iColumn	sqlite3_MFAW.c	/^  int iColumn;               \/* Index of column this phrase must match *\/$/;"	m	struct:Fts3Phrase	file:
iColumn	sqlite3_MFAW.c	/^  ynVar iColumn;         \/* TK_COLUMN: column index.  -1 for rowid.$/;"	m	struct:Expr	file:
iConstExprReg	sqlite3_MFAW.c	/^      int iConstExprReg;      \/* Register in which Expr value is cached *\/$/;"	m	union:ExprList::ExprList_item::__anon5	file:
iContinue	sqlite3_MFAW.c	/^  int iContinue;            \/* Jump here to continue with next record *\/$/;"	m	struct:WhereInfo	file:
iCoord	sqlite3_MFAW.c	/^  int iCoord;                     \/* Index of constrained coordinate *\/$/;"	m	struct:RtreeConstraint	file:
iCur	sqlite3_MFAW.c	/^        int iCur;              \/* The VDBE cursor used by this IN operator *\/$/;"	m	struct:WhereLevel::__anon16::__anon17::InLoop	file:
iCur	sqlite3_MFAW.c	/^    int iCur;                                  \/* A cursor number *\/$/;"	m	union:Walker::__anon8	file:
iCurrent	sqlite3_MFAW.c	/^  int iCurrent;                   \/* First token of current snippet *\/$/;"	m	struct:SnippetIter	file:
iCurrentBlock	sqlite3_MFAW.c	/^  sqlite3_int64 iCurrentBlock;    \/* Current leaf block (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
iCurrentTime	sqlite3_MFAW.c	/^  i64 iCurrentTime;       \/* Value of julianday('now') for this statement *\/$/;"	m	struct:Vdbe	file:
iCursor	sqlite3_MFAW.c	/^    int iCursor;      \/* The VDBE cursor number used to access this table *\/$/;"	m	struct:SrcList::SrcList_item	file:
iDataVersion	sqlite3_MFAW.c	/^  u32 iDataVersion;           \/* Changes whenever database content changes *\/$/;"	m	struct:Pager	file:
iDataVersion	sqlite3_MFAW.c	/^  u32 iDataVersion;  \/* Combines with pBt->pPager->iDataVersion *\/$/;"	m	struct:Btree	file:
iDb	sqlite3_MFAW.c	/^    u8 iDb;                     \/* Which db file is being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
iDb	sqlite3_MFAW.c	/^  i8 iDb;               \/* Index of cursor database in db->aDb[] (or -1) *\/$/;"	m	struct:VdbeCursor	file:
iDb	sqlite3_MFAW.c	/^  int iDb;                        \/* Index of database to analyze *\/$/;"	m	struct:StatTable	file:
iDb	sqlite3_MFAW.c	/^  int iDb;              \/* Index in sqlite3.aDb[] of database holding pTab *\/$/;"	m	struct:AutoincInfo	file:
iDb	sqlite3_MFAW.c	/^  int iDb;             \/* The database containing the table to be locked *\/$/;"	m	struct:TableLock	file:
iDb	sqlite3_MFAW.c	/^  int iDb;            \/* 0 for main database.  1 for TEMP, 2.. for ATTACHed *\/$/;"	m	struct:__anon7	file:
iDefaultCol	sqlite3_MFAW.c	/^  int iDefaultCol;                    \/* Default column to query *\/$/;"	m	struct:ParseContext	file:
iDepth	sqlite3_MFAW.c	/^  int iDepth;                 \/* Current depth of the r-tree structure *\/$/;"	m	struct:Rtree	file:
iDestSchema	sqlite3_MFAW.c	/^  u32 iDestSchema;         \/* Original schema cookie in destination *\/$/;"	m	struct:sqlite3_backup	file:
iDistinct	sqlite3_MFAW.c	/^    int iDistinct;           \/* Ephemeral table used to enforce DISTINCT *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
iDivisor	sqlite3_MFAW.c	/^  u32 iDivisor;   \/* Number of bits handled by each apSub[] entry. *\/$/;"	m	struct:Bitvec	file:
iDocid	sqlite3_MFAW.c	/^  sqlite3_int64 iDocid;          \/* Current docid (if pList!=0) *\/$/;"	m	struct:Fts3Doclist	file:
iDocid	sqlite3_MFAW.c	/^  sqlite3_int64 iDocid;      \/* Current docid *\/$/;"	m	struct:Fts3Expr	file:
iDocid	sqlite3_MFAW.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:Fts3SegReader	file:
iDocid	sqlite3_MFAW.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:TermOffsetCtx	file:
iDocid	sqlite3_MFAW.c	/^  sqlite3_int64 iDocid;$/;"	m	struct:TokenDoclist	file:
iDoclistToken	sqlite3_MFAW.c	/^  int iDoclistToken;$/;"	m	struct:Fts3Phrase	file:
iECursor	sqlite3_MFAW.c	/^  int iECursor;         \/* Cursor number for the sorter *\/$/;"	m	struct:SortCtx	file:
iEnd	sqlite3_MFAW.c	/^  int iEnd;                       \/* Current 'end' value *\/$/;"	m	struct:Fts3tokCursor	file:
iEnd	sqlite3_MFAW.c	/^  sqlite3_int64 iEnd;             \/* Block number of last allocated block *\/$/;"	m	struct:IncrmergeWriter	file:
iEndBlock	sqlite3_MFAW.c	/^  sqlite3_int64 iEndBlock;        \/* Rowid of final block in segment (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
iEof	sqlite3_MFAW.c	/^  i64 iEof;                       \/* Bytes of data stored in pFd *\/$/;"	m	struct:SorterFile	file:
iEof	sqlite3_MFAW.c	/^  i64 iEof;                   \/* 1 byte past EOF for this PmaReader *\/$/;"	m	struct:PmaReader	file:
iEquiv	sqlite3_MFAW.c	/^  unsigned char iEquiv;      \/* Next unused slot in aEquiv[] *\/$/;"	m	struct:WhereScan	file:
iFirst	sqlite3_MFAW.c	/^  sqlite3_int64 iFirst;           \/* First slot in %_segments written *\/$/;"	m	struct:SegmentWriter	file:
iFixedOp	sqlite3_MFAW.c	/^  int iFixedOp;        \/* Never back out opcodes iFixedOp-1 or earlier *\/$/;"	m	struct:Parse	file:
iForeGuard	sqlite3_MFAW.c	/^  int iForeGuard;                     \/* Guard word for sanity *\/$/;"	m	struct:MemBlockHdr	file:
iFree	sqlite3_MFAW.c	/^  sqlite3_int64 iFree;            \/* Next free slot in %_segments *\/$/;"	m	struct:SegmentWriter	file:
iFrom	sqlite3_MFAW.c	/^    int iFrom;            \/* Index of column in pFrom *\/$/;"	m	struct:FKey::sColMap	file:
iFrom	sqlite3_MFAW.c	/^  u8 iFrom;             \/* Which entry in the FROM clause *\/$/;"	m	struct:WhereLevel	file:
iGeneration	sqlite3_MFAW.c	/^  int iGeneration;     \/* Generation counter.  Incremented with each change *\/$/;"	m	struct:Schema	file:
iGet	sqlite3_MFAW.c	/^  int iGet;                 \/* Index of current sample accessed by stat_get() *\/$/;"	m	struct:Stat4Accum	file:
iHash	sqlite3_MFAW.c	/^  u32 iHash;                      \/* Tiebreaker hash *\/$/;"	m	struct:Stat4Sample	file:
iHdrOffset	sqlite3_MFAW.c	/^  i64 iHdrOffset;              \/* See above *\/$/;"	m	struct:PagerSavepoint	file:
iHdrOffset	sqlite3_MFAW.c	/^  u32 iHdrOffset;       \/* Offset to next unparsed byte of the header *\/$/;"	m	struct:VdbeCursor	file:
iHead	sqlite3_MFAW.c	/^  int iHead;                      \/* Next value in position list *\/$/;"	m	struct:SnippetPhrase	file:
iIdx	sqlite3_MFAW.c	/^  int iIdx;                       \/* Index of *output* segment in iAbsLevel+1 *\/$/;"	m	struct:IncrmergeWriter	file:
iIdx	sqlite3_MFAW.c	/^  int iIdx;                       \/* Index within level, or 0x7FFFFFFF for PT *\/$/;"	m	struct:Fts3SegReader	file:
iIdxCur	sqlite3_MFAW.c	/^  int iIdxCur;          \/* The VDBE cursor used to access pIdx *\/$/;"	m	struct:WhereLevel	file:
iJD	sqlite3_MFAW.c	/^  sqlite3_int64 iJD; \/* The julian day number times 86400000 *\/$/;"	m	struct:DateTime	file:
iKey	sqlite3_MFAW.c	/^  unsigned int iKey;             \/* Key value (page number) *\/$/;"	m	struct:PgHdr1	file:
iLangid	sqlite3_MFAW.c	/^  int iLangid;                        \/* Language id used with tokenizer *\/$/;"	m	struct:ParseContext	file:
iLangid	sqlite3_MFAW.c	/^  int iLangid;                    \/* Language being queried for *\/$/;"	m	struct:Fts3Cursor	file:
iLangid	sqlite3_MFAW.c	/^  int iLangid;                    \/* Language id to query *\/$/;"	m	struct:Fts3auxCursor	file:
iLastCol	sqlite3_MFAW.c	/^  sqlite3_int64 iLastCol;$/;"	m	struct:PendingList	file:
iLastDocid	sqlite3_MFAW.c	/^  sqlite3_int64 iLastDocid;$/;"	m	struct:PendingList	file:
iLastPos	sqlite3_MFAW.c	/^  sqlite3_int64 iLastPos;$/;"	m	struct:PendingList	file:
iLeafEndBlock	sqlite3_MFAW.c	/^  sqlite3_int64 iLeafEndBlock;    \/* Rowid of final leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:
iLeftJoin	sqlite3_MFAW.c	/^  int iLeftJoin;        \/* Memory cell used to implement LEFT OUTER JOIN *\/$/;"	m	struct:WhereLevel	file:
iLevel	sqlite3_MFAW.c	/^    int iLevel;           \/* Nesting level *\/$/;"	m	struct:Parse::yColCache	file:
iLevel	sqlite3_MFAW.c	/^  int iLevel;                       \/* Level of current node or entry *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
iLevel	sqlite3_MFAW.c	/^  int iLevel;             \/* Which level of the tree we are on *\/$/;"	m	struct:TreeView	file:
iLevel	sqlite3_MFAW.c	/^  u8 iLevel;             \/* 0=entries.  1=leaf node.  2+ for higher *\/$/;"	m	struct:RtreeSearchPoint	file:
iLikeRepCntr	sqlite3_MFAW.c	/^  int iLikeRepCntr;     \/* LIKE range processing counter register *\/$/;"	m	struct:WhereLevel	file:
iLimit	sqlite3_MFAW.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:
iMaster	sqlite3_MFAW.c	/^  u32 iMaster;$/;"	m	struct:Mem3Global	file:
iMaxDocid	sqlite3_MFAW.c	/^  i64 iMaxDocid;                  \/* Maximum docid to return *\/$/;"	m	struct:Fts3Cursor	file:
iMaxKey	sqlite3_MFAW.c	/^  unsigned int iMaxKey;               \/* Largest key seen since xTruncate() *\/$/;"	m	struct:PCache1	file:
iMem	sqlite3_MFAW.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iMem	sqlite3_MFAW.c	/^    int iMem;                \/* Memory location that acts as accumulator *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
iMemory	sqlite3_MFAW.c	/^  int iMemory;                    \/* Offset of free space in list.aMemory *\/$/;"	m	struct:VdbeSorter	file:
iMin	sqlite3_MFAW.c	/^  int iMin;                 \/* Index in a[] of entry with minimum score *\/$/;"	m	struct:Stat4Accum	file:
iMinDocid	sqlite3_MFAW.c	/^  i64 iMinDocid;                  \/* Minimum docid to return *\/$/;"	m	struct:Fts3Cursor	file:
iNext	sqlite3_MFAW.c	/^    int iNext;                    \/* Next slot in aIndex[] not yet returned *\/$/;"	m	struct:WalIterator::WalSegment	file:
iNext	sqlite3_MFAW.c	/^    int iNext;                    \/* Offset within aMemory of next record *\/$/;"	m	union:SorterRecord::__anon14	file:
iNext	sqlite3_MFAW.c	/^  Pgno iNext;              \/* Page number of the next source page to copy *\/$/;"	m	struct:sqlite3_backup	file:
iNextSelectId	sqlite3_MFAW.c	/^  int iNextSelectId;        \/* Next available select ID for EXPLAIN output *\/$/;"	m	struct:Parse	file:
iNode	sqlite3_MFAW.c	/^  i64 iNode;                  \/* The node number *\/$/;"	m	struct:RtreeNode	file:
iNodeSize	sqlite3_MFAW.c	/^  int iNodeSize;              \/* Size in bytes of each node in the node table *\/$/;"	m	struct:Rtree	file:
iOff	sqlite3_MFAW.c	/^  int iOff;                       \/* Current offset within aInput[] *\/$/;"	m	struct:unicode_cursor	file:
iOff	sqlite3_MFAW.c	/^  int iOff;                       \/* Current offset within aNode[] *\/$/;"	m	struct:NodeReader	file:
iOff	sqlite3_MFAW.c	/^  int iOff;                       \/* Offset of this term from read positions *\/$/;"	m	struct:TermOffset	file:
iOffset	sqlite3_MFAW.c	/^  i64 iOffset;                    \/* Value of 'pgOffset' column *\/$/;"	m	struct:StatCursor	file:
iOffset	sqlite3_MFAW.c	/^  i64 iOffset;                 \/* Starting offset in main journal *\/$/;"	m	struct:PagerSavepoint	file:
iOffset	sqlite3_MFAW.c	/^  int iLimit, iOffset;   \/* Memory registers holding LIMIT & OFFSET counters *\/$/;"	m	struct:Select	file:
iOffset	sqlite3_MFAW.c	/^  int iOffset;                 \/* current position in pInput *\/$/;"	m	struct:simple_tokenizer_cursor	file:
iOffset	sqlite3_MFAW.c	/^  int iOffset;                 \/* current position in zInput *\/$/;"	m	struct:porter_tokenizer_cursor	file:
iOffset	sqlite3_MFAW.c	/^  int iOffset;            \/* Byte offset of blob in cursor data *\/$/;"	m	struct:Incrblob	file:
iOffset	sqlite3_MFAW.c	/^  sqlite3_int64 iOffset;          \/* Offset from the beginning of the file *\/$/;"	m	struct:FilePoint	file:
iOp	sqlite3_MFAW.c	/^  int iOp;                        \/* Instruction number of OP_Function opcode *\/$/;"	m	struct:AuxData	file:
iOp	sqlite3_MFAW.c	/^  int iOp;              \/* Instruction number of OP_Function *\/$/;"	m	struct:sqlite3_context	file:
iOrDocid	sqlite3_MFAW.c	/^  i64 iOrDocid;$/;"	m	struct:Fts3Phrase	file:
iOrderByCol	sqlite3_MFAW.c	/^        u16 iOrderByCol;      \/* For ORDER BY, column number in result set *\/$/;"	m	struct:ExprList::ExprList_item::__anon5::__anon6	file:
iOverflow	sqlite3_MFAW.c	/^  u16 iOverflow; \/* Offset to overflow page number.  Zero if no overflow *\/$/;"	m	struct:CellInfo	file:
iOvfl	sqlite3_MFAW.c	/^  int iOvfl;                      \/* Iterates through aOvfl[] *\/$/;"	m	struct:StatCell	file:
iPKey	sqlite3_MFAW.c	/^  i16 iPKey;           \/* If not negative, use aCol[iPKey] as the rowid *\/$/;"	m	struct:Table	file:
iPage	sqlite3_MFAW.c	/^  i16 iPage;                            \/* Index of current page in apPage *\/$/;"	m	struct:BtCursor	file:
iPage	sqlite3_MFAW.c	/^  int iPage;                      \/* Current entry in aPage[] *\/$/;"	m	struct:StatCursor	file:
iPageno	sqlite3_MFAW.c	/^  u32 iPageno;                    \/* Value of 'pageno' column *\/$/;"	m	struct:StatCursor	file:
iParent	sqlite3_MFAW.c	/^  int iParent;            \/* Disable pWC->a[iParent] when this term disabled *\/$/;"	m	struct:WhereTerm	file:
iPartIdxTab	sqlite3_MFAW.c	/^  int iPartIdxTab;     \/* Table corresponding to a partial index *\/$/;"	m	struct:Parse	file:
iPgno	sqlite3_MFAW.c	/^  u32 iPgno;$/;"	m	struct:StatPage	file:
iPkSortOrder	sqlite3_MFAW.c	/^  u8 iPkSortOrder;          \/* ASC or DESC for INTEGER PRIMARY KEY *\/$/;"	m	struct:Parse	file:
iPos	sqlite3_MFAW.c	/^  int iPos;                       \/* Current 'pos' value *\/$/;"	m	struct:Fts3tokCursor	file:
iPos	sqlite3_MFAW.c	/^  int iPos;                       \/* Current position *\/$/;"	m	struct:LcsIterator	file:
iPos	sqlite3_MFAW.c	/^  int iPos;                       \/* Index of first token in snippet *\/$/;"	m	struct:SnippetFragment	file:
iPos	sqlite3_MFAW.c	/^  int iPos;                       \/* Position just read from pList *\/$/;"	m	struct:TermOffset	file:
iPosOffset	sqlite3_MFAW.c	/^  int iPosOffset;                 \/* Tokens count up to end of this phrase *\/$/;"	m	struct:LcsIterator	file:
iPrev	sqlite3_MFAW.c	/^  u8 iPrev;                       \/* Previous thread used to flush PMA *\/$/;"	m	struct:VdbeSorter	file:
iPrevDocid	sqlite3_MFAW.c	/^  sqlite_int64 iPrevDocid;        \/* Docid of most recently inserted document *\/$/;"	m	struct:Fts3Table	file:
iPrevId	sqlite3_MFAW.c	/^  sqlite3_int64 iPrevId;          \/* Previous id read from aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
iPrevLangid	sqlite3_MFAW.c	/^  int iPrevLangid;                \/* Langid of recently inserted document *\/$/;"	m	struct:Fts3Table	file:
iPrior	sqlite3_MFAW.c	/^  int iPrior;                     \/* Last result returned from the iterator *\/$/;"	m	struct:WalIterator	file:
iPrn	sqlite3_MFAW.c	/^  u32 iPrn;                 \/* Pseudo-random number used for sampling *\/$/;"	m	struct:Stat4Accum	file:
iRangeReg	sqlite3_MFAW.c	/^  int iRangeReg;       \/* First register in temporary register block *\/$/;"	m	struct:Parse	file:
iReadOff	sqlite3_MFAW.c	/^  i64 iReadOff;               \/* Current read offset *\/$/;"	m	struct:PmaReader	file:
iReg	sqlite3_MFAW.c	/^    int iReg;             \/* Reg with value of this column. 0 means none. *\/$/;"	m	struct:Parse::yColCache	file:
iReinsertHeight	sqlite3_MFAW.c	/^  int iReinsertHeight;        \/* Height of sub-trees Reinsert() has run on *\/$/;"	m	struct:Rtree	file:
iRightChildPg	sqlite3_MFAW.c	/^  u32 iRightChildPg;              \/* Right-child page number (or 0) *\/$/;"	m	struct:StatPage	file:
iRightJoinTable	sqlite3_MFAW.c	/^  i16 iRightJoinTable;   \/* If EP_FromJoin, the right table of the join *\/$/;"	m	struct:Expr	file:
iRowid	sqlite3_MFAW.c	/^    i64 iRowid;                     \/* Rowid in main table of the key *\/$/;"	m	union:Stat4Sample::__anon15	file:
iRowid	sqlite3_MFAW.c	/^  i64 iRowid;                                 \/* Node or entry ID *\/$/;"	m	struct:RtreeCell	file:
iRowid	sqlite3_MFAW.c	/^  int iRowid;                     \/* Current 'rowid' value *\/$/;"	m	struct:Fts3tokCursor	file:
iRowid	sqlite3_MFAW.c	/^  sqlite3_int64 iRowid;             \/* Rowid for current entry *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
iRowid	sqlite3_MFAW.c	/^  sqlite3_int64 iRowid;           \/* Current rowid *\/$/;"	m	struct:Fts3auxCursor	file:
iSDParm	sqlite3_MFAW.c	/^  int iSDParm;         \/* A parameter used by the eDest disposal method *\/$/;"	m	struct:SelectDest	file:
iSavepoint	sqlite3_MFAW.c	/^  int iSavepoint;           \/* Depth of the SAVEPOINT stack *\/$/;"	m	struct:VTable	file:
iSdst	sqlite3_MFAW.c	/^  int iSdst;           \/* Base register where results are written *\/$/;"	m	struct:SelectDest	file:
iSelectID	sqlite3_MFAW.c	/^  int iSelectID;                  \/* The "Select-ID" for this loop *\/$/;"	m	struct:ScanStatus	file:
iSelectId	sqlite3_MFAW.c	/^    u8 iSelectId;     \/* If pSelect!=0, the id of the sub-select in EQP *\/$/;"	m	struct:SrcList::SrcList_item	file:
iSelectId	sqlite3_MFAW.c	/^  int iSelectId;            \/* ID of current select for EXPLAIN output *\/$/;"	m	struct:Parse	file:
iSize	sqlite3_MFAW.c	/^  i64 iSize;                          \/* Size of this allocation *\/$/;"	m	struct:MemBlockHdr	file:
iSize	sqlite3_MFAW.c	/^  int iSize;                      \/* Amount of zBuf[] currently used *\/$/;"	m	struct:JournalFile	file:
iSize	sqlite3_MFAW.c	/^  u32 iSize;      \/* Maximum bit index.  Max iSize is 4,294,967,296. *\/$/;"	m	struct:Bitvec	file:
iSortIdx	sqlite3_MFAW.c	/^  u8 iSortIdx;          \/* Sorting index number.  0==None *\/$/;"	m	struct:WhereLoop	file:
iSorterColumn	sqlite3_MFAW.c	/^    int iSorterColumn;       \/* Column number in the sorting index *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iSrcLine	sqlite3_MFAW.c	/^  int iSrcLine;            \/* Source-code line that generated this opcode *\/$/;"	m	struct:VdbeOp	file:
iStart	sqlite3_MFAW.c	/^  int iStart;                     \/* Current 'start' value *\/$/;"	m	struct:Fts3tokCursor	file:
iStart	sqlite3_MFAW.c	/^  sqlite3_int64 iStart;           \/* Block number of first allocated block *\/$/;"	m	struct:IncrmergeWriter	file:
iStartBlock	sqlite3_MFAW.c	/^  sqlite3_int64 iStartBlock;      \/* Rowid of first leaf block to traverse *\/$/;"	m	struct:Fts3SegReader	file:
iStartOff	sqlite3_MFAW.c	/^  i64 iStartOff;                  \/* Offset to start writing file at *\/$/;"	m	struct:IncrMerger	file:
iStatement	sqlite3_MFAW.c	/^  int iStatement;         \/* Statement number (or 0 if has not opened stmt) *\/$/;"	m	struct:Vdbe	file:
iStrategy	sqlite3_MFAW.c	/^  int iStrategy;                    \/* Copy of idxNum search parameter *\/$/;"	m	struct:RtreeCursor	file:
iSub	sqlite3_MFAW.c	/^  int iSub;                  \/* 0 = main program, 1 = first sub-program etc. *\/$/;"	m	struct:VdbeOpIter	file:
iSubRec	sqlite3_MFAW.c	/^  Pgno iSubRec;                \/* Index of first record in sub-journal *\/$/;"	m	struct:PagerSavepoint	file:
iSum	sqlite3_MFAW.c	/^  i64 iSum;         \/* Integer sum *\/   $/;"	m	struct:SumCtx	file:
iSyncPoint	sqlite3_MFAW.c	/^  sqlite3_int64 iSyncPoint;    \/* Fsync at this offset *\/$/;"	m	struct:WalWriter	file:
iTab	sqlite3_MFAW.c	/^  int iTab;            \/* The root page of the table to be locked *\/$/;"	m	struct:TableLock	file:
iTab	sqlite3_MFAW.c	/^  u8 iTab;              \/* Position in FROM clause of table for this loop *\/$/;"	m	struct:WhereLoop	file:
iTabCur	sqlite3_MFAW.c	/^  int iTabCur;          \/* The VDBE cursor used to access the table *\/$/;"	m	struct:WhereLevel	file:
iTable	sqlite3_MFAW.c	/^    int iTable;              \/* Cursor number of the source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
iTable	sqlite3_MFAW.c	/^    int iTable;           \/* Table cursor number *\/$/;"	m	struct:Parse::yColCache	file:
iTable	sqlite3_MFAW.c	/^  Pgno iTable;          \/* Root page of table *\/$/;"	m	struct:BtLock	file:
iTable	sqlite3_MFAW.c	/^  int iTable;            \/* TK_COLUMN: cursor number of table holding column$/;"	m	struct:Expr	file:
iTail	sqlite3_MFAW.c	/^  int iTail;                      \/* Next value in trailing position list *\/$/;"	m	struct:SnippetPhrase	file:
iTerm	sqlite3_MFAW.c	/^  int iTerm;$/;"	m	struct:TermOffsetCtx	file:
iTermOffset	sqlite3_MFAW.c	/^     int iTermOffset;          \/* Used internally - xBestIndex should ignore *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
iToken	sqlite3_MFAW.c	/^  int iToken;                     \/* Index of next token to be returned *\/$/;"	m	struct:unicode_cursor	file:
iToken	sqlite3_MFAW.c	/^  int iToken;                     \/* Position of token in phrase *\/$/;"	m	struct:Fts3TokenAndCost	file:
iToken	sqlite3_MFAW.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:porter_tokenizer_cursor	file:
iToken	sqlite3_MFAW.c	/^  int iToken;                  \/* index of next token to be returned *\/$/;"	m	struct:simple_tokenizer_cursor	file:
iToken	sqlite3_MFAW.c	/^  int iToken;$/;"	m	struct:IcuCursor	file:
iTop	sqlite3_MFAW.c	/^  int iTop;                 \/* The very beginning of the WHERE loop *\/$/;"	m	struct:WhereInfo	file:
iVal	sqlite3_MFAW.c	/^  int iVal;$/;"	m	struct:ValueNewStat4Ctx	file:
iValue	sqlite3_MFAW.c	/^    int iValue;            \/* Non-negative integer value if EP_IntValue *\/$/;"	m	union:Expr::__anon3	file:
iVersion	sqlite3_MFAW.c	/^  int iVersion;            \/* Structure version number (currently 3) *\/$/;"	m	struct:sqlite3_vfs	file:
iVersion	sqlite3_MFAW.c	/^  int iVersion;$/;"	m	struct:sqlite3_io_methods	file:
iVersion	sqlite3_MFAW.c	/^  int iVersion;$/;"	m	struct:sqlite3_module	file:
iVersion	sqlite3_MFAW.c	/^  int iVersion;$/;"	m	struct:sqlite3_pcache_methods2	file:
iVersion	sqlite3_MFAW.c	/^  int iVersion;$/;"	m	struct:sqlite3_tokenizer_module	file:
iVersion	sqlite3_MFAW.c	/^  u32 iVersion;                   \/* Wal-index version *\/$/;"	m	struct:WalIndexHdr	file:
iWriteOff	sqlite3_MFAW.c	/^  i64 iWriteOff;                  \/* Offset of start of buffer in file *\/$/;"	m	struct:PmaWriter	file:
iZero	sqlite3_MFAW.c	/^    int iZero;                    \/* Frame number associated with aPgno[0] *\/$/;"	m	struct:WalIterator::WalSegment	file:
icuCaseFunc16	sqlite3_MFAW.c	/^static void icuCaseFunc16(sqlite3_context *p, int nArg, sqlite3_value **apArg){$/;"	f	file:
icuClose	sqlite3_MFAW.c	/^static int icuClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
icuCollationColl	sqlite3_MFAW.c	/^static int icuCollationColl($/;"	f	file:
icuCollationDel	sqlite3_MFAW.c	/^static void icuCollationDel(void *pCtx){$/;"	f	file:
icuCreate	sqlite3_MFAW.c	/^static int icuCreate($/;"	f	file:
icuDestroy	sqlite3_MFAW.c	/^static int icuDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
icuFunctionError	sqlite3_MFAW.c	/^static void icuFunctionError($/;"	f	file:
icuLikeCompare	sqlite3_MFAW.c	/^static int icuLikeCompare($/;"	f	file:
icuLikeFunc	sqlite3_MFAW.c	/^static void icuLikeFunc($/;"	f	file:
icuLoadCollation	sqlite3_MFAW.c	/^static void icuLoadCollation($/;"	f	file:
icuNext	sqlite3_MFAW.c	/^static int icuNext($/;"	f	file:
icuOpen	sqlite3_MFAW.c	/^static int icuOpen($/;"	f	file:
icuRegexpDelete	sqlite3_MFAW.c	/^static void icuRegexpDelete(void *p){$/;"	f	file:
icuRegexpFunc	sqlite3_MFAW.c	/^static void icuRegexpFunc(sqlite3_context *p, int nArg, sqlite3_value **apArg){$/;"	f	file:
icuTokenizerModule	sqlite3_MFAW.c	/^static const sqlite3_tokenizer_module icuTokenizerModule = {$/;"	v	file:
id	sqlite3_MFAW.c	/^  int id;                    \/* Mutex type *\/$/;"	m	struct:sqlite3_mutex	file:
id	sqlite3_MFAW.c	/^  int id;     \/* The mutex type *\/$/;"	m	struct:sqlite3_debug_mutex	file:
id	sqlite3_MFAW.c	/^  sqlite3_int64 id;      \/* Node ID *\/$/;"	m	struct:RtreeSearchPoint	file:
id	sqlite3_MFAW.c	/^  u8 id;                     \/* Id of this connection with its winShmNode *\/$/;"	m	struct:winShm	file:
id	sqlite3_MFAW.c	/^  u8 id;                     \/* Id of this connection within its unixShmNode *\/$/;"	m	struct:unixShm	file:
id	sqlite3_MFAW.c	/^  unsigned id;             \/* The thread identifier *\/$/;"	m	struct:SQLiteThread	file:
identLength	sqlite3_MFAW.c	/^static int identLength(const char *z){$/;"	f	file:
identPut	sqlite3_MFAW.c	/^static void identPut(char *z, int *pIdx, char *zSignedIdent){$/;"	f	file:
idx	sqlite3_MFAW.c	/^    int idx;          \/* Index in some Table.aCol[] of a column named zName *\/$/;"	m	struct:IdList::IdList_item	file:
idxHash	sqlite3_MFAW.c	/^  Hash idxHash;        \/* All (named) indices indexed by name *\/$/;"	m	struct:Schema	file:
idxNum	sqlite3_MFAW.c	/^      int idxNum;            \/* Index number *\/$/;"	m	struct:WhereLoop::__anon18::__anon20	file:
idxNum	sqlite3_MFAW.c	/^  int idxNum;                \/* Number used to identify the index *\/$/;"	m	struct:sqlite3_index_info	file:
idxStr	sqlite3_MFAW.c	/^      char *idxStr;          \/* Index identifier string *\/$/;"	m	struct:WhereLoop::__anon18::__anon20	file:
idxStr	sqlite3_MFAW.c	/^  char *idxStr;              \/* String, possibly obtained from sqlite3_malloc *\/$/;"	m	struct:sqlite3_index_info	file:
idxType	sqlite3_MFAW.c	/^  unsigned idxType:2;      \/* 1==UNIQUE, 2==PRIMARY KEY, 0==CREATE INDEX *\/$/;"	m	struct:Index	file:
idxaff	sqlite3_MFAW.c	/^  char idxaff;               \/* Must match this affinity, if zCollName!=NULL *\/$/;"	m	struct:WhereScan	file:
imposterTable	sqlite3_MFAW.c	/^    u8 imposterTable;           \/* Building an imposter table *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
in	sqlite3_MFAW.c	/^    } in;                 \/* Used when pWLoop->wsFlags&WHERE_IN_ABLE *\/$/;"	m	union:WhereLevel::__anon16	typeref:struct:WhereLevel::__anon16::__anon17	file:
inNormalWrite	sqlite3_MFAW.c	/^  unsigned char inNormalWrite;   \/* True if in a normal write operation *\/$/;"	m	struct:unixFile	file:
inProgress	sqlite3_MFAW.c	/^  int inProgress;                   \/* True while initialization in progress *\/$/;"	m	struct:Sqlite3Config	file:
inTrans	sqlite3_MFAW.c	/^  u8 inTrans;        \/* TRANS_NONE, TRANS_READ or TRANS_WRITE *\/$/;"	m	struct:Btree	file:
inTransaction	sqlite3_MFAW.c	/^  int inTransaction;     \/* True after xBegin but before xCommit\/xRollback *\/$/;"	m	struct:Fts3Table	file:
inTransaction	sqlite3_MFAW.c	/^  u8 inTransaction;     \/* Transaction state *\/$/;"	m	struct:BtShared	file:
incrAggDepth	sqlite3_MFAW.c	/^static int incrAggDepth(Walker *pWalker, Expr *pExpr){$/;"	f	file:
incrAggFunctionDepth	sqlite3_MFAW.c	/^static void incrAggFunctionDepth(Expr *pExpr, int N){$/;"	f	file:
incrPhraseTokenNext	sqlite3_MFAW.c	/^static int incrPhraseTokenNext($/;"	f	file:
incrVacuum	sqlite3_MFAW.c	/^  u8 incrVacuum;        \/* True if incr-vacuum is enabled *\/$/;"	m	struct:BtShared	file:
incrVacuumStep	sqlite3_MFAW.c	/^static int incrVacuumStep(BtShared *pBt, Pgno nFin, Pgno iLastPg, int bCommit){$/;"	f	file:
index	mobibench.c	/^	int index;$/;"	m	struct:script_fd_conv	file:
index	mobibench_MFAW.c	/^	int index;$/;"	m	struct:script_fd_conv	file:
indexMightHelpWithOrderBy	sqlite3_MFAW.c	/^static int indexMightHelpWithOrderBy($/;"	f	file:
indexable	sqlite3_MFAW.c	/^  Bitmask indexable;       \/* Bitmask of all indexable tables in the clause *\/$/;"	m	struct:WhereOrInfo	file:
info	sqlite3_MFAW.c	/^  CellInfo info;            \/* A parse of the cell we are pointing at *\/$/;"	m	struct:BtCursor	file:
init	sqlite3_MFAW.c	/^  } init;$/;"	m	struct:sqlite3	typeref:struct:sqlite3::sqlite3InitInfo	file:
initAvgEq	sqlite3_MFAW.c	/^static void initAvgEq(Index *pIdx){$/;"	f	file:
initMaskSet	sqlite3_MFAW.c	116523;"	d	file:
init_by_array64	mobibench.c	/^void init_by_array64(unsigned long long init_key[],$/;"	f
init_by_array64	mobibench_MFAW.c	/^void init_by_array64(unsigned long long init_key[],$/;"	f
init_db_for_update	mobibench.c	/^int init_db_for_update(sqlite3* db, char* filename, int trs)$/;"	f
init_db_for_update	mobibench_MFAW.c	/^int init_db_for_update(sqlite3* db, char* filename, int trs)$/;"	f
init_file	mobibench.c	/^int init_file(char* filename, long long size)$/;"	f
init_file	mobibench_MFAW.c	/^int init_file(char* filename, long long size)$/;"	f
init_genrand64	mobibench.c	/^void init_genrand64(unsigned long long seed)$/;"	f
init_genrand64	mobibench_MFAW.c	/^void init_genrand64(unsigned long long seed)$/;"	f
initfile	mobibench.c	/^initfile(int fd, long long filebytes,int flag,int prot, int reclen)$/;"	f
initfile	mobibench_MFAW.c	/^initfile(int fd, long long filebytes,int flag,int prot, int reclen)$/;"	f
ino	sqlite3_MFAW.c	/^  ino_t ino;                  \/* Inode number *\/$/;"	m	struct:unixFileId	file:
inodeList	sqlite3_MFAW.c	/^static unixInodeInfo *inodeList = 0;$/;"	v	file:
insertBinaryOperator	sqlite3_MFAW.c	/^static void insertBinaryOperator($/;"	f	file:
insertCell	sqlite3_MFAW.c	/^static void insertCell($/;"	f	file:
insertElement	sqlite3_MFAW.c	/^static void insertElement($/;"	f	file:
instrFunc	sqlite3_MFAW.c	/^static void instrFunc($/;"	f	file:
intKey	sqlite3_MFAW.c	/^  u8 intKey;           \/* True if table b-trees.  False for index b-trees *\/$/;"	m	struct:MemPage	file:
intKeyLeaf	sqlite3_MFAW.c	/^  u8 intKeyLeaf;       \/* True if the leaf of an intKey table *\/$/;"	m	struct:MemPage	file:
intTestFunc	sqlite3_MFAW.c	/^static void intTestFunc($/;"	f	file:
interruptx	sqlite3_MFAW.c	/^  void  (*interruptx)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
invalidateAllOverflowCache	sqlite3_MFAW.c	/^static void invalidateAllOverflowCache(BtShared *pBt){$/;"	f	file:
invalidateIncrblobCursors	sqlite3_MFAW.c	/^static void invalidateIncrblobCursors($/;"	f	file:
invalidateIncrblobCursors	sqlite3_MFAW.c	53626;"	d	file:
invalidateOverflowCache	sqlite3_MFAW.c	53579;"	d	file:
invalidateTempStorage	sqlite3_MFAW.c	/^static int invalidateTempStorage(Parse *pParse){$/;"	f	file:
invokeValueDestructor	sqlite3_MFAW.c	/^static int invokeValueDestructor($/;"	f	file:
io_count	mobibench.c	/^	int io_count;$/;"	m	struct:script_thread_time	file:
io_count	mobibench_MFAW.c	/^	int io_count;$/;"	m	struct:script_thread_time	file:
io_time	mobibench.c	/^	long long io_time;$/;"	m	struct:script_thread_time	file:
io_time	mobibench_MFAW.c	/^	long long io_time;$/;"	m	struct:script_thread_time	file:
isAttached	sqlite3_MFAW.c	/^  int isAttached;          \/* True once backup has been registered with pager *\/$/;"	m	struct:sqlite3_backup	file:
isCandidateForInOpt	sqlite3_MFAW.c	/^static int isCandidateForInOpt(Select *p){$/;"	f	file:
isConsonant	sqlite3_MFAW.c	/^static int isConsonant(const char *z){$/;"	f	file:
isCorrelated	sqlite3_MFAW.c	/^    unsigned isCorrelated :1;  \/* True if sub-query is correlated *\/$/;"	m	struct:SrcList::SrcList_item	file:
isCovering	sqlite3_MFAW.c	/^  unsigned isCovering:1;   \/* True if this is a covering index *\/$/;"	m	struct:Index	file:
isDate	sqlite3_MFAW.c	/^static int isDate($/;"	f	file:
isDeferred	sqlite3_MFAW.c	/^  u8 isDeferred;       \/* True if constraint checking is deferred till COMMIT *\/$/;"	m	struct:FKey	file:
isDelim	sqlite3_MFAW.c	141773;"	d	file:
isDirty	sqlite3_MFAW.c	/^  int isDirty;                \/* True if the node needs to be written to disk *\/$/;"	m	struct:RtreeNode	file:
isDistinctRedundant	sqlite3_MFAW.c	/^static int isDistinctRedundant($/;"	f	file:
isEof	sqlite3_MFAW.c	/^  int isEof;                      \/* After pStmt has returned SQLITE_DONE *\/$/;"	m	struct:StatCursor	file:
isEof	sqlite3_MFAW.c	/^  int isEof;                      \/* True if cursor is at EOF *\/$/;"	m	struct:Fts3auxCursor	file:
isEof	sqlite3_MFAW.c	/^  u8 isEof;                       \/* True if at End Of Results *\/$/;"	m	struct:Fts3Cursor	file:
isEphemeral	sqlite3_MFAW.c	/^  Bool isEphemeral:1;   \/* True for an ephemeral table *\/$/;"	m	struct:VdbeCursor	file:
isError	sqlite3_MFAW.c	/^  int isError;          \/* Error code returned by the function. *\/$/;"	m	struct:sqlite3_context	file:
isFatalError	sqlite3_MFAW.c	/^static int isFatalError(int rc){$/;"	f	file:
isInit	sqlite3_MFAW.c	/^  int isInit;                       \/* True after initialization has finished *\/$/;"	m	struct:Sqlite3Config	file:
isInit	sqlite3_MFAW.c	/^  int isInit;                    \/* True if initialized *\/$/;"	m	struct:PCacheGlobal	file:
isInit	sqlite3_MFAW.c	/^  u8 isInit;                      \/* 1 when initialized *\/$/;"	m	struct:WalIndexHdr	file:
isInit	sqlite3_MFAW.c	/^  u8 isInit;           \/* True if previously initialized. MUST BE FIRST! *\/$/;"	m	struct:MemPage	file:
isInit	sqlite3_MFAW.c	/^  unsigned char isInit;          \/* True if initialized *\/$/;"	m	struct:sqlite3PrngType	file:
isInterrupted	sqlite3_MFAW.c	/^    volatile int isInterrupted; \/* True if sqlite3_interrupt has been called *\/$/;"	m	union:sqlite3::__anon2	file:
isLikeOrGlob	sqlite3_MFAW.c	/^static int isLikeOrGlob($/;"	f	file:
isLookaside	sqlite3_MFAW.c	/^static int isLookaside(sqlite3 *db, void *p){$/;"	f	file:
isLookaside	sqlite3_MFAW.c	20971;"	d	file:
isMallocInit	sqlite3_MFAW.c	/^  int isMallocInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:
isMatchOfColumn	sqlite3_MFAW.c	/^static int isMatchOfColumn($/;"	f	file:
isMatchinfoNeeded	sqlite3_MFAW.c	/^  int isMatchinfoNeeded;          \/* True when aMatchinfo[] needs filling in *\/$/;"	m	struct:Fts3Cursor	file:
isMultiWrite	sqlite3_MFAW.c	/^  u8 isMultiWrite;     \/* True if statement may modify\/insert multiple rows *\/$/;"	m	struct:Parse	file:
isMutexInit	sqlite3_MFAW.c	/^  int isMutexInit;                  \/* True after mutexes are initialized *\/$/;"	m	struct:Sqlite3Config	file:
isNot	sqlite3_MFAW.c	/^  int isNot;                          \/* True if getNextNode() sees a unary - *\/$/;"	m	struct:ParseContext	file:
isOpen	sqlite3_MFAW.c	42469;"	d	file:
isOrdered	sqlite3_MFAW.c	/^      i8 isOrdered;          \/* True if satisfies ORDER BY *\/$/;"	m	struct:WhereLoop::__anon18::__anon20	file:
isOrdered	sqlite3_MFAW.c	/^  Bool isOrdered:1;     \/* True if the underlying table is BTREE_UNORDERED *\/$/;"	m	struct:VdbeCursor	file:
isOrdered	sqlite3_MFAW.c	/^  i8 isOrdered;         \/* No. of ORDER BY terms satisfied. -1 for unknown *\/$/;"	m	struct:WherePath	file:
isPCacheInit	sqlite3_MFAW.c	/^  int isPCacheInit;                 \/* True after malloc is initialized *\/$/;"	m	struct:Sqlite3Config	file:
isPSample	sqlite3_MFAW.c	/^  u8 isPSample;                   \/* True if a periodic sample *\/$/;"	m	struct:Stat4Sample	file:
isPinned	sqlite3_MFAW.c	/^  u8 isPinned;                   \/* Page in use, not on the LRU list *\/$/;"	m	struct:PgHdr1	file:
isPrefix	sqlite3_MFAW.c	/^  int isPrefix;                   \/* True if token ends with a "*" character *\/$/;"	m	struct:Fts3PhraseToken	file:
isPrepareV2	sqlite3_MFAW.c	/^  bft isPrepareV2:1;      \/* True if prepared with prepare_v2() *\/$/;"	m	struct:Vdbe	file:
isReadonly	sqlite3_MFAW.c	/^  u8 isReadonly;             \/* True if read-only *\/$/;"	m	struct:unixShmNode	file:
isRecursive	sqlite3_MFAW.c	/^    unsigned isRecursive :1;   \/* True for recursive reference in WITH *\/$/;"	m	struct:SrcList::SrcList_item	file:
isRequireSeek	sqlite3_MFAW.c	/^  u8 isRequireSeek;               \/* True if must seek pStmt to %_content row *\/$/;"	m	struct:Fts3Cursor	file:
isResized	sqlite3_MFAW.c	/^  unsigned isResized:1;    \/* True if resizeIndexObject() has been called *\/$/;"	m	struct:Index	file:
isSetNullAction	sqlite3_MFAW.c	/^static int isSetNullAction(Parse *pParse, FKey *pFKey){$/;"	f	file:
isSimpleCount	sqlite3_MFAW.c	/^static Table *isSimpleCount(Select *p, AggInfo *pAggInfo){$/;"	f	file:
isSorter	sqlite3_MFAW.c	70988;"	d	file:
isSystemTable	sqlite3_MFAW.c	/^static int isSystemTable(Parse *pParse, const char *zName){$/;"	f	file:
isTable	sqlite3_MFAW.c	/^  Bool isTable:1;       \/* True if a table requiring integer keys *\/$/;"	m	struct:VdbeCursor	file:
isTnct	sqlite3_MFAW.c	/^  u8 isTnct;      \/* True if the DISTINCT keyword is present *\/$/;"	m	struct:DistinctCtx	file:
isTransactionSavepoint	sqlite3_MFAW.c	/^  u8 isTransactionSavepoint;    \/* True if the outermost savepoint is a TS *\/$/;"	m	struct:sqlite3	file:
isView	sqlite3_MFAW.c	100240;"	d	file:
isView	sqlite3_MFAW.c	100241;"	d	file:
isView	sqlite3_MFAW.c	100744;"	d	file:
isView	sqlite3_MFAW.c	113645;"	d	file:
isView	sqlite3_MFAW.c	113646;"	d	file:
isView	sqlite3_MFAW.c	114149;"	d	file:
isView	sqlite3_MFAW.c	95945;"	d	file:
isView	sqlite3_MFAW.c	95946;"	d	file:
isView	sqlite3_MFAW.c	96224;"	d	file:
isVowel	sqlite3_MFAW.c	/^static int isVowel(const char *z){$/;"	f	file:
isWriteLock	sqlite3_MFAW.c	/^  u8 isWriteLock;      \/* True for write lock.  False for a read lock *\/$/;"	m	struct:TableLock	file:
ix	sqlite3_MFAW.c	/^  int ix[BMS];                  \/* Cursor assigned to each bit *\/$/;"	m	struct:WhereMaskSet	file:
j	sqlite3_MFAW.c	/^  unsigned char i, j;            \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
j_nr_switches	mobibench.c	/^unsigned int j_nr_switches[2] = {0, };$/;"	v
j_nr_switches	mobibench_MFAW.c	/^unsigned int j_nr_switches[2] = {0, };$/;"	v
j_p_name	mobibench.c	/^char j_p_name[100] = {0, };$/;"	v
j_p_name	mobibench_MFAW.c	/^char j_p_name[100] = {0, };$/;"	v
jfd	sqlite3_MFAW.c	/^  sqlite3_file *jfd;          \/* File descriptor for main journal *\/$/;"	m	struct:Pager	file:
jointype	sqlite3_MFAW.c	/^    u8 jointype;      \/* Type of join between this able and the previous *\/$/;"	m	struct:SrcList::SrcList_item	file:
journalHdr	sqlite3_MFAW.c	/^  i64 journalHdr;             \/* Byte offset to previous journal header *\/$/;"	m	struct:Pager	file:
journalHdrOffset	sqlite3_MFAW.c	/^static i64 journalHdrOffset(Pager *pPager){$/;"	f	file:
journalMode	sqlite3_MFAW.c	/^  u8 journalMode;             \/* One of the PAGER_JOURNALMODE_* values *\/$/;"	m	struct:Pager	file:
journalOff	sqlite3_MFAW.c	/^  i64 journalOff;             \/* Current write offset in the journal file *\/$/;"	m	struct:Pager	file:
journalSizeLimit	sqlite3_MFAW.c	/^  i64 journalSizeLimit;       \/* Size limit for persistent journal files *\/$/;"	m	struct:Pager	file:
jrnlBufferSize	sqlite3_MFAW.c	/^static int jrnlBufferSize(Pager *pPager){$/;"	f	file:
jrnlClose	sqlite3_MFAW.c	/^static int jrnlClose(sqlite3_file *pJfd){$/;"	f	file:
jrnlFileSize	sqlite3_MFAW.c	/^static int jrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:
jrnlRead	sqlite3_MFAW.c	/^static int jrnlRead($/;"	f	file:
jrnlSync	sqlite3_MFAW.c	/^static int jrnlSync(sqlite3_file *pJfd, int flags){$/;"	f	file:
jrnlTruncate	sqlite3_MFAW.c	/^static int jrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:
jrnlWrite	sqlite3_MFAW.c	/^static int jrnlWrite($/;"	f	file:
juliandayFunc	sqlite3_MFAW.c	/^static void juliandayFunc($/;"	f	file:
k	sqlite3_MFAW.c	/^  int k;                     \/* Resume scanning at this->pWC->a[this->k] *\/$/;"	m	struct:WhereScan	file:
key	sqlite3_MFAW.c	/^  Blob key;                       \/* Last key written to the current block *\/$/;"	m	struct:NodeWriter	file:
key	sqlite3_MFAW.c	/^struct AttachKey { int type;  Token key; };$/;"	m	struct:AttachKey	file:
keyClass	sqlite3_MFAW.c	/^  char keyClass;          \/* HASH_INT, _POINTER, _STRING, _BINARY *\/$/;"	m	struct:Fts3Hash	file:
keyConf	sqlite3_MFAW.c	/^  u8 keyConf;          \/* What to do in case of uniqueness conflict on iPKey *\/$/;"	m	struct:Table	file:
keyInfoFromExprList	sqlite3_MFAW.c	/^static KeyInfo *keyInfoFromExprList($/;"	f	file:
keywordCode	sqlite3_MFAW.c	/^static int keywordCode(const char *z, int n){$/;"	f	file:
kilo64	mobibench.c	/^long long kilo64; \/\/file size$/;"	v
kilo64	mobibench_MFAW.c	/^long long kilo64; \/\/file size$/;"	v
labelBkOut	sqlite3_MFAW.c	/^  int labelBkOut;       \/* Start label for the block-output subroutine *\/$/;"	m	struct:SortCtx	file:
langidFromSelect	sqlite3_MFAW.c	/^static int langidFromSelect(Fts3Table *p, sqlite3_stmt *pSelect){$/;"	f	file:
lastErrno	sqlite3_MFAW.c	/^  DWORD lastErrno;           \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winShmNode	file:
lastErrno	sqlite3_MFAW.c	/^  DWORD lastErrno;        \/* The Windows errno from the last I\/O error *\/$/;"	m	struct:winFile	file:
lastErrno	sqlite3_MFAW.c	/^  int lastErrno;                      \/* The unix errno from last I\/O error *\/$/;"	m	struct:unixFile	file:
lastRowid	sqlite3_MFAW.c	/^  i64 lastRowid;                \/* ROWID of most recent insert (see above) *\/$/;"	m	struct:sqlite3	file:
lastRowid	sqlite3_MFAW.c	/^  i64 lastRowid;          \/* Last insert rowid (sqlite3.lastRowid) *\/$/;"	m	struct:VdbeFrame	file:
last_insert_rowid	sqlite3_MFAW.c	/^  sqlite_int64  (*last_insert_rowid)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
last_insert_rowid	sqlite3_MFAW.c	/^static void last_insert_rowid($/;"	f	file:
leaf	sqlite3_MFAW.c	/^  u8 leaf;             \/* True if a leaf page *\/$/;"	m	struct:MemPage	file:
leaveMutex	sqlite3_MFAW.c	/^static void leaveMutex(void){$/;"	f	file:
leftColumn	sqlite3_MFAW.c	/^    int leftColumn;         \/* Column number of X in "X <op> <expr>" *\/$/;"	m	union:WhereTerm::__anon21	file:
leftCursor	sqlite3_MFAW.c	/^  int leftCursor;         \/* Cursor number of X in "X <op> <expr>" *\/$/;"	m	struct:WhereTerm	file:
length	sqlite3_MFAW.c	/^  unsigned long long length;        \/* nbr of bytes to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
lengthFunc	sqlite3_MFAW.c	/^static void lengthFunc($/;"	f	file:
lhs	sqlite3_MFAW.c	/^  YYCODETYPE lhs;         \/* Symbol on the left-hand side of the rule *\/$/;"	m	struct:__anon24	file:
libversion	sqlite3_MFAW.c	/^  const char * (*libversion)(void);$/;"	m	struct:sqlite3_api_routines	file:
libversion_number	sqlite3_MFAW.c	/^  int  (*libversion_number)(void);$/;"	m	struct:sqlite3_api_routines	file:
likeFunc	sqlite3_MFAW.c	/^static void likeFunc($/;"	f	file:
likeInfoAlt	sqlite3_MFAW.c	/^static const struct compareInfo likeInfoAlt = { '%', '_',   0, 0 };$/;"	v	typeref:struct:compareInfo	file:
likeInfoNorm	sqlite3_MFAW.c	/^static const struct compareInfo likeInfoNorm = { '%', '_',   0, 1 };$/;"	v	typeref:struct:compareInfo	file:
likely	sqlite3_MFAW.c	8553;"	d	file:
limit	sqlite3_MFAW.c	/^  int (*limit)(sqlite3*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
line_count	mobibench.c	/^	int line_count;$/;"	m	struct:script_thread_info	file:
line_count	mobibench_MFAW.c	/^	int line_count;$/;"	m	struct:script_thread_info	file:
list	sqlite3_MFAW.c	/^    } list;$/;"	m	union:Mem3Block::__anon10	typeref:struct:Mem3Block::__anon10::__anon12	file:
list	sqlite3_MFAW.c	/^  SorterList list;                \/* List for thread to write to a PMA *\/$/;"	m	struct:SortSubtask	file:
list	sqlite3_MFAW.c	/^  SorterList list;                \/* List of in-memory records *\/$/;"	m	struct:VdbeSorter	file:
loadAnalysis	sqlite3_MFAW.c	/^static void loadAnalysis(Parse *pParse, int iDb){$/;"	f	file:
loadExt	sqlite3_MFAW.c	/^static void loadExt(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
loadStat4	sqlite3_MFAW.c	/^static int loadStat4(sqlite3 *db, const char *zDb){$/;"	f	file:
loadStatTbl	sqlite3_MFAW.c	/^static int loadStatTbl($/;"	f	file:
load_extension	sqlite3_MFAW.c	/^  int (*load_extension)(sqlite3*,const char*,const char*,char**);$/;"	m	struct:sqlite3_api_routines	file:
local	sqlite3_MFAW.c	/^  winceLock local;        \/* Locks obtained by this instance of winFile *\/$/;"	m	struct:winFile	file:
local_ioerr	sqlite3_MFAW.c	/^static void local_ioerr(){$/;"	f	file:
localtime	sqlite3_MFAW.c	/^struct tm *__cdecl localtime(const time_t *t)$/;"	f
localtimeOffset	sqlite3_MFAW.c	/^static sqlite3_int64 localtimeOffset($/;"	f	file:
lock	sqlite3_MFAW.c	/^  BtLock lock;       \/* Object used to lock page 1 *\/$/;"	m	struct:Btree	file:
lockBtree	sqlite3_MFAW.c	/^static int lockBtree(BtShared *pBt){$/;"	f	file:
lockBtreeMutex	sqlite3_MFAW.c	/^static void lockBtreeMutex(Btree *p){$/;"	f	file:
lockError	sqlite3_MFAW.c	/^  u8 lockError;              \/* True if a locking error has occurred *\/$/;"	m	struct:Wal	file:
lockMask	sqlite3_MFAW.c	/^  yDbMask lockMask;       \/* Subset of btreeMask that requires a lock *\/$/;"	m	struct:Vdbe	file:
lockProxy	sqlite3_MFAW.c	/^  unixFile *lockProxy;         \/* Open proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockProxyPath	sqlite3_MFAW.c	/^  char *lockProxyPath;         \/* Name of the proxy lock file *\/$/;"	m	struct:proxyLockingContext	file:
lockTrace	sqlite3_MFAW.c	/^static int lockTrace(int fd, int op, struct flock *p){$/;"	f	file:
locked	sqlite3_MFAW.c	/^  u8 locked;         \/* True if db currently has pBt locked *\/$/;"	m	struct:Btree	file:
lockingContext	sqlite3_MFAW.c	/^  void *lockingContext;               \/* Locking style specific state *\/$/;"	m	struct:unixFile	file:
locktype	sqlite3_MFAW.c	/^  u8 locktype;            \/* Type of lock currently held on this file *\/$/;"	m	struct:winFile	file:
log	sqlite3_MFAW.c	/^  void (*log)(int,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
logBadConnection	sqlite3_MFAW.c	/^static void logBadConnection(const char *zType){$/;"	f	file:
lookaside	sqlite3_MFAW.c	/^  Lookaside lookaside;          \/* Lookaside malloc configuration *\/$/;"	m	struct:sqlite3	file:
lookupName	sqlite3_MFAW.c	/^static int lookupName($/;"	f	file:
lowerFunc	sqlite3_MFAW.c	/^static void lowerFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
lru	sqlite3_MFAW.c	/^    int lru;              \/* Least recently used entry has the smallest value *\/$/;"	m	struct:Parse::yColCache	file:
lseek	sqlite3_MFAW.c	25784;"	d	file:
m	sqlite3_MFAW.c	/^  int h, m;          \/* Hour and minutes *\/$/;"	m	struct:DateTime	file:
m	sqlite3_MFAW.c	/^  sqlite3_mem_methods m;            \/* Low-level memory allocation interface *\/$/;"	m	struct:Sqlite3Config	file:
mPragFlag	sqlite3_MFAW.c	/^  u8 mPragFlag;             \/* Zero or more PragFlag_XXX values *\/$/;"	m	struct:sPragmaNames	file:
m_eq_1	sqlite3_MFAW.c	/^static int m_eq_1(const char *z){$/;"	f	file:
m_gt_0	sqlite3_MFAW.c	/^static int m_gt_0(const char *z){$/;"	f	file:
m_gt_1	sqlite3_MFAW.c	/^static int m_gt_1(const char *z){$/;"	f	file:
maddr	mobibench.c	/^char* maddr;$/;"	v
maddr	mobibench_MFAW.c	/^char* maddr;$/;"	v
magic	sqlite3_MFAW.c	/^  u32 magic;                    \/* Magic number for detect library misuse *\/$/;"	m	struct:sqlite3	file:
magic	sqlite3_MFAW.c	/^  u32 magic;                  \/* Always RTREE_GEOMETRY_MAGIC *\/$/;"	m	struct:RtreeMatchArg	file:
magic	sqlite3_MFAW.c	/^  u32 magic;              \/* Magic number for sanity checking *\/$/;"	m	struct:Vdbe	file:
magic1	sqlite3_MFAW.c	/^  u32 magic1;   \/* Magic number to detect structure corruption. *\/$/;"	m	struct:winMemData	file:
magic2	sqlite3_MFAW.c	/^  u32 magic2;   \/* Magic number to detect structure corruption. *\/$/;"	m	struct:winMemData	file:
main	mobibench.c	/^int main( int argc, char **argv)$/;"	f
main	mobibench_MFAW.c	/^int main( int argc, char **argv)$/;"	f
major	sqlite3_MFAW.c	/^  YYCODETYPE major;      \/* The major token value.  This is the code$/;"	m	struct:yyStackEntry	file:
malloc	sqlite3_MFAW.c	/^  void *(*malloc)(int);$/;"	m	struct:sqlite3_api_routines	file:
malloc64	sqlite3_MFAW.c	/^  void *(*malloc64)(sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	file:
mallocFailed	sqlite3_MFAW.c	/^  int mallocFailed; \/* A memory allocation error has occurred *\/$/;"	m	struct:IntegrityCk	file:
mallocFailed	sqlite3_MFAW.c	/^  u8 mallocFailed;              \/* True if we have seen a malloc failure *\/$/;"	m	struct:sqlite3	file:
mallocWithAlarm	sqlite3_MFAW.c	/^static int mallocWithAlarm(int n, void **pp){$/;"	f	file:
markTermAsChild	sqlite3_MFAW.c	/^static void markTermAsChild(WhereClause *pWC, int iChild, int iParent){$/;"	f	file:
mask	sqlite3_MFAW.c	/^  struct {int value; int mask;} yy429;$/;"	m	struct:__anon22::__anon23	file:
maskLoop	sqlite3_MFAW.c	/^  Bitmask maskLoop;     \/* Bitmask of all WhereLoop objects in this path *\/$/;"	m	struct:WherePath	file:
maskPage	sqlite3_MFAW.c	/^  u16 maskPage;        \/* Mask for page offset *\/$/;"	m	struct:MemPage	file:
maskSelf	sqlite3_MFAW.c	/^  Bitmask maskSelf;     \/* Bitmask identifying table iTab *\/$/;"	m	struct:WhereLoop	file:
matchAll	sqlite3_MFAW.c	/^  u8 matchAll;$/;"	m	struct:compareInfo	file:
matchOne	sqlite3_MFAW.c	/^  u8 matchOne;$/;"	m	struct:compareInfo	file:
matchQuality	sqlite3_MFAW.c	/^static int matchQuality($/;"	f	file:
matchSet	sqlite3_MFAW.c	/^  u8 matchSet;$/;"	m	struct:compareInfo	file:
max1bytePayload	sqlite3_MFAW.c	/^  u8 max1bytePayload;   \/* Maximum first byte of cell for a 1-byte payload *\/$/;"	m	struct:BtShared	file:
max1bytePayload	sqlite3_MFAW.c	/^  u8 max1bytePayload;  \/* min(maxLocal,127) *\/$/;"	m	struct:MemPage	file:
maxCount	sqlite3_MFAW.c	/^  u32 maxCount;       \/* Maximum instantaneous currentCount *\/$/;"	m	struct:Mem5Global	file:
maxLeaf	sqlite3_MFAW.c	/^  u16 maxLeaf;          \/* Maximum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:
maxLocal	sqlite3_MFAW.c	/^  u16 maxLocal;         \/* Maximum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:
maxLocal	sqlite3_MFAW.c	/^  u16 maxLocal;        \/* Copy of BtShared.maxLocal or BtShared.maxLeaf *\/$/;"	m	struct:MemPage	file:
maxOut	sqlite3_MFAW.c	/^  u32 maxOut;         \/* Maximum instantaneous currentOut *\/$/;"	m	struct:Mem5Global	file:
maxRequest	sqlite3_MFAW.c	/^  u32 maxRequest;     \/* Largest allocation (exclusive of internal frag) *\/$/;"	m	struct:Mem5Global	file:
mayAbort	sqlite3_MFAW.c	/^  u8 mayAbort;         \/* True if statement may throw an ABORT exception *\/$/;"	m	struct:Parse	file:
measureAllocationSize	sqlite3_MFAW.c	/^static SQLITE_NOINLINE void measureAllocationSize(sqlite3 *db, void *p){$/;"	f	file:
mem	sqlite3_MFAW.c	/^} mem;$/;"	v	typeref:struct:__anon9	file:
mem0	sqlite3_MFAW.c	/^} mem0 = { 0, 0, 0, 0, 0, 0, 0, 0 };$/;"	v	typeref:struct:Mem0Global	file:
mem0	sqlite3_MFAW.c	20595;"	d	file:
mem3	sqlite3_MFAW.c	/^} mem3 = { 97535575 };$/;"	v	typeref:struct:Mem3Global	file:
mem3	sqlite3_MFAW.c	17984;"	d	file:
mem5	sqlite3_MFAW.c	/^} mem5;$/;"	v	typeref:struct:Mem5Global	file:
mem5	sqlite3_MFAW.c	18667;"	d	file:
memAboutToChange	sqlite3_MFAW.c	70854;"	d	file:
memAboutToChange	sqlite3_MFAW.c	70856;"	d	file:
memDb	sqlite3_MFAW.c	/^  u8 memDb;                   \/* True to inhibit all file I\/O *\/$/;"	m	struct:Pager	file:
memIsValid	sqlite3_MFAW.c	14747;"	d	file:
memTracePrint	sqlite3_MFAW.c	/^static void memTracePrint(Mem *p){$/;"	f	file:
memjrnlClose	sqlite3_MFAW.c	/^static int memjrnlClose(sqlite3_file *pJfd){$/;"	f	file:
memjrnlFileSize	sqlite3_MFAW.c	/^static int memjrnlFileSize(sqlite3_file *pJfd, sqlite_int64 *pSize){$/;"	f	file:
memjrnlRead	sqlite3_MFAW.c	/^static int memjrnlRead($/;"	f	file:
memjrnlSync	sqlite3_MFAW.c	/^static int memjrnlSync(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
memjrnlTruncate	sqlite3_MFAW.c	/^static int memjrnlTruncate(sqlite3_file *pJfd, sqlite_int64 size){$/;"	f	file:
memjrnlWrite	sqlite3_MFAW.c	/^static int memjrnlWrite($/;"	f	file:
memory_highwater	sqlite3_MFAW.c	/^  sqlite3_int64 (*memory_highwater)(int);$/;"	m	struct:sqlite3_api_routines	file:
memory_used	sqlite3_MFAW.c	/^  sqlite3_int64 (*memory_used)(void);$/;"	m	struct:sqlite3_api_routines	file:
memsys3Checkout	sqlite3_MFAW.c	/^static void *memsys3Checkout(u32 i, u32 nBlock){$/;"	f	file:
memsys3Enter	sqlite3_MFAW.c	/^static void memsys3Enter(void){$/;"	f	file:
memsys3Free	sqlite3_MFAW.c	/^static void memsys3Free(void *pPrior){$/;"	f	file:
memsys3FreeUnsafe	sqlite3_MFAW.c	/^static void memsys3FreeUnsafe(void *pOld){$/;"	f	file:
memsys3FromMaster	sqlite3_MFAW.c	/^static void *memsys3FromMaster(u32 nBlock){$/;"	f	file:
memsys3Init	sqlite3_MFAW.c	/^static int memsys3Init(void *NotUsed){$/;"	f	file:
memsys3Leave	sqlite3_MFAW.c	/^static void memsys3Leave(void){$/;"	f	file:
memsys3Link	sqlite3_MFAW.c	/^static void memsys3Link(u32 i){$/;"	f	file:
memsys3LinkIntoList	sqlite3_MFAW.c	/^static void memsys3LinkIntoList(u32 i, u32 *pRoot){$/;"	f	file:
memsys3Malloc	sqlite3_MFAW.c	/^static void *memsys3Malloc(int nBytes){$/;"	f	file:
memsys3MallocUnsafe	sqlite3_MFAW.c	/^static void *memsys3MallocUnsafe(int nByte){$/;"	f	file:
memsys3Merge	sqlite3_MFAW.c	/^static void memsys3Merge(u32 *pRoot){$/;"	f	file:
memsys3OutOfMemory	sqlite3_MFAW.c	/^static void memsys3OutOfMemory(int nByte){$/;"	f	file:
memsys3Realloc	sqlite3_MFAW.c	/^static void *memsys3Realloc(void *pPrior, int nBytes){$/;"	f	file:
memsys3Roundup	sqlite3_MFAW.c	/^static int memsys3Roundup(int n){$/;"	f	file:
memsys3Shutdown	sqlite3_MFAW.c	/^static void memsys3Shutdown(void *NotUsed){$/;"	f	file:
memsys3Size	sqlite3_MFAW.c	/^static int memsys3Size(void *p){$/;"	f	file:
memsys3Unlink	sqlite3_MFAW.c	/^static void memsys3Unlink(u32 i){$/;"	f	file:
memsys3UnlinkFromList	sqlite3_MFAW.c	/^static void memsys3UnlinkFromList(u32 i, u32 *pRoot){$/;"	f	file:
memsys5Enter	sqlite3_MFAW.c	/^static void memsys5Enter(void){$/;"	f	file:
memsys5Free	sqlite3_MFAW.c	/^static void memsys5Free(void *pPrior){$/;"	f	file:
memsys5FreeUnsafe	sqlite3_MFAW.c	/^static void memsys5FreeUnsafe(void *pOld){$/;"	f	file:
memsys5Init	sqlite3_MFAW.c	/^static int memsys5Init(void *NotUsed){$/;"	f	file:
memsys5Leave	sqlite3_MFAW.c	/^static void memsys5Leave(void){$/;"	f	file:
memsys5Link	sqlite3_MFAW.c	/^static void memsys5Link(int i, int iLogsize){$/;"	f	file:
memsys5Log	sqlite3_MFAW.c	/^static int memsys5Log(int iValue){$/;"	f	file:
memsys5Malloc	sqlite3_MFAW.c	/^static void *memsys5Malloc(int nBytes){$/;"	f	file:
memsys5MallocUnsafe	sqlite3_MFAW.c	/^static void *memsys5MallocUnsafe(int nByte){$/;"	f	file:
memsys5Realloc	sqlite3_MFAW.c	/^static void *memsys5Realloc(void *pPrior, int nBytes){$/;"	f	file:
memsys5Roundup	sqlite3_MFAW.c	/^static int memsys5Roundup(int n){$/;"	f	file:
memsys5Shutdown	sqlite3_MFAW.c	/^static void memsys5Shutdown(void *NotUsed){$/;"	f	file:
memsys5Size	sqlite3_MFAW.c	/^static int memsys5Size(void *p){$/;"	f	file:
memsys5Unlink	sqlite3_MFAW.c	/^static void memsys5Unlink(int i, int iLogsize){$/;"	f	file:
minLeaf	sqlite3_MFAW.c	/^  u16 minLeaf;          \/* Minimum local payload in a LEAFDATA table *\/$/;"	m	struct:BtShared	file:
minLocal	sqlite3_MFAW.c	/^  u16 minLocal;         \/* Minimum local payload in non-LEAFDATA tables *\/$/;"	m	struct:BtShared	file:
minLocal	sqlite3_MFAW.c	/^  u16 minLocal;        \/* Copy of BtShared.minLocal or BtShared.minLeaf *\/$/;"	m	struct:MemPage	file:
minMaxFinalize	sqlite3_MFAW.c	/^static void minMaxFinalize(sqlite3_context *context){$/;"	f	file:
minMaxQuery	sqlite3_MFAW.c	/^static u8 minMaxQuery(AggInfo *pAggInfo, ExprList **ppMinMax){$/;"	f	file:
minWriteFileFormat	sqlite3_MFAW.c	/^  u8 minWriteFileFormat;  \/* Minimum file format for writable database files *\/$/;"	m	struct:Vdbe	file:
minmaxFunc	sqlite3_MFAW.c	/^static void minmaxFunc($/;"	f	file:
minmaxStep	sqlite3_MFAW.c	/^static void minmaxStep($/;"	f	file:
minor	sqlite3_MFAW.c	/^  YYMINORTYPE minor;     \/* The user-supplied minor token value.  This$/;"	m	struct:yyStackEntry	file:
mmapSize	sqlite3_MFAW.c	/^  sqlite3_int64 mmapSize;             \/* Usable size of mapping at pMapRegion *\/$/;"	m	struct:unixFile	file:
mmapSize	sqlite3_MFAW.c	/^  sqlite3_int64 mmapSize;       \/* Usable size of mapped region *\/$/;"	m	struct:winFile	file:
mmapSizeActual	sqlite3_MFAW.c	/^  sqlite3_int64 mmapSizeActual;       \/* Actual size of mapping at pMapRegion *\/$/;"	m	struct:unixFile	file:
mmapSizeActual	sqlite3_MFAW.c	/^  sqlite3_int64 mmapSizeActual; \/* Actual size of mapped region *\/$/;"	m	struct:winFile	file:
mmapSizeMax	sqlite3_MFAW.c	/^  sqlite3_int64 mmapSizeMax;          \/* Configured FCNTL_MMAP_SIZE value *\/$/;"	m	struct:unixFile	file:
mmapSizeMax	sqlite3_MFAW.c	/^  sqlite3_int64 mmapSizeMax;    \/* Configured FCNTL_MMAP_SIZE value *\/$/;"	m	struct:winFile	file:
mmap_end	mobibench.c	/^mmap_end( char *buffer, long long size)$/;"	f
mmap_end	mobibench_MFAW.c	/^mmap_end( char *buffer, long long size)$/;"	f
mnMaster	sqlite3_MFAW.c	/^  u32 mnMaster;$/;"	m	struct:Mem3Global	file:
mnPmaSize	sqlite3_MFAW.c	/^  int mnPmaSize;                  \/* Minimum PMA size, in bytes *\/$/;"	m	struct:VdbeSorter	file:
mnReg	sqlite3_MFAW.c	/^  int mnReg, mxReg;       \/* Range of registers allocated for aCol and aFunc *\/$/;"	m	struct:AggInfo	file:
mnReq	sqlite3_MFAW.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:
modifyPagePointer	sqlite3_MFAW.c	/^static int modifyPagePointer(MemPage *pPage, Pgno iFrom, Pgno iTo, u8 eType){$/;"	f	file:
moveToChild	sqlite3_MFAW.c	/^static int moveToChild(BtCursor *pCur, u32 newPgno){$/;"	f	file:
moveToLeftmost	sqlite3_MFAW.c	/^static int moveToLeftmost(BtCursor *pCur){$/;"	f	file:
moveToParent	sqlite3_MFAW.c	/^static void moveToParent(BtCursor *pCur){$/;"	f	file:
moveToRightmost	sqlite3_MFAW.c	/^static int moveToRightmost(BtCursor *pCur){$/;"	f	file:
moveToRoot	sqlite3_MFAW.c	/^static int moveToRoot(BtCursor *pCur){$/;"	f	file:
movetoTarget	sqlite3_MFAW.c	/^  i64 movetoTarget;     \/* Argument to the deferred sqlite3BtreeMoveto() *\/$/;"	m	struct:VdbeCursor	file:
mprintf	sqlite3_MFAW.c	/^  char * (*mprintf)(const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
msize	sqlite3_MFAW.c	/^  sqlite3_uint64 (*msize)(void*);$/;"	m	struct:sqlite3_api_routines	file:
mt	mobibench.c	/^static unsigned long long mt[NN]; $/;"	v	file:
mt	mobibench_MFAW.c	/^static unsigned long long mt[NN]; $/;"	v	file:
mti	mobibench.c	/^static int mti=NN+1; $/;"	v	file:
mti	mobibench_MFAW.c	/^static int mti=NN+1; $/;"	v	file:
multiSelect	sqlite3_MFAW.c	/^static int multiSelect($/;"	f	file:
multiSelectCollSeq	sqlite3_MFAW.c	/^static CollSeq *multiSelectCollSeq(Parse *pParse, Select *p, int iCol){$/;"	f	file:
multiSelectOrderBy	sqlite3_MFAW.c	/^static int multiSelectOrderBy($/;"	f	file:
multiSelectOrderByKeyInfo	sqlite3_MFAW.c	/^static KeyInfo *multiSelectOrderByKeyInfo(Parse *pParse, Select *p, int nExtra){$/;"	f	file:
multiSelectValues	sqlite3_MFAW.c	/^static int multiSelectValues($/;"	f	file:
mutex	sqlite3_MFAW.c	/^  CRITICAL_SECTION mutex;    \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	sqlite3_MFAW.c	/^  pthread_mutex_t mutex;     \/* Mutex controlling the lock *\/$/;"	m	struct:sqlite3_mutex	file:
mutex	sqlite3_MFAW.c	/^  sqlite3_mutex *mutex;          \/* MUTEX_STATIC_LRU or NULL *\/$/;"	m	struct:PGroup	file:
mutex	sqlite3_MFAW.c	/^  sqlite3_mutex *mutex;          \/* Mutex for accessing the following: *\/$/;"	m	struct:PCacheGlobal	file:
mutex	sqlite3_MFAW.c	/^  sqlite3_mutex *mutex;         \/* Connection mutex *\/$/;"	m	struct:sqlite3	file:
mutex	sqlite3_MFAW.c	/^  sqlite3_mutex *mutex;         \/* Mutex to serialize access *\/$/;"	m	struct:Mem0Global	file:
mutex	sqlite3_MFAW.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:unixShmNode	file:
mutex	sqlite3_MFAW.c	/^  sqlite3_mutex *mutex;      \/* Mutex to access this object *\/$/;"	m	struct:winShmNode	file:
mutex	sqlite3_MFAW.c	/^  sqlite3_mutex *mutex; \/* Non-recursive mutex required to access this object *\/$/;"	m	struct:BtShared	file:
mutex	sqlite3_MFAW.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem3Global	file:
mutex	sqlite3_MFAW.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:Mem5Global	file:
mutex	sqlite3_MFAW.c	/^  sqlite3_mutex *mutex;$/;"	m	struct:__anon9	file:
mutex	sqlite3_MFAW.c	/^  sqlite3_mutex_methods mutex;      \/* Low-level mutex interface *\/$/;"	m	struct:Sqlite3Config	file:
mutexIsInit	sqlite3_MFAW.c	/^static SQLITE_WSD int mutexIsInit = 0;$/;"	v	file:
mutex_alloc	sqlite3_MFAW.c	/^  sqlite3_mutex *(*mutex_alloc)(int);$/;"	m	struct:sqlite3_api_routines	file:
mutex_enter	sqlite3_MFAW.c	/^  void (*mutex_enter)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_free	sqlite3_MFAW.c	/^  void (*mutex_free)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_leave	sqlite3_MFAW.c	/^  void (*mutex_leave)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mutex_try	sqlite3_MFAW.c	/^  int (*mutex_try)(sqlite3_mutex*);$/;"	m	struct:sqlite3_api_routines	file:
mxAlloc	sqlite3_MFAW.c	/^  int  mxAlloc;        \/* Maximum allowed allocation.  0 for no malloc usage *\/$/;"	m	struct:StrAccum	file:
mxCurrent	sqlite3_MFAW.c	/^  int mxCurrent[NCSIZE];   \/* Highwater mark for nCurrent *\/$/;"	m	struct:__anon9	file:
mxErr	sqlite3_MFAW.c	/^  int mxErr;        \/* Stop accumulating errors when this reaches zero *\/$/;"	m	struct:IntegrityCk	file:
mxFrame	sqlite3_MFAW.c	/^  u32 mxFrame;                    \/* Index of last valid frame in the WAL *\/$/;"	m	struct:WalIndexHdr	file:
mxKeysize	sqlite3_MFAW.c	/^  int mxKeysize;                  \/* Largest serialized key seen so far *\/$/;"	m	struct:VdbeSorter	file:
mxLevel	sqlite3_MFAW.c	/^  int mxLevel;                      \/* The largest iLevel value in the tree *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
mxLevel	sqlite3_MFAW.c	/^  int mxLevel;                      \/* iLevel value for root of the tree *\/$/;"	m	struct:RtreeCursor	file:
mxMmap	sqlite3_MFAW.c	/^  sqlite3_int64 mxMmap;             \/* Maximum value for szMmap *\/$/;"	m	struct:Sqlite3Config	file:
mxOut	sqlite3_MFAW.c	/^  int mxOut;              \/* Highwater mark for nOut *\/$/;"	m	struct:Lookaside	file:
mxParserStack	sqlite3_MFAW.c	/^  int mxParserStack;                \/* maximum depth of the parser stack *\/$/;"	m	struct:Sqlite3Config	file:
mxPathname	sqlite3_MFAW.c	/^  int mxPathname;          \/* Maximum file pathname length *\/$/;"	m	struct:sqlite3_vfs	file:
mxPgno	sqlite3_MFAW.c	/^  Pgno mxPgno;                \/* Maximum allowed size of the database *\/$/;"	m	struct:Pager	file:
mxPinned	sqlite3_MFAW.c	/^  unsigned int mxPinned;         \/* nMaxpage + 10 - nMinPage *\/$/;"	m	struct:PGroup	file:
mxPmaSize	sqlite3_MFAW.c	/^  int mxPmaSize;                  \/* Maximum PMA size, in bytes.  0==no limit *\/$/;"	m	struct:VdbeSorter	file:
mxReg	sqlite3_MFAW.c	/^  int mnReg, mxReg;       \/* Range of registers allocated for aCol and aFunc *\/$/;"	m	struct:AggInfo	file:
mxReq	sqlite3_MFAW.c	/^  int mnReq, mxReq;                 \/* Min and max heap requests sizes *\/$/;"	m	struct:Sqlite3Config	file:
mxSample	sqlite3_MFAW.c	/^  int mxSample;             \/* Maximum number of samples to accumulate *\/$/;"	m	struct:Stat4Accum	file:
mxSavepoint	sqlite3_MFAW.c	/^  int mxSavepoint;       \/* Largest valid xSavepoint integer *\/$/;"	m	struct:Fts3Table	file:
mxStrlen	sqlite3_MFAW.c	/^  int mxStrlen;                     \/* Maximum string length *\/$/;"	m	struct:Sqlite3Config	file:
mxSz	sqlite3_MFAW.c	/^  int mxSz;                       \/* Maximum bytes of data to store *\/$/;"	m	struct:IncrMerger	file:
mxValue	sqlite3_MFAW.c	/^  sqlite3_int64 mxValue[10];          \/* Maximum value *\/$/;"	m	struct:sqlite3StatType	file:
mxWalSize	sqlite3_MFAW.c	/^  i64 mxWalSize;             \/* Truncate WAL to this size upon reset *\/$/;"	m	struct:Wal	file:
n	sqlite3_MFAW.c	/^    int n;                                     \/* A counter *\/$/;"	m	union:Walker::__anon8	file:
n	sqlite3_MFAW.c	/^  i64 n;$/;"	m	struct:CountCtx	file:
n	sqlite3_MFAW.c	/^  int n;                          \/* Length of z in bytes (excl. nul-term) *\/$/;"	m	struct:StrBuffer	file:
n	sqlite3_MFAW.c	/^  int n;                          \/* Number of bytes in buffer z *\/$/;"	m	struct:Fts3PhraseToken	file:
n	sqlite3_MFAW.c	/^  int n;                          \/* Number of valid bytes of data in a[] *\/$/;"	m	struct:Blob	file:
n	sqlite3_MFAW.c	/^  int n;                        \/* Number of assigned cursor values *\/$/;"	m	struct:WhereMaskSet	file:
n	sqlite3_MFAW.c	/^  int n;              \/* Number of characters in string value, excluding '\\0' *\/$/;"	m	struct:Mem	file:
n	sqlite3_MFAW.c	/^  int n;            \/* Size of record in bytes *\/$/;"	m	struct:IndexSample	file:
n	sqlite3_MFAW.c	/^  u16 n;                      \/* Number of valid a[] entries *\/$/;"	m	struct:WhereOrSet	file:
n	sqlite3_MFAW.c	/^  unsigned int n;    \/* Number of characters in this token *\/$/;"	m	struct:Token	file:
n90pct	sqlite3_MFAW.c	/^  unsigned int n90pct;                \/* nMax*9\/10 *\/$/;"	m	struct:PCache1	file:
nAccumulator	sqlite3_MFAW.c	/^  int nAccumulator;       \/* Number of columns that show through to the output.$/;"	m	struct:AggInfo	file:
nAdvance	sqlite3_MFAW.c	/^  int nAdvance;                   \/* How many seg-readers to advance *\/$/;"	m	struct:Fts3MultiSegReader	file:
nAlias	sqlite3_MFAW.c	/^  int nAlias;               \/* Number of aliased result set columns *\/$/;"	m	struct:Parse	file:
nAll	sqlite3_MFAW.c	/^  int nAll;                      \/* Size of a[] in bytes *\/$/;"	m	struct:Fts3Doclist	file:
nAlloc	sqlite3_MFAW.c	/^  int  nAlloc;         \/* Amount of space allocated in zText *\/$/;"	m	struct:StrAccum	file:
nAlloc	sqlite3_MFAW.c	/^  int nAlloc;                     \/* Allocated size of a[] (nAlloc>=n) *\/$/;"	m	struct:Blob	file:
nAlloc	sqlite3_MFAW.c	/^  int nAlloc;                     \/* Allocated size of buffer z in bytes *\/$/;"	m	struct:StrBuffer	file:
nAlloc	sqlite3_MFAW.c	/^  int nAlloc;                     \/* space allocated at zToken *\/$/;"	m	struct:unicode_cursor	file:
nAlloc	sqlite3_MFAW.c	/^  int nAlloc;                 \/* Bytes of space at aAlloc *\/$/;"	m	struct:PmaReader	file:
nAlloc	sqlite3_MFAW.c	/^  int nAlloc[NCSIZE];      \/* Total number of allocations *\/$/;"	m	struct:__anon9	file:
nAlloc	sqlite3_MFAW.c	/^  u32 nAlloc;        \/* Slots allocated for azResult[] *\/$/;"	m	struct:TabResult	file:
nAlloc	sqlite3_MFAW.c	/^  u32 nAlloc;      \/* Number of entries allocated in a[] below *\/$/;"	m	struct:SrcList	file:
nAlloc	sqlite3_MFAW.c	/^  u64 nAlloc;         \/* Total number of calls to malloc *\/$/;"	m	struct:Mem5Global	file:
nAllocated	sqlite3_MFAW.c	/^  int nAllocated;              \/* space allocated to zToken buffer *\/$/;"	m	struct:porter_tokenizer_cursor	file:
nArg	sqlite3_MFAW.c	/^  i16 nArg;            \/* Number of arguments.  -1 means unlimited *\/$/;"	m	struct:FuncDef	file:
nArg	sqlite3_MFAW.c	/^  int nArg;                \/* Total number of arguments *\/$/;"	m	struct:PrintfArguments	file:
nAuthPW	sqlite3_MFAW.c	/^  int nAuthPW;                  \/* Size of the zAuthPW in bytes *\/$/;"	m	struct:sqlite3_userauth	file:
nAutoincrmerge	sqlite3_MFAW.c	/^  int nAutoincrmerge;             \/* Value configured by 'automerge' *\/$/;"	m	struct:Fts3Table	file:
nBackfill	sqlite3_MFAW.c	/^  u32 nBackfill;                  \/* Number of WAL frames backfilled into DB *\/$/;"	m	struct:WalCkptInfo	file:
nBacktrace	sqlite3_MFAW.c	/^  char nBacktrace;                    \/* Number of backtraces on this alloc *\/$/;"	m	struct:MemBlockHdr	file:
nBacktrace	sqlite3_MFAW.c	/^  int nBacktrace;$/;"	m	struct:__anon9	file:
nBacktraceSlots	sqlite3_MFAW.c	/^  char nBacktraceSlots;               \/* Available backtrace slots *\/$/;"	m	struct:MemBlockHdr	file:
nBackup	sqlite3_MFAW.c	/^  int nBackup;       \/* Number of backup operations reading this btree *\/$/;"	m	struct:Btree	file:
nBlock	sqlite3_MFAW.c	/^  int nBlock;      \/* Number of szAtom sized blocks in zPool *\/$/;"	m	struct:Mem5Global	file:
nBuf	sqlite3_MFAW.c	/^  int nBuf;                       \/* Size of zBuf[] in bytes *\/$/;"	m	struct:JournalFile	file:
nBuffer	sqlite3_MFAW.c	/^  int nBuffer;                    \/* Allocated size of aBuffer[] in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nBuffer	sqlite3_MFAW.c	/^  int nBuffer;                    \/* Size of write buffer in bytes *\/$/;"	m	struct:PmaWriter	file:
nBuffer	sqlite3_MFAW.c	/^  int nBuffer;                \/* Size of read buffer in bytes *\/$/;"	m	struct:PmaReader	file:
nBuffer	sqlite3_MFAW.c	/^  int nBuffer;$/;"	m	struct:IcuCursor	file:
nBusy	sqlite3_MFAW.c	/^  int nBusy;                  \/* Current number of users of this structure *\/$/;"	m	struct:Rtree	file:
nBusy	sqlite3_MFAW.c	/^  int nBusy;                 \/* Incremented with each busy call *\/$/;"	m	struct:BusyHandler	file:
nByte	sqlite3_MFAW.c	/^  int nByte;              \/* Size of open blob, in bytes *\/$/;"	m	struct:Incrblob	file:
nBytes	sqlite3_MFAW.c	/^  int nBytes;                  \/* size of the input *\/$/;"	m	struct:simple_tokenizer_cursor	file:
nBytesPerCell	sqlite3_MFAW.c	/^  u8 nBytesPerCell;           \/* Bytes consumed per cell *\/$/;"	m	struct:Rtree	file:
nCell	sqlite3_MFAW.c	/^  int nCell;                      \/* Number of cells on page *\/$/;"	m	struct:StatPage	file:
nCell	sqlite3_MFAW.c	/^  int nCell;                      \/* Value of 'ncell' column *\/$/;"	m	struct:StatCursor	file:
nCell	sqlite3_MFAW.c	/^  u16 nCell;           \/* Number of cells on this page, local and ovfl *\/$/;"	m	struct:MemPage	file:
nChange	sqlite3_MFAW.c	/^  int nChange;                  \/* Value returned by sqlite3_changes() *\/$/;"	m	struct:sqlite3	file:
nChange	sqlite3_MFAW.c	/^  int nChange;            \/* Number of db changes made since last reset *\/$/;"	m	struct:Vdbe	file:
nChange	sqlite3_MFAW.c	/^  int nChange;            \/* Statement changes (Vdbe.nChange)     *\/$/;"	m	struct:VdbeFrame	file:
nChar	sqlite3_MFAW.c	/^  int  nChar;          \/* Length of the string so far *\/$/;"	m	struct:StrAccum	file:
nChar	sqlite3_MFAW.c	/^  int nChar;                  \/* Number of UChar elements in pInput *\/$/;"	m	struct:IcuCursor	file:
nChild	sqlite3_MFAW.c	/^  u8 nChild;              \/* Number of children that must disable us *\/$/;"	m	struct:WhereTerm	file:
nChildCsr	sqlite3_MFAW.c	/^  int nChildCsr;          \/* Number of cursors for child frame *\/$/;"	m	struct:VdbeFrame	file:
nChildMem	sqlite3_MFAW.c	/^  int nChildMem;          \/* Number of memory cells for child frame *\/$/;"	m	struct:VdbeFrame	file:
nCkpt	sqlite3_MFAW.c	/^  u32 nCkpt;                 \/* Checkpoint sequence counter in the wal-header *\/$/;"	m	struct:Wal	file:
nCol	sqlite3_MFAW.c	/^  i16 nCol;            \/* Number of columns in this table *\/$/;"	m	struct:Table	file:
nCol	sqlite3_MFAW.c	/^  int nCol;                           \/* Number of entries in azCol[] *\/$/;"	m	struct:ParseContext	file:
nCol	sqlite3_MFAW.c	/^  int nCol;                       \/* Number of columns in table *\/$/;"	m	struct:MatchInfo	file:
nCol	sqlite3_MFAW.c	/^  int nCol;                 \/* Number of columns in index + pk\/rowid *\/$/;"	m	struct:Stat4Accum	file:
nCol	sqlite3_MFAW.c	/^  int nCol;         \/* Number of columns in this key *\/$/;"	m	struct:FKey	file:
nColumn	sqlite3_MFAW.c	/^  int nColumn;                    \/* number of named columns in virtual table *\/$/;"	m	struct:Fts3Table	file:
nColumn	sqlite3_MFAW.c	/^  int nColumn;            \/* Number of used entries in aCol[] *\/$/;"	m	struct:AggInfo	file:
nColumn	sqlite3_MFAW.c	/^  u16 nColumn;             \/* Number of columns stored in the index *\/$/;"	m	struct:Index	file:
nColumn	sqlite3_MFAW.c	/^  u32 nColumn;       \/* Number of columns in the result *\/$/;"	m	struct:TabResult	file:
nConstraint	sqlite3_MFAW.c	/^  int nConstraint;                  \/* Number of entries in aConstraint *\/$/;"	m	struct:RtreeCursor	file:
nConstraint	sqlite3_MFAW.c	/^  int nConstraint;           \/* Number of entries in aConstraint *\/$/;"	m	struct:sqlite3_index_info	file:
nCoord	sqlite3_MFAW.c	/^  int nCoord;                       \/* Number of coordinates *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
nCost	sqlite3_MFAW.c	/^  int nCost;                      \/* Cost of running iterator *\/$/;"	m	struct:Fts3MultiSegReader	file:
nCsr	sqlite3_MFAW.c	/^  int nCsr;                     \/* Number of cursors required *\/$/;"	m	struct:SubProgram	file:
nCte	sqlite3_MFAW.c	/^  int nCte;                       \/* Number of CTEs in the WITH clause *\/$/;"	m	struct:With	file:
nCurrent	sqlite3_MFAW.c	/^  int nCurrent[NCSIZE];    \/* Current number of allocations *\/$/;"	m	struct:__anon9	file:
nCurrentPage	sqlite3_MFAW.c	/^  unsigned int nCurrentPage;     \/* Number of purgeable pages allocated *\/$/;"	m	struct:PGroup	file:
nCursor	sqlite3_MFAW.c	/^  int nCursor;            \/* Number of entries in apCsr *\/$/;"	m	struct:VdbeFrame	file:
nCursor	sqlite3_MFAW.c	/^  int nCursor;            \/* Number of slots in apCsr[] *\/$/;"	m	struct:Vdbe	file:
nData	sqlite3_MFAW.c	/^  int nData;                      \/* Bytes of data in aData *\/$/;"	m	struct:SegmentWriter	file:
nData	sqlite3_MFAW.c	/^  int nData;                      \/* Bytes of valid data so far *\/$/;"	m	struct:SegmentNode	file:
nData	sqlite3_MFAW.c	/^  int nData;$/;"	m	struct:PendingList	file:
nData	sqlite3_MFAW.c	/^  u32 nData;         \/* Slots used in azResult[].  (nRow+1)*nColumn *\/$/;"	m	struct:TabResult	file:
nDb	sqlite3_MFAW.c	/^  int nDb;                      \/* Number of backends currently in use *\/$/;"	m	struct:sqlite3	file:
nDbChange	sqlite3_MFAW.c	/^  int nDbChange;          \/* Value of db->nChange *\/$/;"	m	struct:VdbeFrame	file:
nDeferredCons	sqlite3_MFAW.c	/^  i64 nDeferredCons;                  \/* Number of deferred fk violations *\/$/;"	m	struct:Savepoint	file:
nDeferredCons	sqlite3_MFAW.c	/^  i64 nDeferredCons;            \/* Net deferred constraints this transaction. *\/$/;"	m	struct:sqlite3	file:
nDeferredImmCons	sqlite3_MFAW.c	/^  i64 nDeferredImmCons;               \/* Number of deferred imm fk. *\/$/;"	m	struct:Savepoint	file:
nDeferredImmCons	sqlite3_MFAW.c	/^  i64 nDeferredImmCons;         \/* Net deferred immediate constraints *\/$/;"	m	struct:sqlite3	file:
nDim	sqlite3_MFAW.c	/^  u8 nDim;                    \/* Number of dimensions *\/$/;"	m	struct:Rtree	file:
nDoc	sqlite3_MFAW.c	/^    sqlite3_int64 nDoc;           \/* 'documents' values for current csr row *\/$/;"	m	struct:Fts3auxCursor::Fts3auxColstats	file:
nDoc	sqlite3_MFAW.c	/^  sqlite3_int64 nDoc;             \/* Documents in table *\/$/;"	m	struct:Fts3Cursor	file:
nDoc	sqlite3_MFAW.c	/^  sqlite3_int64 nDoc;             \/* Number of docs in database *\/$/;"	m	struct:MatchInfo	file:
nDoclist	sqlite3_MFAW.c	/^  int nDoclist;                   \/* Size of aDoclist[] in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nDoclist	sqlite3_MFAW.c	/^  int nDoclist;                   \/* Size of buffer at aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
nDoclist	sqlite3_MFAW.c	/^  int nDoclist;                   \/* Size of doclist in bytes *\/$/;"	m	struct:NodeReader	file:
nDoclist	sqlite3_MFAW.c	/^  int nDoclist;                   \/* Size of doclist in current entry *\/$/;"	m	struct:Fts3SegReader	file:
nEntry	sqlite3_MFAW.c	/^    int nEntry;                   \/* Nr. of entries in aPgno[] and aIndex[] *\/$/;"	m	struct:WalIterator::WalSegment	file:
nEntry	sqlite3_MFAW.c	/^  int nEntry;                     \/* Number of terms written to node so far *\/$/;"	m	struct:SegmentNode	file:
nEq	sqlite3_MFAW.c	/^      u16 nEq;               \/* Number of equality constraints *\/$/;"	m	struct:WhereLoop::__anon18::__anon19	file:
nEquiv	sqlite3_MFAW.c	/^  unsigned char nEquiv;      \/* Number of entries in aEquiv[] *\/$/;"	m	struct:WhereScan	file:
nErr	sqlite3_MFAW.c	/^  int nErr;            \/* Number of errors encountered while resolving names *\/$/;"	m	struct:NameContext	file:
nErr	sqlite3_MFAW.c	/^  int nErr;            \/* Number of errors seen *\/$/;"	m	struct:Parse	file:
nErr	sqlite3_MFAW.c	/^  int nErr;         \/* Number of messages written to zErrMsg so far *\/$/;"	m	struct:IntegrityCk	file:
nEst	sqlite3_MFAW.c	/^  LogEst nEst;                    \/* Estimated output rows per loop *\/$/;"	m	struct:ScanStatus	file:
nException	sqlite3_MFAW.c	/^  int nException;$/;"	m	struct:unicode_tokenizer	file:
nExpr	sqlite3_MFAW.c	/^  int nExpr;             \/* Number of expressions on the list *\/$/;"	m	struct:ExprList	file:
nExt	sqlite3_MFAW.c	/^  u32 nExt;              \/* Number of entries in aExt[] *\/          $/;"	m	struct:sqlite3AutoExtList	file:
nExtension	sqlite3_MFAW.c	/^  int nExtension;               \/* Number of loaded extensions *\/$/;"	m	struct:sqlite3	file:
nExtra	sqlite3_MFAW.c	/^  u16 nExtra;                 \/* Add this many bytes to each in-memory page *\/$/;"	m	struct:Pager	file:
nFails	sqlite3_MFAW.c	/^  int nFails;                  \/* Number of conch taking failures *\/$/;"	m	struct:proxyLockingContext	file:
nFetchOut	sqlite3_MFAW.c	/^  int nFetchOut;                      \/* Number of outstanding xFetch refs *\/$/;"	m	struct:unixFile	file:
nFetchOut	sqlite3_MFAW.c	/^  int nFetchOut;                \/* Number of outstanding xFetch references *\/$/;"	m	struct:winFile	file:
nField	sqlite3_MFAW.c	/^  i16 nField;           \/* Number of fields in the header *\/$/;"	m	struct:VdbeCursor	file:
nField	sqlite3_MFAW.c	/^  u16 nField;         \/* Number of entries in apMem[] *\/$/;"	m	struct:UnpackedRecord	file:
nField	sqlite3_MFAW.c	/^  u16 nField;         \/* Number of key columns in the index *\/$/;"	m	struct:KeyInfo	file:
nFkConstraint	sqlite3_MFAW.c	/^  i64 nFkConstraint;      \/* Number of imm. FK constraints this VM *\/$/;"	m	struct:Vdbe	file:
nFrame	sqlite3_MFAW.c	/^  int nFrame;             \/* Number of frames in pFrame list *\/$/;"	m	struct:Vdbe	file:
nFree	sqlite3_MFAW.c	/^  u16 nFree;           \/* Number of free bytes on the page *\/$/;"	m	struct:MemPage	file:
nFreeSlot	sqlite3_MFAW.c	/^  int nFreeSlot;                 \/* Number of unused pcache slots *\/$/;"	m	struct:PCacheGlobal	file:
nFresh	sqlite3_MFAW.c	/^  u16 nFresh;                    \/* Number of objects on pFresh *\/$/;"	m	struct:RowSet	file:
nFunc	sqlite3_MFAW.c	/^  int nFunc;              \/* Number of entries in aFunc[] *\/$/;"	m	struct:AggInfo	file:
nHash	sqlite3_MFAW.c	/^  unsigned int nHash;                 \/* Number of slots in apHash[] *\/$/;"	m	struct:PCache1	file:
nHdrParsed	sqlite3_MFAW.c	/^  u16 nHdrParsed;       \/* Number of header fields parsed so far *\/$/;"	m	struct:VdbeCursor	file:
nHeap	sqlite3_MFAW.c	/^  int nHeap;                        \/* Size of pHeap[] *\/$/;"	m	struct:Sqlite3Config	file:
nHeight	sqlite3_MFAW.c	/^  int nHeight;              \/* Expression tree height of current sub-select *\/$/;"	m	struct:Parse	file:
nHeight	sqlite3_MFAW.c	/^  int nHeight;           \/* Height of the tree headed by this node *\/$/;"	m	struct:Expr	file:
nId	sqlite3_MFAW.c	/^  int nId;         \/* Number of identifiers on the list *\/$/;"	m	struct:IdList	file:
nIn	sqlite3_MFAW.c	/^      int nIn;              \/* Number of entries in aInLoop[] *\/$/;"	m	struct:WhereLevel::__anon16::__anon17	file:
nIndent	sqlite3_MFAW.c	/^  int nIndent;       \/* Number of elements in aIndent *\/$/;"	m	struct:Explain	file:
nIndex	sqlite3_MFAW.c	/^  int nIndex;                     \/* Size of aIndex[] *\/$/;"	m	struct:Fts3Table	file:
nInput	sqlite3_MFAW.c	/^  int nInput;                     \/* Size of aInput[] in bytes *\/$/;"	m	struct:unicode_cursor	file:
nInput	sqlite3_MFAW.c	/^  int nInput;                  \/* size of the input *\/$/;"	m	struct:porter_tokenizer_cursor	file:
nKey	sqlite3_MFAW.c	/^  i64 nKey;                 \/* Size of pKey, or last integer key *\/$/;"	m	struct:BtCursor	file:
nKey	sqlite3_MFAW.c	/^  i64 nKey;      \/* The key for INTKEY tables, or nPayload otherwise *\/$/;"	m	struct:CellInfo	file:
nKey	sqlite3_MFAW.c	/^  int nKey;                   \/* Number of bytes in key *\/$/;"	m	struct:PmaReader	file:
nKey	sqlite3_MFAW.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
nKeyCol	sqlite3_MFAW.c	/^  int nKeyCol;              \/* Number of index columns w\/o the pk\/rowid *\/$/;"	m	struct:Stat4Accum	file:
nKeyCol	sqlite3_MFAW.c	/^  u16 nKeyCol;             \/* Number of columns forming the key *\/$/;"	m	struct:Index	file:
nLSlot	sqlite3_MFAW.c	/^  u16 nLSlot;           \/* Number of slots allocated for aLTerm[] *\/$/;"	m	struct:WhereLoop	file:
nLTerm	sqlite3_MFAW.c	/^  u16 nLTerm;           \/* Number of entries in aLTerm[] *\/$/;"	m	struct:WhereLoop	file:
nLabel	sqlite3_MFAW.c	/^  int nLabel;          \/* Number of labels used *\/$/;"	m	struct:Parse	file:
nLastOvfl	sqlite3_MFAW.c	/^  int nLastOvfl;                  \/* Bytes of payload on final overflow page *\/$/;"	m	struct:StatCell	file:
nLeafAdd	sqlite3_MFAW.c	/^  u32 nLeafAdd;                   \/* Number of leaf blocks added this trans *\/$/;"	m	struct:Fts3Table	file:
nLeafData	sqlite3_MFAW.c	/^  i64 nLeafData;                  \/* Number of bytes of leaf data written *\/$/;"	m	struct:SegmentWriter	file:
nLeafData	sqlite3_MFAW.c	/^  sqlite3_int64 nLeafData;        \/* Bytes of leaf page data so far *\/$/;"	m	struct:IncrmergeWriter	file:
nLeafEst	sqlite3_MFAW.c	/^  int nLeafEst;                   \/* Space allocated for leaf blocks *\/$/;"	m	struct:IncrmergeWriter	file:
nLevel	sqlite3_MFAW.c	/^  u8 nLevel;                \/* Number of nested loop *\/$/;"	m	struct:WhereInfo	file:
nList	sqlite3_MFAW.c	/^  int nList;                     \/* Length of position list *\/$/;"	m	struct:Fts3Doclist	file:
nList	sqlite3_MFAW.c	/^  int nList;$/;"	m	struct:TokenDoclist	file:
nLocal	sqlite3_MFAW.c	/^  int nLocal;                     \/* Bytes of local payload *\/$/;"	m	struct:StatCell	file:
nLocal	sqlite3_MFAW.c	/^  u16 nLocal;    \/* Amount of payload held locally, not on overflow *\/$/;"	m	struct:CellInfo	file:
nLock	sqlite3_MFAW.c	/^  int nLock;                      \/* Number of outstanding file locks *\/$/;"	m	struct:unixInodeInfo	file:
nLookaside	sqlite3_MFAW.c	/^  int nLookaside;                   \/* Default lookaside buffer count *\/$/;"	m	struct:Sqlite3Config	file:
nMalloc	sqlite3_MFAW.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentNode	file:
nMalloc	sqlite3_MFAW.c	/^  int nMalloc;                    \/* Size of malloc'd buffer at zMalloc *\/$/;"	m	struct:SegmentWriter	file:
nMatchinfo	sqlite3_MFAW.c	/^  int nMatchinfo;                 \/* Number of elements in aMatchinfo[] *\/$/;"	m	struct:Fts3Cursor	file:
nMax	sqlite3_MFAW.c	/^  unsigned int nMax;                  \/* Configured "cache_size" value *\/$/;"	m	struct:PCache1	file:
nMaxArg	sqlite3_MFAW.c	/^  int nMaxArg;         \/* Max args passed to user function by sub-program *\/$/;"	m	struct:Parse	file:
nMaxPage	sqlite3_MFAW.c	/^  unsigned int nMaxPage;         \/* Sum of nMax for purgeable caches *\/$/;"	m	struct:PGroup	file:
nMaxPendingData	sqlite3_MFAW.c	/^  int nMaxPendingData;            \/* Max pending data before flush to disk *\/$/;"	m	struct:Fts3Table	file:
nMaxSorterMmap	sqlite3_MFAW.c	/^  int nMaxSorterMmap;           \/* Maximum size of regions mapped by sorter *\/$/;"	m	struct:sqlite3	file:
nMem	sqlite3_MFAW.c	/^  int nMem;                     \/* Number of memory cells required *\/$/;"	m	struct:SubProgram	file:
nMem	sqlite3_MFAW.c	/^  int nMem;               \/* Number of entries in aMem *\/$/;"	m	struct:VdbeFrame	file:
nMem	sqlite3_MFAW.c	/^  int nMem;               \/* Number of memory locations currently allocated *\/$/;"	m	struct:Vdbe	file:
nMem	sqlite3_MFAW.c	/^  int nMem;            \/* Number of memory cells used so far *\/$/;"	m	struct:Parse	file:
nMemory	sqlite3_MFAW.c	/^  int nMemory;                    \/* Size of list.aMemory allocation in bytes *\/$/;"	m	struct:VdbeSorter	file:
nMin	sqlite3_MFAW.c	/^  unsigned int nMin;                  \/* Minimum number of pages reserved *\/$/;"	m	struct:PCache1	file:
nMinPage	sqlite3_MFAW.c	/^  unsigned int nMinPage;         \/* Sum of nMin for purgeable caches *\/$/;"	m	struct:PGroup	file:
nMmapOut	sqlite3_MFAW.c	/^  int nMmapOut;               \/* Number of mmap pages currently outstanding *\/$/;"	m	struct:Pager	file:
nModuleArg	sqlite3_MFAW.c	/^  int nModuleArg;      \/* Number of arguments to the module *\/$/;"	m	struct:Table	file:
nMxPayload	sqlite3_MFAW.c	/^  int nMxPayload;                 \/* Largest payload of any cell on this page *\/$/;"	m	struct:StatPage	file:
nMxPayload	sqlite3_MFAW.c	/^  int nMxPayload;                 \/* Value of 'mx_payload' column *\/$/;"	m	struct:StatCursor	file:
nName	sqlite3_MFAW.c	/^  int nName;                    \/* Length of the zCanonicalName[] string *\/$/;"	m	struct:vxworksFileId	file:
nNear	sqlite3_MFAW.c	/^  int nNear;                 \/* Valid if eType==FTSQUERY_NEAR *\/$/;"	m	struct:Fts3Expr	file:
nNest	sqlite3_MFAW.c	/^  int nNest;                          \/* Number of nested brackets *\/$/;"	m	struct:ParseContext	file:
nNode	sqlite3_MFAW.c	/^  int nNode;                      \/* Size of buffer at aNode (or 0) *\/$/;"	m	struct:Fts3SegReader	file:
nNode	sqlite3_MFAW.c	/^  int nNode;$/;"	m	struct:NodeReader	file:
nNodeSize	sqlite3_MFAW.c	/^  int nNodeSize;                  \/* Soft limit for node size *\/$/;"	m	struct:Fts3Table	file:
nOBSat	sqlite3_MFAW.c	/^  i8 nOBSat;                \/* Number of ORDER BY terms satisfied by indices *\/$/;"	m	struct:WhereInfo	file:
nOBSat	sqlite3_MFAW.c	/^  int nOBSat;           \/* Number of ORDER BY terms satisfied by indices *\/$/;"	m	struct:SortCtx	file:
nOcc	sqlite3_MFAW.c	/^    sqlite3_int64 nOcc;           \/* 'occurrences' values for current csr row *\/$/;"	m	struct:Fts3auxCursor::Fts3auxColstats	file:
nOffsetList	sqlite3_MFAW.c	/^  int nOffsetList;                \/* For descending pending seg-readers only *\/$/;"	m	struct:Fts3SegReader	file:
nOnce	sqlite3_MFAW.c	/^  int nOnce;                    \/* Number of OP_Once instructions *\/$/;"	m	struct:SubProgram	file:
nOnce	sqlite3_MFAW.c	/^  int nOnce;           \/* Number of OP_Once instructions so far *\/$/;"	m	struct:Parse	file:
nOnceFlag	sqlite3_MFAW.c	/^  int nOnceFlag;          \/* Number of entries in aOnceFlag *\/$/;"	m	struct:VdbeFrame	file:
nOnceFlag	sqlite3_MFAW.c	/^  int nOnceFlag;          \/* Size of array aOnceFlag[] *\/$/;"	m	struct:Vdbe	file:
nOp	sqlite3_MFAW.c	/^  int nOp;                      \/* Elements in aOp[] *\/$/;"	m	struct:SubProgram	file:
nOp	sqlite3_MFAW.c	/^  int nOp;                \/* Number of instructions in the program *\/$/;"	m	struct:Vdbe	file:
nOp	sqlite3_MFAW.c	/^  int nOp;                \/* Size of aOp array *\/$/;"	m	struct:VdbeFrame	file:
nOpAlloc	sqlite3_MFAW.c	/^  int nOpAlloc;        \/* Number of slots allocated for Vdbe.aOp[] *\/$/;"	m	struct:Parse	file:
nOrderBy	sqlite3_MFAW.c	/^  int nOrderBy;              \/* Number of terms in the ORDER BY clause *\/$/;"	m	struct:sqlite3_index_info	file:
nOrig	sqlite3_MFAW.c	/^  Pgno nOrig;                  \/* Original number of pages in file *\/$/;"	m	struct:PagerSavepoint	file:
nOther	sqlite3_MFAW.c	/^  int nOther;      \/* Number of references to columns in other FROM clauses *\/$/;"	m	struct:SrcCount	file:
nOut	sqlite3_MFAW.c	/^  LogEst nOut;          \/* Estimated number of output rows *\/$/;"	m	struct:WhereLoop	file:
nOut	sqlite3_MFAW.c	/^  LogEst nOut;        \/* Number of outputs for this subquery *\/$/;"	m	struct:WhereOrCost	file:
nOut	sqlite3_MFAW.c	/^  int nOut;               \/* Number of buffers currently checked out *\/$/;"	m	struct:Lookaside	file:
nOverflow	sqlite3_MFAW.c	/^  u8 nOverflow;        \/* Number of overflow cell bodies in aCell[] *\/$/;"	m	struct:MemPage	file:
nOvfl	sqlite3_MFAW.c	/^  int nOvfl;                      \/* Entries in aOvfl[] *\/$/;"	m	struct:StatCell	file:
nOvfl	sqlite3_MFAW.c	/^  int nOvfl;                      \/* Number of overflow pages to load doclist *\/$/;"	m	struct:Fts3TokenAndCost	file:
nOvflAlloc	sqlite3_MFAW.c	/^  int nOvflAlloc;           \/* Allocated size of aOverflow[] array *\/$/;"	m	struct:BtCursor	file:
nPMA	sqlite3_MFAW.c	/^  int nPMA;                       \/* Number of PMAs currently in file *\/$/;"	m	struct:SortSubtask	file:
nPSample	sqlite3_MFAW.c	/^  tRowcnt nPSample;         \/* How often to do a periodic sample *\/$/;"	m	struct:Stat4Accum	file:
nPage	sqlite3_MFAW.c	/^  Pgno nPage;       \/* Number of pages in the database *\/$/;"	m	struct:IntegrityCk	file:
nPage	sqlite3_MFAW.c	/^  int nPage;                        \/* Number of pages in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:
nPage	sqlite3_MFAW.c	/^  u32 nPage;                      \/* Size of database in pages *\/$/;"	m	struct:WalIndexHdr	file:
nPage	sqlite3_MFAW.c	/^  u32 nPage;            \/* Number of pages in the database *\/$/;"	m	struct:BtShared	file:
nPage	sqlite3_MFAW.c	/^  unsigned int nPage;                 \/* Total number of pages in apHash *\/$/;"	m	struct:PCache1	file:
nPagecount	sqlite3_MFAW.c	/^  Pgno nPagecount;         \/* Total number of pages to copy *\/$/;"	m	struct:sqlite3_backup	file:
nParam	sqlite3_MFAW.c	/^  int nParam;                       \/* Number of function parameters *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
nParam	sqlite3_MFAW.c	/^  int nParam;                     \/* Size of array aParam[] *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
nParam	sqlite3_MFAW.c	/^  int nParam;                 \/* Number of parameters to the SQL function *\/$/;"	m	struct:RtreeMatchArg	file:
nPayload	sqlite3_MFAW.c	/^  int nPayload;                   \/* Value of 'payload' column *\/$/;"	m	struct:StatCursor	file:
nPayload	sqlite3_MFAW.c	/^  u32 nPayload;  \/* Bytes of payload *\/$/;"	m	struct:CellInfo	file:
nPendingData	sqlite3_MFAW.c	/^  int nPendingData;               \/* Current bytes of pending data *\/$/;"	m	struct:Fts3Table	file:
nPgsz	sqlite3_MFAW.c	/^  int nPgsz;                      \/* Page size for host database *\/$/;"	m	struct:Fts3Table	file:
nPhrase	sqlite3_MFAW.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:Fts3Cursor	file:
nPhrase	sqlite3_MFAW.c	/^  int nPhrase;                    \/* Number of matchable phrases in query *\/$/;"	m	struct:MatchInfo	file:
nPhrase	sqlite3_MFAW.c	/^  int nPhrase;                    \/* Number of phrases in query *\/$/;"	m	struct:SnippetIter	file:
nPhrase	sqlite3_MFAW.c	/^  int nPhrase;                    \/* Number of phrases seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:
nPoint	sqlite3_MFAW.c	/^  int nPoint;                       \/* Number of slots used in aPoint[] *\/$/;"	m	struct:RtreeCursor	file:
nPointAlloc	sqlite3_MFAW.c	/^  int nPointAlloc;                  \/* Number of slots allocated for aPoint[] *\/$/;"	m	struct:RtreeCursor	file:
nPool	sqlite3_MFAW.c	/^  u32 nPool;$/;"	m	struct:Mem3Global	file:
nPopulate	sqlite3_MFAW.c	/^  int nPopulate;                  \/* If >0, bytes of buffer aNode[] loaded *\/$/;"	m	struct:Fts3SegReader	file:
nPrefix	sqlite3_MFAW.c	/^    int nPrefix;                  \/* Prefix length (0 for main terms index) *\/$/;"	m	struct:Fts3Table::Fts3Index	file:
nProgressOps	sqlite3_MFAW.c	/^  unsigned nProgressOps;        \/* Number of opcodes for progress callback *\/$/;"	m	struct:sqlite3	file:
nQueryLoop	sqlite3_MFAW.c	/^  u32 nQueryLoop;      \/* Est number of iterations of a query (10*log2(N)) *\/$/;"	m	struct:Parse	file:
nRangeReg	sqlite3_MFAW.c	/^  int nRangeReg;       \/* Size of the temporary register block *\/$/;"	m	struct:Parse	file:
nRead	sqlite3_MFAW.c	/^  int nRead;                  \/* Database pages read *\/$/;"	m	struct:Pager	file:
nReaders	sqlite3_MFAW.c	/^  int nReaders;       \/* Number of reader locks obtained *\/$/;"	m	struct:winceLock	file:
nRec	sqlite3_MFAW.c	/^  int nRec;                   \/* Pages journalled since last j-header written *\/$/;"	m	struct:Pager	file:
nRecValid	sqlite3_MFAW.c	/^  int nRecValid;            \/* Number of valid fields currently in pRec *\/$/;"	m	struct:WhereLoopBuilder	file:
nRecyclable	sqlite3_MFAW.c	/^  unsigned int nRecyclable;           \/* Number of pages in the LRU list *\/$/;"	m	struct:PCache1	file:
nRef	sqlite3_MFAW.c	/^  i16 nRef;                      \/* Number of users of this page *\/$/;"	m	struct:PgHdr	file:
nRef	sqlite3_MFAW.c	/^  int nRef;                           \/* Number of referenced pages *\/$/;"	m	struct:PCache	file:
nRef	sqlite3_MFAW.c	/^  int nRef;                       \/* Number of open cursors *\/$/;"	m	struct:sqlite3_vtab	file:
nRef	sqlite3_MFAW.c	/^  int nRef;                       \/* Number of pointers to this structure *\/$/;"	m	struct:unixInodeInfo	file:
nRef	sqlite3_MFAW.c	/^  int nRef;                     \/* Number of references to this one *\/$/;"	m	struct:vxworksFileId	file:
nRef	sqlite3_MFAW.c	/^  int nRef;                   \/* Number of references to this node *\/$/;"	m	struct:RtreeNode	file:
nRef	sqlite3_MFAW.c	/^  int nRef;                  \/* Number of unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
nRef	sqlite3_MFAW.c	/^  int nRef;                  \/* Number of winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
nRef	sqlite3_MFAW.c	/^  int nRef;                 \/* Number of pointers to this structure *\/$/;"	m	struct:VTable	file:
nRef	sqlite3_MFAW.c	/^  int nRef;             \/* Number of references to this structure *\/$/;"	m	struct:BtShared	file:
nRef	sqlite3_MFAW.c	/^  int nRef;            \/* Number of names resolved by this context *\/$/;"	m	struct:NameContext	file:
nRef	sqlite3_MFAW.c	/^  int nRef;$/;"	m	struct:FuncDestructor	file:
nRef	sqlite3_MFAW.c	/^  u16 nRef;            \/* Number of pointers to this Table *\/$/;"	m	struct:Table	file:
nRef	sqlite3_MFAW.c	/^  u32 nRef;           \/* Number of references to this KeyInfo object *\/$/;"	m	struct:KeyInfo	file:
nRef	sqlite3_MFAW.c	/^  volatile int nRef;         \/* Number of enterances *\/$/;"	m	struct:sqlite3_mutex	file:
nRef	sqlite3_MFAW.c	/^  volatile int nRef;         \/* Number of entrances *\/$/;"	m	struct:sqlite3_mutex	file:
nRefInitMutex	sqlite3_MFAW.c	/^  int nRefInitMutex;                \/* Number of users of pInitMutex *\/$/;"	m	struct:Sqlite3Config	file:
nRegion	sqlite3_MFAW.c	/^  int nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:winShmNode	file:
nRegion	sqlite3_MFAW.c	/^  u16 nRegion;               \/* Size of array apRegion *\/$/;"	m	struct:unixShmNode	file:
nRemaining	sqlite3_MFAW.c	/^  Pgno nRemaining;         \/* Number of pages left to copy *\/$/;"	m	struct:sqlite3_backup	file:
nResColumn	sqlite3_MFAW.c	/^  u16 nResColumn;         \/* Number of columns in one row of the result set *\/$/;"	m	struct:Vdbe	file:
nReserve	sqlite3_MFAW.c	/^  i16 nReserve;               \/* Number of unused bytes at end of each page *\/$/;"	m	struct:Pager	file:
nReserve	sqlite3_MFAW.c	/^  int nReserve;                  \/* Try to keep nFreeSlot above this *\/$/;"	m	struct:PCacheGlobal	file:
nRow	sqlite3_MFAW.c	/^  LogEst nRow;          \/* Estimated number of rows generated by this path *\/$/;"	m	struct:WherePath	file:
nRow	sqlite3_MFAW.c	/^  tRowcnt nRow;             \/* Number of rows in the entire table *\/$/;"	m	struct:Stat4Accum	file:
nRow	sqlite3_MFAW.c	/^  u32 nRow;          \/* Number of rows in the result *\/$/;"	m	struct:TabResult	file:
nRowAvg	sqlite3_MFAW.c	/^  int nRowAvg;                    \/* Average size of database rows, in pages *\/$/;"	m	struct:Fts3Cursor	file:
nRowEst	sqlite3_MFAW.c	/^  i64 nRowEst;                \/* Estimated number of rows in this table *\/$/;"	m	struct:Rtree	file:
nRowEst0	sqlite3_MFAW.c	/^  tRowcnt nRowEst0;        \/* Non-logarithmic number of rows in the index *\/$/;"	m	struct:Index	file:
nRowLogEst	sqlite3_MFAW.c	/^  LogEst nRowLogEst;   \/* Estimated rows in table - from sqlite_stat1 table *\/$/;"	m	struct:Table	file:
nRowOut	sqlite3_MFAW.c	/^  LogEst nRowOut;           \/* Estimated number of output rows *\/$/;"	m	struct:WhereInfo	file:
nRowid	sqlite3_MFAW.c	/^  u32 nRowid;                     \/* Sizeof aRowid[] *\/$/;"	m	struct:Stat4Sample	file:
nSample	sqlite3_MFAW.c	/^  int nSample;              \/* Current number of samples *\/$/;"	m	struct:Stat4Accum	file:
nSample	sqlite3_MFAW.c	/^  int nSample;             \/* Number of elements in aSample[] *\/$/;"	m	struct:Index	file:
nSampleCol	sqlite3_MFAW.c	/^  int nSampleCol;          \/* Size of IndexSample.anEq[] and so on *\/$/;"	m	struct:Index	file:
nSavepoint	sqlite3_MFAW.c	/^  int nSavepoint;               \/* Number of non-transaction savepoints *\/$/;"	m	struct:sqlite3	file:
nSavepoint	sqlite3_MFAW.c	/^  int nSavepoint;             \/* Number of elements in aSavepoint[] *\/$/;"	m	struct:Pager	file:
nScan	sqlite3_MFAW.c	/^  int nScan;              \/* Entries in aScan[] *\/$/;"	m	struct:Vdbe	file:
nScratch	sqlite3_MFAW.c	/^  int nScratch;                     \/* Number of scratch buffers *\/$/;"	m	struct:Sqlite3Config	file:
nScratchFree	sqlite3_MFAW.c	/^  u32 nScratchFree;$/;"	m	struct:Mem0Global	file:
nSdst	sqlite3_MFAW.c	/^  int nSdst;           \/* Number of registers allocated *\/$/;"	m	struct:SelectDest	file:
nSegment	sqlite3_MFAW.c	/^  int nSegment;                   \/* Number of entries in aSegment[] *\/$/;"	m	struct:WalIterator	file:
nSegment	sqlite3_MFAW.c	/^  int nSegment;                   \/* Size of apSegment array *\/$/;"	m	struct:Fts3MultiSegReader	file:
nSelect	sqlite3_MFAW.c	/^  int nSelect;         \/* Number of SELECT statements seen *\/$/;"	m	struct:Parse	file:
nSelectIndent	sqlite3_MFAW.c	/^  int nSelectIndent;   \/* How far to indent SELECTTRACE() output *\/$/;"	m	struct:Parse	file:
nSelectRow	sqlite3_MFAW.c	/^  u64 nSelectRow;        \/* Estimated number of result rows *\/$/;"	m	struct:Select	file:
nSet	sqlite3_MFAW.c	/^  int nSet;            \/* Number of sets used so far *\/$/;"	m	struct:Parse	file:
nSet	sqlite3_MFAW.c	/^  u32 nSet;       \/* Number of bits that are set - only valid for aHash$/;"	m	struct:Bitvec	file:
nShared	sqlite3_MFAW.c	/^  int nShared;                    \/* Number of SHARED locks held *\/$/;"	m	struct:unixInodeInfo	file:
nSize	sqlite3_MFAW.c	/^  int nSize;                      \/* Size of allocation at aData *\/$/;"	m	struct:SegmentWriter	file:
nSize	sqlite3_MFAW.c	/^  u16 nSize;     \/* Size of the cell content on the main b-tree page *\/$/;"	m	struct:CellInfo	file:
nSkip	sqlite3_MFAW.c	/^  u16 nSkip;            \/* Number of NULL aLTerm[] entries *\/$/;"	m	struct:WhereLoop	file:
nSlot	sqlite3_MFAW.c	/^  int nSlot;                     \/* The number of pcache slots *\/$/;"	m	struct:PCacheGlobal	file:
nSlot	sqlite3_MFAW.c	/^  int nSlot;               \/* Number of entries in a[] *\/$/;"	m	struct:WhereClause	file:
nSnippet	sqlite3_MFAW.c	/^  int nSnippet;                   \/* Requested snippet length (in tokens) *\/$/;"	m	struct:SnippetIter	file:
nSortingColumn	sqlite3_MFAW.c	/^  int nSortingColumn;     \/* Number of columns in the sorting index *\/$/;"	m	struct:AggInfo	file:
nSpace	sqlite3_MFAW.c	/^  int nSpace;$/;"	m	struct:PendingList	file:
nSrc	sqlite3_MFAW.c	/^  int nSrc;        \/* Number of tables or subqueries in the FROM clause *\/$/;"	m	struct:SrcList	file:
nStat	sqlite3_MFAW.c	/^  int nStat;                      \/* Size of aStat[] array *\/$/;"	m	struct:Fts3auxCursor	file:
nStatement	sqlite3_MFAW.c	/^  int nStatement;               \/* Number of nested statement-transactions  *\/$/;"	m	struct:sqlite3	file:
nStmtDefCons	sqlite3_MFAW.c	/^  i64 nStmtDefCons;       \/* Number of def. constraints when stmt started *\/$/;"	m	struct:Vdbe	file:
nStmtDefImmCons	sqlite3_MFAW.c	/^  i64 nStmtDefImmCons;    \/* Number of def. imm constraints when stmt started *\/$/;"	m	struct:Vdbe	file:
nStop	sqlite3_MFAW.c	/^  int nStop;                      \/* Byte-length of string zStop *\/$/;"	m	struct:Fts3auxCursor	file:
nSub	sqlite3_MFAW.c	/^  int nSub;                  \/* Number of entries in apSub *\/$/;"	m	struct:VdbeOpIter	file:
nSubRec	sqlite3_MFAW.c	/^  u32 nSubRec;                \/* Number of records written to sub-journal *\/$/;"	m	struct:Pager	file:
nTab	sqlite3_MFAW.c	/^  int nTab;            \/* Number of previously allocated VDBE cursors *\/$/;"	m	struct:Parse	file:
nTableLock	sqlite3_MFAW.c	/^  int nTableLock;        \/* Number of locks in aTableLock *\/$/;"	m	struct:Parse	file:
nTask	sqlite3_MFAW.c	/^  u8 nTask;                       \/* Size of aTask[] array *\/$/;"	m	struct:VdbeSorter	file:
nTempReg	sqlite3_MFAW.c	/^  u8 nTempReg;         \/* Number of temporary registers in aTempReg[] *\/$/;"	m	struct:Parse	file:
nTerm	sqlite3_MFAW.c	/^  int nTerm;                      \/* Number of bytes in current term *\/$/;"	m	struct:Fts3SegReader	file:
nTerm	sqlite3_MFAW.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentNode	file:
nTerm	sqlite3_MFAW.c	/^  int nTerm;                      \/* Number of bytes in zTerm *\/$/;"	m	struct:SegmentWriter	file:
nTerm	sqlite3_MFAW.c	/^  int nTerm;                      \/* Size of zTerm in bytes *\/$/;"	m	struct:Fts3MultiSegReader	file:
nTerm	sqlite3_MFAW.c	/^  int nTerm;               \/* Number of terms *\/$/;"	m	struct:WhereClause	file:
nTerm	sqlite3_MFAW.c	/^  int nTerm;$/;"	m	struct:Fts3SegFilter	file:
nTermAlloc	sqlite3_MFAW.c	/^  int nTermAlloc;                 \/* Allocated size of zTerm buffer *\/$/;"	m	struct:Fts3SegReader	file:
nThis	sqlite3_MFAW.c	/^  int nThis;       \/* Number of references to columns in pSrcList *\/$/;"	m	struct:SrcCount	file:
nTitle	sqlite3_MFAW.c	/^  int nTitle;        \/* Bytes of zTitle to save.  Includes '\\0' and padding *\/$/;"	m	struct:__anon9	file:
nTitle	sqlite3_MFAW.c	/^  u8 nTitle;                          \/* Bytes of title; includes '\\0' *\/$/;"	m	struct:MemBlockHdr	file:
nToken	sqlite3_MFAW.c	/^  int nToken;                     \/* Number of tokens in phrase *\/$/;"	m	struct:SnippetPhrase	file:
nToken	sqlite3_MFAW.c	/^  int nToken;                     \/* Number of tokens seen so far *\/$/;"	m	struct:LoadDoclistCtx	file:
nToken	sqlite3_MFAW.c	/^  int nToken;                     \/* Size of zToken in bytes *\/$/;"	m	struct:Fts3tokCursor	file:
nToken	sqlite3_MFAW.c	/^  int nToken;                \/* Number of tokens in the phrase *\/$/;"	m	struct:Fts3Phrase	file:
nTokenAllocated	sqlite3_MFAW.c	/^  int nTokenAllocated;         \/* space allocated to zToken buffer *\/$/;"	m	struct:simple_tokenizer_cursor	file:
nTotalChange	sqlite3_MFAW.c	/^  int nTotalChange;             \/* Value returned by sqlite3_total_changes() *\/$/;"	m	struct:sqlite3	file:
nTransaction	sqlite3_MFAW.c	/^  int nTransaction;     \/* Number of open transactions (read + write) *\/$/;"	m	struct:BtShared	file:
nTree	sqlite3_MFAW.c	/^  int nTree;                 \/* Used size of aTree\/aReadr (power of 2) *\/$/;"	m	struct:MergeEngine	file:
nUnused	sqlite3_MFAW.c	/^  int nUnused;                    \/* Number of unused bytes on page *\/$/;"	m	struct:StatPage	file:
nUnused	sqlite3_MFAW.c	/^  int nUnused;                    \/* Value of 'unused' column *\/$/;"	m	struct:StatCursor	file:
nUsed	sqlite3_MFAW.c	/^  int nUsed;               \/* Number of arguments used so far *\/$/;"	m	struct:PrintfArguments	file:
nVDestroy	sqlite3_MFAW.c	/^  int nVDestroy;                \/* Number of active OP_VDestroy operations *\/$/;"	m	struct:sqlite3	file:
nVTrans	sqlite3_MFAW.c	/^  int nVTrans;                  \/* Allocated size of aVTrans *\/$/;"	m	struct:sqlite3	file:
nVal	sqlite3_MFAW.c	/^  int nVal;                       \/* Size of the record in bytes *\/$/;"	m	struct:SorterRecord	file:
nVar	sqlite3_MFAW.c	/^  int nVar;                 \/* Number of '?' variables seen in the SQL so far *\/$/;"	m	struct:Parse	file:
nVar	sqlite3_MFAW.c	/^  ynVar nVar;             \/* Number of entries in aVar[] *\/$/;"	m	struct:Vdbe	file:
nVdbeActive	sqlite3_MFAW.c	/^  int nVdbeActive;              \/* Number of VDBEs currently running *\/$/;"	m	struct:sqlite3	file:
nVdbeExec	sqlite3_MFAW.c	/^  int nVdbeExec;                \/* Number of nested calls to VdbeExec() *\/$/;"	m	struct:sqlite3	file:
nVdbeRead	sqlite3_MFAW.c	/^  int nVdbeRead;                \/* Number of active VDBEs that read or write *\/$/;"	m	struct:sqlite3	file:
nVdbeWrite	sqlite3_MFAW.c	/^  int nVdbeWrite;               \/* Number of active VDBEs that read and write *\/$/;"	m	struct:sqlite3	file:
nVtabLock	sqlite3_MFAW.c	/^  int nVtabLock;            \/* Number of virtual tables to lock *\/$/;"	m	struct:Parse	file:
nWiData	sqlite3_MFAW.c	/^  int nWiData;               \/* Size of array apWiData *\/$/;"	m	struct:Wal	file:
nWork	sqlite3_MFAW.c	/^  int nWork;                      \/* Number of leaf pages flushed *\/$/;"	m	struct:IncrmergeWriter	file:
nWorker	sqlite3_MFAW.c	78916;"	d	file:
nWorker	sqlite3_MFAW.c	78992;"	d	file:
nXField	sqlite3_MFAW.c	/^  u16 nXField;        \/* Number of columns beyond the key columns *\/$/;"	m	struct:KeyInfo	file:
nZero	sqlite3_MFAW.c	/^    int nZero;          \/* Used when bit MEM_Zero is set in flags *\/$/;"	m	union:Mem::MemValue	file:
nameInUsingClause	sqlite3_MFAW.c	/^static int nameInUsingClause(IdList *pUsing, const char *zCol){$/;"	f	file:
ncFlags	sqlite3_MFAW.c	/^  u16 ncFlags;         \/* Zero or more NC_* flags defined below *\/$/;"	m	struct:NameContext	file:
nearlyFull	sqlite3_MFAW.c	/^  int nearlyFull;$/;"	m	struct:Mem0Global	file:
needFree	sqlite3_MFAW.c	/^      u8 needFree;           \/* True if sqlite3_free(idxStr) is needed *\/$/;"	m	struct:WhereLoop::__anon18::__anon20	file:
needToFreeIdxStr	sqlite3_MFAW.c	/^  int needToFreeIdxStr;      \/* Free idxStr using sqlite3_free() if true *\/$/;"	m	struct:sqlite3_index_info	file:
nested	sqlite3_MFAW.c	/^  u8 nested;           \/* Number of nested calls to the parser\/code generator *\/$/;"	m	struct:Parse	file:
neverCorrupt	sqlite3_MFAW.c	/^  int neverCorrupt;                 \/* Database is always well-formed *\/$/;"	m	struct:Sqlite3Config	file:
newDatabase	sqlite3_MFAW.c	/^static int newDatabase(BtShared *pBt){$/;"	f	file:
newRowid	sqlite3_MFAW.c	/^static int newRowid(Rtree *pRtree, i64 *piRowid){$/;"	f	file:
newTnum	sqlite3_MFAW.c	/^    int newTnum;                \/* Rootpage of table being initialized *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
newmask	sqlite3_MFAW.c	/^  u32 newmask;         \/* Mask of new.* columns referenced *\/$/;"	m	struct:Parse	file:
next	sqlite3_MFAW.c	/^      u32 next;       \/* Index in mem3.aPool[] of next free chunk *\/$/;"	m	struct:Mem3Block::__anon10::__anon12	file:
next	sqlite3_MFAW.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:
next	sqlite3_MFAW.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:
next	sqlite3_MFAW.c	/^  int next;       \/* Index of next free chunk *\/$/;"	m	struct:Mem5Link	file:
nextAutovac	sqlite3_MFAW.c	/^  signed char nextAutovac;      \/* Autovac setting after VACUUM if >=0 *\/$/;"	m	struct:sqlite3	file:
nextPagesize	sqlite3_MFAW.c	/^  int nextPagesize;             \/* Pagesize after VACUUM if >0 *\/$/;"	m	struct:sqlite3	file:
nextShmId	sqlite3_MFAW.c	/^  u8 nextShmId;              \/* Next available unixShm.id value *\/$/;"	m	struct:unixShmNode	file:
nextShmId	sqlite3_MFAW.c	/^  u8 nextShmId;              \/* Next available winShm.id value *\/$/;"	m	struct:winShmNode	file:
next_stmt	sqlite3_MFAW.c	/^  sqlite3_stmt *(*next_stmt)(sqlite3*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
nfsUnlock	sqlite3_MFAW.c	/^static int nfsUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
noCase	sqlite3_MFAW.c	/^  u8 noCase;$/;"	m	struct:compareInfo	file:
noLock	sqlite3_MFAW.c	/^  u8 noLock;                  \/* Do not lock (except in WAL mode) *\/$/;"	m	struct:Pager	file:
noPayload	sqlite3_MFAW.c	/^  u8 noPayload;        \/* True if internal intKey page (thus w\/o data) *\/$/;"	m	struct:MemPage	file:
noSkipScan	sqlite3_MFAW.c	/^  unsigned noSkipScan:1;   \/* Do not try to use skip-scan if true *\/$/;"	m	struct:Index	file:
noSync	sqlite3_MFAW.c	/^  u8 noSync;                  \/* Do not sync the journal if true *\/$/;"	m	struct:Pager	file:
nocaseCollatingFunc	sqlite3_MFAW.c	/^static int nocaseCollatingFunc($/;"	f	file:
nodeAcquire	sqlite3_MFAW.c	/^static int nodeAcquire($/;"	f	file:
nodeDeleteCell	sqlite3_MFAW.c	/^static void nodeDeleteCell(Rtree *pRtree, RtreeNode *pNode, int iCell){$/;"	f	file:
nodeGetCell	sqlite3_MFAW.c	/^static void nodeGetCell($/;"	f	file:
nodeGetCoord	sqlite3_MFAW.c	/^static void nodeGetCoord($/;"	f	file:
nodeGetRowid	sqlite3_MFAW.c	/^static i64 nodeGetRowid($/;"	f	file:
nodeHash	sqlite3_MFAW.c	/^static int nodeHash(i64 iNode){$/;"	f	file:
nodeHashDelete	sqlite3_MFAW.c	/^static void nodeHashDelete(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeHashInsert	sqlite3_MFAW.c	/^static void nodeHashInsert(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeHashLookup	sqlite3_MFAW.c	/^static RtreeNode *nodeHashLookup(Rtree *pRtree, i64 iNode){$/;"	f	file:
nodeInsertCell	sqlite3_MFAW.c	/^static int nodeInsertCell($/;"	f	file:
nodeNew	sqlite3_MFAW.c	/^static RtreeNode *nodeNew(Rtree *pRtree, RtreeNode *pParent){$/;"	f	file:
nodeOverwriteCell	sqlite3_MFAW.c	/^static void nodeOverwriteCell($/;"	f	file:
nodeParentIndex	sqlite3_MFAW.c	/^static int nodeParentIndex(Rtree *pRtree, RtreeNode *pNode, int *piIndex){$/;"	f	file:
nodeReaderInit	sqlite3_MFAW.c	/^static int nodeReaderInit(NodeReader *p, const char *aNode, int nNode){$/;"	f	file:
nodeReaderNext	sqlite3_MFAW.c	/^static int nodeReaderNext(NodeReader *p){$/;"	f	file:
nodeReaderRelease	sqlite3_MFAW.c	/^static void nodeReaderRelease(NodeReader *p){$/;"	f	file:
nodeReference	sqlite3_MFAW.c	/^static void nodeReference(RtreeNode *p){$/;"	f	file:
nodeRelease	sqlite3_MFAW.c	/^static int nodeRelease(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeRowidIndex	sqlite3_MFAW.c	/^static int nodeRowidIndex($/;"	f	file:
nodeWrite	sqlite3_MFAW.c	/^static int nodeWrite(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
nodeZero	sqlite3_MFAW.c	/^static void nodeZero(Rtree *pRtree, RtreeNode *p){$/;"	f	file:
nolockCheckReservedLock	sqlite3_MFAW.c	/^static int nolockCheckReservedLock(sqlite3_file *NotUsed, int *pResOut){$/;"	f	file:
nolockClose	sqlite3_MFAW.c	/^static int nolockClose(sqlite3_file *id) {$/;"	f	file:
nolockLock	sqlite3_MFAW.c	/^static int nolockLock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
nolockUnlock	sqlite3_MFAW.c	/^static int nolockUnlock(sqlite3_file *NotUsed, int NotUsed2){$/;"	f	file:
noopFunc	sqlite3_MFAW.c	96966;"	d	file:
noopMutexAlloc	sqlite3_MFAW.c	/^static sqlite3_mutex *noopMutexAlloc(int id){ $/;"	f	file:
noopMutexEnd	sqlite3_MFAW.c	/^static int noopMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexEnter	sqlite3_MFAW.c	/^static void noopMutexEnter(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexFree	sqlite3_MFAW.c	/^static void noopMutexFree(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexInit	sqlite3_MFAW.c	/^static int noopMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
noopMutexLeave	sqlite3_MFAW.c	/^static void noopMutexLeave(sqlite3_mutex *p){ UNUSED_PARAMETER(p); return; }$/;"	f	file:
noopMutexTry	sqlite3_MFAW.c	/^static int noopMutexTry(sqlite3_mutex *p){$/;"	f	file:
notIndexed	sqlite3_MFAW.c	/^    unsigned notIndexed :1;    \/* True if there is a NOT INDEXED clause *\/$/;"	m	struct:SrcList::SrcList_item	file:
notNull	sqlite3_MFAW.c	/^  u8 notNull;      \/* An OE_ code for handling a NOT NULL constraint *\/$/;"	m	struct:Column	file:
notReady	sqlite3_MFAW.c	/^  Bitmask notReady;          \/* FROM entries not usable at this level *\/$/;"	m	struct:WhereLevel	file:
notUsed1	sqlite3_MFAW.c	/^    double notUsed1;            \/* Spacer *\/$/;"	m	union:sqlite3::__anon2	file:
notValidCheckConstraint	sqlite3_MFAW.c	/^static void notValidCheckConstraint($/;"	f	file:
notValidCheckConstraint	sqlite3_MFAW.c	81951;"	d	file:
notValidPartIdxWhere	sqlite3_MFAW.c	/^static void notValidPartIdxWhere($/;"	f	file:
nowValue	sqlite3_MFAW.c	/^  sqlite3_int64 nowValue[10];         \/* Current value *\/$/;"	m	struct:sqlite3StatType	file:
nrhs	sqlite3_MFAW.c	/^  unsigned char nrhs;     \/* Number of right-hand side symbols in the rule *\/$/;"	m	struct:__anon24	file:
nullRow	sqlite3_MFAW.c	/^  u8 nullRow;           \/* True if pointing to a row with no data *\/$/;"	m	struct:VdbeCursor	file:
nullifFunc	sqlite3_MFAW.c	/^static void nullifFunc($/;"	f	file:
num_threads	mobibench.c	/^int num_threads;$/;"	v
num_threads	mobibench_MFAW.c	/^int num_threads;$/;"	v
numberOfCachePages	sqlite3_MFAW.c	/^static int numberOfCachePages(PCache *p){$/;"	f	file:
numericType	sqlite3_MFAW.c	/^static u16 numericType(Mem *pMem){$/;"	f	file:
numrecs64	mobibench.c	/^long long numrecs64;$/;"	v
numrecs64	mobibench_MFAW.c	/^long long numrecs64;$/;"	v
nzVar	sqlite3_MFAW.c	/^  int nzVar;                \/* Number of available slots in azVar[] *\/$/;"	m	struct:Parse	file:
nzVar	sqlite3_MFAW.c	/^  ynVar nzVar;            \/* Number of entries in azVar[] *\/$/;"	m	struct:Vdbe	file:
offset	sqlite3_MFAW.c	/^  unsigned long long offset;        \/* offset to first byte to lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
offsetof	sqlite3_MFAW.c	8912;"	d	file:
okConstFactor	sqlite3_MFAW.c	/^  u8 okConstFactor;    \/* OK to factor out constants *\/$/;"	m	struct:Parse	file:
okOnePass	sqlite3_MFAW.c	/^  u8 okOnePass;             \/* Ok to use one-pass algorithm for UPDATE\/DELETE *\/$/;"	m	struct:WhereInfo	file:
oldLockingContext	sqlite3_MFAW.c	/^  void *oldLockingContext;     \/* Original lockingcontext to restore on close *\/$/;"	m	struct:proxyLockingContext	file:
oldmask	sqlite3_MFAW.c	/^  u32 oldmask;         \/* Mask of old.* columns referenced *\/$/;"	m	struct:Parse	file:
omit	sqlite3_MFAW.c	/^    unsigned char omit;      \/* Do not code a test for this constraint *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint_usage	file:
omitMask	sqlite3_MFAW.c	/^      u16 omitMask;          \/* Terms that may be omitted *\/$/;"	m	struct:WhereLoop::__anon18::__anon20	file:
onError	sqlite3_MFAW.c	/^  u8 onError;              \/* OE_Abort, OE_Ignore, OE_Replace, or OE_None *\/$/;"	m	struct:Index	file:
onErrorText	sqlite3_MFAW.c	/^static const char *onErrorText(int onError){$/;"	f	file:
op	sqlite3_MFAW.c	/^     unsigned char op;         \/* Constraint operator *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
op	sqlite3_MFAW.c	/^  int op;                         \/* Constraining operation *\/$/;"	m	struct:RtreeConstraint	file:
op	sqlite3_MFAW.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
op	sqlite3_MFAW.c	/^  u8 op;                   \/* Split operator.  TK_AND or TK_OR *\/$/;"	m	struct:WhereClause	file:
op	sqlite3_MFAW.c	/^  u8 op;                  \/* One of TK_DELETE, TK_UPDATE, TK_INSERT         *\/$/;"	m	struct:Trigger	file:
op	sqlite3_MFAW.c	/^  u8 op;                 \/* One of: TK_UNION TK_ALL TK_INTERSECT TK_EXCEPT *\/$/;"	m	struct:Select	file:
op	sqlite3_MFAW.c	/^  u8 op;                 \/* Operation performed by this node *\/$/;"	m	struct:Expr	file:
op	sqlite3_MFAW.c	/^  u8 op;               \/* One of TK_DELETE, TK_UPDATE, TK_INSERT, TK_SELECT *\/$/;"	m	struct:TriggerStep	file:
op2	sqlite3_MFAW.c	/^  u8 op2;                \/* TK_REGISTER: original value of Expr.op$/;"	m	struct:Expr	file:
opIterNext	sqlite3_MFAW.c	/^static Op *opIterNext(VdbeOpIter *p){$/;"	f	file:
opMask	sqlite3_MFAW.c	/^  u32 opMask;                \/* Acceptable operators *\/$/;"	m	struct:WhereScan	file:
opPrecedence	sqlite3_MFAW.c	/^static int opPrecedence(Fts3Expr *p){$/;"	f	file:
opcode	sqlite3_MFAW.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOp	file:
opcode	sqlite3_MFAW.c	/^  u8 opcode;          \/* What operation to perform *\/$/;"	m	struct:VdbeOpList	file:
open	sqlite3_MFAW.c	/^  int  (*open)(const char*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:
open16	sqlite3_MFAW.c	/^  int  (*open16)(const void*,sqlite3**);$/;"	m	struct:sqlite3_api_routines	file:
openDatabase	sqlite3_MFAW.c	/^static int openDatabase($/;"	f	file:
openDirectory	sqlite3_MFAW.c	/^static int openDirectory(const char *zFilename, int *pFd){$/;"	f	file:
openFlags	sqlite3_MFAW.c	/^  int openFlags;                      \/* The flags specified at open() *\/$/;"	m	struct:unixFile	file:
openFlags	sqlite3_MFAW.c	/^  u8 openFlags;         \/* Flags to sqlite3BtreeOpen() *\/$/;"	m	struct:BtShared	file:
openFlags	sqlite3_MFAW.c	/^  unsigned int openFlags;       \/* Flags passed to sqlite3_vfs.xOpen() *\/$/;"	m	struct:sqlite3	file:
openStatTable	sqlite3_MFAW.c	/^static void openStatTable($/;"	f	file:
openSubJournal	sqlite3_MFAW.c	/^static int openSubJournal(Pager *pPager){$/;"	f	file:
open_count	mobibench.c	/^	int open_count;$/;"	m	struct:script_thread_info	file:
open_count	mobibench_MFAW.c	/^	int open_count;$/;"	m	struct:script_thread_info	file:
open_num	mobibench.c	/^int open_num = 0;$/;"	v
open_num	mobibench_MFAW.c	/^int open_num = 0;$/;"	v
open_v2	sqlite3_MFAW.c	/^  int (*open_v2)(const char*,sqlite3**,int,const char*);$/;"	m	struct:sqlite3_api_routines	file:
operatorMask	sqlite3_MFAW.c	/^static u16 operatorMask(int op){$/;"	f	file:
opflags	sqlite3_MFAW.c	/^  u8 opflags;         \/* Mask of the OPFLG_* flags in opcodes.h *\/$/;"	m	struct:VdbeOp	file:
optimalReserve	sqlite3_MFAW.c	/^  u8 optimalReserve;    \/* Desired amount of reserved space per page *\/$/;"	m	struct:BtShared	file:
orconf	sqlite3_MFAW.c	/^  int orconf;             \/* Default ON CONFLICT policy *\/$/;"	m	struct:TriggerPrg	file:
orconf	sqlite3_MFAW.c	/^  u8 orconf;           \/* OE_Rollback etc. *\/$/;"	m	struct:TriggerStep	file:
orderByConsumed	sqlite3_MFAW.c	/^  int orderByConsumed;       \/* True if output is already ordered *\/$/;"	m	struct:sqlite3_index_info	file:
orphanTrigger	sqlite3_MFAW.c	/^    u8 orphanTrigger;           \/* Last statement is orphaned TEMP trigger *\/$/;"	m	struct:sqlite3::sqlite3InitInfo	file:
osAccess	sqlite3_MFAW.c	25834;"	d	file:
osAreFileApisANSI	sqlite3_MFAW.c	33671;"	d	file:
osAreFileApisANSI	sqlite3_MFAW.c	33692;"	d	file:
osCharLowerW	sqlite3_MFAW.c	33701;"	d	file:
osCharUpperW	sqlite3_MFAW.c	33709;"	d	file:
osClose	sqlite3_MFAW.c	25831;"	d	file:
osCloseHandle	sqlite3_MFAW.c	33713;"	d	file:
osCreateEventExW	sqlite3_MFAW.c	34179;"	d	file:
osCreateFile2	sqlite3_MFAW.c	34233;"	d	file:
osCreateFileA	sqlite3_MFAW.c	33721;"	d	file:
osCreateFileMappingA	sqlite3_MFAW.c	33740;"	d	file:
osCreateFileMappingFromApp	sqlite3_MFAW.c	34288;"	d	file:
osCreateFileMappingW	sqlite3_MFAW.c	33750;"	d	file:
osCreateFileW	sqlite3_MFAW.c	33730;"	d	file:
osCreateMutexW	sqlite3_MFAW.c	33759;"	d	file:
osDeleteFileA	sqlite3_MFAW.c	33768;"	d	file:
osDeleteFileW	sqlite3_MFAW.c	33776;"	d	file:
osFallocate	sqlite3_MFAW.c	25906;"	d	file:
osFchmod	sqlite3_MFAW.c	25899;"	d	file:
osFchown	sqlite3_MFAW.c	25921;"	d	file:
osFcntl	sqlite3_MFAW.c	25860;"	d	file:
osFcntl	sqlite3_MFAW.c	26190;"	d	file:
osFcntl	sqlite3_MFAW.c	26191;"	d	file:
osFileTimeToLocalFileTime	sqlite3_MFAW.c	33784;"	d	file:
osFileTimeToSystemTime	sqlite3_MFAW.c	33793;"	d	file:
osFlushFileBuffers	sqlite3_MFAW.c	33798;"	d	file:
osFlushViewOfFile	sqlite3_MFAW.c	34330;"	d	file:
osFormatMessageA	sqlite3_MFAW.c	33806;"	d	file:
osFormatMessageW	sqlite3_MFAW.c	33815;"	d	file:
osFreeLibrary	sqlite3_MFAW.c	33824;"	d	file:
osFstat	sqlite3_MFAW.c	25850;"	d	file:
osFtruncate	sqlite3_MFAW.c	25857;"	d	file:
osGetCurrentProcessId	sqlite3_MFAW.c	33828;"	d	file:
osGetDiskFreeSpaceA	sqlite3_MFAW.c	33836;"	d	file:
osGetDiskFreeSpaceW	sqlite3_MFAW.c	33845;"	d	file:
osGetFileAttributesA	sqlite3_MFAW.c	33854;"	d	file:
osGetFileAttributesExW	sqlite3_MFAW.c	33870;"	d	file:
osGetFileAttributesW	sqlite3_MFAW.c	33862;"	d	file:
osGetFileInformationByHandleEx	sqlite3_MFAW.c	34215;"	d	file:
osGetFileSize	sqlite3_MFAW.c	33879;"	d	file:
osGetFullPathNameA	sqlite3_MFAW.c	33887;"	d	file:
osGetFullPathNameW	sqlite3_MFAW.c	33896;"	d	file:
osGetLastError	sqlite3_MFAW.c	33901;"	d	file:
osGetNativeSystemInfo	sqlite3_MFAW.c	34259;"	d	file:
osGetProcAddressA	sqlite3_MFAW.c	33916;"	d	file:
osGetProcessHeap	sqlite3_MFAW.c	34280;"	d	file:
osGetSystemInfo	sqlite3_MFAW.c	33925;"	d	file:
osGetSystemTime	sqlite3_MFAW.c	33929;"	d	file:
osGetSystemTimeAsFileTime	sqlite3_MFAW.c	33937;"	d	file:
osGetTempPathA	sqlite3_MFAW.c	33946;"	d	file:
osGetTempPathW	sqlite3_MFAW.c	33954;"	d	file:
osGetTickCount	sqlite3_MFAW.c	33962;"	d	file:
osGetTickCount64	sqlite3_MFAW.c	34251;"	d	file:
osGetVersionExA	sqlite3_MFAW.c	33971;"	d	file:
osGetVersionExW	sqlite3_MFAW.c	33981;"	d	file:
osGetcwd	sqlite3_MFAW.c	25837;"	d	file:
osGetpagesize	sqlite3_MFAW.c	25937;"	d	file:
osGetpid	sqlite3_MFAW.c	25428;"	d	file:
osHeapAlloc	sqlite3_MFAW.c	33986;"	d	file:
osHeapCompact	sqlite3_MFAW.c	34035;"	d	file:
osHeapCreate	sqlite3_MFAW.c	33995;"	d	file:
osHeapDestroy	sqlite3_MFAW.c	34004;"	d	file:
osHeapFree	sqlite3_MFAW.c	34008;"	d	file:
osHeapReAlloc	sqlite3_MFAW.c	34012;"	d	file:
osHeapSize	sqlite3_MFAW.c	34017;"	d	file:
osHeapValidate	sqlite3_MFAW.c	34026;"	d	file:
osInterlockedCompareExchange	sqlite3_MFAW.c	34299;"	d	file:
osIsNT	sqlite3_MFAW.c	34587;"	d	file:
osIsNT	sqlite3_MFAW.c	34589;"	d	file:
osIsNT	sqlite3_MFAW.c	34591;"	d	file:
osIsNT	sqlite3_MFAW.c	34593;"	d	file:
osLoadLibraryA	sqlite3_MFAW.c	34043;"	d	file:
osLoadLibraryW	sqlite3_MFAW.c	34052;"	d	file:
osLoadPackagedLibrary	sqlite3_MFAW.c	34242;"	d	file:
osLocalFree	sqlite3_MFAW.c	34060;"	d	file:
osLocaltime	sqlite3_MFAW.c	/^static int osLocaltime(time_t *t, struct tm *pTm){$/;"	f	file:
osLockFile	sqlite3_MFAW.c	34069;"	d	file:
osLockFileEx	sqlite3_MFAW.c	34080;"	d	file:
osMapViewOfFile	sqlite3_MFAW.c	34091;"	d	file:
osMapViewOfFileFromApp	sqlite3_MFAW.c	34224;"	d	file:
osMkdir	sqlite3_MFAW.c	25915;"	d	file:
osMmap	sqlite3_MFAW.c	25925;"	d	file:
osMremap	sqlite3_MFAW.c	25935;"	d	file:
osMultiByteToWideChar	sqlite3_MFAW.c	34096;"	d	file:
osMunmap	sqlite3_MFAW.c	25928;"	d	file:
osOpen	sqlite3_MFAW.c	25828;"	d	file:
osOpenDirectory	sqlite3_MFAW.c	25912;"	d	file:
osOutputDebugStringA	sqlite3_MFAW.c	34268;"	d	file:
osOutputDebugStringW	sqlite3_MFAW.c	34276;"	d	file:
osPread	sqlite3_MFAW.c	25870;"	d	file:
osPread64	sqlite3_MFAW.c	25877;"	d	file:
osPwrite	sqlite3_MFAW.c	25887;"	d	file:
osPwrite64	sqlite3_MFAW.c	25895;"	d	file:
osQueryPerformanceCounter	sqlite3_MFAW.c	34101;"	d	file:
osRead	sqlite3_MFAW.c	25863;"	d	file:
osReadFile	sqlite3_MFAW.c	34106;"	d	file:
osRmdir	sqlite3_MFAW.c	25918;"	d	file:
osSetEndOfFile	sqlite3_MFAW.c	34111;"	d	file:
osSetFilePointer	sqlite3_MFAW.c	34119;"	d	file:
osSetFilePointerEx	sqlite3_MFAW.c	34206;"	d	file:
osSleep	sqlite3_MFAW.c	34128;"	d	file:
osStat	sqlite3_MFAW.c	25840;"	d	file:
osSystemTimeToFileTime	sqlite3_MFAW.c	34132;"	d	file:
osUnlink	sqlite3_MFAW.c	25909;"	d	file:
osUnlockFile	sqlite3_MFAW.c	34142;"	d	file:
osUnlockFileEx	sqlite3_MFAW.c	34152;"	d	file:
osUnmapViewOfFile	sqlite3_MFAW.c	34161;"	d	file:
osUuidCreate	sqlite3_MFAW.c	34313;"	d	file:
osUuidCreateSequential	sqlite3_MFAW.c	34321;"	d	file:
osWaitForSingleObject	sqlite3_MFAW.c	34188;"	d	file:
osWaitForSingleObjectEx	sqlite3_MFAW.c	34197;"	d	file:
osWideCharToMultiByte	sqlite3_MFAW.c	34165;"	d	file:
osWrite	sqlite3_MFAW.c	25880;"	d	file:
osWriteFile	sqlite3_MFAW.c	34170;"	d	file:
out2Prerelease	sqlite3_MFAW.c	/^static Mem *out2Prerelease(Vdbe *p, VdbeOp *pOp){$/;"	f	file:
overflow	sqlite3_MFAW.c	/^  u8 overflow;      \/* True if integer overflow seen *\/$/;"	m	struct:SumCtx	file:
overlap_ratio	mobibench.c	/^int overlap_ratio = 0; \/\/ overlap ratio for random write$/;"	v
overlap_ratio	mobibench_MFAW.c	/^int overlap_ratio = 0; \/\/ overlap ratio for random write$/;"	v
overload_function	sqlite3_MFAW.c	/^  int (*overload_function)(sqlite3*, const char *zFuncName, int nArg);$/;"	m	struct:sqlite3_api_routines	file:
owner	sqlite3_MFAW.c	/^  volatile DWORD owner;      \/* Thread holding this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
owner	sqlite3_MFAW.c	/^  volatile pthread_t owner;  \/* Thread that is within this mutex *\/$/;"	m	struct:sqlite3_mutex	file:
p	sqlite3_MFAW.c	/^    void *p;               \/* Generic pointer *\/$/;"	m	union:VdbeOp::__anon1	file:
p	sqlite3_MFAW.c	/^  void *p;          \/* Pointer to sampled record *\/$/;"	m	struct:IndexSample	file:
p1	sqlite3_MFAW.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:
p1	sqlite3_MFAW.c	/^  int p1;             \/* First operand *\/$/;"	m	struct:VdbeOp	file:
p1	sqlite3_MFAW.c	/^  signed char p1;     \/* First operand *\/$/;"	m	struct:VdbeOpList	file:
p2	sqlite3_MFAW.c	/^  int p1, p2;           \/* Operands of the opcode used to ends the loop *\/$/;"	m	struct:WhereLevel	file:
p2	sqlite3_MFAW.c	/^  int p2;             \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOp	file:
p2	sqlite3_MFAW.c	/^  signed char p2;     \/* Second parameter (often the jump destination) *\/$/;"	m	struct:VdbeOpList	file:
p3	sqlite3_MFAW.c	/^  int p3;             \/* The third parameter *\/$/;"	m	struct:VdbeOp	file:
p3	sqlite3_MFAW.c	/^  signed char p3;     \/* Third parameter *\/$/;"	m	struct:VdbeOpList	file:
p3	sqlite3_MFAW.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
p4	sqlite3_MFAW.c	/^  } p4;$/;"	m	struct:VdbeOp	typeref:union:VdbeOp::__anon1	file:
p4type	sqlite3_MFAW.c	/^  signed char p4type; \/* One of the P4_xxx constants for p4 *\/$/;"	m	struct:VdbeOp	file:
p5	sqlite3_MFAW.c	/^  u8 op, p3, p5;        \/* Opcode, P3 & P5 of the opcode that ends the loop *\/$/;"	m	struct:WhereLevel	file:
p5	sqlite3_MFAW.c	/^  u8 p5;              \/* Fifth parameter is an unsigned character *\/$/;"	m	struct:VdbeOp	file:
pAggInfo	sqlite3_MFAW.c	/^  AggInfo *pAggInfo;     \/* Used by TK_AGG_COLUMN and TK_AGG_FUNCTION *\/$/;"	m	struct:Expr	file:
pAggInfo	sqlite3_MFAW.c	/^  AggInfo *pAggInfo;   \/* Information about aggregates at this level *\/$/;"	m	struct:NameContext	file:
pAinc	sqlite3_MFAW.c	/^  AutoincInfo *pAinc;  \/* Information about AUTOINCREMENT counters *\/$/;"	m	struct:Parse	file:
pAndInfo	sqlite3_MFAW.c	/^    WhereAndInfo *pAndInfo; \/* Extra information if (eOperator& WO_AND)!=0 *\/$/;"	m	union:WhereTerm::__anon21	file:
pAppData	sqlite3_MFAW.c	/^  void *pAppData;                \/* Argument to xInit() and xShutdown() *\/$/;"	m	struct:sqlite3_mem_methods	file:
pAppData	sqlite3_MFAW.c	/^  void *pAppData;          \/* Pointer to application-specific data *\/$/;"	m	struct:sqlite3_vfs	file:
pArg	sqlite3_MFAW.c	/^  void *pArg;                \/* First arg to busy callback *\/$/;"	m	struct:BusyHandler	file:
pArg	sqlite3_MFAW.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods	file:
pArg	sqlite3_MFAW.c	/^  void *pArg;$/;"	m	struct:sqlite3_pcache_methods2	file:
pAuthArg	sqlite3_MFAW.c	/^  void *pAuthArg;               \/* 1st argument to the access auth function *\/$/;"	m	struct:sqlite3	file:
pAux	sqlite3_MFAW.c	/^  void *pAux;                          \/* pAux passed to create_module() *\/$/;"	m	struct:Module	file:
pAux	sqlite3_MFAW.c	/^  void *pAux;                     \/* Aux data pointer *\/$/;"	m	struct:AuxData	file:
pAuxData	sqlite3_MFAW.c	/^  AuxData *pAuxData;      \/* Linked list of auxdata allocations *\/$/;"	m	struct:Vdbe	file:
pBackup	sqlite3_MFAW.c	/^  sqlite3_backup *pBackup;    \/* Pointer to list of ongoing backup processes *\/$/;"	m	struct:Pager	file:
pBlob	sqlite3_MFAW.c	/^  sqlite3_blob *pBlob;            \/* If not NULL, blob handle to read node *\/$/;"	m	struct:Fts3SegReader	file:
pBlockingConnection	sqlite3_MFAW.c	/^  sqlite3 *pBlockingConnection; \/* Connection that caused SQLITE_LOCKED *\/$/;"	m	struct:sqlite3	file:
pBt	sqlite3_MFAW.c	/^  BtShared *pBt;            \/* The BtShared this cursor points to *\/$/;"	m	struct:BtCursor	file:
pBt	sqlite3_MFAW.c	/^  BtShared *pBt;       \/* Pointer to BtShared that this page is part of *\/$/;"	m	struct:MemPage	file:
pBt	sqlite3_MFAW.c	/^  BtShared *pBt;     \/* Sharable content of this btree *\/$/;"	m	struct:Btree	file:
pBt	sqlite3_MFAW.c	/^  BtShared *pBt;    \/* The tree being checked out *\/$/;"	m	struct:IntegrityCk	file:
pBt	sqlite3_MFAW.c	/^  Btree *pBt;           \/* Separate file holding temporary table *\/$/;"	m	struct:VdbeCursor	file:
pBt	sqlite3_MFAW.c	/^  Btree *pBt;          \/* The B*Tree structure for this database file *\/$/;"	m	struct:Db	file:
pBtree	sqlite3_MFAW.c	/^  Btree *pBtree;            \/* The Btree to which this cursor belongs *\/$/;"	m	struct:BtCursor	file:
pBtree	sqlite3_MFAW.c	/^  Btree *pBtree;        \/* Btree handle holding this lock *\/$/;"	m	struct:BtLock	file:
pBuf	sqlite3_MFAW.c	/^  void *pBuf;        \/* The content of the page *\/$/;"	m	struct:sqlite3_pcache_page	file:
pBusyHandlerArg	sqlite3_MFAW.c	/^  void *pBusyHandlerArg;      \/* Context argument for xBusyHandler *\/$/;"	m	struct:Pager	file:
pCache	sqlite3_MFAW.c	/^  PCache *pCache;                \/* Cache that owns this page *\/$/;"	m	struct:PgHdr	file:
pCache	sqlite3_MFAW.c	/^  PCache1 *pCache;               \/* Cache that currently owns this page *\/$/;"	m	struct:PgHdr1	file:
pCache	sqlite3_MFAW.c	/^  sqlite3_pcache *pCache;             \/* Pluggable cache module *\/$/;"	m	struct:PCache	file:
pCheck	sqlite3_MFAW.c	/^  ExprList *pCheck;    \/* All CHECK constraints *\/$/;"	m	struct:Table	file:
pChunk	sqlite3_MFAW.c	/^  FileChunk *pChunk;              \/* Specific chunk into which cursor points *\/$/;"	m	struct:FilePoint	file:
pChunk	sqlite3_MFAW.c	/^  struct RowSetChunk *pChunk;    \/* List of all chunk allocations *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetChunk	file:
pCodec	sqlite3_MFAW.c	/^  void *pCodec;               \/* First argument to xCodec... methods *\/$/;"	m	struct:Pager	file:
pColl	sqlite3_MFAW.c	/^    CollSeq *pColl;        \/* Used when p4type is P4_COLLSEQ *\/$/;"	m	union:VdbeOp::__anon1	file:
pCollNeededArg	sqlite3_MFAW.c	/^  void *pCollNeededArg;$/;"	m	struct:sqlite3	file:
pCols	sqlite3_MFAW.c	/^    ExprList *pCols;                \/* List of explicit column names, or NULL *\/$/;"	m	struct:With::Cte	file:
pColumns	sqlite3_MFAW.c	/^  IdList *pColumns;       \/* If this is an UPDATE OF <column-list> trigger,$/;"	m	struct:Trigger	file:
pCommitArg	sqlite3_MFAW.c	/^  void *pCommitArg;                 \/* Argument to xCommitCallback() *\/   $/;"	m	struct:sqlite3	file:
pConstExpr	sqlite3_MFAW.c	/^  ExprList *pConstExpr;\/* Constant expressions *\/$/;"	m	struct:Parse	file:
pContext	sqlite3_MFAW.c	/^  void *pContext;                   \/* pContext from when function registered *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
pContext	sqlite3_MFAW.c	/^  void *pContext;                 \/* Copy of pContext passed to s_r_g_c() *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
pContext	sqlite3_MFAW.c	/^  void *pContext;$/;"	m	struct:RtreeGeomCallback	file:
pCovidx	sqlite3_MFAW.c	/^    Index *pCovidx;       \/* Possible covering index for WHERE_MULTI_OR *\/$/;"	m	union:WhereLevel::__anon16	file:
pCsr	sqlite3_MFAW.c	/^  BtCursor *pCsr;         \/* Cursor pointing at blob row *\/$/;"	m	struct:Incrblob	file:
pCsr	sqlite3_MFAW.c	/^  Fts3Cursor *pCsr;               \/* Cursor snippet is being generated from *\/$/;"	m	struct:SnippetIter	file:
pCsr	sqlite3_MFAW.c	/^  Fts3Cursor *pCsr;               \/* FTS3 Cursor *\/$/;"	m	struct:LoadDoclistCtx	file:
pCsr	sqlite3_MFAW.c	/^  Fts3Cursor *pCsr;$/;"	m	struct:TermOffsetCtx	file:
pCsr	sqlite3_MFAW.c	/^  sqlite3_tokenizer_cursor *pCsr; \/* Cursor to iterate through zInput *\/$/;"	m	struct:Fts3tokCursor	file:
pCtx	sqlite3_MFAW.c	/^  sqlite3_context *pCtx;              \/* Write error message here *\/$/;"	m	struct:ParseContext	file:
pCurrent	sqlite3_MFAW.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:unix_syscall	file:
pCurrent	sqlite3_MFAW.c	/^  sqlite3_syscall_ptr pCurrent; \/* Current value of the system call *\/$/;"	m	struct:win_syscall	file:
pCursor	sqlite3_MFAW.c	/^  BtCursor *pCursor;    \/* A list of all open cursors *\/$/;"	m	struct:BtShared	file:
pCursor	sqlite3_MFAW.c	/^  BtCursor *pCursor;    \/* The cursor structure of the backend *\/$/;"	m	struct:VdbeCursor	file:
pCursor	sqlite3_MFAW.c	/^  Fts3Cursor *pCursor;            \/* FTS3 Cursor *\/$/;"	m	struct:MatchInfo	file:
pData	sqlite3_MFAW.c	/^  void *pData;                   \/* Page data *\/$/;"	m	struct:PgHdr	file:
pDbFd	sqlite3_MFAW.c	/^  sqlite3_file *pDbFd;       \/* File handle for the database file *\/$/;"	m	struct:Wal	file:
pDbPage	sqlite3_MFAW.c	/^  DbPage *pDbPage;     \/* Pager page handle *\/$/;"	m	struct:MemPage	file:
pDef	sqlite3_MFAW.c	/^    FuncDef *pDef;      \/* Used only when flags==MEM_Agg *\/$/;"	m	union:Mem::MemValue	file:
pDefault	sqlite3_MFAW.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:unix_syscall	file:
pDefault	sqlite3_MFAW.c	/^  sqlite3_syscall_ptr pDefault; \/* Default value *\/$/;"	m	struct:win_syscall	file:
pDeferred	sqlite3_MFAW.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred search tokens, if any *\/$/;"	m	struct:Fts3Cursor	file:
pDeferred	sqlite3_MFAW.c	/^  Fts3DeferredToken *pDeferred;   \/* Deferred token object for this token *\/$/;"	m	struct:Fts3PhraseToken	file:
pDelFrame	sqlite3_MFAW.c	/^  VdbeFrame *pDelFrame;   \/* List of frame objects to free on VM reset *\/$/;"	m	struct:Vdbe	file:
pDeleteNode	sqlite3_MFAW.c	/^  sqlite3_stmt *pDeleteNode;$/;"	m	struct:Rtree	file:
pDeleteParent	sqlite3_MFAW.c	/^  sqlite3_stmt *pDeleteParent;$/;"	m	struct:Rtree	file:
pDeleteRowid	sqlite3_MFAW.c	/^  sqlite3_stmt *pDeleteRowid;$/;"	m	struct:Rtree	file:
pDeleted	sqlite3_MFAW.c	/^  RtreeNode *pDeleted;$/;"	m	struct:Rtree	file:
pDest	sqlite3_MFAW.c	/^  Btree *pDest;            \/* Destination b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pDestDb	sqlite3_MFAW.c	/^  sqlite3* pDestDb;        \/* Destination database handle *\/$/;"	m	struct:sqlite3_backup	file:
pDestructor	sqlite3_MFAW.c	/^  FuncDestructor *pDestructor;   \/* Reference counted destructor function *\/$/;"	m	struct:FuncDef	file:
pDflt	sqlite3_MFAW.c	/^  Expr *pDflt;     \/* Default value of this column *\/$/;"	m	struct:Column	file:
pDfltColl	sqlite3_MFAW.c	/^  CollSeq *pDfltColl;           \/* The default collating sequence (BINARY) *\/$/;"	m	struct:sqlite3	file:
pDirty	sqlite3_MFAW.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDirty	sqlite3_MFAW.c	/^  PgHdr *pDirty;                 \/* Transient list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyNext	sqlite3_MFAW.c	/^  PgHdr *pDirtyNext;             \/* Next element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyPrev	sqlite3_MFAW.c	/^  PgHdr *pDirtyPrev;             \/* Previous element in list of dirty pages *\/$/;"	m	struct:PgHdr	file:
pDirtyTail	sqlite3_MFAW.c	/^  PgHdr *pDirty, *pDirtyTail;         \/* List of dirty pages in LRU order *\/$/;"	m	struct:PCache	file:
pDisconnect	sqlite3_MFAW.c	/^  VTable *pDisconnect;    \/* Disconnect these in next sqlite3_prepare() *\/$/;"	m	struct:sqlite3	file:
pEList	sqlite3_MFAW.c	/^  ExprList *pEList;      \/* The fields of the result *\/$/;"	m	struct:Select	file:
pEList	sqlite3_MFAW.c	/^  ExprList *pEList;    \/* Optional list of result-set columns *\/$/;"	m	struct:NameContext	file:
pEnd	sqlite3_MFAW.c	/^  void *pEnd;             \/* First byte past end of available space *\/$/;"	m	struct:Lookaside	file:
pEnd	sqlite3_MFAW.c	/^  void *pStart, *pEnd;           \/* Bounds of pagecache malloc range *\/$/;"	m	struct:PCacheGlobal	file:
pEntry	sqlite3_MFAW.c	/^  struct RowSetEntry *pEntry;    \/* List of entries using pRight *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pErr	sqlite3_MFAW.c	/^  sqlite3_value *pErr;          \/* Most recent error message *\/$/;"	m	struct:sqlite3	file:
pExpr	sqlite3_MFAW.c	/^    Expr *pExpr;             \/* Expression encoding the function *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
pExpr	sqlite3_MFAW.c	/^    Expr *pExpr;             \/* The original expression *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
pExpr	sqlite3_MFAW.c	/^    Expr *pExpr;            \/* The list of expressions *\/$/;"	m	struct:ExprList::ExprList_item	file:
pExpr	sqlite3_MFAW.c	/^  Expr *pExpr;            \/* Pointer to the subexpression that is this term *\/$/;"	m	struct:WhereTerm	file:
pExpr	sqlite3_MFAW.c	/^  Expr *pExpr;          \/* The expression parse tree *\/$/;"	m	struct:ExprSpan	file:
pExpr	sqlite3_MFAW.c	/^  Fts3Expr *pExpr;                \/* Parsed MATCH query string *\/$/;"	m	struct:Fts3Cursor	file:
pExpr	sqlite3_MFAW.c	/^  Fts3Expr *pExpr;                \/* Pointer to phrase expression *\/$/;"	m	struct:LcsIterator	file:
pExprList	sqlite3_MFAW.c	/^  ExprList *pExprList; \/* SET clause for UPDATE. *\/$/;"	m	struct:TriggerStep	file:
pExtra	sqlite3_MFAW.c	/^  void *pExtra;                  \/* Extra content *\/$/;"	m	struct:PgHdr	file:
pExtra	sqlite3_MFAW.c	/^  void *pExtra;      \/* Extra information associated with the page *\/$/;"	m	struct:sqlite3_pcache_page	file:
pFKey	sqlite3_MFAW.c	/^  FKey *pFKey;         \/* Linked list of all foreign keys in this table *\/$/;"	m	struct:Table	file:
pFd	sqlite3_MFAW.c	/^  sqlite3_file *pFd;              \/* File handle *\/$/;"	m	struct:SorterFile	file:
pFd	sqlite3_MFAW.c	/^  sqlite3_file *pFd;              \/* File handle to write to *\/$/;"	m	struct:PmaWriter	file:
pFd	sqlite3_MFAW.c	/^  sqlite3_file *pFd;           \/* The WAL file to which we write *\/$/;"	m	struct:WalWriter	file:
pFd	sqlite3_MFAW.c	/^  sqlite3_file *pFd;          \/* File handle we are reading from *\/$/;"	m	struct:PmaReader	file:
pFiller	sqlite3_MFAW.c	/^  void *pFiller;      \/* So that sizeof(Mem) is a multiple of 8 *\/$/;"	m	struct:Mem	file:
pFilter	sqlite3_MFAW.c	/^  Fts3SegFilter *pFilter;         \/* Pointer to filter object *\/$/;"	m	struct:Fts3MultiSegReader	file:
pFirst	sqlite3_MFAW.c	/^  FileChunk *pFirst;              \/* Head of in-memory chunk-list *\/$/;"	m	struct:MemJournal	file:
pFirst	sqlite3_MFAW.c	/^  struct MemBlockHdr *pFirst;$/;"	m	struct:__anon9	typeref:struct:__anon9::MemBlockHdr	file:
pFirst	sqlite3_MFAW.c	/^  unixShm *pFirst;           \/* All unixShm objects pointing to this *\/$/;"	m	struct:unixShmNode	file:
pFirst	sqlite3_MFAW.c	/^  winShm *pFirst;            \/* All winShm objects pointing to this *\/$/;"	m	struct:winShmNode	file:
pForest	sqlite3_MFAW.c	/^  struct RowSetEntry *pForest;   \/* List of binary trees of entries *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pFrame	sqlite3_MFAW.c	/^    VdbeFrame *pFrame;  \/* Used when flags==MEM_Frame *\/$/;"	m	union:Mem::MemValue	file:
pFrame	sqlite3_MFAW.c	/^  VdbeFrame *pFrame;      \/* Parent frame *\/$/;"	m	struct:Vdbe	file:
pFree	sqlite3_MFAW.c	/^  LookasideSlot *pFree;   \/* List of available buffers *\/$/;"	m	struct:Lookaside	file:
pFree	sqlite3_MFAW.c	/^  PgFreeslot *pFree;             \/* Free page blocks *\/$/;"	m	struct:PCacheGlobal	file:
pFree	sqlite3_MFAW.c	/^  void *pFree;            \/* Free this when deleting the vdbe *\/$/;"	m	struct:Vdbe	file:
pFresh	sqlite3_MFAW.c	/^  struct RowSetEntry *pFresh;    \/* Source of new entry objects *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pFrom	sqlite3_MFAW.c	/^  Table *pFrom;     \/* Table containing the REFERENCES clause (aka: Child) *\/$/;"	m	struct:FKey	file:
pFts3Tab	sqlite3_MFAW.c	/^  Fts3Table *pFts3Tab;$/;"	m	struct:Fts3auxTable	file:
pFunc	sqlite3_MFAW.c	/^    FuncDef *pFunc;          \/* The aggregate function implementation *\/$/;"	m	struct:AggInfo::AggInfo_func	file:
pFunc	sqlite3_MFAW.c	/^    FuncDef *pFunc;        \/* Used when p4type is P4_FUNCDEF *\/$/;"	m	union:VdbeOp::__anon1	file:
pFunc	sqlite3_MFAW.c	/^  FuncDef *pFunc;       \/* Pointer to function information *\/$/;"	m	struct:sqlite3_context	file:
pGroup	sqlite3_MFAW.c	/^  PGroup *pGroup;                     \/* PGroup this cache belongs to *\/$/;"	m	struct:PCache1	file:
pGroupBy	sqlite3_MFAW.c	/^  ExprList *pGroupBy;     \/* The group by clause *\/$/;"	m	struct:AggInfo	file:
pGroupBy	sqlite3_MFAW.c	/^  ExprList *pGroupBy;    \/* The GROUP BY clause *\/$/;"	m	struct:Select	file:
pHasContent	sqlite3_MFAW.c	/^  Bitvec *pHasContent;  \/* Set of pages moved to free-list this transaction *\/$/;"	m	struct:BtShared	file:
pHash	sqlite3_MFAW.c	/^  FuncDef *pHash;      \/* Next with a different name but the same hash *\/$/;"	m	struct:FuncDef	file:
pHaving	sqlite3_MFAW.c	/^  Expr *pHaving;         \/* The HAVING clause *\/$/;"	m	struct:Select	file:
pHead	sqlite3_MFAW.c	/^  char *pHead;                    \/* Position list data following iHead *\/$/;"	m	struct:SnippetPhrase	file:
pHeap	sqlite3_MFAW.c	/^  void *pHeap;                      \/* Heap storage space *\/$/;"	m	struct:Sqlite3Config	file:
pI64	sqlite3_MFAW.c	/^    i64 *pI64;             \/* Used when p4type is P4_INT64 *\/$/;"	m	union:VdbeOp::__anon1	file:
pIOPS_fp	mobibench.c	/^FILE* pIOPS_fp; \/\/ output for print IOPS every second $/;"	v
pIOPS_fp	mobibench_MFAW.c	/^FILE* pIOPS_fp; \/\/ output for print IOPS every second $/;"	v
pId	sqlite3_MFAW.c	/^  struct vxworksFileId *pId;          \/* Unique file ID *\/$/;"	m	struct:unixFile	typeref:struct:unixFile::vxworksFileId	file:
pId	sqlite3_MFAW.c	/^  struct vxworksFileId *pId;  \/* Unique file ID for vxworks. *\/$/;"	m	struct:unixFileId	typeref:struct:unixFileId::vxworksFileId	file:
pIdList	sqlite3_MFAW.c	/^  IdList *pIdList;     \/* Column names for INSERT *\/$/;"	m	struct:TriggerStep	file:
pIdx	sqlite3_MFAW.c	/^  Index *pIdx;$/;"	m	struct:ValueNewStat4Ctx	file:
pIn	sqlite3_MFAW.c	/^  void *pIn;                     \/* Argument to the thread *\/$/;"	m	struct:SQLiteThread	file:
pIn	sqlite3_MFAW.c	/^  void *pIn;               \/* Argument to xTask *\/$/;"	m	struct:SQLiteThread	file:
pInJournal	sqlite3_MFAW.c	/^  Bitvec *pInJournal;         \/* One bit for each page in the database file *\/$/;"	m	struct:Pager	file:
pInSavepoint	sqlite3_MFAW.c	/^  Bitvec *pInSavepoint;        \/* Set of pages in this savepoint *\/$/;"	m	struct:PagerSavepoint	file:
pIncr	sqlite3_MFAW.c	/^  IncrMerger *pIncr;          \/* Incremental merger *\/$/;"	m	struct:PmaReader	file:
pIndex	sqlite3_MFAW.c	/^      Index *pIndex;         \/* Index used, or NULL *\/$/;"	m	struct:WhereLoop::__anon18::__anon19	file:
pIndex	sqlite3_MFAW.c	/^    Index *pIndex;    \/* Index structure corresponding to zIndex, if any *\/$/;"	m	struct:SrcList::SrcList_item	file:
pIndex	sqlite3_MFAW.c	/^  Index *pIndex;       \/* List of SQL indexes on this table. *\/$/;"	m	struct:Table	file:
pInfo	sqlite3_MFAW.c	/^  sqlite3_rtree_query_info *pInfo;  \/* xGeom and xQueryFunc argument *\/$/;"	m	struct:RtreeConstraint	file:
pInitMutex	sqlite3_MFAW.c	/^  sqlite3_mutex *pInitMutex;        \/* Mutex used by sqlite3_initialize() *\/$/;"	m	struct:Sqlite3Config	file:
pInode	sqlite3_MFAW.c	/^  unixInodeInfo *pInode;              \/* Info about locks on this inode *\/$/;"	m	struct:unixFile	file:
pInode	sqlite3_MFAW.c	/^  unixInodeInfo *pInode;     \/* unixInodeInfo that owns this SHM node *\/$/;"	m	struct:unixShmNode	file:
pInput	sqlite3_MFAW.c	/^  const char *pInput;          \/* input we are tokenizing *\/$/;"	m	struct:simple_tokenizer_cursor	file:
pIter	sqlite3_MFAW.c	/^  UBreakIterator *pIter;      \/* ICU break-iterator object *\/$/;"	m	struct:IcuCursor	file:
pKey	sqlite3_MFAW.c	/^  const char *pKey;            \/* Key associated with this element *\/$/;"	m	struct:HashElem	file:
pKey	sqlite3_MFAW.c	/^  void *pKey;               \/* Saved key that was cursor last known position *\/$/;"	m	struct:BtCursor	file:
pKey	sqlite3_MFAW.c	/^  void *pKey; int nKey;      \/* Key associated with this element *\/$/;"	m	struct:Fts3HashElem	file:
pKeyInfo	sqlite3_MFAW.c	/^    KeyInfo *pKeyInfo;     \/* Used when p4type is P4_KEYINFO *\/$/;"	m	union:VdbeOp::__anon1	file:
pKeyInfo	sqlite3_MFAW.c	/^  KeyInfo *pKeyInfo;              \/* How to compare records *\/$/;"	m	struct:VdbeSorter	file:
pKeyInfo	sqlite3_MFAW.c	/^  KeyInfo *pKeyInfo;    \/* Info about index keys needed by index cursors *\/$/;"	m	struct:VdbeCursor	file:
pKeyInfo	sqlite3_MFAW.c	/^  KeyInfo *pKeyInfo;  \/* Collation and sort-order information *\/$/;"	m	struct:UnpackedRecord	file:
pKeyInfo	sqlite3_MFAW.c	/^  struct KeyInfo *pKeyInfo; \/* Argument passed to comparison function *\/$/;"	m	struct:BtCursor	typeref:struct:BtCursor::KeyInfo	file:
pLast	sqlite3_MFAW.c	/^  TriggerStep *pLast;  \/* Last element in link-list. Valid for 1st elem only *\/$/;"	m	struct:TriggerStep	file:
pLast	sqlite3_MFAW.c	/^  struct MemBlockHdr *pLast;$/;"	m	struct:__anon9	typeref:struct:__anon9::MemBlockHdr	file:
pLast	sqlite3_MFAW.c	/^  struct RowSetEntry *pLast;     \/* Last entry on the pEntry list *\/$/;"	m	struct:RowSet	typeref:struct:RowSet::RowSetEntry	file:
pLeft	sqlite3_MFAW.c	/^  Expr *pLeft;           \/* Left subnode *\/$/;"	m	struct:Expr	file:
pLeft	sqlite3_MFAW.c	/^  Fts3Expr *pLeft;           \/* Left operand *\/$/;"	m	struct:Fts3Expr	file:
pLeft	sqlite3_MFAW.c	/^  struct RowSetEntry *pLeft;    \/* Left subtree (smaller entries) *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:
pLeftmost	sqlite3_MFAW.c	/^  SegmentNode *pLeftmost;         \/* Pointer to left-most node of this depth *\/$/;"	m	struct:SegmentNode	file:
pLimit	sqlite3_MFAW.c	/^  Expr *pLimit;          \/* LIMIT expression. NULL means not used. *\/$/;"	m	struct:Select	file:
pLimit	sqlite3_MFAW.c	/^  Expr *pLimit;    \/* The LIMIT expression.  NULL if there is no limit *\/$/;"	m	struct:LimitVal	file:
pList	sqlite3_MFAW.c	/^    ExprList *pList;     \/* op = IN, EXISTS, SELECT, CASE, FUNCTION, BETWEEN *\/$/;"	m	union:Expr::__anon4	file:
pList	sqlite3_MFAW.c	/^  PendingList *pList;             \/* Doclist is assembled here *\/$/;"	m	struct:Fts3DeferredToken	file:
pList	sqlite3_MFAW.c	/^  SorterRecord *pList;            \/* Linked list of records *\/$/;"	m	struct:SorterList	file:
pList	sqlite3_MFAW.c	/^  char *pList;                    \/* Pointer to start of phrase position list *\/$/;"	m	struct:SnippetPhrase	file:
pList	sqlite3_MFAW.c	/^  char *pList;                    \/* Position-list *\/$/;"	m	struct:TermOffset	file:
pList	sqlite3_MFAW.c	/^  char *pList;                   \/* Pointer to position list following iDocid *\/$/;"	m	struct:Fts3Doclist	file:
pList	sqlite3_MFAW.c	/^  char *pList;$/;"	m	struct:TokenDoclist	file:
pLock	sqlite3_MFAW.c	/^  BtLock *pLock;        \/* List of locks held on this shared-btree struct *\/$/;"	m	struct:BtShared	file:
pLogArg	sqlite3_MFAW.c	/^  void *pLogArg;                       \/* First argument to xLog() *\/$/;"	m	struct:Sqlite3Config	file:
pLoops	sqlite3_MFAW.c	/^  WhereLoop *pLoops;        \/* List of all WhereLoop objects *\/$/;"	m	struct:WhereInfo	file:
pLruHead	sqlite3_MFAW.c	/^  PgHdr1 *pLruHead, *pLruTail;   \/* LRU list of unpinned pages *\/$/;"	m	struct:PGroup	file:
pLruNext	sqlite3_MFAW.c	/^  PgHdr1 *pLruNext;              \/* Next in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pLruPrev	sqlite3_MFAW.c	/^  PgHdr1 *pLruPrev;              \/* Previous in LRU list of unpinned pages *\/$/;"	m	struct:PgHdr1	file:
pLruTail	sqlite3_MFAW.c	/^  PgHdr1 *pLruHead, *pLruTail;   \/* LRU list of unpinned pages *\/$/;"	m	struct:PGroup	file:
pMap	sqlite3_MFAW.c	/^    void *pMap;$/;"	m	struct:winShmNode::ShmRegion	file:
pMapRegion	sqlite3_MFAW.c	/^  void *pMapRegion;                   \/* Memory mapped region *\/$/;"	m	struct:unixFile	file:
pMapRegion	sqlite3_MFAW.c	/^  void *pMapRegion;             \/* Area memory mapped *\/$/;"	m	struct:winFile	file:
pMem	sqlite3_MFAW.c	/^    Mem *pMem;             \/* Used when p4type is P4_MEM *\/$/;"	m	union:VdbeOp::__anon1	file:
pMem	sqlite3_MFAW.c	/^  Mem *pMem;            \/* Memory cell used to store aggregate context *\/$/;"	m	struct:sqlite3_context	file:
pMerger	sqlite3_MFAW.c	/^  MergeEngine *pMerger;           \/* Merge engine thread reads data from *\/$/;"	m	struct:IncrMerger	file:
pMerger	sqlite3_MFAW.c	/^  MergeEngine *pMerger;           \/* Or here, if bUseThreads==0 *\/$/;"	m	struct:VdbeSorter	file:
pMethod	sqlite3_MFAW.c	/^  const sqlite3_io_methods *pMethod; \/*** Must be first ***\/$/;"	m	struct:winFile	file:
pMethod	sqlite3_MFAW.c	/^  sqlite3_io_methods *pMethod;    \/* I\/O methods on journal files *\/$/;"	m	struct:JournalFile	file:
pMethod	sqlite3_MFAW.c	/^  sqlite3_io_methods *pMethod;    \/* Parent class. MUST BE FIRST *\/$/;"	m	struct:MemJournal	file:
pMethod	sqlite3_MFAW.c	/^  sqlite3_io_methods const *pMethod;  \/* Always the first entry *\/$/;"	m	struct:unixFile	file:
pMethods	sqlite3_MFAW.c	/^  const struct sqlite3_io_methods *pMethods;  \/* Methods for an open file *\/$/;"	m	struct:sqlite3_file	typeref:struct:sqlite3_file::sqlite3_io_methods	file:
pMmapFreelist	sqlite3_MFAW.c	/^  PgHdr *pMmapFreelist;       \/* List of free mmap page headers (pDirty) *\/$/;"	m	struct:Pager	file:
pMod	sqlite3_MFAW.c	/^  Module *pMod;             \/* Pointer to module implementation *\/$/;"	m	struct:VTable	file:
pMod	sqlite3_MFAW.c	/^  const sqlite3_tokenizer_module *pMod;$/;"	m	struct:Fts3tokTable	file:
pModule	sqlite3_MFAW.c	/^  const sqlite3_module *pModule;       \/* Callback pointers *\/$/;"	m	struct:Module	file:
pModule	sqlite3_MFAW.c	/^  const sqlite3_module *pModule;  \/* The module for this virtual table *\/$/;"	m	struct:sqlite3_vtab	file:
pModule	sqlite3_MFAW.c	/^  const sqlite3_tokenizer_module *pModule;  \/* The module for this tokenizer *\/$/;"	m	struct:sqlite3_tokenizer	file:
pNC	sqlite3_MFAW.c	/^    NameContext *pNC;                          \/* Naming context *\/$/;"	m	union:Walker::__anon8	file:
pName	sqlite3_MFAW.c	/^  const Token *pName; \/* Name of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:
pNew	sqlite3_MFAW.c	/^  WhereLoop *pNew;          \/* Template WhereLoop *\/$/;"	m	struct:WhereLoopBuilder	file:
pNewTable	sqlite3_MFAW.c	/^  Table *pNewTable;         \/* A table being constructed by CREATE TABLE *\/$/;"	m	struct:Parse	file:
pNewTrigger	sqlite3_MFAW.c	/^  Trigger *pNewTrigger;     \/* Trigger under construct by a CREATE TRIGGER *\/$/;"	m	struct:Parse	file:
pNext	sqlite3_MFAW.c	/^    SorterRecord *pNext;          \/* Pointer to next record in list *\/$/;"	m	union:SorterRecord::__anon14	file:
pNext	sqlite3_MFAW.c	/^  AutoincInfo *pNext;   \/* Next info block in a list of them all *\/$/;"	m	struct:AutoincInfo	file:
pNext	sqlite3_MFAW.c	/^  AuxData *pNext;                 \/* Next element in list *\/$/;"	m	struct:AuxData	file:
pNext	sqlite3_MFAW.c	/^  BtCursor *pNext, *pPrev;  \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor	file:
pNext	sqlite3_MFAW.c	/^  BtLock *pNext;        \/* Next in BtShared.pLock list *\/$/;"	m	struct:BtLock	file:
pNext	sqlite3_MFAW.c	/^  BtShared *pNext;      \/* Next on a list of sharable BtShared structs *\/$/;"	m	struct:BtShared	file:
pNext	sqlite3_MFAW.c	/^  Btree *pNext;      \/* List of other sharable Btrees from the same db *\/$/;"	m	struct:Btree	file:
pNext	sqlite3_MFAW.c	/^  FileChunk *pNext;               \/* Next chunk in the journal *\/$/;"	m	struct:FileChunk	file:
pNext	sqlite3_MFAW.c	/^  Fts3DeferredToken *pNext;       \/* Next in list of deferred tokens *\/$/;"	m	struct:Fts3DeferredToken	file:
pNext	sqlite3_MFAW.c	/^  FuncDef *pNext;      \/* Next function with same name *\/$/;"	m	struct:FuncDef	file:
pNext	sqlite3_MFAW.c	/^  Index *pNext;            \/* The next index associated with the same table *\/$/;"	m	struct:Index	file:
pNext	sqlite3_MFAW.c	/^  LookasideSlot *pNext;    \/* Next buffer in the list of free buffers *\/$/;"	m	struct:LookasideSlot	file:
pNext	sqlite3_MFAW.c	/^  NameContext *pNext;  \/* Next outer name context.  NULL for outermost *\/$/;"	m	struct:NameContext	file:
pNext	sqlite3_MFAW.c	/^  PgFreeslot *pNext;  \/* Next free slot *\/$/;"	m	struct:PgFreeslot	file:
pNext	sqlite3_MFAW.c	/^  PgHdr1 *pNext;                 \/* Next in hash table chain *\/$/;"	m	struct:PgHdr1	file:
pNext	sqlite3_MFAW.c	/^  RtreeNode *pNext;           \/* Next node in this hash collision chain *\/$/;"	m	struct:RtreeNode	file:
pNext	sqlite3_MFAW.c	/^  Savepoint *pNext;                   \/* Parent savepoint (if any) *\/$/;"	m	struct:Savepoint	file:
pNext	sqlite3_MFAW.c	/^  Select *pNext;         \/* Next select to the left in a compound *\/$/;"	m	struct:Select	file:
pNext	sqlite3_MFAW.c	/^  SubProgram *pNext;            \/* Next sub-program already visited *\/$/;"	m	struct:SubProgram	file:
pNext	sqlite3_MFAW.c	/^  Trigger *pNext;         \/* Next trigger associated with the table *\/$/;"	m	struct:Trigger	file:
pNext	sqlite3_MFAW.c	/^  TriggerPrg *pNext;      \/* Next entry in Parse.pTriggerPrg list *\/$/;"	m	struct:TriggerPrg	file:
pNext	sqlite3_MFAW.c	/^  TriggerStep *pNext;  \/* Next in the link-list *\/$/;"	m	struct:TriggerStep	file:
pNext	sqlite3_MFAW.c	/^  UnixUnusedFd *pNext;      \/* Next unused file descriptor on same file *\/$/;"	m	struct:UnixUnusedFd	file:
pNext	sqlite3_MFAW.c	/^  VTable *pNext;            \/* Next in linked list (see above) *\/$/;"	m	struct:VTable	file:
pNext	sqlite3_MFAW.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:
pNext	sqlite3_MFAW.c	/^  sqlite3_backup *pNext;   \/* Next backup associated with source pager *\/$/;"	m	struct:sqlite3_backup	file:
pNext	sqlite3_MFAW.c	/^  sqlite3_vfs *pNext;      \/* Next registered VFS *\/$/;"	m	struct:sqlite3_vfs	file:
pNext	sqlite3_MFAW.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::MemBlockHdr	file:
pNext	sqlite3_MFAW.c	/^  struct ScratchFreeslot *pNext;   \/* Next unused scratch buffer *\/$/;"	m	struct:ScratchFreeslot	typeref:struct:ScratchFreeslot::ScratchFreeslot	file:
pNext	sqlite3_MFAW.c	/^  struct vxworksFileId *pNext;  \/* Next in a list of them all *\/$/;"	m	struct:vxworksFileId	typeref:struct:vxworksFileId::vxworksFileId	file:
pNext	sqlite3_MFAW.c	/^  unixInodeInfo *pNext;           \/* List of all unixInodeInfo objects *\/$/;"	m	struct:unixInodeInfo	file:
pNext	sqlite3_MFAW.c	/^  unixShm *pNext;            \/* Next unixShm with the same unixShmNode *\/$/;"	m	struct:unixShm	file:
pNext	sqlite3_MFAW.c	/^  winShm *pNext;             \/* Next winShm with the same winShmNode *\/$/;"	m	struct:winShm	file:
pNext	sqlite3_MFAW.c	/^  winShmNode *pNext;         \/* Next in list of all winShmNode objects *\/$/;"	m	struct:winShmNode	file:
pNextBlocked	sqlite3_MFAW.c	/^  sqlite3 *pNextBlocked;        \/* Next in list of all blocked connections *\/$/;"	m	struct:sqlite3	file:
pNextChunk	sqlite3_MFAW.c	/^  struct RowSetChunk *pNextChunk;        \/* Next chunk on list of them all *\/$/;"	m	struct:RowSetChunk	typeref:struct:RowSetChunk::RowSetChunk	file:
pNextDocid	sqlite3_MFAW.c	/^  char *pNextDocid;              \/* Pointer to next docid *\/$/;"	m	struct:Fts3Doclist	file:
pNextFrom	sqlite3_MFAW.c	/^  FKey *pNextFrom;  \/* Next FKey with the same in pFrom. Next parent of pFrom *\/$/;"	m	struct:FKey	file:
pNextId	sqlite3_MFAW.c	/^  char *pNextId;                  \/* Pointer into the body of aDoclist *\/$/;"	m	struct:Fts3Cursor	file:
pNextLoop	sqlite3_MFAW.c	/^  WhereLoop *pNextLoop; \/* Next WhereLoop object in the WhereClause *\/$/;"	m	struct:WhereLoop	file:
pNextTo	sqlite3_MFAW.c	/^  FKey *pNextTo;    \/* Next with the same zTo. Next child of zTo. *\/$/;"	m	struct:FKey	file:
pNextZombie	sqlite3_MFAW.c	/^  Table *pNextZombie;  \/* Next on the Parse.pZombieTab list *\/$/;"	m	struct:Table	file:
pOffset	sqlite3_MFAW.c	/^  Expr *pOffset;         \/* OFFSET expression. NULL means not used. *\/$/;"	m	struct:Select	file:
pOffset	sqlite3_MFAW.c	/^  Expr *pOffset;   \/* The OFFSET expression.  NULL if there is none *\/$/;"	m	struct:LimitVal	file:
pOffsetList	sqlite3_MFAW.c	/^  char *pOffsetList;$/;"	m	struct:Fts3SegReader	file:
pOldMethod	sqlite3_MFAW.c	/^  sqlite3_io_methods const *pOldMethod;     \/* Original I\/O methods for close *\/$/;"	m	struct:proxyLockingContext	file:
pOn	sqlite3_MFAW.c	/^    Expr *pOn;        \/* The ON clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:
pOrInfo	sqlite3_MFAW.c	/^    WhereOrInfo *pOrInfo;   \/* Extra information if (eOperator & WO_OR)!=0 *\/$/;"	m	union:WhereTerm::__anon21	file:
pOrPoslist	sqlite3_MFAW.c	/^  char *pOrPoslist;$/;"	m	struct:Fts3Phrase	file:
pOrSet	sqlite3_MFAW.c	/^  WhereOrSet *pOrSet;       \/* Record best loops here, if not NULL *\/$/;"	m	struct:WhereLoopBuilder	file:
pOrderBy	sqlite3_MFAW.c	/^  ExprList *pOrderBy;       \/* ORDER BY clause *\/$/;"	m	struct:WhereLoopBuilder	file:
pOrderBy	sqlite3_MFAW.c	/^  ExprList *pOrderBy;       \/* The ORDER BY clause or NULL *\/$/;"	m	struct:WhereInfo	file:
pOrderBy	sqlite3_MFAW.c	/^  ExprList *pOrderBy;    \/* The ORDER BY clause *\/$/;"	m	struct:Select	file:
pOrderBy	sqlite3_MFAW.c	/^  ExprList *pOrderBy;   \/* The ORDER BY (or GROUP BY clause) *\/$/;"	m	struct:SortCtx	file:
pOrderBy	sqlite3_MFAW.c	/^  ExprList *pOrderBy;  \/* Key columns for SRT_Queue and SRT_DistQueue *\/$/;"	m	struct:SelectDest	file:
pOrigWC	sqlite3_MFAW.c	/^  WhereClause *pOrigWC;      \/* Original, innermost WhereClause *\/$/;"	m	struct:WhereScan	file:
pOut	sqlite3_MFAW.c	/^  Mem *pOut;            \/* The return value is stored here *\/$/;"	m	struct:sqlite3_context	file:
pOut	sqlite3_MFAW.c	/^  void *pOut;                    \/* Result returned by the thread *\/$/;"	m	struct:SQLiteThread	file:
pOuter	sqlite3_MFAW.c	/^  WhereClause *pOuter;     \/* Outer conjunction *\/$/;"	m	struct:WhereClause	file:
pOuter	sqlite3_MFAW.c	/^  With *pOuter;                   \/* Containing WITH clause, or NULL *\/$/;"	m	struct:With	file:
pPCache	sqlite3_MFAW.c	/^  PCache *pPCache;            \/* Pointer to page cache object *\/$/;"	m	struct:Pager	file:
pPage	sqlite3_MFAW.c	/^  sqlite3_pcache_page *pPage;    \/* Pcache object page handle *\/$/;"	m	struct:PgHdr	file:
pPage	sqlite3_MFAW.c	/^  void *pPage;                      \/* Page cache memory *\/$/;"	m	struct:Sqlite3Config	file:
pPage1	sqlite3_MFAW.c	/^  MemPage *pPage1;      \/* First page of the database *\/$/;"	m	struct:BtShared	file:
pPage1	sqlite3_MFAW.c	/^  PgHdr *pPage1;                      \/* Reference to page 1 *\/$/;"	m	struct:PCache	file:
pPager	sqlite3_MFAW.c	/^  Pager *pPager;                 \/* The pager this page is part of *\/$/;"	m	struct:PgHdr	file:
pPager	sqlite3_MFAW.c	/^  Pager *pPager;        \/* The page cache *\/$/;"	m	struct:BtShared	file:
pPager	sqlite3_MFAW.c	/^  Pager *pPager;    \/* The associated pager.  Also accessible by pBt->pPager *\/$/;"	m	struct:IntegrityCk	file:
pParent	sqlite3_MFAW.c	/^  Fts3Expr *pParent;         \/* pParent->pLeft==this or pParent->pRight==this *\/$/;"	m	struct:Fts3Expr	file:
pParent	sqlite3_MFAW.c	/^  RtreeNode *pParent;         \/* Parent node *\/$/;"	m	struct:RtreeNode	file:
pParent	sqlite3_MFAW.c	/^  SegmentNode *pParent;           \/* Parent node (or NULL for root node) *\/$/;"	m	struct:SegmentNode	file:
pParent	sqlite3_MFAW.c	/^  VdbeFrame *pParent;     \/* Parent of this frame, or NULL if parent is main *\/$/;"	m	struct:VdbeFrame	file:
pParse	sqlite3_MFAW.c	/^  Parse *pParse;                            \/* Parser context.  *\/$/;"	m	struct:Walker	file:
pParse	sqlite3_MFAW.c	/^  Parse *pParse;              \/* The Parse structure *\/$/;"	m	struct:AuthContext	file:
pParse	sqlite3_MFAW.c	/^  Parse *pParse;            \/* Parsing and code generating context *\/$/;"	m	struct:WhereInfo	file:
pParse	sqlite3_MFAW.c	/^  Parse *pParse;          \/* Parsing context used to create this Vdbe *\/$/;"	m	struct:Vdbe	file:
pParse	sqlite3_MFAW.c	/^  Parse *pParse;       \/* The parser *\/$/;"	m	struct:NameContext	file:
pParse	sqlite3_MFAW.c	/^  Parse *pParse;      \/* The parsing context.  Error messages written here *\/$/;"	m	struct:DbFixer	file:
pParse	sqlite3_MFAW.c	/^  Parse *pParse;$/;"	m	struct:ValueNewStat4Ctx	file:
pPartIdxWhere	sqlite3_MFAW.c	/^  Expr *pPartIdxWhere;     \/* WHERE clause for partial indices *\/$/;"	m	struct:Index	file:
pPayload	sqlite3_MFAW.c	/^  u8 *pPayload;  \/* Pointer to the start of payload *\/$/;"	m	struct:CellInfo	file:
pPg	sqlite3_MFAW.c	/^  DbPage *pPg;$/;"	m	struct:StatPage	file:
pPhrase	sqlite3_MFAW.c	/^  Fts3Phrase *pPhrase;            \/* The phrase the token belongs to *\/$/;"	m	struct:Fts3TokenAndCost	file:
pPhrase	sqlite3_MFAW.c	/^  Fts3Phrase *pPhrase;       \/* Valid if eType==FTSQUERY_PHRASE *\/$/;"	m	struct:Fts3Expr	file:
pPrev	sqlite3_MFAW.c	/^  BtCursor *pNext, *pPrev;  \/* Forms a linked list of all cursors *\/$/;"	m	struct:BtCursor	file:
pPrev	sqlite3_MFAW.c	/^  Btree *pPrev;      \/* Back pointer of the same list *\/$/;"	m	struct:Btree	file:
pPrev	sqlite3_MFAW.c	/^  Vdbe *pPrev,*pNext;     \/* Linked list of VDBEs with the same Vdbe.db *\/$/;"	m	struct:Vdbe	file:
pPrev	sqlite3_MFAW.c	/^  struct MemBlockHdr *pNext, *pPrev;  \/* Linked list of all unfreed memory *\/$/;"	m	struct:MemBlockHdr	typeref:struct:MemBlockHdr::	file:
pPrev	sqlite3_MFAW.c	/^  unixInodeInfo *pPrev;           \/*    .... doubly linked *\/$/;"	m	struct:unixInodeInfo	file:
pPrevTo	sqlite3_MFAW.c	/^  FKey *pPrevTo;    \/* Previous with the same zTo *\/$/;"	m	struct:FKey	file:
pPrior	sqlite3_MFAW.c	/^  Select *pPrior;        \/* Prior select in a compound select statement *\/$/;"	m	struct:Select	file:
pPrior	sqlite3_MFAW.c	/^  VtabCtx *pPrior;    \/* Parent context (if any) *\/$/;"	m	struct:VtabCtx	file:
pProfileArg	sqlite3_MFAW.c	/^  void *pProfileArg;                        \/* Argument to profile function *\/$/;"	m	struct:sqlite3	file:
pProgram	sqlite3_MFAW.c	/^    SubProgram *pProgram;  \/* Used when p4type is P4_SUBPROGRAM *\/$/;"	m	union:VdbeOp::__anon1	file:
pProgram	sqlite3_MFAW.c	/^  SubProgram *pProgram;   \/* Linked list of all sub-programs used by VM *\/$/;"	m	struct:Vdbe	file:
pProgram	sqlite3_MFAW.c	/^  SubProgram *pProgram;   \/* Program implementing pTrigger\/orconf *\/$/;"	m	struct:TriggerPrg	file:
pProgressArg	sqlite3_MFAW.c	/^  void *pProgressArg;           \/* Argument to the progress callback *\/$/;"	m	struct:sqlite3	file:
pRead	sqlite3_MFAW.c	/^  char *pRead;                    \/* Cursor used to iterate through aDoclist *\/$/;"	m	struct:LcsIterator	file:
pReadNode	sqlite3_MFAW.c	/^  sqlite3_stmt *pReadNode;$/;"	m	struct:Rtree	file:
pReadParent	sqlite3_MFAW.c	/^  sqlite3_stmt *pReadParent;$/;"	m	struct:Rtree	file:
pReadRowid	sqlite3_MFAW.c	/^  sqlite3_stmt *pReadRowid;$/;"	m	struct:Rtree	file:
pReader	sqlite3_MFAW.c	/^  PmaReader *pReader;             \/* Readr data from here after Rewind() *\/$/;"	m	struct:VdbeSorter	file:
pReal	sqlite3_MFAW.c	/^    double *pReal;         \/* Used when p4type is P4_REAL *\/$/;"	m	union:VdbeOp::__anon1	file:
pReal	sqlite3_MFAW.c	/^  sqlite3_file *pReal;            \/* The "real" underlying file descriptor *\/$/;"	m	struct:JournalFile	file:
pRec	sqlite3_MFAW.c	/^  UnpackedRecord *pRec;     \/* Probe for stat4 (if required) *\/$/;"	m	struct:WhereLoopBuilder	file:
pReprepare	sqlite3_MFAW.c	/^  Vdbe *pReprepare;         \/* VM being reprepared (sqlite3Reprepare()) *\/$/;"	m	struct:Parse	file:
pResult	sqlite3_MFAW.c	/^  void *pResult;           \/* Result of xTask *\/$/;"	m	struct:SQLiteThread	file:
pResultSet	sqlite3_MFAW.c	/^  ExprList *pResultSet;     \/* Result set. DISTINCT operates on these *\/$/;"	m	struct:WhereInfo	file:
pResultSet	sqlite3_MFAW.c	/^  Mem *pResultSet;        \/* Pointer to an array of results *\/$/;"	m	struct:Vdbe	file:
pRight	sqlite3_MFAW.c	/^  Expr *pRight;          \/* Right subnode *\/$/;"	m	struct:Expr	file:
pRight	sqlite3_MFAW.c	/^  Fts3Expr *pRight;          \/* Right operand *\/$/;"	m	struct:Fts3Expr	file:
pRight	sqlite3_MFAW.c	/^  SegmentNode *pRight;            \/* Pointer to right-sibling *\/$/;"	m	struct:SegmentNode	file:
pRight	sqlite3_MFAW.c	/^  struct RowSetEntry *pRight;   \/* Right subtree (larger entries) or list *\/$/;"	m	struct:RowSetEntry	typeref:struct:RowSetEntry::RowSetEntry	file:
pRollbackArg	sqlite3_MFAW.c	/^  void *pRollbackArg;               \/* Argument to xRollbackCallback() *\/   $/;"	m	struct:sqlite3	file:
pRoot	sqlite3_MFAW.c	/^  Fts3Expr *pRoot;                \/* Root of NEAR\/AND cluster *\/$/;"	m	struct:Fts3TokenAndCost	file:
pRowSet	sqlite3_MFAW.c	/^    RowSet *pRowSet;    \/* Used only when flags==MEM_RowSet *\/$/;"	m	union:Mem::MemValue	file:
pSavepoint	sqlite3_MFAW.c	/^  Savepoint *pSavepoint;        \/* List of active savepoints *\/$/;"	m	struct:sqlite3	file:
pSchema	sqlite3_MFAW.c	/^    Schema *pSchema;  \/* Schema to which this item is fixed *\/$/;"	m	struct:SrcList::SrcList_item	file:
pSchema	sqlite3_MFAW.c	/^  Schema *pSchema;         \/* Schema containing this index *\/$/;"	m	struct:Index	file:
pSchema	sqlite3_MFAW.c	/^  Schema *pSchema;        \/* Schema containing the trigger *\/$/;"	m	struct:Trigger	file:
pSchema	sqlite3_MFAW.c	/^  Schema *pSchema;     \/* Pointer to database schema (possibly shared) *\/$/;"	m	struct:Db	file:
pSchema	sqlite3_MFAW.c	/^  Schema *pSchema;     \/* Schema that contains this table *\/$/;"	m	struct:Table	file:
pSchema	sqlite3_MFAW.c	/^  Schema *pSchema;    \/* Fix items to this schema *\/$/;"	m	struct:DbFixer	file:
pSchema	sqlite3_MFAW.c	/^  void *pSchema;        \/* Pointer to space allocated by sqlite3BtreeSchema() *\/$/;"	m	struct:BtShared	file:
pScopyFrom	sqlite3_MFAW.c	/^  Mem *pScopyFrom;    \/* This Mem is a shallow copy of pScopyFrom *\/$/;"	m	struct:Mem	file:
pScratch	sqlite3_MFAW.c	/^  void *pScratch;                   \/* Scratch memory *\/$/;"	m	struct:Sqlite3Config	file:
pScratchEnd	sqlite3_MFAW.c	/^  void *pScratchEnd;$/;"	m	struct:Mem0Global	file:
pScratchFree	sqlite3_MFAW.c	/^  ScratchFreeslot *pScratchFree;$/;"	m	struct:Mem0Global	file:
pSegcsr	sqlite3_MFAW.c	/^  Fts3MultiSegReader *pSegcsr;    \/* Segment-reader for this token *\/$/;"	m	struct:Fts3PhraseToken	file:
pSegments	sqlite3_MFAW.c	/^  sqlite3_blob *pSegments;        \/* Blob handle open on %_segments table *\/$/;"	m	struct:Fts3Table	file:
pSelect	sqlite3_MFAW.c	/^    Select *pSelect;                \/* The definition of this CTE *\/$/;"	m	struct:With::Cte	file:
pSelect	sqlite3_MFAW.c	/^    Select *pSelect;     \/* EP_xIsSelect and op = IN, EXISTS, SELECT *\/$/;"	m	union:Expr::__anon4	file:
pSelect	sqlite3_MFAW.c	/^    Select *pSelect;  \/* A SELECT statement used in place of a table name *\/$/;"	m	struct:SrcList::SrcList_item	file:
pSelect	sqlite3_MFAW.c	/^  Select *pSelect;     \/* NULL for tables.  Points to definition if a view. *\/$/;"	m	struct:Table	file:
pSelect	sqlite3_MFAW.c	/^  Select *pSelect;     \/* SELECT statement or RHS of INSERT INTO SELECT ... *\/$/;"	m	struct:TriggerStep	file:
pSem	sqlite3_MFAW.c	/^  sem_t *pSem;                    \/* Named POSIX semaphore *\/$/;"	m	struct:unixInodeInfo	file:
pSeqTab	sqlite3_MFAW.c	/^  Table *pSeqTab;      \/* The sqlite_sequence table used by AUTOINCREMENT *\/$/;"	m	struct:Schema	file:
pShm	sqlite3_MFAW.c	/^  unixShm *pShm;                      \/* Shared memory segment information *\/$/;"	m	struct:unixFile	file:
pShm	sqlite3_MFAW.c	/^  winShm *pShm;           \/* Instance of shared memory on this file *\/$/;"	m	struct:winFile	file:
pShmNode	sqlite3_MFAW.c	/^  unixShmNode *pShmNode;          \/* Shared memory associated with this inode *\/$/;"	m	struct:unixInodeInfo	file:
pShmNode	sqlite3_MFAW.c	/^  unixShmNode *pShmNode;     \/* The underlying unixShmNode object *\/$/;"	m	struct:unixShm	file:
pShmNode	sqlite3_MFAW.c	/^  winShmNode *pShmNode;      \/* The underlying winShmNode object *\/$/;"	m	struct:winShm	file:
pSorter	sqlite3_MFAW.c	/^  VdbeSorter *pSorter;            \/* Sorter that owns this sub-task *\/$/;"	m	struct:SortSubtask	file:
pSorter	sqlite3_MFAW.c	/^  VdbeSorter *pSorter;  \/* Sorter object for OP_SorterOpen cursors *\/$/;"	m	struct:VdbeCursor	file:
pSqllogArg	sqlite3_MFAW.c	/^  void *pSqllogArg;$/;"	m	struct:Sqlite3Config	file:
pSrc	sqlite3_MFAW.c	/^  Btree *pSrc;             \/* Source b-tree file *\/$/;"	m	struct:sqlite3_backup	file:
pSrc	sqlite3_MFAW.c	/^  SrcList *pSrc;         \/* The FROM clause *\/$/;"	m	struct:Select	file:
pSrc	sqlite3_MFAW.c	/^  SrcList *pSrc;   \/* One particular FROM clause in a nested query *\/$/;"	m	struct:SrcCount	file:
pSrcCount	sqlite3_MFAW.c	/^    struct SrcCount *pSrcCount;                \/* Counting column references *\/$/;"	m	union:Walker::__anon8	typeref:struct:Walker::__anon8::SrcCount	file:
pSrcDb	sqlite3_MFAW.c	/^  sqlite3* pSrcDb;         \/* Source database handle *\/$/;"	m	struct:sqlite3_backup	file:
pSrcList	sqlite3_MFAW.c	/^    SrcList *pSrcList;                         \/* FROM clause *\/$/;"	m	union:Walker::__anon8	file:
pSrcList	sqlite3_MFAW.c	/^  SrcList *pSrcList;   \/* One or more tables used to resolve names *\/$/;"	m	struct:NameContext	file:
pStart	sqlite3_MFAW.c	/^  void *pStart, *pEnd;           \/* Bounds of pagecache malloc range *\/$/;"	m	struct:PCacheGlobal	file:
pStart	sqlite3_MFAW.c	/^  void *pStart;           \/* First byte of available memory space *\/$/;"	m	struct:Lookaside	file:
pStmt	sqlite3_MFAW.c	/^  sqlite3_stmt *pStmt;            \/* Iterates through set of root pages *\/$/;"	m	struct:StatCursor	file:
pStmt	sqlite3_MFAW.c	/^  sqlite3_stmt *pStmt;            \/* Prepared statement in use by the cursor *\/$/;"	m	struct:Fts3Cursor	file:
pStmt	sqlite3_MFAW.c	/^  sqlite3_stmt *pStmt;    \/* Statement holding cursor open *\/$/;"	m	struct:Incrblob	file:
pStress	sqlite3_MFAW.c	/^  void *pStress;                      \/* Argument to xStress *\/$/;"	m	struct:PCache	file:
pSynced	sqlite3_MFAW.c	/^  PgHdr *pSynced;                     \/* Last synced page in dirty page list *\/$/;"	m	struct:PCache	file:
pTab	sqlite3_MFAW.c	/^    Table *pTab;             \/* Source table *\/$/;"	m	struct:AggInfo::AggInfo_col	file:
pTab	sqlite3_MFAW.c	/^    Table *pTab;      \/* An SQL table corresponding to zName *\/$/;"	m	struct:SrcList::SrcList_item	file:
pTab	sqlite3_MFAW.c	/^  Table *pTab;           \/* Table for TK_COLUMN expressions. *\/$/;"	m	struct:Expr	file:
pTab	sqlite3_MFAW.c	/^  Table *pTab;          \/* Table this info block refers to *\/$/;"	m	struct:AutoincInfo	file:
pTab	sqlite3_MFAW.c	/^  Table *pTab;        \/* The Table object to which the virtual table belongs *\/$/;"	m	struct:VtabCtx	file:
pTabList	sqlite3_MFAW.c	/^  SrcList *pTabList;        \/* List of tables in the join *\/$/;"	m	struct:WhereInfo	file:
pTabSchema	sqlite3_MFAW.c	/^  Schema *pTabSchema;     \/* Schema containing the table *\/$/;"	m	struct:Trigger	file:
pTable	sqlite3_MFAW.c	/^  Table *pTable;           \/* The SQL table being indexed *\/$/;"	m	struct:Index	file:
pTail	sqlite3_MFAW.c	/^  char *pTail;                    \/* Position list data following iTail *\/$/;"	m	struct:SnippetPhrase	file:
pTask	sqlite3_MFAW.c	/^  SortSubtask *pTask;             \/* Task that owns this merger *\/$/;"	m	struct:IncrMerger	file:
pTask	sqlite3_MFAW.c	/^  SortSubtask *pTask;        \/* Used by this thread only *\/$/;"	m	struct:MergeEngine	file:
pThread	sqlite3_MFAW.c	/^  SQLiteThread *pThread;          \/* Background thread, if any *\/$/;"	m	struct:SortSubtask	file:
pTmpSpace	sqlite3_MFAW.c	/^  char *pTmpSpace;            \/* Pager.pageSize bytes of space for tmp use *\/$/;"	m	struct:Pager	file:
pTmpSpace	sqlite3_MFAW.c	/^  u8 *pTmpSpace;        \/* Temp space sufficient to hold a single cell *\/$/;"	m	struct:BtShared	file:
pTok	sqlite3_MFAW.c	/^  sqlite3_tokenizer *pTok;$/;"	m	struct:Fts3tokTable	file:
pToken	sqlite3_MFAW.c	/^  Fts3PhraseToken *pToken;        \/* Pointer to corresponding expr token *\/$/;"	m	struct:Fts3DeferredToken	file:
pToken	sqlite3_MFAW.c	/^  Fts3PhraseToken *pToken;        \/* The token itself *\/$/;"	m	struct:Fts3TokenAndCost	file:
pToken	sqlite3_MFAW.c	/^  char *pToken;                \/* storage for current token *\/$/;"	m	struct:simple_tokenizer_cursor	file:
pTokenizer	sqlite3_MFAW.c	/^  sqlite3_tokenizer *pTokenizer;       \/* Tokenizer for this cursor. *\/$/;"	m	struct:sqlite3_tokenizer_cursor	file:
pTokenizer	sqlite3_MFAW.c	/^  sqlite3_tokenizer *pTokenizer;      \/* Tokenizer module *\/$/;"	m	struct:ParseContext	file:
pTokenizer	sqlite3_MFAW.c	/^  sqlite3_tokenizer *pTokenizer;  \/* tokenizer for inserts and queries *\/$/;"	m	struct:Fts3Table	file:
pToplevel	sqlite3_MFAW.c	/^  Parse *pToplevel;    \/* Parse structure for main program (or NULL) *\/$/;"	m	struct:Parse	file:
pTraceArg	sqlite3_MFAW.c	/^  void *pTraceArg;                          \/* Argument to the trace function *\/$/;"	m	struct:sqlite3	file:
pTree	sqlite3_MFAW.c	/^  SegmentNode *pTree;             \/* Pointer to interior tree structure *\/$/;"	m	struct:SegmentWriter	file:
pTrig	sqlite3_MFAW.c	/^  Trigger *pTrig;      \/* The trigger that this step is a part of *\/$/;"	m	struct:TriggerStep	file:
pTrigger	sqlite3_MFAW.c	/^  Trigger *pTrigger;      \/* Trigger this program was coded from *\/$/;"	m	struct:TriggerPrg	file:
pTrigger	sqlite3_MFAW.c	/^  Trigger *pTrigger;   \/* List of triggers stored in pSchema *\/$/;"	m	struct:Table	file:
pTrigger	sqlite3_MFAW.c	100747;"	d	file:
pTrigger	sqlite3_MFAW.c	114152;"	d	file:
pTrigger	sqlite3_MFAW.c	96227;"	d	file:
pTriggerPrg	sqlite3_MFAW.c	/^  TriggerPrg *pTriggerPrg;  \/* Linked list of coded triggers *\/$/;"	m	struct:Parse	file:
pTriggerTab	sqlite3_MFAW.c	/^  Table *pTriggerTab;  \/* Table triggers are being coded for *\/$/;"	m	struct:Parse	file:
pUnlockArg	sqlite3_MFAW.c	/^  void *pUnlockArg;                     \/* Argument to xUnlockNotify *\/$/;"	m	struct:sqlite3	file:
pUnlockConnection	sqlite3_MFAW.c	/^  sqlite3 *pUnlockConnection;           \/* Connection to watch for unlock *\/$/;"	m	struct:sqlite3	file:
pUnpacked	sqlite3_MFAW.c	/^  UnpackedRecord *pUnpacked;      \/* Space to unpack a record *\/$/;"	m	struct:SortSubtask	file:
pUnpacked	sqlite3_MFAW.c	/^  UnpackedRecord *pUnpacked;      \/* Used by VdbeSorterCompare() *\/$/;"	m	struct:VdbeSorter	file:
pUnused	sqlite3_MFAW.c	/^  UnixUnusedFd *pUnused;              \/* Pre-allocated UnixUnusedFd *\/$/;"	m	struct:unixFile	file:
pUnused	sqlite3_MFAW.c	/^  UnixUnusedFd *pUnused;          \/* Unused file descriptors to close *\/$/;"	m	struct:unixInodeInfo	file:
pUpdateArg	sqlite3_MFAW.c	/^  void *pUpdateArg;$/;"	m	struct:sqlite3	file:
pUser	sqlite3_MFAW.c	/^  void *pUser;                      \/* callback can use this, if desired *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
pUser	sqlite3_MFAW.c	/^  void *pUser;                    \/* Callback implementation user data *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
pUser	sqlite3_MFAW.c	/^  void *pUser;          \/* First argument to xCmp() *\/$/;"	m	struct:CollSeq	file:
pUserData	sqlite3_MFAW.c	/^  void *pUserData;     \/* User data parameter *\/$/;"	m	struct:FuncDef	file:
pUserData	sqlite3_MFAW.c	/^  void *pUserData;$/;"	m	struct:FuncDestructor	file:
pUsing	sqlite3_MFAW.c	/^    IdList *pUsing;   \/* The USING clause of a join *\/$/;"	m	struct:SrcList::SrcList_item	file:
pVTable	sqlite3_MFAW.c	/^  VTable *pVTable;     \/* List of VTable objects. *\/$/;"	m	struct:Table	file:
pVTable	sqlite3_MFAW.c	/^  VTable *pVTable;    \/* The virtual table being constructed *\/$/;"	m	struct:VtabCtx	file:
pVdbe	sqlite3_MFAW.c	/^  Vdbe *pVdbe;          \/* The VM that owns this context *\/$/;"	m	struct:sqlite3_context	file:
pVdbe	sqlite3_MFAW.c	/^  Vdbe *pVdbe;         \/* An engine for executing database bytecode *\/$/;"	m	struct:Parse	file:
pVdbe	sqlite3_MFAW.c	/^  Vdbe *pVdbe;       \/* Attach the explanation to this Vdbe *\/$/;"	m	struct:Explain	file:
pVdbe	sqlite3_MFAW.c	/^  struct Vdbe *pVdbe;           \/* List of active virtual machines *\/$/;"	m	struct:sqlite3	typeref:struct:sqlite3::Vdbe	file:
pVdbeBranchArg	sqlite3_MFAW.c	/^  void *pVdbeBranchArg;                                     \/* 1st argument *\/$/;"	m	struct:Sqlite3Config	file:
pVfs	sqlite3_MFAW.c	/^  sqlite3_vfs *pVfs;                  \/* The VFS that created this unixFile *\/$/;"	m	struct:unixFile	file:
pVfs	sqlite3_MFAW.c	/^  sqlite3_vfs *pVfs;              \/* The "real" underlying VFS *\/$/;"	m	struct:JournalFile	file:
pVfs	sqlite3_MFAW.c	/^  sqlite3_vfs *pVfs;            \/* OS Interface *\/$/;"	m	struct:sqlite3	file:
pVfs	sqlite3_MFAW.c	/^  sqlite3_vfs *pVfs;          \/* OS functions to use for IO *\/$/;"	m	struct:Pager	file:
pVfs	sqlite3_MFAW.c	/^  sqlite3_vfs *pVfs;         \/* The VFS used to create pDbFd *\/$/;"	m	struct:Wal	file:
pVfs	sqlite3_MFAW.c	/^  sqlite3_vfs *pVfs;      \/* The VFS used to open this file *\/$/;"	m	struct:winFile	file:
pVtab	sqlite3_MFAW.c	/^    VTable *pVtab;         \/* Used when p4type is P4_VTAB *\/$/;"	m	union:VdbeOp::__anon1	file:
pVtab	sqlite3_MFAW.c	/^  sqlite3_vtab *pVtab;      \/* Pointer to vtab instance *\/$/;"	m	struct:VTable	file:
pVtab	sqlite3_MFAW.c	/^  sqlite3_vtab *pVtab;      \/* Virtual table of this cursor *\/$/;"	m	struct:sqlite3_vtab_cursor	file:
pVtabCtx	sqlite3_MFAW.c	/^  VtabCtx *pVtabCtx;            \/* Context for active vtab connect\/create *\/$/;"	m	struct:sqlite3	file:
pVtabCursor	sqlite3_MFAW.c	/^  sqlite3_vtab_cursor *pVtabCursor;  \/* The cursor for a virtual table *\/$/;"	m	struct:VdbeCursor	file:
pWC	sqlite3_MFAW.c	/^  WhereClause *pWC;          \/* WhereClause currently being scanned *\/$/;"	m	struct:WhereScan	file:
pWC	sqlite3_MFAW.c	/^  WhereClause *pWC;         \/* WHERE clause terms *\/$/;"	m	struct:WhereLoopBuilder	file:
pWC	sqlite3_MFAW.c	/^  WhereClause *pWC;       \/* The clause this term is part of *\/$/;"	m	struct:WhereTerm	file:
pWInfo	sqlite3_MFAW.c	/^  WhereInfo *pWInfo;        \/* Information about this WHERE *\/$/;"	m	struct:WhereLoopBuilder	file:
pWInfo	sqlite3_MFAW.c	/^  WhereInfo *pWInfo;       \/* WHERE clause processing context *\/$/;"	m	struct:WhereClause	file:
pWLoop	sqlite3_MFAW.c	/^  struct WhereLoop *pWLoop;  \/* The selected WhereLoop object *\/$/;"	m	struct:WhereLevel	typeref:struct:WhereLevel::WhereLoop	file:
pWal	sqlite3_MFAW.c	/^  Wal *pWal;                   \/* The complete WAL information *\/$/;"	m	struct:WalWriter	file:
pWal	sqlite3_MFAW.c	/^  Wal *pWal;                  \/* Write-ahead log used by "journal_mode=wal" *\/$/;"	m	struct:Pager	file:
pWalArg	sqlite3_MFAW.c	/^  void *pWalArg;$/;"	m	struct:sqlite3	file:
pWalFd	sqlite3_MFAW.c	/^  sqlite3_file *pWalFd;      \/* File handle for WAL file *\/$/;"	m	struct:Wal	file:
pWhen	sqlite3_MFAW.c	/^  Expr *pWhen;            \/* The WHEN clause of the expression (may be NULL) *\/$/;"	m	struct:Trigger	file:
pWhere	sqlite3_MFAW.c	/^  Expr *pWhere;          \/* The WHERE clause *\/$/;"	m	struct:Select	file:
pWhere	sqlite3_MFAW.c	/^  Expr *pWhere;        \/* The WHERE clause for DELETE or UPDATE steps *\/$/;"	m	struct:TriggerStep	file:
pWith	sqlite3_MFAW.c	/^  With *pWith;              \/* Current WITH clause, or NULL *\/$/;"	m	struct:Parse	file:
pWith	sqlite3_MFAW.c	/^  With *pWith;           \/* WITH clause attached to this select. Or NULL. *\/$/;"	m	struct:Select	file:
pWriteNode	sqlite3_MFAW.c	/^  sqlite3_stmt *pWriteNode;$/;"	m	struct:Rtree	file:
pWriteParent	sqlite3_MFAW.c	/^  sqlite3_stmt *pWriteParent;$/;"	m	struct:Rtree	file:
pWriteRowid	sqlite3_MFAW.c	/^  sqlite3_stmt *pWriteRowid;$/;"	m	struct:Rtree	file:
pWriter	sqlite3_MFAW.c	/^  Btree *pWriter;       \/* Btree with currently open write transaction *\/$/;"	m	struct:BtShared	file:
pZombieTab	sqlite3_MFAW.c	/^  Table *pZombieTab;        \/* List of Table objects to delete after code gen *\/$/;"	m	struct:Parse	file:
padToSectorBoundary	sqlite3_MFAW.c	/^  u8 padToSectorBoundary;    \/* Pad transactions out to the next sector *\/$/;"	m	struct:Wal	file:
page	sqlite3_MFAW.c	/^  sqlite3_pcache_page page;$/;"	m	struct:PgHdr1	file:
pageFindSlot	sqlite3_MFAW.c	/^static u8 *pageFindSlot(MemPage *pPg, int nByte, int *pRc, int *pbDefrag){$/;"	f	file:
pageFreeArray	sqlite3_MFAW.c	/^static int pageFreeArray($/;"	f	file:
pageHash	sqlite3_MFAW.c	/^  u32 pageHash;                  \/* Hash of page content *\/$/;"	m	struct:PgHdr	file:
pageInJournal	sqlite3_MFAW.c	/^static int pageInJournal(Pager *pPager, PgHdr *pPg){$/;"	f	file:
pageInsertArray	sqlite3_MFAW.c	/^static int pageInsertArray($/;"	f	file:
pageReinit	sqlite3_MFAW.c	/^static void pageReinit(DbPage *pData){$/;"	f	file:
pageSize	sqlite3_MFAW.c	/^  int pageSize;               \/* Number of bytes in a page *\/$/;"	m	struct:Pager	file:
pageSize	sqlite3_MFAW.c	/^  u32 pageSize;         \/* Total number of bytes on a page *\/$/;"	m	struct:BtShared	file:
pagerAcquireMapPage	sqlite3_MFAW.c	/^static int pagerAcquireMapPage($/;"	f	file:
pagerBeginReadTransaction	sqlite3_MFAW.c	/^static int pagerBeginReadTransaction(Pager *pPager){$/;"	f	file:
pagerBeginReadTransaction	sqlite3_MFAW.c	42484;"	d	file:
pagerExclusiveLock	sqlite3_MFAW.c	/^static int pagerExclusiveLock(Pager *pPager){$/;"	f	file:
pagerFixMaplimit	sqlite3_MFAW.c	/^static void pagerFixMaplimit(Pager *pPager){$/;"	f	file:
pagerFreeMapHdrs	sqlite3_MFAW.c	/^static void pagerFreeMapHdrs(Pager *pPager){$/;"	f	file:
pagerLockDb	sqlite3_MFAW.c	/^static int pagerLockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerOpenWal	sqlite3_MFAW.c	/^static int pagerOpenWal(Pager *pPager){$/;"	f	file:
pagerOpenWalIfPresent	sqlite3_MFAW.c	/^static int pagerOpenWalIfPresent(Pager *pPager){$/;"	f	file:
pagerOpenWalIfPresent	sqlite3_MFAW.c	42483;"	d	file:
pagerOpentemp	sqlite3_MFAW.c	/^static int pagerOpentemp($/;"	f	file:
pagerPagecount	sqlite3_MFAW.c	/^static int pagerPagecount(Pager *pPager, Pgno *pnPage){$/;"	f	file:
pagerPlaybackSavepoint	sqlite3_MFAW.c	/^static int pagerPlaybackSavepoint(Pager *pPager, PagerSavepoint *pSavepoint){$/;"	f	file:
pagerReleaseMapPage	sqlite3_MFAW.c	/^static void pagerReleaseMapPage(PgHdr *pPg){$/;"	f	file:
pagerReportSize	sqlite3_MFAW.c	/^static void pagerReportSize(Pager *pPager){$/;"	f	file:
pagerReportSize	sqlite3_MFAW.c	43782;"	d	file:
pagerRollbackWal	sqlite3_MFAW.c	/^static int pagerRollbackWal(Pager *pPager){$/;"	f	file:
pagerRollbackWal	sqlite3_MFAW.c	42481;"	d	file:
pagerStress	sqlite3_MFAW.c	/^static int pagerStress(void *p, PgHdr *pPg){$/;"	f	file:
pagerSyncHotJournal	sqlite3_MFAW.c	/^static int pagerSyncHotJournal(Pager *pPager){$/;"	f	file:
pagerUndoCallback	sqlite3_MFAW.c	/^static int pagerUndoCallback(void *pCtx, Pgno iPg){$/;"	f	file:
pagerUnlockAndRollback	sqlite3_MFAW.c	/^static void pagerUnlockAndRollback(Pager *pPager){$/;"	f	file:
pagerUnlockDb	sqlite3_MFAW.c	/^static int pagerUnlockDb(Pager *pPager, int eLock){$/;"	f	file:
pagerUnlockIfUnused	sqlite3_MFAW.c	/^static void pagerUnlockIfUnused(Pager *pPager){$/;"	f	file:
pagerUseWal	sqlite3_MFAW.c	/^static int pagerUseWal(Pager *pPager){$/;"	f	file:
pagerUseWal	sqlite3_MFAW.c	42480;"	d	file:
pagerWalFrames	sqlite3_MFAW.c	/^static int pagerWalFrames($/;"	f	file:
pagerWalFrames	sqlite3_MFAW.c	42482;"	d	file:
pagerWriteLargeSector	sqlite3_MFAW.c	/^static SQLITE_NOINLINE int pagerWriteLargeSector(PgHdr *pPg){$/;"	f	file:
pager_cksum	sqlite3_MFAW.c	/^static u32 pager_cksum(Pager *pPager, const u8 *aData){$/;"	f	file:
pager_datahash	sqlite3_MFAW.c	/^static u32 pager_datahash(int nByte, unsigned char *pData){$/;"	f	file:
pager_datahash	sqlite3_MFAW.c	42866;"	d	file:
pager_delmaster	sqlite3_MFAW.c	/^static int pager_delmaster(Pager *pPager, const char *zMaster){$/;"	f	file:
pager_end_transaction	sqlite3_MFAW.c	/^static int pager_end_transaction(Pager *pPager, int hasMaster, int bCommit){$/;"	f	file:
pager_error	sqlite3_MFAW.c	/^static int pager_error(Pager *pPager, int rc){$/;"	f	file:
pager_incr_changecounter	sqlite3_MFAW.c	/^static int pager_incr_changecounter(Pager *pPager, int isDirectMode){$/;"	f	file:
pager_open_journal	sqlite3_MFAW.c	/^static int pager_open_journal(Pager *pPager){$/;"	f	file:
pager_pagehash	sqlite3_MFAW.c	/^static u32 pager_pagehash(PgHdr *pPage){$/;"	f	file:
pager_pagehash	sqlite3_MFAW.c	42867;"	d	file:
pager_playback	sqlite3_MFAW.c	/^static int pager_playback(Pager *pPager, int isHot){$/;"	f	file:
pager_playback_one_page	sqlite3_MFAW.c	/^static int pager_playback_one_page($/;"	f	file:
pager_reset	sqlite3_MFAW.c	/^static void pager_reset(Pager *pPager){$/;"	f	file:
pager_set_pagehash	sqlite3_MFAW.c	/^static void pager_set_pagehash(PgHdr *pPage){$/;"	f	file:
pager_set_pagehash	sqlite3_MFAW.c	42868;"	d	file:
pager_truncate	sqlite3_MFAW.c	/^static int pager_truncate(Pager *pPager, Pgno nPage){$/;"	f	file:
pager_unlock	sqlite3_MFAW.c	/^static void pager_unlock(Pager *pPager){$/;"	f	file:
pager_wait_on_lock	sqlite3_MFAW.c	/^static int pager_wait_on_lock(Pager *pPager, int locktype){$/;"	f	file:
pager_write	sqlite3_MFAW.c	/^static int pager_write(PgHdr *pPg){$/;"	f	file:
pager_write_changecounter	sqlite3_MFAW.c	/^static void pager_write_changecounter(PgHdr *pPg){$/;"	f	file:
pager_write_pagelist	sqlite3_MFAW.c	/^static int pager_write_pagelist(Pager *pPager, PgHdr *pList){$/;"	f	file:
parentWrite	sqlite3_MFAW.c	/^static int parentWrite(Rtree *pRtree, sqlite3_int64 iNode, sqlite3_int64 iPar){$/;"	f	file:
parseDateOrTime	sqlite3_MFAW.c	/^static int parseDateOrTime($/;"	f	file:
parseHhMmSs	sqlite3_MFAW.c	/^static int parseHhMmSs(const char *zDate, DateTime *p){$/;"	f	file:
parseModifier	sqlite3_MFAW.c	/^static int parseModifier(sqlite3_context *pCtx, const char *zMod, DateTime *p){$/;"	f	file:
parseTimezone	sqlite3_MFAW.c	/^static int parseTimezone(const char *zDate, DateTime *p){$/;"	f	file:
parseYyyyMmDd	sqlite3_MFAW.c	/^static int parseYyyyMmDd(const char *zDate, DateTime *p){$/;"	f	file:
parserDoubleLinkSelect	sqlite3_MFAW.c	/^  static void parserDoubleLinkSelect(Parse *pParse, Select *p){$/;"	f	file:
pathname	mobibench.c	/^char pathname[128] = {0, };$/;"	v
pathname	mobibench_MFAW.c	/^char pathname[128] = {0, };$/;"	v
patternCompare	sqlite3_MFAW.c	/^static int patternCompare($/;"	f	file:
payloadSize	sqlite3_MFAW.c	/^  u32 payloadSize;      \/* Total number of bytes in the record *\/$/;"	m	struct:VdbeCursor	file:
pc	sqlite3_MFAW.c	/^  int pc;                 \/* Program Counter in parent (calling) frame *\/$/;"	m	struct:VdbeFrame	file:
pc	sqlite3_MFAW.c	/^  int pc;                 \/* The program counter *\/$/;"	m	struct:Vdbe	file:
pcache1	sqlite3_MFAW.c	40099;"	d	file:
pcache1Alloc	sqlite3_MFAW.c	/^static void *pcache1Alloc(int nByte){$/;"	f	file:
pcache1AllocPage	sqlite3_MFAW.c	/^static PgHdr1 *pcache1AllocPage(PCache1 *pCache){$/;"	f	file:
pcache1Cachesize	sqlite3_MFAW.c	/^static void pcache1Cachesize(sqlite3_pcache *p, int nMax){$/;"	f	file:
pcache1Create	sqlite3_MFAW.c	/^static sqlite3_pcache *pcache1Create(int szPage, int szExtra, int bPurgeable){$/;"	f	file:
pcache1Destroy	sqlite3_MFAW.c	/^static void pcache1Destroy(sqlite3_pcache *p){$/;"	f	file:
pcache1EnforceMaxPage	sqlite3_MFAW.c	/^static void pcache1EnforceMaxPage(PGroup *pGroup){$/;"	f	file:
pcache1EnterMutex	sqlite3_MFAW.c	40104;"	d	file:
pcache1Fetch	sqlite3_MFAW.c	/^static sqlite3_pcache_page *pcache1Fetch($/;"	f	file:
pcache1FetchStage2	sqlite3_MFAW.c	/^static SQLITE_NOINLINE PgHdr1 *pcache1FetchStage2($/;"	f	file:
pcache1Free	sqlite3_MFAW.c	/^static int pcache1Free(void *p){$/;"	f	file:
pcache1FreePage	sqlite3_MFAW.c	/^static void pcache1FreePage(PgHdr1 *p){$/;"	f	file:
pcache1Init	sqlite3_MFAW.c	/^static int pcache1Init(void *NotUsed){$/;"	f	file:
pcache1LeaveMutex	sqlite3_MFAW.c	40105;"	d	file:
pcache1MemSize	sqlite3_MFAW.c	/^static int pcache1MemSize(void *p){$/;"	f	file:
pcache1Pagecount	sqlite3_MFAW.c	/^static int pcache1Pagecount(sqlite3_pcache *p){$/;"	f	file:
pcache1PinPage	sqlite3_MFAW.c	/^static void pcache1PinPage(PgHdr1 *pPage){$/;"	f	file:
pcache1Rekey	sqlite3_MFAW.c	/^static void pcache1Rekey($/;"	f	file:
pcache1RemoveFromHash	sqlite3_MFAW.c	/^static void pcache1RemoveFromHash(PgHdr1 *pPage){$/;"	f	file:
pcache1ResizeHash	sqlite3_MFAW.c	/^static void pcache1ResizeHash(PCache1 *p){$/;"	f	file:
pcache1Shrink	sqlite3_MFAW.c	/^static void pcache1Shrink(sqlite3_pcache *p){$/;"	f	file:
pcache1Shutdown	sqlite3_MFAW.c	/^static void pcache1Shutdown(void *NotUsed){$/;"	f	file:
pcache1Truncate	sqlite3_MFAW.c	/^static void pcache1Truncate(sqlite3_pcache *p, unsigned int iLimit){$/;"	f	file:
pcache1TruncateUnsafe	sqlite3_MFAW.c	/^static void pcache1TruncateUnsafe($/;"	f	file:
pcache1UnderMemoryPressure	sqlite3_MFAW.c	/^static int pcache1UnderMemoryPressure(PCache1 *pCache){$/;"	f	file:
pcache1Unpin	sqlite3_MFAW.c	/^static void pcache1Unpin($/;"	f	file:
pcache1_g	sqlite3_MFAW.c	/^} pcache1_g;$/;"	v	typeref:struct:PCacheGlobal	file:
pcache2	sqlite3_MFAW.c	/^  sqlite3_pcache_methods2 pcache2;  \/* Low-level page-cache interface *\/$/;"	m	struct:Sqlite3Config	file:
pcacheFetchFinishWithInit	sqlite3_MFAW.c	/^static SQLITE_NOINLINE PgHdr *pcacheFetchFinishWithInit($/;"	f	file:
pcacheManageDirtyList	sqlite3_MFAW.c	/^static void pcacheManageDirtyList(PgHdr *pPage, u8 addRemove){$/;"	f	file:
pcacheMergeDirtyList	sqlite3_MFAW.c	/^static PgHdr *pcacheMergeDirtyList(PgHdr *pA, PgHdr *pB){$/;"	f	file:
pcacheSortDirtyList	sqlite3_MFAW.c	/^static PgHdr *pcacheSortDirtyList(PgHdr *pIn){$/;"	f	file:
pcacheUnpin	sqlite3_MFAW.c	/^static void pcacheUnpin(PgHdr *p){$/;"	f	file:
pgno	sqlite3_MFAW.c	/^  Pgno pgno;                     \/* Page number for this page *\/$/;"	m	struct:PgHdr	file:
pgno	sqlite3_MFAW.c	/^  Pgno pgno;           \/* Page number for this page *\/$/;"	m	struct:MemPage	file:
pgnoRoot	sqlite3_MFAW.c	/^  Pgno pgnoRoot;            \/* The root page of this tree *\/$/;"	m	struct:BtCursor	file:
pgnoRoot	sqlite3_MFAW.c	/^  Pgno pgnoRoot;        \/* Root page of the open btree cursor *\/$/;"	m	struct:VdbeCursor	file:
pgsz	sqlite3_MFAW.c	/^  int pgsz;                       \/* Main database page size *\/$/;"	m	struct:VdbeSorter	file:
pnBytesFreed	sqlite3_MFAW.c	/^  int *pnBytesFreed;            \/* If not NULL, increment this in DbFree() *\/$/;"	m	struct:sqlite3	file:
porterClose	sqlite3_MFAW.c	/^static int porterClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
porterCreate	sqlite3_MFAW.c	/^static int porterCreate($/;"	f	file:
porterDestroy	sqlite3_MFAW.c	/^static int porterDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
porterIdChar	sqlite3_MFAW.c	/^static const char porterIdChar[] = {$/;"	v	file:
porterNext	sqlite3_MFAW.c	/^static int porterNext($/;"	f	file:
porterOpen	sqlite3_MFAW.c	/^static int porterOpen($/;"	f	file:
porterTokenizerModule	sqlite3_MFAW.c	/^static const sqlite3_tokenizer_module porterTokenizerModule = {$/;"	v	file:
porter_stemmer	sqlite3_MFAW.c	/^static void porter_stemmer(const char *zIn, int nIn, char *zOut, int *pnOut){$/;"	f	file:
porter_tokenizer	sqlite3_MFAW.c	/^typedef struct porter_tokenizer {$/;"	s	file:
porter_tokenizer	sqlite3_MFAW.c	/^} porter_tokenizer;$/;"	t	typeref:struct:porter_tokenizer	file:
porter_tokenizer_cursor	sqlite3_MFAW.c	/^typedef struct porter_tokenizer_cursor {$/;"	s	file:
porter_tokenizer_cursor	sqlite3_MFAW.c	/^} porter_tokenizer_cursor;$/;"	t	typeref:struct:porter_tokenizer_cursor	file:
posixFchown	sqlite3_MFAW.c	/^static int posixFchown(int fd, uid_t uid, gid_t gid){$/;"	f	file:
posixOpen	sqlite3_MFAW.c	/^static int posixOpen(const char *zFile, int flags, int mode){$/;"	f	file:
posixUnlock	sqlite3_MFAW.c	/^static int posixUnlock(sqlite3_file *id, int eFileLock, int handleNFSUnlock){$/;"	f	file:
ppNextElem	sqlite3_MFAW.c	/^  Fts3HashElem **ppNextElem;$/;"	m	struct:Fts3SegReader	file:
ppRec	sqlite3_MFAW.c	/^  UnpackedRecord **ppRec;$/;"	m	struct:ValueNewStat4Ctx	file:
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
prefix	sqlite3_MFAW.c	/^  etByte prefix;           \/* Offset into aPrefix[] of the prefix string *\/$/;"	m	struct:et_info	file:
prepare	sqlite3_MFAW.c	/^  int  (*prepare)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:
prepare16	sqlite3_MFAW.c	/^  int  (*prepare16)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:
prepare16_v2	sqlite3_MFAW.c	/^  int (*prepare16_v2)(sqlite3*,const void*,int,sqlite3_stmt**,const void**);$/;"	m	struct:sqlite3_api_routines	file:
prepare_v2	sqlite3_MFAW.c	/^  int (*prepare_v2)(sqlite3*,const char*,int,sqlite3_stmt**,const char**);$/;"	m	struct:sqlite3_api_routines	file:
prereq	sqlite3_MFAW.c	/^  Bitmask prereq;       \/* Bitmask of other loops that must run first *\/$/;"	m	struct:WhereLoop	file:
prereq	sqlite3_MFAW.c	/^  Bitmask prereq;     \/* Prerequisites *\/$/;"	m	struct:WhereOrCost	file:
prereqAll	sqlite3_MFAW.c	/^  Bitmask prereqAll;      \/* Bitmask of tables referenced by pExpr *\/$/;"	m	struct:WhereTerm	file:
prereqRight	sqlite3_MFAW.c	/^  Bitmask prereqRight;    \/* Bitmask of tables used by pExpr->pRight *\/$/;"	m	struct:WhereTerm	file:
prev	sqlite3_MFAW.c	/^      u32 prev;       \/* Index in mem3.aPool[] of previous free chunk *\/$/;"	m	struct:Mem3Block::__anon10::__anon12	file:
prev	sqlite3_MFAW.c	/^  Fts3HashElem *next, *prev; \/* Next and previous elements in the table *\/$/;"	m	struct:Fts3HashElem	file:
prev	sqlite3_MFAW.c	/^  HashElem *next, *prev;       \/* Next and previous elements in the table *\/$/;"	m	struct:HashElem	file:
prev	sqlite3_MFAW.c	/^  int prev;       \/* Index of previous free chunk *\/$/;"	m	struct:Mem5Link	file:
prevSize	sqlite3_MFAW.c	/^      u32 prevSize;   \/* Size of previous chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon10::__anon11	file:
print_IOPS	mobibench.c	/^int print_IOPS = 0; \/\/ flag for printing IOPS every second$/;"	v
print_IOPS	mobibench_MFAW.c	/^int print_IOPS = 0; \/\/ flag for printing IOPS every second$/;"	v
print_con_switches	mobibench.c	/^void print_con_switches()$/;"	f
print_con_switches	mobibench_MFAW.c	/^void print_con_switches()$/;"	f
print_pager_state	sqlite3_MFAW.c	/^static char *print_pager_state(Pager *p){$/;"	f	file:
print_time	mobibench.c	/^void print_time(struct timeval T1, struct timeval T2)$/;"	f
print_time	mobibench_MFAW.c	/^void print_time(struct timeval T1, struct timeval T2)$/;"	f
printf	mobibench.c	53;"	d	file:
printf	mobibench_MFAW.c	53;"	d	file:
printfFunc	sqlite3_MFAW.c	/^static void printfFunc($/;"	f	file:
profile	sqlite3_MFAW.c	/^  void * (*profile)(sqlite3*,void(*)(void*,const char*,sqlite_uint64),void*);$/;"	m	struct:sqlite3_api_routines	file:
progress	mobibench.c	/^int progress = 0;$/;"	v
progress	mobibench_MFAW.c	/^int progress = 0;$/;"	v
progress_handler	sqlite3_MFAW.c	/^  void  (*progress_handler)(sqlite3*,int,int(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
proxyBreakConchLock	sqlite3_MFAW.c	/^static int proxyBreakConchLock(unixFile *pFile, uuid_t myHostID){$/;"	f	file:
proxyCheckReservedLock	sqlite3_MFAW.c	/^static int proxyCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
proxyClose	sqlite3_MFAW.c	/^static int proxyClose(sqlite3_file *id) {$/;"	f	file:
proxyConchLock	sqlite3_MFAW.c	/^static int proxyConchLock(unixFile *pFile, uuid_t myHostID, int lockType){$/;"	f	file:
proxyCreateConchPathname	sqlite3_MFAW.c	/^static int proxyCreateConchPathname(char *dbPath, char **pConchPath){$/;"	f	file:
proxyCreateLockPath	sqlite3_MFAW.c	/^static int proxyCreateLockPath(const char *lockPath){$/;"	f	file:
proxyCreateUnixFile	sqlite3_MFAW.c	/^static int proxyCreateUnixFile($/;"	f	file:
proxyFileControl	sqlite3_MFAW.c	/^static int proxyFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
proxyGetDbPathForUnixFile	sqlite3_MFAW.c	/^static int proxyGetDbPathForUnixFile(unixFile *pFile, char *dbPath){$/;"	f	file:
proxyGetHostID	sqlite3_MFAW.c	/^static int proxyGetHostID(unsigned char *pHostID, int *pError){$/;"	f	file:
proxyGetLockPath	sqlite3_MFAW.c	/^static int proxyGetLockPath(const char *dbPath, char *lPath, size_t maxLen){$/;"	f	file:
proxyLock	sqlite3_MFAW.c	/^static int proxyLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
proxyLockingContext	sqlite3_MFAW.c	/^struct proxyLockingContext {$/;"	s	file:
proxyLockingContext	sqlite3_MFAW.c	/^typedef struct proxyLockingContext proxyLockingContext;$/;"	t	typeref:struct:proxyLockingContext	file:
proxyReleaseConch	sqlite3_MFAW.c	/^static int proxyReleaseConch(unixFile *pFile){$/;"	f	file:
proxyTakeConch	sqlite3_MFAW.c	/^static int proxyTakeConch(unixFile *pFile){$/;"	f	file:
proxyTransformUnixFile	sqlite3_MFAW.c	/^static int proxyTransformUnixFile(unixFile *pFile, const char *path) {$/;"	f	file:
proxyUnlock	sqlite3_MFAW.c	/^static int proxyUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
pseudoTableReg	sqlite3_MFAW.c	/^  int pseudoTableReg;   \/* Register holding pseudotable content. *\/$/;"	m	struct:VdbeCursor	file:
pthreadMutexAlloc	sqlite3_MFAW.c	/^static sqlite3_mutex *pthreadMutexAlloc(int iType){$/;"	f	file:
pthreadMutexEnd	sqlite3_MFAW.c	/^static int pthreadMutexEnd(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexEnter	sqlite3_MFAW.c	/^static void pthreadMutexEnter(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexFree	sqlite3_MFAW.c	/^static void pthreadMutexFree(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexHeld	sqlite3_MFAW.c	/^static int pthreadMutexHeld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexInit	sqlite3_MFAW.c	/^static int pthreadMutexInit(void){ return SQLITE_OK; }$/;"	f	file:
pthreadMutexLeave	sqlite3_MFAW.c	/^static void pthreadMutexLeave(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexNotheld	sqlite3_MFAW.c	/^static int pthreadMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
pthreadMutexTry	sqlite3_MFAW.c	/^static int pthreadMutexTry(sqlite3_mutex *p){$/;"	f	file:
ptrmapGet	sqlite3_MFAW.c	/^static int ptrmapGet(BtShared *pBt, Pgno key, u8 *pEType, Pgno *pPgno){$/;"	f	file:
ptrmapGet	sqlite3_MFAW.c	54066;"	d	file:
ptrmapPageno	sqlite3_MFAW.c	/^static Pgno ptrmapPageno(BtShared *pBt, Pgno pgno){$/;"	f	file:
ptrmapPut	sqlite3_MFAW.c	/^static void ptrmapPut(BtShared *pBt, Pgno key, u8 eType, Pgno parent, int *pRC){$/;"	f	file:
ptrmapPut	sqlite3_MFAW.c	54065;"	d	file:
ptrmapPutOvflPtr	sqlite3_MFAW.c	/^static void ptrmapPutOvflPtr(MemPage *pPage, u8 *pCell, int *pRC){$/;"	f	file:
ptrmapPutOvflPtr	sqlite3_MFAW.c	54067;"	d	file:
pushOntoSorter	sqlite3_MFAW.c	/^static void pushOntoSorter($/;"	f	file:
put2byte	sqlite3_MFAW.c	52830;"	d	file:
put32bits	sqlite3_MFAW.c	42725;"	d	file:
put4byte	sqlite3_MFAW.c	52832;"	d	file:
putVarint	sqlite3_MFAW.c	13407;"	d	file:
putVarint32	sqlite3_MFAW.c	13403;"	d	file:
putVarint64	sqlite3_MFAW.c	/^static int SQLITE_NOINLINE putVarint64(unsigned char *p, u64 v){$/;"	f	file:
pzErrMsg	sqlite3_MFAW.c	/^  char **pzErrMsg;    \/* Error message stored here *\/$/;"	m	struct:__anon7	file:
querySharedCacheTableLock	sqlite3_MFAW.c	/^static int querySharedCacheTableLock(Btree *p, Pgno iTab, u8 eLock){$/;"	f	file:
querySharedCacheTableLock	sqlite3_MFAW.c	53227;"	d	file:
queryTestTokenizer	sqlite3_MFAW.c	/^static int queryTestTokenizer($/;"	f	file:
queryTokenizer	sqlite3_MFAW.c	/^int queryTokenizer($/;"	f	file:
quoteFunc	sqlite3_MFAW.c	/^static void quoteFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
r	sqlite3_MFAW.c	/^    double r;           \/* Real value used when MEM_Real is set in flags *\/$/;"	m	union:Mem::MemValue	file:
r1	sqlite3_MFAW.c	/^  int r1;             \/* Value to return if (lhs > rhs) *\/$/;"	m	struct:UnpackedRecord	file:
r2	sqlite3_MFAW.c	/^  int r2;             \/* Value to return if (rhs < lhs) *\/$/;"	m	struct:UnpackedRecord	file:
rCost	sqlite3_MFAW.c	/^  LogEst rCost;         \/* Total cost of this path *\/$/;"	m	struct:WherePath	file:
rParentScore	sqlite3_MFAW.c	/^  sqlite3_rtree_dbl rParentScore;   \/* Score of parent node *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
rRun	sqlite3_MFAW.c	/^  LogEst rRun;          \/* Cost of running each loop *\/$/;"	m	struct:WhereLoop	file:
rRun	sqlite3_MFAW.c	/^  LogEst rRun;        \/* Cost of running this subquery *\/$/;"	m	struct:WhereOrCost	file:
rScore	sqlite3_MFAW.c	/^  RtreeDValue rScore;    \/* The score for this node.  Smallest goes first. *\/$/;"	m	struct:RtreeSearchPoint	file:
rScore	sqlite3_MFAW.c	/^  sqlite3_rtree_dbl rScore;         \/* OUT: Write the score here *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
rSetup	sqlite3_MFAW.c	/^  LogEst rSetup;        \/* One-time setup cost (ex: create transient index) *\/$/;"	m	struct:WhereLoop	file:
rSum	sqlite3_MFAW.c	/^  double rSum;      \/* Floating point sum *\/$/;"	m	struct:SumCtx	file:
rUnsorted	sqlite3_MFAW.c	/^  LogEst rUnsorted;     \/* Total cost of this path ignoring sorting costs *\/$/;"	m	struct:WherePath	file:
rValue	sqlite3_MFAW.c	/^    RtreeDValue rValue;             \/* Constraint value. *\/$/;"	m	union:RtreeConstraint::__anon25	file:
randomBlob	sqlite3_MFAW.c	/^static void randomBlob($/;"	f	file:
randomFill	sqlite3_MFAW.c	/^static void randomFill(char *pBuf, int nByte){$/;"	f	file:
randomFunc	sqlite3_MFAW.c	/^static void randomFunc($/;"	f	file:
randomness	sqlite3_MFAW.c	/^  void (*randomness)(int,void*);$/;"	m	struct:sqlite3_api_routines	file:
randomnessPid	sqlite3_MFAW.c	/^static pid_t randomnessPid = 0;$/;"	v	file:
rc	sqlite3_MFAW.c	/^  int rc;                  \/* Backup process error code *\/$/;"	m	struct:sqlite3_backup	file:
rc	sqlite3_MFAW.c	/^  int rc;                 \/* Value to return *\/$/;"	m	struct:Vdbe	file:
rc	sqlite3_MFAW.c	/^  int rc;              \/* Return code from execution *\/$/;"	m	struct:Parse	file:
rc	sqlite3_MFAW.c	/^  int rc;             \/* Result code stored here *\/$/;"	m	struct:__anon7	file:
rc	sqlite3_MFAW.c	/^  int rc;            \/* Return code from sqlite3_exec() *\/$/;"	m	struct:TabResult	file:
rcApp	sqlite3_MFAW.c	/^  int rcApp;              \/* errcode set by sqlite3_result_error_code() *\/$/;"	m	struct:Vdbe	file:
read32bits	sqlite3_MFAW.c	/^static int read32bits(sqlite3_file *fd, i64 offset, u32 *pRes){$/;"	f	file:
readCoord	sqlite3_MFAW.c	/^static void readCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:
readDbPage	sqlite3_MFAW.c	/^static int readDbPage(PgHdr *pPg, u32 iFrame){$/;"	f	file:
readInt16	sqlite3_MFAW.c	/^static int readInt16(u8 *p){$/;"	f	file:
readInt64	sqlite3_MFAW.c	/^static i64 readInt64(u8 *p){$/;"	f	file:
readJournalHdr	sqlite3_MFAW.c	/^static int readJournalHdr($/;"	f	file:
readLock	sqlite3_MFAW.c	/^  i16 readLock;              \/* Which read lock is being held.  -1 for none *\/$/;"	m	struct:Wal	file:
readMasterJournal	sqlite3_MFAW.c	/^static int readMasterJournal(sqlite3_file *pJrnl, char *zMaster, u32 nMaster){$/;"	f	file:
readOnly	sqlite3_MFAW.c	/^  bft readOnly:1;         \/* True for statements that do not write *\/$/;"	m	struct:Vdbe	file:
readOnly	sqlite3_MFAW.c	/^  u8 readOnly;                \/* True for a read-only database *\/$/;"	m	struct:Pager	file:
readOnly	sqlite3_MFAW.c	/^  u8 readOnly;               \/* WAL_RDWR, WAL_RDONLY, or WAL_SHM_RDONLY *\/$/;"	m	struct:Wal	file:
read_size	mobibench.c	/^	int read_size;$/;"	m	struct:script_thread_time	file:
read_size	mobibench_MFAW.c	/^	int read_size;$/;"	m	struct:script_thread_time	file:
readline	mobibench.c	/^int readline(FILE *f, char *buffer, size_t len)$/;"	f
readline	mobibench_MFAW.c	/^int readline(FILE *f, char *buffer, size_t len)$/;"	f
readpoint	sqlite3_MFAW.c	/^  FilePoint readpoint;            \/* Pointer to the end of the last xRead() *\/$/;"	m	struct:MemJournal	file:
readsTable	sqlite3_MFAW.c	/^static int readsTable(Parse *p, int iDb, Table *pTab){$/;"	f	file:
real_reclen	mobibench.c	/^long long real_reclen;$/;"	v
real_reclen	mobibench_MFAW.c	/^long long real_reclen;$/;"	v
realloc	sqlite3_MFAW.c	/^  void *(*realloc)(void*,int);$/;"	m	struct:sqlite3_api_routines	file:
realloc64	sqlite3_MFAW.c	/^  void *(*realloc64)(void*,sqlite3_uint64);$/;"	m	struct:sqlite3_api_routines	file:
rebuildPage	sqlite3_MFAW.c	/^static void rebuildPage($/;"	f	file:
reclen	mobibench.c	/^long long reclen;$/;"	v
reclen	mobibench_MFAW.c	/^long long reclen;$/;"	v
recordFunc	sqlite3_MFAW.c	/^static void recordFunc($/;"	f	file:
regCtr	sqlite3_MFAW.c	/^  int regCtr;           \/* Memory register holding the rowid counter *\/$/;"	m	struct:AutoincInfo	file:
regResult	sqlite3_MFAW.c	/^    int regResult;    \/* Registers holding results of a co-routine *\/$/;"	m	struct:SrcList::SrcList_item	file:
regReturn	sqlite3_MFAW.c	/^    int regReturn;    \/* Register holding return address of addrFillSub *\/$/;"	m	struct:SrcList::SrcList_item	file:
regReturn	sqlite3_MFAW.c	/^  int regReturn;        \/* Register holding block-output return address *\/$/;"	m	struct:SortCtx	file:
regRoot	sqlite3_MFAW.c	/^  int regRoot;         \/* Register holding root page number for new objects *\/$/;"	m	struct:Parse	file:
regRowid	sqlite3_MFAW.c	/^  int regRowid;        \/* Register holding rowid of CREATE TABLE entry *\/$/;"	m	struct:Parse	file:
registerTokenizer	sqlite3_MFAW.c	/^int registerTokenizer($/;"	f	file:
registerTrace	sqlite3_MFAW.c	/^static void registerTrace(int iReg, Mem *p){$/;"	f	file:
rehash	sqlite3_MFAW.c	/^static int rehash(Hash *pH, unsigned int new_size){$/;"	f	file:
reindexDatabases	sqlite3_MFAW.c	/^static void reindexDatabases(Parse *pParse, char const *zColl){$/;"	f	file:
reindexTable	sqlite3_MFAW.c	/^static void reindexTable(Parse *pParse, Table *pTab, char const *zColl){$/;"	f	file:
reinsertNodeContent	sqlite3_MFAW.c	/^static int reinsertNodeContent(Rtree *pRtree, RtreeNode *pNode){$/;"	f	file:
releaseAllSavepoints	sqlite3_MFAW.c	/^static void releaseAllSavepoints(Pager *pPager){$/;"	f	file:
releaseInodeInfo	sqlite3_MFAW.c	/^static void releaseInodeInfo(unixFile *pFile){$/;"	f	file:
releaseMemArray	sqlite3_MFAW.c	/^static void releaseMemArray(Mem *p, int N){$/;"	f	file:
releasePage	sqlite3_MFAW.c	/^static void releasePage(MemPage *pPage){$/;"	f	file:
release_memory	sqlite3_MFAW.c	/^  int (*release_memory)(int);$/;"	m	struct:sqlite3_api_routines	file:
reloadTableSchema	sqlite3_MFAW.c	/^static void reloadTableSchema(Parse *pParse, Table *pTab, const char *zName){$/;"	f	file:
relocatePage	sqlite3_MFAW.c	/^static int relocatePage($/;"	f	file:
removeElementGivenHash	sqlite3_MFAW.c	/^static void removeElementGivenHash($/;"	f	file:
removeFromBlockedList	sqlite3_MFAW.c	/^static void removeFromBlockedList(sqlite3 *db){$/;"	f	file:
removeFromSharingList	sqlite3_MFAW.c	/^static int removeFromSharingList(BtShared *pBt){$/;"	f	file:
removeNode	sqlite3_MFAW.c	/^static int removeNode(Rtree *pRtree, RtreeNode *pNode, int iHeight){$/;"	f	file:
remove_diacritic	sqlite3_MFAW.c	/^static int remove_diacritic(int c){$/;"	f	file:
renameParentFunc	sqlite3_MFAW.c	/^static void renameParentFunc($/;"	f	file:
renameTableFunc	sqlite3_MFAW.c	/^static void renameTableFunc($/;"	f	file:
renameTriggerFunc	sqlite3_MFAW.c	/^static void renameTriggerFunc($/;"	f	file:
renderLogMsg	sqlite3_MFAW.c	/^static void renderLogMsg(int iErrCode, const char *zFormat, va_list ap){$/;"	f	file:
replaceFunc	sqlite3_MFAW.c	/^static void replaceFunc($/;"	f	file:
replay_script	mobibench.c	/^int replay_script(void)$/;"	f
replay_script	mobibench_MFAW.c	/^int replay_script(void)$/;"	f
reserved	sqlite3_MFAW.c	/^  int reserved;$/;"	m	struct:afpLockingContext	file:
reset	sqlite3_MFAW.c	/^  int  (*reset)(sqlite3_stmt*pStmt);$/;"	m	struct:sqlite3_api_routines	file:
resetAccumulator	sqlite3_MFAW.c	/^static void resetAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
reset_auto_extension	sqlite3_MFAW.c	/^  void (*reset_auto_extension)(void);$/;"	m	struct:sqlite3_api_routines	file:
resizeIndexObject	sqlite3_MFAW.c	/^static int resizeIndexObject(sqlite3 *db, Index *pIdx, int N){$/;"	f	file:
resolveAlias	sqlite3_MFAW.c	/^static void resolveAlias($/;"	f	file:
resolveAsName	sqlite3_MFAW.c	/^static int resolveAsName($/;"	f	file:
resolveAttachExpr	sqlite3_MFAW.c	/^static int resolveAttachExpr(NameContext *pName, Expr *pExpr)$/;"	f	file:
resolveCompoundOrderBy	sqlite3_MFAW.c	/^static int resolveCompoundOrderBy($/;"	f	file:
resolveExprStep	sqlite3_MFAW.c	/^static int resolveExprStep(Walker *pWalker, Expr *pExpr){$/;"	f	file:
resolveOrderByTermToExprList	sqlite3_MFAW.c	/^static int resolveOrderByTermToExprList($/;"	f	file:
resolveOrderGroupBy	sqlite3_MFAW.c	/^static int resolveOrderGroupBy($/;"	f	file:
resolveOutOfRangeError	sqlite3_MFAW.c	/^static void resolveOutOfRangeError($/;"	f	file:
resolveP2Values	sqlite3_MFAW.c	/^static void resolveP2Values(Vdbe *p, int *pMaxFuncArgs){$/;"	f	file:
resolveSelectStep	sqlite3_MFAW.c	/^static int resolveSelectStep(Walker *pWalker, Select *p){$/;"	f	file:
restoreCursorPosition	sqlite3_MFAW.c	53894;"	d	file:
result_blob	sqlite3_MFAW.c	/^  void  (*result_blob)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_blob64	sqlite3_MFAW.c	/^  void (*result_blob64)(sqlite3_context*,const void*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:
result_double	sqlite3_MFAW.c	/^  void  (*result_double)(sqlite3_context*,double);$/;"	m	struct:sqlite3_api_routines	file:
result_error	sqlite3_MFAW.c	/^  void  (*result_error)(sqlite3_context*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error16	sqlite3_MFAW.c	/^  void  (*result_error16)(sqlite3_context*,const void*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error_code	sqlite3_MFAW.c	/^  void (*result_error_code)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_error_nomem	sqlite3_MFAW.c	/^  void (*result_error_nomem)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_error_toobig	sqlite3_MFAW.c	/^  void (*result_error_toobig)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_int	sqlite3_MFAW.c	/^  void  (*result_int)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
result_int64	sqlite3_MFAW.c	/^  void  (*result_int64)(sqlite3_context*,sqlite_int64);$/;"	m	struct:sqlite3_api_routines	file:
result_null	sqlite3_MFAW.c	/^  void  (*result_null)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
result_text	sqlite3_MFAW.c	/^  void  (*result_text)(sqlite3_context*,const char*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16	sqlite3_MFAW.c	/^  void  (*result_text16)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16be	sqlite3_MFAW.c	/^  void  (*result_text16be)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text16le	sqlite3_MFAW.c	/^  void  (*result_text16le)(sqlite3_context*,const void*,int,void(*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
result_text64	sqlite3_MFAW.c	/^  void (*result_text64)(sqlite3_context*,const char*,sqlite3_uint64,$/;"	m	struct:sqlite3_api_routines	file:
result_value	sqlite3_MFAW.c	/^  void  (*result_value)(sqlite3_context*,sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
result_zeroblob	sqlite3_MFAW.c	/^  void (*result_zeroblob)(sqlite3_context*,int);$/;"	m	struct:sqlite3_api_routines	file:
retRangeStart	sqlite3_MFAW.c	/^  unsigned long long retRangeStart; \/* nbr of 1st byte locked if successful *\/$/;"	m	struct:ByteRangeLockPB2	file:
returnSingleInt	sqlite3_MFAW.c	/^static void returnSingleInt(Parse *pParse, const char *zLabel, i64 value){$/;"	f	file:
reusable	sqlite3_MFAW.c	/^    unsigned reusable :1;   \/* Constant expression is reusable *\/$/;"	m	struct:ExprList::ExprList_item	file:
revLoop	sqlite3_MFAW.c	/^  Bitmask revLoop;      \/* aLoop[]s that should be reversed for ORDER BY *\/$/;"	m	struct:WherePath	file:
revMask	sqlite3_MFAW.c	/^  Bitmask revMask;          \/* Mask of ORDER BY terms that need reversing *\/$/;"	m	struct:WhereInfo	file:
robust_close	sqlite3_MFAW.c	/^static void robust_close(unixFile *pFile, int h, int lineno){$/;"	f	file:
robust_flock	sqlite3_MFAW.c	/^static int robust_flock(int fd, int op){$/;"	f	file:
robust_flock	sqlite3_MFAW.c	27734;"	d	file:
robust_ftruncate	sqlite3_MFAW.c	/^static int robust_ftruncate(int h, sqlite3_int64 sz){$/;"	f	file:
robust_open	sqlite3_MFAW.c	/^static int robust_open(const char *z, int f, mode_t m){$/;"	f	file:
rollback_hook	sqlite3_MFAW.c	/^  void * (*rollback_hook)(sqlite3*,void(*)(void*),void*);$/;"	m	struct:sqlite3_api_routines	file:
rootOnly	sqlite3_MFAW.c	/^  u8 rootOnly;                    \/* True for a root-only reader *\/$/;"	m	struct:Fts3SegReader	file:
roundFunc	sqlite3_MFAW.c	/^static void roundFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
rowSetEntryAlloc	sqlite3_MFAW.c	/^static struct RowSetEntry *rowSetEntryAlloc(RowSet *p){$/;"	f	file:
rowSetEntryMerge	sqlite3_MFAW.c	/^static struct RowSetEntry *rowSetEntryMerge($/;"	f	file:
rowSetEntrySort	sqlite3_MFAW.c	/^static struct RowSetEntry *rowSetEntrySort(struct RowSetEntry *pIn){$/;"	f	file:
rowSetListToTree	sqlite3_MFAW.c	/^static struct RowSetEntry *rowSetListToTree(struct RowSetEntry *pList){$/;"	f	file:
rowSetNDeepTree	sqlite3_MFAW.c	/^static struct RowSetEntry *rowSetNDeepTree($/;"	f	file:
rowSetToList	sqlite3_MFAW.c	/^static void rowSetToList(RowSet *p){$/;"	f	file:
rowSetTreeToList	sqlite3_MFAW.c	/^static void rowSetTreeToList($/;"	f	file:
rowidWrite	sqlite3_MFAW.c	/^static int rowidWrite(Rtree *pRtree, sqlite3_int64 iRowid, sqlite3_int64 iNode){$/;"	f	file:
rsFlags	sqlite3_MFAW.c	/^  u16 rsFlags;                   \/* Various flags *\/$/;"	m	struct:RowSet	file:
rtreeBestIndex	sqlite3_MFAW.c	/^static int rtreeBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
rtreeCallbackConstraint	sqlite3_MFAW.c	/^static int rtreeCallbackConstraint($/;"	f	file:
rtreeClose	sqlite3_MFAW.c	/^static int rtreeClose(sqlite3_vtab_cursor *cur){$/;"	f	file:
rtreeColumn	sqlite3_MFAW.c	/^static int rtreeColumn(sqlite3_vtab_cursor *cur, sqlite3_context *ctx, int i){$/;"	f	file:
rtreeConnect	sqlite3_MFAW.c	/^static int rtreeConnect($/;"	f	file:
rtreeCreate	sqlite3_MFAW.c	/^static int rtreeCreate($/;"	f	file:
rtreeDeleteRowid	sqlite3_MFAW.c	/^static int rtreeDeleteRowid(Rtree *pRtree, sqlite3_int64 iDelete){$/;"	f	file:
rtreeDestroy	sqlite3_MFAW.c	/^static int rtreeDestroy(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeDisconnect	sqlite3_MFAW.c	/^static int rtreeDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
rtreeEnqueue	sqlite3_MFAW.c	/^static RtreeSearchPoint *rtreeEnqueue($/;"	f	file:
rtreeEof	sqlite3_MFAW.c	/^static int rtreeEof(sqlite3_vtab_cursor *cur){$/;"	f	file:
rtreeFilter	sqlite3_MFAW.c	/^static int rtreeFilter($/;"	f	file:
rtreeFreeCallback	sqlite3_MFAW.c	/^static void rtreeFreeCallback(void *p){$/;"	f	file:
rtreeInit	sqlite3_MFAW.c	/^static int rtreeInit($/;"	f	file:
rtreeInsertCell	sqlite3_MFAW.c	/^static int rtreeInsertCell($/;"	f	file:
rtreeLeafConstraint	sqlite3_MFAW.c	/^static void rtreeLeafConstraint($/;"	f	file:
rtreeModule	sqlite3_MFAW.c	/^static sqlite3_module rtreeModule = {$/;"	v	file:
rtreeNext	sqlite3_MFAW.c	/^static int rtreeNext(sqlite3_vtab_cursor *pVtabCursor){$/;"	f	file:
rtreeNodeOfFirstSearchPoint	sqlite3_MFAW.c	/^static RtreeNode *rtreeNodeOfFirstSearchPoint(RtreeCursor *pCur, int *pRC){$/;"	f	file:
rtreeNonleafConstraint	sqlite3_MFAW.c	/^static void rtreeNonleafConstraint($/;"	f	file:
rtreeOpen	sqlite3_MFAW.c	/^static int rtreeOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
rtreeQueryStat1	sqlite3_MFAW.c	/^static int rtreeQueryStat1(sqlite3 *db, Rtree *pRtree){$/;"	f	file:
rtreeReference	sqlite3_MFAW.c	/^static void rtreeReference(Rtree *pRtree){$/;"	f	file:
rtreeRelease	sqlite3_MFAW.c	/^static void rtreeRelease(Rtree *pRtree){$/;"	f	file:
rtreeRename	sqlite3_MFAW.c	/^static int rtreeRename(sqlite3_vtab *pVtab, const char *zNewName){$/;"	f	file:
rtreeRowid	sqlite3_MFAW.c	/^static int rtreeRowid(sqlite3_vtab_cursor *pVtabCursor, sqlite_int64 *pRowid){$/;"	f	file:
rtreeSearchPointCompare	sqlite3_MFAW.c	/^static int rtreeSearchPointCompare($/;"	f	file:
rtreeSearchPointFirst	sqlite3_MFAW.c	/^static RtreeSearchPoint *rtreeSearchPointFirst(RtreeCursor *pCur){$/;"	f	file:
rtreeSearchPointNew	sqlite3_MFAW.c	/^static RtreeSearchPoint *rtreeSearchPointNew($/;"	f	file:
rtreeSearchPointPop	sqlite3_MFAW.c	/^static void rtreeSearchPointPop(RtreeCursor *p){$/;"	f	file:
rtreeSearchPointSwap	sqlite3_MFAW.c	/^static void rtreeSearchPointSwap(RtreeCursor *p, int i, int j){$/;"	f	file:
rtreeSqlInit	sqlite3_MFAW.c	/^static int rtreeSqlInit($/;"	f	file:
rtreeStepToLeaf	sqlite3_MFAW.c	/^static int rtreeStepToLeaf(RtreeCursor *pCur){$/;"	f	file:
rtreeUpdate	sqlite3_MFAW.c	/^static int rtreeUpdate($/;"	f	file:
rtreeValueDown	sqlite3_MFAW.c	/^static RtreeValue rtreeValueDown(sqlite3_value *v){$/;"	f	file:
rtreeValueUp	sqlite3_MFAW.c	/^static RtreeValue rtreeValueUp(sqlite3_value *v){$/;"	f	file:
rtreedepth	sqlite3_MFAW.c	/^static void rtreedepth(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:
rtreenode	sqlite3_MFAW.c	/^static void rtreenode(sqlite3_context *ctx, int nArg, sqlite3_value **apArg){$/;"	f	file:
runOnlyOnce	sqlite3_MFAW.c	/^  bft runOnlyOnce:1;      \/* Automatically expire on reset *\/$/;"	m	struct:Vdbe	file:
s	sqlite3_MFAW.c	/^  double s;          \/* Seconds *\/$/;"	m	struct:DateTime	file:
s	sqlite3_MFAW.c	/^  unsigned char s[256];          \/* State variables *\/$/;"	m	struct:sqlite3PrngType	file:
sArg	sqlite3_MFAW.c	/^  Token sArg;               \/* Complete text of a module argument *\/$/;"	m	struct:Parse	file:
sColMap	sqlite3_MFAW.c	/^  struct sColMap {      \/* Mapping of columns in pFrom to columns in zTo *\/$/;"	s	struct:FKey	file:
sLastToken	sqlite3_MFAW.c	/^  Token sLastToken;         \/* The last token parsed *\/$/;"	m	struct:Parse	file:
sMaskSet	sqlite3_MFAW.c	/^  WhereMaskSet sMaskSet;    \/* Map cursor numbers to bitmasks *\/$/;"	m	struct:WhereInfo	file:
sNameToken	sqlite3_MFAW.c	/^  Token sNameToken;         \/* Token with unqualified schema object name *\/$/;"	m	struct:Parse	file:
sPoint	sqlite3_MFAW.c	/^  RtreeSearchPoint sPoint;          \/* Cached next search point *\/$/;"	m	struct:RtreeCursor	file:
sPragmaNames	sqlite3_MFAW.c	/^static const struct sPragmaNames {$/;"	s	file:
sWC	sqlite3_MFAW.c	/^  WhereClause sWC;          \/* Decomposition of the WHERE clause *\/$/;"	m	struct:WhereInfo	file:
s_CPUTick	mobibench.c	/^unsigned long s_CPUTick[2][6]; $/;"	v
s_CPUTick	mobibench_MFAW.c	/^unsigned long s_CPUTick[2][6]; $/;"	v
safety_level	sqlite3_MFAW.c	/^  u8 safety_level;     \/* How aggressive at syncing data to disk *\/$/;"	m	struct:Db	file:
sampleClear	sqlite3_MFAW.c	/^static void sampleClear(sqlite3 *db, Stat4Sample *p){$/;"	f	file:
sampleCopy	sqlite3_MFAW.c	/^static void sampleCopy(Stat4Accum *p, Stat4Sample *pTo, Stat4Sample *pFrom){$/;"	f	file:
sampleInsert	sqlite3_MFAW.c	/^static void sampleInsert(Stat4Accum *p, Stat4Sample *pNew, int nEqZero){$/;"	f	file:
sampleIsBetter	sqlite3_MFAW.c	/^static int sampleIsBetter($/;"	f	file:
sampleIsBetterPost	sqlite3_MFAW.c	/^static int sampleIsBetterPost($/;"	f	file:
samplePushPrevious	sqlite3_MFAW.c	/^static void samplePushPrevious(Stat4Accum *p, int iChng){$/;"	f	file:
sampleSetRowid	sqlite3_MFAW.c	/^static void sampleSetRowid(sqlite3 *db, Stat4Sample *p, int n, const u8 *pData){$/;"	f	file:
sampleSetRowidInt64	sqlite3_MFAW.c	/^static void sampleSetRowidInt64(sqlite3 *db, Stat4Sample *p, i64 iRowid){$/;"	f	file:
saveAllCursors	sqlite3_MFAW.c	/^static int saveAllCursors(BtShared *pBt, Pgno iRoot, BtCursor *pExcept){$/;"	f	file:
saveCursorPosition	sqlite3_MFAW.c	/^static int saveCursorPosition(BtCursor *pCur){$/;"	f	file:
saveCursorsOnList	sqlite3_MFAW.c	/^static int SQLITE_NOINLINE saveCursorsOnList($/;"	f	file:
savedNQueryLoop	sqlite3_MFAW.c	/^  int savedNQueryLoop;      \/* pParse->nQueryLoop outside the WHERE loop *\/$/;"	m	struct:WhereInfo	file:
saved_cnt	sqlite3_MFAW.c	/^static int saved_cnt;$/;"	v	file:
scalarFunc	sqlite3_MFAW.c	/^static void scalarFunc($/;"	f	file:
schemaFlags	sqlite3_MFAW.c	/^  u16 schemaFlags;     \/* Flags associated with this schema *\/$/;"	m	struct:Schema	file:
schemaIsValid	sqlite3_MFAW.c	/^static void schemaIsValid(Parse *pParse){$/;"	f	file:
schema_cookie	sqlite3_MFAW.c	/^  int schema_cookie;   \/* Database schema version number for this file *\/$/;"	m	struct:Schema	file:
scratchAllocOut	sqlite3_MFAW.c	/^static int scratchAllocOut = 0;$/;"	v	file:
script_entry	mobibench.c	/^struct script_entry {$/;"	s	file:
script_entry	mobibench_MFAW.c	/^struct script_entry {$/;"	s	file:
script_fd_conv	mobibench.c	/^struct script_fd_conv {$/;"	s	file:
script_fd_conv	mobibench_MFAW.c	/^struct script_fd_conv {$/;"	s	file:
script_path	mobibench.c	/^char* script_path;$/;"	v
script_path	mobibench_MFAW.c	/^char* script_path;$/;"	v
script_read_buf	mobibench.c	/^char* script_read_buf;$/;"	v
script_read_buf	mobibench_MFAW.c	/^char* script_read_buf;$/;"	v
script_thread_info	mobibench.c	/^struct script_thread_info {$/;"	s	file:
script_thread_info	mobibench_MFAW.c	/^struct script_thread_info {$/;"	s	file:
script_thread_main	mobibench.c	/^int script_thread_main(void* arg)$/;"	f
script_thread_main	mobibench_MFAW.c	/^int script_thread_main(void* arg)$/;"	f
script_thread_num	mobibench.c	/^int script_thread_num=0;$/;"	v
script_thread_num	mobibench_MFAW.c	/^int script_thread_num=0;$/;"	v
script_thread_time	mobibench.c	/^struct script_thread_time {$/;"	s	file:
script_thread_time	mobibench_MFAW.c	/^struct script_thread_time {$/;"	s	file:
script_write_buf	mobibench.c	/^char* script_write_buf;$/;"	v
script_write_buf	mobibench_MFAW.c	/^char* script_write_buf;$/;"	v
searchWith	sqlite3_MFAW.c	/^static struct Cte *searchWith($/;"	f	file:
sectorSize	sqlite3_MFAW.c	/^  int sectorSize;                     \/* Device sector size *\/$/;"	m	struct:unixFile	file:
sectorSize	sqlite3_MFAW.c	/^  u32 sectorSize;             \/* Assumed sector size during rollback *\/$/;"	m	struct:Pager	file:
seekAndRead	sqlite3_MFAW.c	/^static int seekAndRead(unixFile *id, sqlite3_int64 offset, void *pBuf, int cnt){$/;"	f	file:
seekAndWrite	sqlite3_MFAW.c	/^static int seekAndWrite(unixFile *id, i64 offset, const void *pBuf, int cnt){$/;"	f	file:
seekAndWriteFd	sqlite3_MFAW.c	/^static int seekAndWriteFd($/;"	f	file:
seekOp	sqlite3_MFAW.c	/^  u8 seekOp;            \/* Most recent seek operation on this cursor *\/$/;"	m	struct:VdbeCursor	file:
seekResult	sqlite3_MFAW.c	/^  int seekResult;       \/* Result of previous sqlite3BtreeMoveto() *\/$/;"	m	struct:VdbeCursor	file:
selFlags	sqlite3_MFAW.c	/^  u16 selFlags;          \/* Various SF_* values *\/$/;"	m	struct:Select	file:
selectAddColumnTypeAndCollation	sqlite3_MFAW.c	/^static void selectAddColumnTypeAndCollation($/;"	f	file:
selectAddSubqueryTypeInfo	sqlite3_MFAW.c	/^static void selectAddSubqueryTypeInfo(Walker *pWalker, Select *p){$/;"	f	file:
selectColumnsFromExprList	sqlite3_MFAW.c	/^static int selectColumnsFromExprList($/;"	f	file:
selectExpander	sqlite3_MFAW.c	/^static int selectExpander(Walker *pWalker, Select *p){$/;"	f	file:
selectInnerLoop	sqlite3_MFAW.c	/^static void selectInnerLoop($/;"	f	file:
selectNodeIsConstant	sqlite3_MFAW.c	/^static int selectNodeIsConstant(Walker *pWalker, Select *NotUsed){$/;"	f	file:
selectOpName	sqlite3_MFAW.c	/^static const char *selectOpName(int id){$/;"	f	file:
selectPopWith	sqlite3_MFAW.c	/^static void selectPopWith(Walker *pWalker, Select *p){$/;"	f	file:
selectPopWith	sqlite3_MFAW.c	110632;"	d	file:
selectWrongNumTermsError	sqlite3_MFAW.c	/^static void selectWrongNumTermsError(Parse *pParse, Select *p){$/;"	f	file:
semXCheckReservedLock	sqlite3_MFAW.c	/^static int semXCheckReservedLock(sqlite3_file *id, int *pResOut) {$/;"	f	file:
semXClose	sqlite3_MFAW.c	/^static int semXClose(sqlite3_file *id) {$/;"	f	file:
semXLock	sqlite3_MFAW.c	/^static int semXLock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
semXUnlock	sqlite3_MFAW.c	/^static int semXUnlock(sqlite3_file *id, int eFileLock) {$/;"	f	file:
seqCount	sqlite3_MFAW.c	/^  i64 seqCount;         \/* Sequence counter *\/$/;"	m	struct:VdbeCursor	file:
serialGet	sqlite3_MFAW.c	/^static u32 SQLITE_NOINLINE serialGet($/;"	f	file:
setAllPagerFlags	sqlite3_MFAW.c	/^static void setAllPagerFlags(sqlite3 *db){$/;"	f	file:
setAllPagerFlags	sqlite3_MFAW.c	103871;"	d	file:
setChildPtrmaps	sqlite3_MFAW.c	/^static int setChildPtrmaps(MemPage *pPage){$/;"	f	file:
setChildPtrmaps	sqlite3_MFAW.c	56561;"	d	file:
setDateTimeToCurrent	sqlite3_MFAW.c	/^static int setDateTimeToCurrent(sqlite3_context *context, DateTime *p){$/;"	f	file:
setDestPgsz	sqlite3_MFAW.c	/^static int setDestPgsz(sqlite3_backup *p){$/;"	f	file:
setEstimatedRows	sqlite3_MFAW.c	/^static void setEstimatedRows(sqlite3_index_info *pIdxInfo, i64 nRow){$/;"	f	file:
setJoinExpr	sqlite3_MFAW.c	/^static void setJoinExpr(Expr *p, int iTable){$/;"	f	file:
setLikeOptFlag	sqlite3_MFAW.c	/^static void setLikeOptFlag(sqlite3 *db, const char *zName, u8 flagVal){$/;"	f	file:
setMaster	sqlite3_MFAW.c	/^  u8 setMaster;               \/* True if a m-j name has been written to jrnl *\/$/;"	m	struct:Pager	file:
setPageReferenced	sqlite3_MFAW.c	/^static void setPageReferenced(IntegrityCk *pCheck, Pgno iPg){$/;"	f	file:
setPendingFd	sqlite3_MFAW.c	/^static void setPendingFd(unixFile *pFile){$/;"	f	file:
setResultStrOrError	sqlite3_MFAW.c	/^static void setResultStrOrError($/;"	f	file:
setSectorSize	sqlite3_MFAW.c	/^static void setSectorSize(Pager *pPager){$/;"	f	file:
setSharedCacheTableLock	sqlite3_MFAW.c	/^static int setSharedCacheTableLock(Btree *p, Pgno iTable, u8 eLock){$/;"	f	file:
setSharedCacheTableLock	sqlite3_MFAW.c	53228;"	d	file:
setState	mobibench.c	/^void setState(int state, char* err_str)$/;"	f
setState	mobibench_MFAW.c	/^void setState(int state, char* err_str)$/;"	f
setStrAccumError	sqlite3_MFAW.c	/^static void setStrAccumError(StrAccum *p, u8 eError){$/;"	f	file:
set_authorizer	sqlite3_MFAW.c	/^  int  (*set_authorizer)(sqlite3*,int(*)(void*,int,const char*,const char*,$/;"	m	struct:sqlite3_api_routines	file:
set_auxdata	sqlite3_MFAW.c	/^  void  (*set_auxdata)(sqlite3_context*,int,void*,void (*)(void*));$/;"	m	struct:sqlite3_api_routines	file:
setupLookaside	sqlite3_MFAW.c	/^static int setupLookaside(sqlite3 *db, void *pBuf, int sz, int cnt){$/;"	f	file:
sharable	sqlite3_MFAW.c	/^  u8 sharable;       \/* True if we can share pBt with another db *\/$/;"	m	struct:Btree	file:
shared	sqlite3_MFAW.c	/^  winceLock *shared;      \/* Global shared lock memory for the file  *\/$/;"	m	struct:winFile	file:
sharedByte	sqlite3_MFAW.c	/^  unsigned long long sharedByte;  \/* for AFP simulated shared lock *\/$/;"	m	struct:unixInodeInfo	file:
sharedCacheEnabled	sqlite3_MFAW.c	/^  int sharedCacheEnabled;           \/* true if shared-cache mode enabled *\/$/;"	m	struct:Sqlite3Config	file:
sharedLockByte	sqlite3_MFAW.c	/^  short sharedLockByte;   \/* Randomly chosen byte used as a shared lock *\/$/;"	m	struct:winFile	file:
sharedMask	sqlite3_MFAW.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:unixShm	file:
sharedMask	sqlite3_MFAW.c	/^  u16 sharedMask;            \/* Mask of shared locks held *\/$/;"	m	struct:winShm	file:
sharedMask	sqlite3_MFAW.c	/^  u8 sharedMask;             \/* Mask of shared locks held *\/$/;"	m	struct:unixShmNode	file:
show_help	mobibench.c	/^void show_help()$/;"	f
show_help	mobibench_MFAW.c	/^void show_help()$/;"	f
show_progress	mobibench.c	/^void show_progress(int pro)$/;"	f
show_progress	mobibench_MFAW.c	/^void show_progress(int pro)$/;"	f
show_progress_IOPS	mobibench.c	/^void show_progress_IOPS(int pro, int IOC)$/;"	f
show_progress_IOPS	mobibench_MFAW.c	/^void show_progress_IOPS(int pro, int IOC)$/;"	f
signal_thread_status	mobibench.c	/^void signal_thread_status(int thread_num, thread_status_t stat, pthread_cond_t* cond)$/;"	f
signal_thread_status	mobibench_MFAW.c	/^void signal_thread_status(int thread_num, thread_status_t stat, pthread_cond_t* cond)$/;"	f
simpleClose	sqlite3_MFAW.c	/^static int simpleClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
simpleCreate	sqlite3_MFAW.c	/^static int simpleCreate($/;"	f	file:
simpleDelim	sqlite3_MFAW.c	/^static int simpleDelim(simple_tokenizer *t, unsigned char c){$/;"	f	file:
simpleDestroy	sqlite3_MFAW.c	/^static int simpleDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
simpleNext	sqlite3_MFAW.c	/^static int simpleNext($/;"	f	file:
simpleOpen	sqlite3_MFAW.c	/^static int simpleOpen($/;"	f	file:
simpleTokenizerModule	sqlite3_MFAW.c	/^static const sqlite3_tokenizer_module simpleTokenizerModule = {$/;"	v	file:
simple_tokenizer	sqlite3_MFAW.c	/^typedef struct simple_tokenizer {$/;"	s	file:
simple_tokenizer	sqlite3_MFAW.c	/^} simple_tokenizer;$/;"	t	typeref:struct:simple_tokenizer	file:
simple_tokenizer_cursor	sqlite3_MFAW.c	/^typedef struct simple_tokenizer_cursor {$/;"	s	file:
simple_tokenizer_cursor	sqlite3_MFAW.c	/^} simple_tokenizer_cursor;$/;"	t	typeref:struct:simple_tokenizer_cursor	file:
single_get_nr_switches	mobibench.c	/^int single_get_nr_switches(void)$/;"	f
single_get_nr_switches	mobibench_MFAW.c	/^int single_get_nr_switches(void)$/;"	f
size4x	sqlite3_MFAW.c	/^      u32 size4x;     \/* 4x the size of current chunk in Mem3Block elements *\/$/;"	m	struct:Mem3Block::__anon10::__anon11	file:
sjfd	sqlite3_MFAW.c	/^  sqlite3_file *sjfd;         \/* File descriptor for sub-journal *\/$/;"	m	struct:Pager	file:
skipFlag	sqlite3_MFAW.c	/^  u8 skipFlag;          \/* Skip accumulator loading if true *\/$/;"	m	struct:sqlite3_context	file:
skipNext	sqlite3_MFAW.c	/^  int skipNext;    \/* Prev() is noop if negative. Next() is noop if positive.$/;"	m	struct:BtCursor	file:
sleep	sqlite3_MFAW.c	/^  int (*sleep)(int);$/;"	m	struct:sqlite3_api_routines	file:
sleepObj	sqlite3_MFAW.c	/^static HANDLE sleepObj = NULL;$/;"	v	file:
snprintf	sqlite3_MFAW.c	/^  char * (*snprintf)(int,char*,const char*,...);$/;"	m	struct:sqlite3_api_routines	file:
softHeapLimitEnforcer	sqlite3_MFAW.c	/^static void softHeapLimitEnforcer($/;"	f	file:
soft_heap_limit	sqlite3_MFAW.c	/^  void (*soft_heap_limit)(int);$/;"	m	struct:sqlite3_api_routines	file:
soft_heap_limit64	sqlite3_MFAW.c	/^  sqlite3_int64 (*soft_heap_limit64)(sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
sortFlags	sqlite3_MFAW.c	/^  u8 sortFlags;         \/* Zero or more SORTFLAG_* bits *\/$/;"	m	struct:SortCtx	file:
sortOrder	sqlite3_MFAW.c	/^    u8 sortOrder;           \/* 1 for DESC or 0 for ASC *\/$/;"	m	struct:ExprList::ExprList_item	file:
sorted	sqlite3_MFAW.c	/^  u8 sorted;                \/* True if really sorted (not just grouped) *\/$/;"	m	struct:WhereInfo	file:
sortingIdx	sqlite3_MFAW.c	/^  int sortingIdx;         \/* Cursor number of the sorting index *\/$/;"	m	struct:AggInfo	file:
sortingIdxPTab	sqlite3_MFAW.c	/^  int sortingIdxPTab;     \/* Cursor number of pseudo-table *\/$/;"	m	struct:AggInfo	file:
soundexFunc	sqlite3_MFAW.c	/^static void soundexFunc($/;"	f	file:
sourceid	sqlite3_MFAW.c	/^  const char *(*sourceid)(void);$/;"	m	struct:sqlite3_api_routines	file:
sourceidFunc	sqlite3_MFAW.c	/^static void sourceidFunc($/;"	f	file:
spanBinaryExpr	sqlite3_MFAW.c	/^  static void spanBinaryExpr($/;"	f	file:
spanExpr	sqlite3_MFAW.c	/^  static void spanExpr(ExprSpan *pOut, Parse *pParse, int op, Token *pValue){$/;"	f	file:
spanSet	sqlite3_MFAW.c	/^  static void spanSet(ExprSpan *pOut, Token *pStart, Token *pEnd){$/;"	f	file:
spanUnaryPostfix	sqlite3_MFAW.c	/^  static void spanUnaryPostfix($/;"	f	file:
spanUnaryPrefix	sqlite3_MFAW.c	/^  static void spanUnaryPrefix($/;"	f	file:
splitNodeStartree	sqlite3_MFAW.c	/^static int splitNodeStartree($/;"	f	file:
sql	sqlite3_MFAW.c	/^  const char *(*sql)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
sql_cb	mobibench.c	/^int sql_cb(void* data, int ncols, char** values, char** headers)$/;"	f
sql_cb	mobibench_MFAW.c	/^int sql_cb(void* data, int ncols, char** values, char** headers)$/;"	f
sqlite3	sqlite3_MFAW.c	/^struct sqlite3 {$/;"	s	file:
sqlite3	sqlite3_MFAW.c	/^typedef struct sqlite3 sqlite3;$/;"	t	typeref:struct:sqlite3	file:
sqlite3AbsInt32	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3AbsInt32(int x){$/;"	f
sqlite3AddCheckConstraint	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3AddCheckConstraint($/;"	f
sqlite3AddCollateType	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3AddCollateType(Parse *pParse, Token *pToken){$/;"	f
sqlite3AddColumn	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3AddColumn(Parse *pParse, Token *pName){$/;"	f
sqlite3AddColumnType	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3AddColumnType(Parse *pParse, Token *pType){$/;"	f
sqlite3AddDefaultValue	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3AddDefaultValue(Parse *pParse, ExprSpan *pSpan){$/;"	f
sqlite3AddInt64	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3AddInt64(i64 *pA, i64 iB){$/;"	f
sqlite3AddNotNull	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3AddNotNull(Parse *pParse, int onError){$/;"	f
sqlite3AddPrimaryKey	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3AddPrimaryKey($/;"	f
sqlite3AffinityType	sqlite3_MFAW.c	/^SQLITE_PRIVATE char sqlite3AffinityType(const char *zIn, u8 *pszEst){$/;"	f
sqlite3AllocateIndexObject	sqlite3_MFAW.c	/^SQLITE_PRIVATE Index *sqlite3AllocateIndexObject($/;"	f
sqlite3AlterBeginAddColumn	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3AlterBeginAddColumn(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3AlterFinishAddColumn	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3AlterFinishAddColumn(Parse *pParse, Token *pColDef){$/;"	f
sqlite3AlterFunctions	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3AlterFunctions(void){$/;"	f
sqlite3AlterRenameTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3AlterRenameTable($/;"	f
sqlite3AnalysisLoad	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3AnalysisLoad(sqlite3 *db, int iDb){$/;"	f
sqlite3Analyze	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Analyze(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3AnalyzeFunctions	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3AnalyzeFunctions(void){$/;"	f
sqlite3ApiExit	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ApiExit(sqlite3* db, int rc){$/;"	f
sqlite3Apis	sqlite3_MFAW.c	/^static const sqlite3_api_routines sqlite3Apis = { 0 };$/;"	v	file:
sqlite3Apis	sqlite3_MFAW.c	/^static const sqlite3_api_routines sqlite3Apis = {$/;"	v	file:
sqlite3AppendChar	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3AppendChar(StrAccum *p, int N, char c){$/;"	f
sqlite3ArrayAllocate	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3ArrayAllocate($/;"	f
sqlite3AtoF	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3AtoF(const char *z, double *pResult, int length, u8 enc){$/;"	f
sqlite3Atoi	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Atoi(const char *z){$/;"	f
sqlite3Atoi64	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Atoi64(const char *zNum, i64 *pNum, int length, u8 enc){$/;"	f
sqlite3Attach	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Attach(Parse *pParse, Expr *p, Expr *pDbname, Expr *pKey){$/;"	f
sqlite3AuthCheck	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3AuthCheck($/;"	f
sqlite3AuthCheck	sqlite3_MFAW.c	13361;"	d	file:
sqlite3AuthContextPop	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3AuthContextPop(AuthContext *pContext){$/;"	f
sqlite3AuthContextPop	sqlite3_MFAW.c	13363;"	d	file:
sqlite3AuthContextPush	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3AuthContextPush($/;"	f
sqlite3AuthContextPush	sqlite3_MFAW.c	13362;"	d	file:
sqlite3AuthRead	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3AuthRead($/;"	f
sqlite3AuthRead	sqlite3_MFAW.c	13360;"	d	file:
sqlite3AuthReadCol	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3AuthReadCol($/;"	f
sqlite3AutoExtList	sqlite3_MFAW.c	/^static SQLITE_WSD struct sqlite3AutoExtList {$/;"	s	file:
sqlite3AutoExtList	sqlite3_MFAW.c	/^typedef struct sqlite3AutoExtList sqlite3AutoExtList;$/;"	t	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoLoadExtensions	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3AutoLoadExtensions(sqlite3 *db){$/;"	f
sqlite3Autoext	sqlite3_MFAW.c	/^} sqlite3Autoext = { 0, 0 };$/;"	v	typeref:struct:sqlite3AutoExtList	file:
sqlite3AutoincrementBegin	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3AutoincrementBegin(Parse *pParse){$/;"	f
sqlite3AutoincrementBegin	sqlite3_MFAW.c	13182;"	d	file:
sqlite3AutoincrementEnd	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3AutoincrementEnd(Parse *pParse){$/;"	f
sqlite3AutoincrementEnd	sqlite3_MFAW.c	13183;"	d	file:
sqlite3BackupRestart	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BackupRestart(sqlite3_backup *pBackup){$/;"	f
sqlite3BackupUpdate	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BackupUpdate(sqlite3_backup *pBackup, Pgno iPage, const u8 *aData){$/;"	f
sqlite3BeginBenignMalloc	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BeginBenignMalloc(void){$/;"	f
sqlite3BeginBenignMalloc	sqlite3_MFAW.c	13667;"	d	file:
sqlite3BeginParse	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BeginParse(Parse *pParse, int explainFlag){$/;"	f
sqlite3BeginTransaction	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BeginTransaction(Parse *pParse, int type){$/;"	f
sqlite3BeginTrigger	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BeginTrigger($/;"	f
sqlite3BeginWriteOperation	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BeginWriteOperation(Parse *pParse, int setStatement, int iDb){$/;"	f
sqlite3BenignMallocHooks	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BenignMallocHooks($/;"	f
sqlite3BinaryCompareCollSeq	sqlite3_MFAW.c	/^SQLITE_PRIVATE CollSeq *sqlite3BinaryCompareCollSeq($/;"	f
sqlite3BitvecBuiltinTest	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BitvecBuiltinTest(int sz, int *aOp){$/;"	f
sqlite3BitvecClear	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BitvecClear(Bitvec *p, u32 i, void *pBuf){$/;"	f
sqlite3BitvecCreate	sqlite3_MFAW.c	/^SQLITE_PRIVATE Bitvec *sqlite3BitvecCreate(u32 iSize){$/;"	f
sqlite3BitvecDestroy	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BitvecDestroy(Bitvec *p){$/;"	f
sqlite3BitvecSet	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BitvecSet(Bitvec *p, u32 i){$/;"	f
sqlite3BitvecSize	sqlite3_MFAW.c	/^SQLITE_PRIVATE u32 sqlite3BitvecSize(Bitvec *p){$/;"	f
sqlite3BitvecTest	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BitvecTest(Bitvec *p, u32 i){$/;"	f
sqlite3BlobCompare	sqlite3_MFAW.c	/^static SQLITE_NOINLINE int sqlite3BlobCompare(const Mem *pB1, const Mem *pB2){$/;"	f	file:
sqlite3BlockedList	sqlite3_MFAW.c	/^static sqlite3 *SQLITE_WSD sqlite3BlockedList = 0;$/;"	v	file:
sqlite3BtreeBeginStmt	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginStmt(Btree *p, int iStatement){$/;"	f
sqlite3BtreeBeginTrans	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeBeginTrans(Btree *p, int wrflag){$/;"	f
sqlite3BtreeCheckpoint	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeCheckpoint(Btree *p, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3BtreeClearCursor	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BtreeClearCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeClearTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeClearTable(Btree *p, int iTable, int *pnChange){$/;"	f
sqlite3BtreeClearTableOfCursor	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeClearTableOfCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeClose	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeClose(Btree *p){$/;"	f
sqlite3BtreeCloseCursor	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeCloseCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeCommit	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeCommit(Btree *p){$/;"	f
sqlite3BtreeCommitPhaseOne	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseOne(Btree *p, const char *zMaster){$/;"	f
sqlite3BtreeCommitPhaseTwo	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeCommitPhaseTwo(Btree *p, int bCleanup){$/;"	f
sqlite3BtreeCopyFile	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeCopyFile(Btree *pTo, Btree *pFrom){$/;"	f
sqlite3BtreeCount	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeCount(BtCursor *pCur, i64 *pnEntry){$/;"	f
sqlite3BtreeCreateTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeCreateTable(Btree *p, int *piTable, int flags){$/;"	f
sqlite3BtreeCursor	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeCursor($/;"	f
sqlite3BtreeCursorHasHint	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorHasHint(BtCursor *pCsr, unsigned int mask){$/;"	f
sqlite3BtreeCursorHasMoved	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorHasMoved(BtCursor *pCur){$/;"	f
sqlite3BtreeCursorHints	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorHints(BtCursor *pCsr, unsigned int mask){$/;"	f
sqlite3BtreeCursorIsValid	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorIsValid(BtCursor *pCur){$/;"	f
sqlite3BtreeCursorRestore	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorRestore(BtCursor *pCur, int *pDifferentRow){$/;"	f
sqlite3BtreeCursorSize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeCursorSize(void){$/;"	f
sqlite3BtreeCursorZero	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BtreeCursorZero(BtCursor *p){$/;"	f
sqlite3BtreeData	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeData(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreeDataFetch	sqlite3_MFAW.c	/^SQLITE_PRIVATE const void *sqlite3BtreeDataFetch(BtCursor *pCur, u32 *pAmt){$/;"	f
sqlite3BtreeDataSize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeDataSize(BtCursor *pCur, u32 *pSize){$/;"	f
sqlite3BtreeDelete	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeDelete(BtCursor *pCur){$/;"	f
sqlite3BtreeDropTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeDropTable(Btree *p, int iTable, int *piMoved){$/;"	f
sqlite3BtreeEnter	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BtreeEnter(Btree *p){$/;"	f
sqlite3BtreeEnter	sqlite3_MFAW.c	9587;"	d	file:
sqlite3BtreeEnterAll	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BtreeEnterAll(sqlite3 *db){$/;"	f
sqlite3BtreeEnterAll	sqlite3_MFAW.c	9588;"	d	file:
sqlite3BtreeEnterCursor	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BtreeEnterCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeEnterCursor	sqlite3_MFAW.c	9607;"	d	file:
sqlite3BtreeEof	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeEof(BtCursor *pCur){$/;"	f
sqlite3BtreeFirst	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeFirst(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeGetAutoVacuum	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeGetAutoVacuum(Btree *p){$/;"	f
sqlite3BtreeGetFilename	sqlite3_MFAW.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetFilename(Btree *p){$/;"	f
sqlite3BtreeGetJournalname	sqlite3_MFAW.c	/^SQLITE_PRIVATE const char *sqlite3BtreeGetJournalname(Btree *p){$/;"	f
sqlite3BtreeGetMeta	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BtreeGetMeta(Btree *p, int idx, u32 *pMeta){$/;"	f
sqlite3BtreeGetOptimalReserve	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeGetOptimalReserve(Btree *p){$/;"	f
sqlite3BtreeGetPageSize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeGetPageSize(Btree *p){$/;"	f
sqlite3BtreeGetReserveNoMutex	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeGetReserveNoMutex(Btree *p){$/;"	f
sqlite3BtreeHoldsAllMutexes	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeHoldsAllMutexes(sqlite3 *db){$/;"	f
sqlite3BtreeHoldsAllMutexes	sqlite3_MFAW.c	9612;"	d	file:
sqlite3BtreeHoldsMutex	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeHoldsMutex(Btree *p){$/;"	f
sqlite3BtreeHoldsMutex	sqlite3_MFAW.c	9611;"	d	file:
sqlite3BtreeIncrVacuum	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeIncrVacuum(Btree *p){$/;"	f
sqlite3BtreeIncrblobCursor	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BtreeIncrblobCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeInsert	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeInsert($/;"	f
sqlite3BtreeIntegrityCheck	sqlite3_MFAW.c	/^SQLITE_PRIVATE char *sqlite3BtreeIntegrityCheck($/;"	f
sqlite3BtreeIsInBackup	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInBackup(Btree *p){$/;"	f
sqlite3BtreeIsInReadTrans	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInReadTrans(Btree *p){$/;"	f
sqlite3BtreeIsInTrans	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeIsInTrans(Btree *p){$/;"	f
sqlite3BtreeIsReadonly	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeIsReadonly(Btree *p){$/;"	f
sqlite3BtreeKey	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeKey(BtCursor *pCur, u32 offset, u32 amt, void *pBuf){$/;"	f
sqlite3BtreeKeyFetch	sqlite3_MFAW.c	/^SQLITE_PRIVATE const void *sqlite3BtreeKeyFetch(BtCursor *pCur, u32 *pAmt){$/;"	f
sqlite3BtreeKeySize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeKeySize(BtCursor *pCur, i64 *pSize){$/;"	f
sqlite3BtreeLast	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeLast(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeLastPage	sqlite3_MFAW.c	/^SQLITE_PRIVATE u32 sqlite3BtreeLastPage(Btree *p){$/;"	f
sqlite3BtreeLeave	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BtreeLeave(Btree *p){$/;"	f
sqlite3BtreeLeave	sqlite3_MFAW.c	9606;"	d	file:
sqlite3BtreeLeaveAll	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BtreeLeaveAll(sqlite3 *db){$/;"	f
sqlite3BtreeLeaveAll	sqlite3_MFAW.c	9609;"	d	file:
sqlite3BtreeLeaveCursor	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3BtreeLeaveCursor(BtCursor *pCur){$/;"	f
sqlite3BtreeLeaveCursor	sqlite3_MFAW.c	9608;"	d	file:
sqlite3BtreeLockTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeLockTable(Btree *p, int iTab, u8 isWriteLock){$/;"	f
sqlite3BtreeMaxPageCount	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeMaxPageCount(Btree *p, int mxPage){$/;"	f
sqlite3BtreeMovetoUnpacked	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeMovetoUnpacked($/;"	f
sqlite3BtreeNewDb	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeNewDb(Btree *p){$/;"	f
sqlite3BtreeNext	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeNext(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreeOpen	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeOpen($/;"	f
sqlite3BtreePager	sqlite3_MFAW.c	/^SQLITE_PRIVATE Pager *sqlite3BtreePager(Btree *p){$/;"	f
sqlite3BtreePrevious	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreePrevious(BtCursor *pCur, int *pRes){$/;"	f
sqlite3BtreePutData	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreePutData(BtCursor *pCsr, u32 offset, u32 amt, void *z){$/;"	f
sqlite3BtreeRollback	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeRollback(Btree *p, int tripCode, int writeOnly){$/;"	f
sqlite3BtreeSavepoint	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeSavepoint(Btree *p, int op, int iSavepoint){$/;"	f
sqlite3BtreeSchema	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3BtreeSchema(Btree *p, int nBytes, void(*xFree)(void *)){$/;"	f
sqlite3BtreeSchemaLocked	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeSchemaLocked(Btree *p){$/;"	f
sqlite3BtreeSecureDelete	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeSecureDelete(Btree *p, int newFlag){$/;"	f
sqlite3BtreeSetAutoVacuum	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeSetAutoVacuum(Btree *p, int autoVacuum){$/;"	f
sqlite3BtreeSetCacheSize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeSetCacheSize(Btree *p, int mxPage){$/;"	f
sqlite3BtreeSetMmapLimit	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeSetMmapLimit(Btree *p, sqlite3_int64 szMmap){$/;"	f
sqlite3BtreeSetPageSize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeSetPageSize(Btree *p, int pageSize, int nReserve, int iFix){$/;"	f
sqlite3BtreeSetPagerFlags	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeSetPagerFlags($/;"	f
sqlite3BtreeSetVersion	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeSetVersion(Btree *pBtree, int iVersion){$/;"	f
sqlite3BtreeSharable	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeSharable(Btree *p){$/;"	f
sqlite3BtreeSharable	sqlite3_MFAW.c	9605;"	d	file:
sqlite3BtreeSyncDisabled	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeSyncDisabled(Btree *p){$/;"	f
sqlite3BtreeTripAllCursors	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeTripAllCursors(Btree *pBtree, int errCode, int writeOnly){$/;"	f
sqlite3BtreeUpdateMeta	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3BtreeUpdateMeta(Btree *p, int idx, u32 iMeta){$/;"	f
sqlite3CantopenError	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3CantopenError(int lineno){$/;"	f
sqlite3ChangeCookie	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ChangeCookie(Parse *pParse, int iDb){$/;"	f
sqlite3CheckCollSeq	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3CheckCollSeq(Parse *pParse, CollSeq *pColl){$/;"	f
sqlite3CheckObjectName	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3CheckObjectName(Parse *pParse, const char *zName){$/;"	f
sqlite3Checkpoint	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Checkpoint(sqlite3 *db, int iDb, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3ClearStatTables	sqlite3_MFAW.c	/^static void sqlite3ClearStatTables($/;"	f	file:
sqlite3ClearTempRegCache	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ClearTempRegCache(Parse *pParse){$/;"	f
sqlite3Close	sqlite3_MFAW.c	/^static int sqlite3Close(sqlite3 *db, int forceZombie){$/;"	f	file:
sqlite3CloseExtensions	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3CloseExtensions(sqlite3 *db){$/;"	f
sqlite3CloseExtensions	sqlite3_MFAW.c	13551;"	d	file:
sqlite3CloseSavepoints	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3CloseSavepoints(sqlite3 *db){$/;"	f
sqlite3CodeDropTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3CodeDropTable(Parse *pParse, Table *pTab, int iDb, int isView){$/;"	f
sqlite3CodeOnce	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3CodeOnce(Parse *pParse){$/;"	f
sqlite3CodeRowTrigger	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3CodeRowTrigger($/;"	f
sqlite3CodeRowTrigger	sqlite3_MFAW.c	13343;"	d	file:
sqlite3CodeRowTriggerDirect	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3CodeRowTriggerDirect($/;"	f
sqlite3CodeRowTriggerDirect	sqlite3_MFAW.c	13344;"	d	file:
sqlite3CodeSubselect	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3CodeSubselect($/;"	f
sqlite3CodeVerifyNamedSchema	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3CodeVerifyNamedSchema(Parse *pParse, const char *zDb){$/;"	f
sqlite3CodeVerifySchema	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3CodeVerifySchema(Parse *pParse, int iDb){$/;"	f
sqlite3CollapseDatabaseArray	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3CollapseDatabaseArray(sqlite3 *db){$/;"	f
sqlite3ColumnDefault	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ColumnDefault(Vdbe *v, Table *pTab, int i, int iReg){$/;"	f
sqlite3ColumnOfIndex	sqlite3_MFAW.c	/^SQLITE_PRIVATE i16 sqlite3ColumnOfIndex(Index *pIdx, i16 iCol){$/;"	f
sqlite3CommitInternalChanges	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3CommitInternalChanges(sqlite3 *db){$/;"	f
sqlite3CommitTransaction	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3CommitTransaction(Parse *pParse){$/;"	f
sqlite3CompareAffinity	sqlite3_MFAW.c	/^SQLITE_PRIVATE char sqlite3CompareAffinity(Expr *pExpr, char aff2){$/;"	f
sqlite3CompleteInsertion	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3CompleteInsertion($/;"	f
sqlite3Config	sqlite3_MFAW.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config = {$/;"	v	typeref:struct:Sqlite3Config
sqlite3Config	sqlite3_MFAW.c	/^SQLITE_PRIVATE SQLITE_WSD struct Sqlite3Config sqlite3Config;$/;"	v	typeref:struct:Sqlite3Config
sqlite3ConnectionBlocked	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ConnectionBlocked(sqlite3 *db, sqlite3 *pBlocker){$/;"	f
sqlite3ConnectionBlocked	sqlite3_MFAW.c	13718;"	d	file:
sqlite3ConnectionClosed	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ConnectionClosed(sqlite3 *db){$/;"	f
sqlite3ConnectionClosed	sqlite3_MFAW.c	13720;"	d	file:
sqlite3ConnectionUnlocked	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ConnectionUnlocked(sqlite3 *db){$/;"	f
sqlite3ConnectionUnlocked	sqlite3_MFAW.c	13719;"	d	file:
sqlite3CorruptError	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3CorruptError(int lineno){$/;"	f
sqlite3Coverage	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Coverage(int x){$/;"	f
sqlite3CreateColumnExpr	sqlite3_MFAW.c	/^SQLITE_PRIVATE Expr *sqlite3CreateColumnExpr(sqlite3 *db, SrcList *pSrc, int iSrc, int iCol){$/;"	f
sqlite3CreateForeignKey	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3CreateForeignKey($/;"	f
sqlite3CreateFunc	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3CreateFunc($/;"	f
sqlite3CreateIndex	sqlite3_MFAW.c	/^SQLITE_PRIVATE Index *sqlite3CreateIndex($/;"	f
sqlite3CreateView	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3CreateView($/;"	f
sqlite3CtypeMap	sqlite3_MFAW.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[256] = {$/;"	v
sqlite3CtypeMap	sqlite3_MFAW.c	/^SQLITE_PRIVATE const unsigned char sqlite3CtypeMap[];$/;"	v
sqlite3DbFree	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3DbFree(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocRaw	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3DbMallocRaw(sqlite3 *db, u64 n){$/;"	f
sqlite3DbMallocSize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3DbMallocSize(sqlite3 *db, void *p){$/;"	f
sqlite3DbMallocZero	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3DbMallocZero(sqlite3 *db, u64 n){$/;"	f
sqlite3DbMaskAllZero	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3DbMaskAllZero(yDbMask m){$/;"	f
sqlite3DbNameToBtree	sqlite3_MFAW.c	/^SQLITE_PRIVATE Btree *sqlite3DbNameToBtree(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3DbRealloc	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3DbRealloc(sqlite3 *db, void *p, u64 n){$/;"	f
sqlite3DbReallocOrFree	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3DbReallocOrFree(sqlite3 *db, void *p, u64 n){$/;"	f
sqlite3DbStrDup	sqlite3_MFAW.c	/^SQLITE_PRIVATE char *sqlite3DbStrDup(sqlite3 *db, const char *z){$/;"	f
sqlite3DbStrNDup	sqlite3_MFAW.c	/^SQLITE_PRIVATE char *sqlite3DbStrNDup(sqlite3 *db, const char *z, u64 n){$/;"	f
sqlite3DebugPrintf	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3DebugPrintf(const char *zFormat, ...){$/;"	f
sqlite3DecOrHexToI64	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3DecOrHexToI64(const char *z, i64 *pOut){$/;"	f
sqlite3DefaultMutex	sqlite3_MFAW.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3DefaultMutex(void){$/;"	f
sqlite3DefaultRowEst	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3DefaultRowEst(Index *pIdx){$/;"	f
sqlite3DeferForeignKey	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3DeferForeignKey(Parse *pParse, int isDeferred){$/;"	f
sqlite3DeleteFrom	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3DeleteFrom($/;"	f
sqlite3DeleteIndexSamples	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3DeleteIndexSamples(sqlite3 *db, Index *pIdx){$/;"	f
sqlite3DeleteTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3DeleteTable(sqlite3 *db, Table *pTable){$/;"	f
sqlite3DeleteTrigger	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3DeleteTrigger(sqlite3 *db, Trigger *pTrigger){$/;"	f
sqlite3DeleteTrigger	sqlite3_MFAW.c	13340;"	d	file:
sqlite3DeleteTriggerStep	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3DeleteTriggerStep(sqlite3 *db, TriggerStep *pTriggerStep){$/;"	f
sqlite3Dequote	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Dequote(char *z){$/;"	f
sqlite3Detach	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Detach(Parse *pParse, Expr *pDbname){$/;"	f
sqlite3DropIndex	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3DropIndex(Parse *pParse, SrcList *pName, int ifExists){$/;"	f
sqlite3DropTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3DropTable(Parse *pParse, SrcList *pName, int isView, int noErr){$/;"	f
sqlite3DropTrigger	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3DropTrigger(Parse *pParse, SrcList *pName, int noErr){$/;"	f
sqlite3DropTriggerPtr	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3DropTriggerPtr(Parse *pParse, Trigger *pTrigger){$/;"	f
sqlite3DropTriggerPtr	sqlite3_MFAW.c	13341;"	d	file:
sqlite3EndBenignMalloc	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3EndBenignMalloc(void){$/;"	f
sqlite3EndBenignMalloc	sqlite3_MFAW.c	13668;"	d	file:
sqlite3EndTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3EndTable($/;"	f
sqlite3ErrName	sqlite3_MFAW.c	/^SQLITE_PRIVATE const char *sqlite3ErrName(int rc){$/;"	f
sqlite3ErrStr	sqlite3_MFAW.c	/^SQLITE_PRIVATE const char *sqlite3ErrStr(int rc){$/;"	f
sqlite3Error	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Error(sqlite3 *db, int err_code){$/;"	f
sqlite3ErrorMsg	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ErrorMsg(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3ErrorWithMsg	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ErrorWithMsg(sqlite3 *db, int err_code, const char *zFormat, ...){$/;"	f
sqlite3ExpirePreparedStatements	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExpirePreparedStatements(sqlite3 *db){$/;"	f
sqlite3Expr	sqlite3_MFAW.c	/^SQLITE_PRIVATE Expr *sqlite3Expr($/;"	f
sqlite3ExprAddCollateString	sqlite3_MFAW.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAddCollateString(Parse *pParse, Expr *pExpr, const char *zC){$/;"	f
sqlite3ExprAddCollateToken	sqlite3_MFAW.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAddCollateToken($/;"	f
sqlite3ExprAffinity	sqlite3_MFAW.c	/^SQLITE_PRIVATE char sqlite3ExprAffinity(Expr *pExpr){$/;"	f
sqlite3ExprAlloc	sqlite3_MFAW.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAlloc($/;"	f
sqlite3ExprAnalyzeAggList	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggList(NameContext *pNC, ExprList *pList){$/;"	f
sqlite3ExprAnalyzeAggregates	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprAnalyzeAggregates(NameContext *pNC, Expr *pExpr){$/;"	f
sqlite3ExprAnd	sqlite3_MFAW.c	/^SQLITE_PRIVATE Expr *sqlite3ExprAnd(sqlite3 *db, Expr *pLeft, Expr *pRight){$/;"	f
sqlite3ExprAssignVarNumber	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprAssignVarNumber(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprAttachSubtrees	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprAttachSubtrees($/;"	f
sqlite3ExprCacheAffinityChange	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprCacheAffinityChange(Parse *pParse, int iStart, int iCount){$/;"	f
sqlite3ExprCacheClear	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprCacheClear(Parse *pParse){$/;"	f
sqlite3ExprCachePinRegister	sqlite3_MFAW.c	/^static void sqlite3ExprCachePinRegister(Parse *pParse, int iReg){$/;"	f	file:
sqlite3ExprCachePop	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprCachePop(Parse *pParse){$/;"	f
sqlite3ExprCachePush	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprCachePush(Parse *pParse){$/;"	f
sqlite3ExprCacheRemove	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprCacheRemove(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ExprCacheStore	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprCacheStore(Parse *pParse, int iTab, int iCol, int iReg){$/;"	f
sqlite3ExprCanBeNull	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ExprCanBeNull(const Expr *p){$/;"	f
sqlite3ExprCheckHeight	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ExprCheckHeight(Parse *pParse, int nHeight){$/;"	f
sqlite3ExprCheckHeight	sqlite3_MFAW.c	13707;"	d	file:
sqlite3ExprCode	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprCode(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeAndCache	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprCodeAndCache(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeAtInit	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprCodeAtInit($/;"	f
sqlite3ExprCodeExprList	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ExprCodeExprList($/;"	f
sqlite3ExprCodeFactorable	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprCodeFactorable(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeGetColumn	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ExprCodeGetColumn($/;"	f
sqlite3ExprCodeGetColumnOfTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprCodeGetColumnOfTable($/;"	f
sqlite3ExprCodeIN	sqlite3_MFAW.c	/^static void sqlite3ExprCodeIN($/;"	f	file:
sqlite3ExprCodeMove	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprCodeMove(Parse *pParse, int iFrom, int iTo, int nReg){$/;"	f
sqlite3ExprCodeTarget	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTarget(Parse *pParse, Expr *pExpr, int target){$/;"	f
sqlite3ExprCodeTemp	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ExprCodeTemp(Parse *pParse, Expr *pExpr, int *pReg){$/;"	f
sqlite3ExprCollSeq	sqlite3_MFAW.c	/^SQLITE_PRIVATE CollSeq *sqlite3ExprCollSeq(Parse *pParse, Expr *pExpr){$/;"	f
sqlite3ExprCompare	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ExprCompare(Expr *pA, Expr *pB, int iTab){$/;"	f
sqlite3ExprDelete	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprDelete(sqlite3 *db, Expr *p){$/;"	f
sqlite3ExprDup	sqlite3_MFAW.c	/^SQLITE_PRIVATE Expr *sqlite3ExprDup(sqlite3 *db, Expr *p, int flags){$/;"	f
sqlite3ExprFunction	sqlite3_MFAW.c	/^SQLITE_PRIVATE Expr *sqlite3ExprFunction(Parse *pParse, ExprList *pList, Token *pToken){$/;"	f
sqlite3ExprIfFalse	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprIfFalse(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprIfTrue	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprIfTrue(Parse *pParse, Expr *pExpr, int dest, int jumpIfNull){$/;"	f
sqlite3ExprImpliesExpr	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ExprImpliesExpr(Expr *pE1, Expr *pE2, int iTab){$/;"	f
sqlite3ExprIsConstant	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstant(Expr *p){$/;"	f
sqlite3ExprIsConstantNotJoin	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantNotJoin(Expr *p){$/;"	f
sqlite3ExprIsConstantOrFunction	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ExprIsConstantOrFunction(Expr *p, u8 isInit){$/;"	f
sqlite3ExprIsInteger	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ExprIsInteger(Expr *p, int *pValue){$/;"	f
sqlite3ExprIsTableConstant	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ExprIsTableConstant(Expr *p, int iCur){$/;"	f
sqlite3ExprListAppend	sqlite3_MFAW.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListAppend($/;"	f
sqlite3ExprListCheckLength	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprListCheckLength($/;"	f
sqlite3ExprListCompare	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ExprListCompare(ExprList *pA, ExprList *pB, int iTab){$/;"	f
sqlite3ExprListDelete	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprListDelete(sqlite3 *db, ExprList *pList){$/;"	f
sqlite3ExprListDup	sqlite3_MFAW.c	/^SQLITE_PRIVATE ExprList *sqlite3ExprListDup(sqlite3 *db, ExprList *p, int flags){$/;"	f
sqlite3ExprListFlags	sqlite3_MFAW.c	/^SQLITE_PRIVATE u32 sqlite3ExprListFlags(const ExprList *pList){$/;"	f
sqlite3ExprListSetName	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprListSetName($/;"	f
sqlite3ExprListSetSpan	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprListSetSpan($/;"	f
sqlite3ExprNeedsNoAffinityChange	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ExprNeedsNoAffinityChange(const Expr *p, char aff){$/;"	f
sqlite3ExprSetHeightAndFlags	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ExprSetHeightAndFlags(Parse *pParse, Expr *p){$/;"	f
sqlite3ExprSkipCollate	sqlite3_MFAW.c	/^SQLITE_PRIVATE Expr *sqlite3ExprSkipCollate(Expr *pExpr){$/;"	f
sqlite3FaultSim	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3FaultSim(int iTest){$/;"	f
sqlite3FaultSim	sqlite3_MFAW.c	13145;"	d	file:
sqlite3FileSuffix3	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3FileSuffix3(const char *zBaseFilename, char *z){$/;"	f
sqlite3FileSuffix3	sqlite3_MFAW.c	13445;"	d	file:
sqlite3FindCollSeq	sqlite3_MFAW.c	/^SQLITE_PRIVATE CollSeq *sqlite3FindCollSeq($/;"	f
sqlite3FindDb	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3FindDb(sqlite3 *db, Token *pName){$/;"	f
sqlite3FindDbName	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3FindDbName(sqlite3 *db, const char *zName){$/;"	f
sqlite3FindFunction	sqlite3_MFAW.c	/^SQLITE_PRIVATE FuncDef *sqlite3FindFunction($/;"	f
sqlite3FindInIndex	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3FindInIndex(Parse *pParse, Expr *pX, u32 inFlags, int *prRhsHasNull){$/;"	f
sqlite3FindIndex	sqlite3_MFAW.c	/^SQLITE_PRIVATE Index *sqlite3FindIndex(sqlite3 *db, const char *zName, const char *zDb){$/;"	f
sqlite3FindTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE Table *sqlite3FindTable(sqlite3 *db, const char *zName, const char *zDatabase){$/;"	f
sqlite3FinishCoding	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3FinishCoding(Parse *pParse){$/;"	f
sqlite3FinishTrigger	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3FinishTrigger($/;"	f
sqlite3FixExpr	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3FixExpr($/;"	f
sqlite3FixExprList	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3FixExprList($/;"	f
sqlite3FixInit	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3FixInit($/;"	f
sqlite3FixSelect	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3FixSelect($/;"	f
sqlite3FixSrcList	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3FixSrcList($/;"	f
sqlite3FixTriggerStep	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3FixTriggerStep($/;"	f
sqlite3FkActions	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3FkActions($/;"	f
sqlite3FkActions	sqlite3_MFAW.c	13637;"	d	file:
sqlite3FkCheck	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3FkCheck($/;"	f
sqlite3FkCheck	sqlite3_MFAW.c	13638;"	d	file:
sqlite3FkDelete	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3FkDelete(sqlite3 *db, Table *pTab){$/;"	f
sqlite3FkDelete	sqlite3_MFAW.c	13647;"	d	file:
sqlite3FkDropTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3FkDropTable(Parse *pParse, SrcList *pName, Table *pTab){$/;"	f
sqlite3FkDropTable	sqlite3_MFAW.c	13639;"	d	file:
sqlite3FkLocateIndex	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3FkLocateIndex($/;"	f
sqlite3FkLocateIndex	sqlite3_MFAW.c	13648;"	d	file:
sqlite3FkOldmask	sqlite3_MFAW.c	/^SQLITE_PRIVATE u32 sqlite3FkOldmask($/;"	f
sqlite3FkOldmask	sqlite3_MFAW.c	13640;"	d	file:
sqlite3FkReferences	sqlite3_MFAW.c	/^SQLITE_PRIVATE FKey *sqlite3FkReferences(Table *pTab){$/;"	f
sqlite3FkRequired	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3FkRequired($/;"	f
sqlite3FkRequired	sqlite3_MFAW.c	13641;"	d	file:
sqlite3Fts3AllSegdirs	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3AllSegdirs($/;"	f
sqlite3Fts3Always	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3Always(int b) { assert( b ); return b; }$/;"	f
sqlite3Fts3CacheDeferredDoclists	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3CacheDeferredDoclists(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3CacheDeferredDoclists	sqlite3_MFAW.c	133231;"	d	file:
sqlite3Fts3Corrupt	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3Corrupt(){$/;"	f
sqlite3Fts3CreateStatTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3CreateStatTable(int *pRc, Fts3Table *p){$/;"	f
sqlite3Fts3DeferToken	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferToken($/;"	f
sqlite3Fts3DeferToken	sqlite3_MFAW.c	133230;"	d	file:
sqlite3Fts3DeferredTokenList	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3DeferredTokenList($/;"	f
sqlite3Fts3DeferredTokenList	sqlite3_MFAW.c	133233;"	d	file:
sqlite3Fts3Dequote	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3Dequote(char *z){$/;"	f
sqlite3Fts3DoclistNext	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3DoclistNext($/;"	f
sqlite3Fts3DoclistPrev	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3DoclistPrev($/;"	f
sqlite3Fts3ErrMsg	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3ErrMsg(char **pzErr, const char *zFormat, ...){$/;"	f
sqlite3Fts3EvalPhraseCleanup	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3EvalPhraseCleanup(Fts3Phrase *pPhrase){$/;"	f
sqlite3Fts3EvalPhrasePoslist	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalPhrasePoslist($/;"	f
sqlite3Fts3EvalPhraseStats	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3EvalPhraseStats($/;"	f
sqlite3Fts3ExprFree	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3ExprFree(Fts3Expr *pDel){$/;"	f
sqlite3Fts3ExprInitTestInterface	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprInitTestInterface(sqlite3* db){$/;"	f
sqlite3Fts3ExprParse	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3ExprParse($/;"	f
sqlite3Fts3FirstFilter	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3FirstFilter($/;"	f
sqlite3Fts3FreeDeferredDoclists	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredDoclists(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3FreeDeferredDoclists	sqlite3_MFAW.c	133232;"	d	file:
sqlite3Fts3FreeDeferredTokens	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3FreeDeferredTokens(Fts3Cursor *pCsr){$/;"	f
sqlite3Fts3FreeDeferredTokens	sqlite3_MFAW.c	133229;"	d	file:
sqlite3Fts3GetVarint	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint(const char *p, sqlite_int64 *v){$/;"	f
sqlite3Fts3GetVarint32	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3GetVarint32(const char *p, int *pi){$/;"	f
sqlite3Fts3HashClear	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3HashClear(Fts3Hash *pH){$/;"	f
sqlite3Fts3HashFind	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashFind(const Fts3Hash *pH, const void *pKey, int nKey){$/;"	f
sqlite3Fts3HashFindElem	sqlite3_MFAW.c	/^SQLITE_PRIVATE Fts3HashElem *sqlite3Fts3HashFindElem($/;"	f
sqlite3Fts3HashInit	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3HashInit(Fts3Hash *pNew, char keyClass, char copyKey){$/;"	f
sqlite3Fts3HashInsert	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3Fts3HashInsert($/;"	f
sqlite3Fts3IcuTokenizerModule	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3IcuTokenizerModule($/;"	f
sqlite3Fts3Incrmerge	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3Incrmerge(Fts3Table *p, int nMerge, int nMin){$/;"	f
sqlite3Fts3Init	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3Init(sqlite3 *db){$/;"	f
sqlite3Fts3InitAux	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3InitAux(sqlite3 *db){$/;"	f
sqlite3Fts3InitHashTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3InitHashTable($/;"	f
sqlite3Fts3InitTok	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3InitTok(sqlite3 *db, Fts3Hash *pHash){$/;"	f
sqlite3Fts3InitTokenizer	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3InitTokenizer($/;"	f
sqlite3Fts3IsIdChar	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3IsIdChar(char c){$/;"	f
sqlite3Fts3Matchinfo	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3Matchinfo($/;"	f
sqlite3Fts3MaxLevel	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3MaxLevel(Fts3Table *p, int *pnMax){$/;"	f
sqlite3Fts3MsrIncrNext	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrNext($/;"	f
sqlite3Fts3MsrIncrRestart	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrRestart(Fts3MultiSegReader *pCsr){$/;"	f
sqlite3Fts3MsrIncrStart	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrIncrStart($/;"	f
sqlite3Fts3MsrOvfl	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3MsrOvfl($/;"	f
sqlite3Fts3Never	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3Never(int b)  { assert( !b ); return b; }$/;"	f
sqlite3Fts3NextToken	sqlite3_MFAW.c	/^SQLITE_PRIVATE const char *sqlite3Fts3NextToken(const char *zStr, int *pn){$/;"	f
sqlite3Fts3Offsets	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3Offsets($/;"	f
sqlite3Fts3OpenTokenizer	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3OpenTokenizer($/;"	f
sqlite3Fts3Optimize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3Optimize(Fts3Table *p){$/;"	f
sqlite3Fts3PendingTermsClear	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3PendingTermsClear(Fts3Table *p){$/;"	f
sqlite3Fts3PendingTermsFlush	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3PendingTermsFlush(Fts3Table *p){$/;"	f
sqlite3Fts3PorterTokenizerModule	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3PorterTokenizerModule($/;"	f
sqlite3Fts3PutVarint	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3PutVarint(char *p, sqlite_int64 v){$/;"	f
sqlite3Fts3ReadBlock	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3ReadBlock($/;"	f
sqlite3Fts3SegReaderCursor	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderCursor($/;"	f
sqlite3Fts3SegReaderFinish	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFinish($/;"	f
sqlite3Fts3SegReaderFree	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3SegReaderFree(Fts3SegReader *pReader){$/;"	f
sqlite3Fts3SegReaderNew	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderNew($/;"	f
sqlite3Fts3SegReaderPending	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderPending($/;"	f
sqlite3Fts3SegReaderStart	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderStart($/;"	f
sqlite3Fts3SegReaderStep	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3SegReaderStep($/;"	f
sqlite3Fts3SegmentsClose	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3SegmentsClose(Fts3Table *p){$/;"	f
sqlite3Fts3SelectDocsize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDocsize($/;"	f
sqlite3Fts3SelectDoctotal	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3SelectDoctotal($/;"	f
sqlite3Fts3SimpleTokenizerModule	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3SimpleTokenizerModule($/;"	f
sqlite3Fts3Snippet	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3Snippet($/;"	f
sqlite3Fts3UnicodeTokenizer	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Fts3UnicodeTokenizer(sqlite3_tokenizer_module const **ppModule){$/;"	f
sqlite3Fts3UpdateMethod	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3UpdateMethod($/;"	f
sqlite3Fts3VarintLen	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Fts3VarintLen(sqlite3_uint64 v){$/;"	f
sqlite3FtsUnicodeFold	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeFold(int c, int bRemoveDiacritic){$/;"	f
sqlite3FtsUnicodeIsalnum	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeIsalnum(int c){$/;"	f
sqlite3FtsUnicodeIsdiacritic	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3FtsUnicodeIsdiacritic(int c){$/;"	f
sqlite3FuncDefInsert	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3FuncDefInsert($/;"	f
sqlite3FunctionUsesThisSrc	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3FunctionUsesThisSrc(Expr *pExpr, SrcList *pSrcList){$/;"	f
sqlite3GenerateConstraintChecks	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3GenerateConstraintChecks($/;"	f
sqlite3GenerateIndexKey	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3GenerateIndexKey($/;"	f
sqlite3GenerateRowDelete	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3GenerateRowDelete($/;"	f
sqlite3GenerateRowIndexDelete	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3GenerateRowIndexDelete($/;"	f
sqlite3Get4byte	sqlite3_MFAW.c	/^SQLITE_PRIVATE u32 sqlite3Get4byte(const u8 *p){$/;"	f
sqlite3GetBoolean	sqlite3_MFAW.c	/^SQLITE_PRIVATE u8 sqlite3GetBoolean(const char *z, u8 dflt){$/;"	f
sqlite3GetCollSeq	sqlite3_MFAW.c	/^SQLITE_PRIVATE CollSeq *sqlite3GetCollSeq($/;"	f
sqlite3GetFuncCollSeq	sqlite3_MFAW.c	/^static CollSeq *sqlite3GetFuncCollSeq(sqlite3_context *context){$/;"	f	file:
sqlite3GetInt32	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3GetInt32(const char *zNum, int *pValue){$/;"	f
sqlite3GetTempRange	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3GetTempRange(Parse *pParse, int nReg){$/;"	f
sqlite3GetTempReg	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3GetTempReg(Parse *pParse){$/;"	f
sqlite3GetToken	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3GetToken(const unsigned char *z, int *tokenType){$/;"	f
sqlite3GetVTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE VTable *sqlite3GetVTable(sqlite3 *db, Table *pTab){$/;"	f
sqlite3GetVTable	sqlite3_MFAW.c	13574;"	d	file:
sqlite3GetVarint	sqlite3_MFAW.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint(const unsigned char *p, u64 *v){$/;"	f
sqlite3GetVarint32	sqlite3_MFAW.c	/^SQLITE_PRIVATE u8 sqlite3GetVarint32(const unsigned char *p, u32 *v){$/;"	f
sqlite3GetVdbe	sqlite3_MFAW.c	/^SQLITE_PRIVATE Vdbe *sqlite3GetVdbe(Parse *pParse){$/;"	f
sqlite3GlobalConfig	sqlite3_MFAW.c	9259;"	d	file:
sqlite3GlobalConfig	sqlite3_MFAW.c	9265;"	d	file:
sqlite3GlobalFunctions	sqlite3_MFAW.c	/^SQLITE_PRIVATE SQLITE_WSD FuncDefHash sqlite3GlobalFunctions;$/;"	v
sqlite3HaltConstraint	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3HaltConstraint($/;"	f
sqlite3HashClear	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3HashClear(Hash *pH){$/;"	f
sqlite3HashFind	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3HashFind(const Hash *pH, const char *pKey){$/;"	f
sqlite3HashInit	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3HashInit(Hash *pNew){$/;"	f
sqlite3HashInsert	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3HashInsert(Hash *pH, const char *pKey, void *data){$/;"	f
sqlite3HeaderSizeBtree	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3HeaderSizeBtree(void){ return ROUND8(sizeof(MemPage)); }$/;"	f
sqlite3HeaderSizePcache	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3HeaderSizePcache(void){ return ROUND8(sizeof(PgHdr)); }$/;"	f
sqlite3HeaderSizePcache1	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3HeaderSizePcache1(void){ return ROUND8(sizeof(PgHdr1)); }$/;"	f
sqlite3HeapNearlyFull	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3HeapNearlyFull(void){$/;"	f
sqlite3HexToBlob	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3HexToBlob(sqlite3 *db, const char *z, int n){$/;"	f
sqlite3HexToInt	sqlite3_MFAW.c	/^SQLITE_PRIVATE u8 sqlite3HexToInt(int h){$/;"	f
sqlite3Hooks	sqlite3_MFAW.c	/^} sqlite3Hooks = { 0, 0 };$/;"	v	typeref:struct:BenignMallocHooks	file:
sqlite3Hwtime	sqlite3_MFAW.c	/^  __inline__ sqlite_uint64 sqlite3Hwtime(void){$/;"	f
sqlite3Hwtime	sqlite3_MFAW.c	/^SQLITE_PRIVATE   sqlite_uint64 sqlite3Hwtime(void){ return ((sqlite_uint64)0); }$/;"	f
sqlite3IcuInit	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3IcuInit(sqlite3 *db){$/;"	f
sqlite3IdListAppend	sqlite3_MFAW.c	/^SQLITE_PRIVATE IdList *sqlite3IdListAppend(sqlite3 *db, IdList *pList, Token *pToken){$/;"	f
sqlite3IdListDelete	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3IdListDelete(sqlite3 *db, IdList *pList){$/;"	f
sqlite3IdListDup	sqlite3_MFAW.c	/^SQLITE_PRIVATE IdList *sqlite3IdListDup(sqlite3 *db, IdList *p){$/;"	f
sqlite3IdListIndex	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3IdListIndex(IdList *pList, const char *zName){$/;"	f
sqlite3InRhsIsConstant	sqlite3_MFAW.c	/^static int sqlite3InRhsIsConstant(Expr *pIn){$/;"	f	file:
sqlite3IndexAffinityOk	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3IndexAffinityOk(Expr *pExpr, char idx_affinity){$/;"	f
sqlite3IndexAffinityStr	sqlite3_MFAW.c	/^SQLITE_PRIVATE const char *sqlite3IndexAffinityStr(Vdbe *v, Index *pIdx){$/;"	f
sqlite3IndexedByLookup	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3IndexedByLookup(Parse *pParse, struct SrcList_item *pFrom){$/;"	f
sqlite3Init	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Init(sqlite3 *db, char **pzErrMsg){$/;"	f
sqlite3InitCallback	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3InitCallback(void *pInit, int argc, char **argv, char **NotUsed){$/;"	f
sqlite3InitInfo	sqlite3_MFAW.c	/^  struct sqlite3InitInfo {      \/* Information used during initialization *\/$/;"	s	struct:sqlite3	file:
sqlite3InitOne	sqlite3_MFAW.c	/^static int sqlite3InitOne(sqlite3 *db, int iDb, char **pzErrMsg){$/;"	f	file:
sqlite3Insert	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Insert($/;"	f
sqlite3IntTokens	sqlite3_MFAW.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[] = {$/;"	v
sqlite3IntTokens	sqlite3_MFAW.c	/^SQLITE_PRIVATE const Token sqlite3IntTokens[];$/;"	v
sqlite3InvalidFunction	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3InvalidFunction($/;"	f
sqlite3InvokeBusyHandler	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3InvokeBusyHandler(BusyHandler *p){$/;"	f
sqlite3IoTrace	sqlite3_MFAW.c	/^SQLITE_API SQLITE_EXTERN void (SQLITE_CDECL *sqlite3IoTrace)(const char*,...);$/;"	v
sqlite3IoTrace	sqlite3_MFAW.c	/^SQLITE_API void (SQLITE_CDECL *sqlite3IoTrace)(const char*, ...) = 0;$/;"	v
sqlite3IsEbcdicIdChar	sqlite3_MFAW.c	/^SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[] = {$/;"	v
sqlite3IsEbcdicIdChar	sqlite3_MFAW.c	/^SQLITE_PRIVATE const char sqlite3IsEbcdicIdChar[];$/;"	v
sqlite3IsIdChar	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3IsIdChar(u8 c){ return IdChar(c); }$/;"	f
sqlite3IsLikeFunction	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3IsLikeFunction(sqlite3 *db, Expr *pExpr, int *pIsNocase, char *aWc){$/;"	f
sqlite3IsMemJournal	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3IsMemJournal(sqlite3_file *pJfd){$/;"	f
sqlite3IsNaN	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3IsNaN(double x){$/;"	f
sqlite3IsNaN	sqlite3_MFAW.c	13056;"	d	file:
sqlite3IsNumericAffinity	sqlite3_MFAW.c	11432;"	d	file:
sqlite3IsReadOnly	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3IsReadOnly(Parse *pParse, Table *pTab, int viewOk){$/;"	f
sqlite3IsRowid	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3IsRowid(const char *z){$/;"	f
sqlite3Isalnum	sqlite3_MFAW.c	12965;"	d	file:
sqlite3Isalnum	sqlite3_MFAW.c	12973;"	d	file:
sqlite3Isalpha	sqlite3_MFAW.c	12966;"	d	file:
sqlite3Isalpha	sqlite3_MFAW.c	12974;"	d	file:
sqlite3Isdigit	sqlite3_MFAW.c	12967;"	d	file:
sqlite3Isdigit	sqlite3_MFAW.c	12975;"	d	file:
sqlite3Isspace	sqlite3_MFAW.c	12964;"	d	file:
sqlite3Isspace	sqlite3_MFAW.c	12972;"	d	file:
sqlite3Isxdigit	sqlite3_MFAW.c	12968;"	d	file:
sqlite3Isxdigit	sqlite3_MFAW.c	12976;"	d	file:
sqlite3JoinType	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3JoinType(Parse *pParse, Token *pA, Token *pB, Token *pC){$/;"	f
sqlite3JournalCreate	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3JournalCreate(sqlite3_file *p){$/;"	f
sqlite3JournalExists	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3JournalExists(sqlite3_file *p){$/;"	f
sqlite3JournalExists	sqlite3_MFAW.c	13694;"	d	file:
sqlite3JournalModename	sqlite3_MFAW.c	/^SQLITE_PRIVATE const char *sqlite3JournalModename(int eMode){$/;"	f
sqlite3JournalOpen	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3JournalOpen($/;"	f
sqlite3JournalSize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3JournalSize(sqlite3_vfs *pVfs){$/;"	f
sqlite3JournalSize	sqlite3_MFAW.c	13693;"	d	file:
sqlite3KeyInfoAlloc	sqlite3_MFAW.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoAlloc(sqlite3 *db, int N, int X){$/;"	f
sqlite3KeyInfoIsWriteable	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3KeyInfoIsWriteable(KeyInfo *p){ return p->nRef==1; }$/;"	f
sqlite3KeyInfoOfIndex	sqlite3_MFAW.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoOfIndex(Parse *pParse, Index *pIdx){$/;"	f
sqlite3KeyInfoRef	sqlite3_MFAW.c	/^SQLITE_PRIVATE KeyInfo *sqlite3KeyInfoRef(KeyInfo *p){$/;"	f
sqlite3KeyInfoUnref	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3KeyInfoUnref(KeyInfo *p){$/;"	f
sqlite3KeywordCode	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3KeywordCode(const unsigned char *z, int n){$/;"	f
sqlite3LeaveMutexAndCloseZombie	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3LeaveMutexAndCloseZombie(sqlite3 *db){$/;"	f
sqlite3LimitWhere	sqlite3_MFAW.c	/^SQLITE_PRIVATE Expr *sqlite3LimitWhere($/;"	f
sqlite3LoadExtension	sqlite3_MFAW.c	/^static int sqlite3LoadExtension($/;"	f	file:
sqlite3LocateCollSeq	sqlite3_MFAW.c	/^SQLITE_PRIVATE CollSeq *sqlite3LocateCollSeq(Parse *pParse, const char *zName){$/;"	f
sqlite3LocateTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE Table *sqlite3LocateTable($/;"	f
sqlite3LocateTableItem	sqlite3_MFAW.c	/^SQLITE_PRIVATE Table *sqlite3LocateTableItem($/;"	f
sqlite3LockAndPrepare	sqlite3_MFAW.c	/^static int sqlite3LockAndPrepare($/;"	f	file:
sqlite3LogEst	sqlite3_MFAW.c	/^SQLITE_PRIVATE LogEst sqlite3LogEst(u64 x){$/;"	f
sqlite3LogEstAdd	sqlite3_MFAW.c	/^SQLITE_PRIVATE LogEst sqlite3LogEstAdd(LogEst a, LogEst b){$/;"	f
sqlite3LogEstFromDouble	sqlite3_MFAW.c	/^SQLITE_PRIVATE LogEst sqlite3LogEstFromDouble(double x){$/;"	f
sqlite3LogEstToInt	sqlite3_MFAW.c	/^SQLITE_PRIVATE u64 sqlite3LogEstToInt(LogEst x){$/;"	f
sqlite3MAppendf	sqlite3_MFAW.c	/^SQLITE_PRIVATE char *sqlite3MAppendf(sqlite3 *db, char *zStr, const char *zFormat, ...){$/;"	f
sqlite3MPrintf	sqlite3_MFAW.c	/^SQLITE_PRIVATE char *sqlite3MPrintf(sqlite3 *db, const char *zFormat, ...){$/;"	f
sqlite3Malloc	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3Malloc(u64 n){$/;"	f
sqlite3MallocAlarm	sqlite3_MFAW.c	/^static void sqlite3MallocAlarm(int nByte){$/;"	f	file:
sqlite3MallocEnd	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3MallocEnd(void){$/;"	f
sqlite3MallocInit	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3MallocInit(void){$/;"	f
sqlite3MallocMutex	sqlite3_MFAW.c	/^SQLITE_PRIVATE sqlite3_mutex *sqlite3MallocMutex(void){$/;"	f
sqlite3MallocSize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3MallocSize(void *p){$/;"	f
sqlite3MallocZero	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3MallocZero(u64 n){$/;"	f
sqlite3MatchSpanName	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3MatchSpanName($/;"	f
sqlite3MaterializeView	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3MaterializeView($/;"	f
sqlite3MayAbort	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3MayAbort(Parse *pParse){$/;"	f
sqlite3MemCompare	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3MemCompare(const Mem *pMem1, const Mem *pMem2, const CollSeq *pColl){$/;"	f
sqlite3MemFree	sqlite3_MFAW.c	/^static void sqlite3MemFree(void *pPrior){ return; }$/;"	f	file:
sqlite3MemFree	sqlite3_MFAW.c	/^static void sqlite3MemFree(void *pPrior){$/;"	f	file:
sqlite3MemGetMemsys3	sqlite3_MFAW.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys3(void){$/;"	f
sqlite3MemGetMemsys5	sqlite3_MFAW.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetMemsys5(void){$/;"	f
sqlite3MemGetWin32	sqlite3_MFAW.c	/^SQLITE_PRIVATE const sqlite3_mem_methods *sqlite3MemGetWin32(void){$/;"	f
sqlite3MemInit	sqlite3_MFAW.c	/^static int sqlite3MemInit(void *NotUsed){ return SQLITE_OK; }$/;"	f	file:
sqlite3MemInit	sqlite3_MFAW.c	/^static int sqlite3MemInit(void *NotUsed){$/;"	f	file:
sqlite3MemJournalOpen	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3MemJournalOpen(sqlite3_file *pJfd){$/;"	f
sqlite3MemJournalSize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3MemJournalSize(void){$/;"	f
sqlite3MemMalloc	sqlite3_MFAW.c	/^static void *sqlite3MemMalloc(int nByte){ return 0; }$/;"	f	file:
sqlite3MemMalloc	sqlite3_MFAW.c	/^static void *sqlite3MemMalloc(int nByte){$/;"	f	file:
sqlite3MemRealloc	sqlite3_MFAW.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){ return 0; }$/;"	f	file:
sqlite3MemRealloc	sqlite3_MFAW.c	/^static void *sqlite3MemRealloc(void *pPrior, int nByte){$/;"	f	file:
sqlite3MemRoundup	sqlite3_MFAW.c	/^static int sqlite3MemRoundup(int n){ return n; }$/;"	f	file:
sqlite3MemRoundup	sqlite3_MFAW.c	/^static int sqlite3MemRoundup(int n){$/;"	f	file:
sqlite3MemSetDefault	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3MemSetDefault(void){$/;"	f
sqlite3MemShutdown	sqlite3_MFAW.c	/^static void sqlite3MemShutdown(void *NotUsed){ return; }$/;"	f	file:
sqlite3MemShutdown	sqlite3_MFAW.c	/^static void sqlite3MemShutdown(void *NotUsed){$/;"	f	file:
sqlite3MemSize	sqlite3_MFAW.c	/^static int sqlite3MemSize(void *p){$/;"	f	file:
sqlite3MemSize	sqlite3_MFAW.c	/^static int sqlite3MemSize(void *pPrior){ return 0; }$/;"	f	file:
sqlite3MemSize	sqlite3_MFAW.c	/^static int sqlite3MemSize(void *pPrior){$/;"	f	file:
sqlite3MemdebugBacktrace	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktrace(int depth){$/;"	f
sqlite3MemdebugBacktraceCallback	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3MemdebugBacktraceCallback(void (*xBacktrace)(int, int, void **)){$/;"	f
sqlite3MemdebugDump	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3MemdebugDump(const char *zFilename){$/;"	f
sqlite3MemdebugHasType	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3MemdebugHasType(void *p, u8 eType){$/;"	f
sqlite3MemdebugHasType	sqlite3_MFAW.c	13775;"	d	file:
sqlite3MemdebugMallocCount	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3MemdebugMallocCount(){$/;"	f
sqlite3MemdebugNoType	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3MemdebugNoType(void *p, u8 eType){$/;"	f
sqlite3MemdebugNoType	sqlite3_MFAW.c	13776;"	d	file:
sqlite3MemdebugSetType	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3MemdebugSetType(void *p, u8 eType){$/;"	f
sqlite3MemdebugSetType	sqlite3_MFAW.c	13774;"	d	file:
sqlite3MemdebugSettitle	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3MemdebugSettitle(const char *zTitle){$/;"	f
sqlite3MemdebugSync	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3MemdebugSync(){$/;"	f
sqlite3MemoryAlarm	sqlite3_MFAW.c	/^static int sqlite3MemoryAlarm($/;"	f	file:
sqlite3Memsys3Dump	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Memsys3Dump(const char *zFilename){$/;"	f
sqlite3Memsys5Dump	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Memsys5Dump(const char *zFilename){$/;"	f
sqlite3MemsysGetHeader	sqlite3_MFAW.c	/^static struct MemBlockHdr *sqlite3MemsysGetHeader(void *pAllocation){$/;"	f	file:
sqlite3MinimumFileFormat	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3MinimumFileFormat(Parse *pParse, int iDb, int minFormat){$/;"	f
sqlite3MisuseError	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3MisuseError(int lineno){$/;"	f
sqlite3MulInt64	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3MulInt64(i64 *pA, i64 iB){$/;"	f
sqlite3MultiWrite	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3MultiWrite(Parse *pParse){$/;"	f
sqlite3MutexAlloc	sqlite3_MFAW.c	/^SQLITE_PRIVATE sqlite3_mutex *sqlite3MutexAlloc(int id){$/;"	f
sqlite3MutexAlloc	sqlite3_MFAW.c	10849;"	d	file:
sqlite3MutexEnd	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3MutexEnd(void){$/;"	f
sqlite3MutexEnd	sqlite3_MFAW.c	10851;"	d	file:
sqlite3MutexInit	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3MutexInit(void){ $/;"	f
sqlite3MutexInit	sqlite3_MFAW.c	10850;"	d	file:
sqlite3NameFromToken	sqlite3_MFAW.c	/^SQLITE_PRIVATE char *sqlite3NameFromToken(sqlite3 *db, Token *pName){$/;"	f
sqlite3NestedParse	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3NestedParse(Parse *pParse, const char *zFormat, ...){$/;"	f
sqlite3NoopMutex	sqlite3_MFAW.c	/^SQLITE_PRIVATE sqlite3_mutex_methods const *sqlite3NoopMutex(void){$/;"	f
sqlite3OSTrace	sqlite3_MFAW.c	/^  int sqlite3OSTrace = SQLITE_DEBUG_OS_TRACE;$/;"	v
sqlite3OpcodeName	sqlite3_MFAW.c	/^SQLITE_PRIVATE const char *sqlite3OpcodeName(int i){$/;"	f
sqlite3OpcodeProperty	sqlite3_MFAW.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[] = OPFLG_INITIALIZER;$/;"	v
sqlite3OpcodeProperty	sqlite3_MFAW.c	/^SQLITE_PRIVATE const unsigned char sqlite3OpcodeProperty[];$/;"	v
sqlite3OpenMasterTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3OpenMasterTable(Parse *p, int iDb){$/;"	f
sqlite3OpenTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3OpenTable($/;"	f
sqlite3OpenTableAndIndices	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OpenTableAndIndices($/;"	f
sqlite3OpenTempDatabase	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OpenTempDatabase(Parse *pParse){$/;"	f
sqlite3OsAccess	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsAccess($/;"	f
sqlite3OsCheckReservedLock	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f
sqlite3OsClose	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsClose(sqlite3_file *pId){$/;"	f
sqlite3OsCloseFree	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsCloseFree(sqlite3_file *pFile){$/;"	f
sqlite3OsCurrentTimeInt64	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *pTimeOut){$/;"	f
sqlite3OsDelete	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsDelete(sqlite3_vfs *pVfs, const char *zPath, int dirSync){$/;"	f
sqlite3OsDeviceCharacteristics	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsDeviceCharacteristics(sqlite3_file *id){$/;"	f
sqlite3OsDlClose	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3OsDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f
sqlite3OsDlError	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3OsDlError(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsDlOpen	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3OsDlOpen(sqlite3_vfs *pVfs, const char *zPath){$/;"	f
sqlite3OsDlSym	sqlite3_MFAW.c	/^SQLITE_PRIVATE void (*sqlite3OsDlSym(sqlite3_vfs *pVfs, void *pHdle, const char *zSym))(void){$/;"	f
sqlite3OsFetch	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsFetch(sqlite3_file *id, i64 iOff, int iAmt, void **pp){$/;"	f
sqlite3OsFileControl	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f
sqlite3OsFileControlHint	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3OsFileControlHint(sqlite3_file *id, int op, void *pArg){$/;"	f
sqlite3OsFileSize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsFileSize(sqlite3_file *id, i64 *pSize){$/;"	f
sqlite3OsFullPathname	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsFullPathname($/;"	f
sqlite3OsInit	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsInit(void){$/;"	f
sqlite3OsLock	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsLock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsOpen	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsOpen($/;"	f
sqlite3OsOpenMalloc	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsOpenMalloc($/;"	f
sqlite3OsRandomness	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsRandomness(sqlite3_vfs *pVfs, int nByte, char *zBufOut){$/;"	f
sqlite3OsRead	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsRead(sqlite3_file *id, void *pBuf, int amt, i64 offset){$/;"	f
sqlite3OsSectorSize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsSectorSize(sqlite3_file *id){$/;"	f
sqlite3OsShmBarrier	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3OsShmBarrier(sqlite3_file *id){$/;"	f
sqlite3OsShmLock	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsShmLock(sqlite3_file *id, int offset, int n, int flags){$/;"	f
sqlite3OsShmMap	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsShmMap($/;"	f
sqlite3OsShmUnmap	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsShmUnmap(sqlite3_file *id, int deleteFlag){$/;"	f
sqlite3OsSleep	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsSleep(sqlite3_vfs *pVfs, int nMicro){$/;"	f
sqlite3OsSync	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsSync(sqlite3_file *id, int flags){$/;"	f
sqlite3OsTruncate	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsTruncate(sqlite3_file *id, i64 size){$/;"	f
sqlite3OsUnfetch	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsUnfetch(sqlite3_file *id, i64 iOff, void *p){$/;"	f
sqlite3OsUnlock	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsUnlock(sqlite3_file *id, int lockType){$/;"	f
sqlite3OsWrite	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3OsWrite(sqlite3_file *id, const void *pBuf, int amt, i64 offset){$/;"	f
sqlite3PCacheBufferSetup	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PCacheBufferSetup(void *pBuf, int sz, int n){$/;"	f
sqlite3PCacheSetDefault	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PCacheSetDefault(void){$/;"	f
sqlite3PExpr	sqlite3_MFAW.c	/^SQLITE_PRIVATE Expr *sqlite3PExpr($/;"	f
sqlite3PageFree	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PageFree(void *p){$/;"	f
sqlite3PageMalloc	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3PageMalloc(int sz){$/;"	f
sqlite3PagerAcquire	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerAcquire($/;"	f
sqlite3PagerBackupPtr	sqlite3_MFAW.c	/^SQLITE_PRIVATE sqlite3_backup **sqlite3PagerBackupPtr(Pager *pPager){$/;"	f
sqlite3PagerBegin	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerBegin(Pager *pPager, int exFlag, int subjInMemory){$/;"	f
sqlite3PagerCacheStat	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PagerCacheStat(Pager *pPager, int eStat, int reset, int *pnVal){$/;"	f
sqlite3PagerCheckpoint	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerCheckpoint(Pager *pPager, int eMode, int *pnLog, int *pnCkpt){$/;"	f
sqlite3PagerClearCache	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PagerClearCache(Pager *pPager){$/;"	f
sqlite3PagerClose	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerClose(Pager *pPager){$/;"	f
sqlite3PagerCloseWal	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerCloseWal(Pager *pPager){$/;"	f
sqlite3PagerCodec	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3PagerCodec(PgHdr *pPg){$/;"	f
sqlite3PagerCommitPhaseOne	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseOne($/;"	f
sqlite3PagerCommitPhaseTwo	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerCommitPhaseTwo(Pager *pPager){$/;"	f
sqlite3PagerDataVersion	sqlite3_MFAW.c	/^SQLITE_PRIVATE u32 sqlite3PagerDataVersion(Pager *pPager){$/;"	f
sqlite3PagerDontWrite	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PagerDontWrite(PgHdr *pPg){$/;"	f
sqlite3PagerExclusiveLock	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerExclusiveLock(Pager *pPager){$/;"	f
sqlite3PagerFile	sqlite3_MFAW.c	/^SQLITE_PRIVATE sqlite3_file *sqlite3PagerFile(Pager *pPager){$/;"	f
sqlite3PagerFilename	sqlite3_MFAW.c	/^SQLITE_PRIVATE const char *sqlite3PagerFilename(Pager *pPager, int nullIfMemDb){$/;"	f
sqlite3PagerGet	sqlite3_MFAW.c	10250;"	d	file:
sqlite3PagerGetCodec	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3PagerGetCodec(Pager *pPager){$/;"	f
sqlite3PagerGetData	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3PagerGetData(DbPage *pPg){$/;"	f
sqlite3PagerGetExtra	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3PagerGetExtra(DbPage *pPg){$/;"	f
sqlite3PagerGetJournalMode	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerGetJournalMode(Pager *pPager){$/;"	f
sqlite3PagerIsMemdb	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerIsMemdb(Pager *pPager){$/;"	f
sqlite3PagerIsreadonly	sqlite3_MFAW.c	/^SQLITE_PRIVATE u8 sqlite3PagerIsreadonly(Pager *pPager){$/;"	f
sqlite3PagerIswriteable	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerIswriteable(DbPage *pPg){$/;"	f
sqlite3PagerJournalSizeLimit	sqlite3_MFAW.c	/^SQLITE_PRIVATE i64 sqlite3PagerJournalSizeLimit(Pager *pPager, i64 iLimit){$/;"	f
sqlite3PagerJournalname	sqlite3_MFAW.c	/^SQLITE_PRIVATE const char *sqlite3PagerJournalname(Pager *pPager){$/;"	f
sqlite3PagerLockingMode	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerLockingMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerLookup	sqlite3_MFAW.c	/^SQLITE_PRIVATE DbPage *sqlite3PagerLookup(Pager *pPager, Pgno pgno){$/;"	f
sqlite3PagerMaxPageCount	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerMaxPageCount(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerMemUsed	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerMemUsed(Pager *pPager){$/;"	f
sqlite3PagerMovepage	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerMovepage(Pager *pPager, DbPage *pPg, Pgno pgno, int isCommit){$/;"	f
sqlite3PagerNosync	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerNosync(Pager *pPager){$/;"	f
sqlite3PagerOkToChangeJournalMode	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerOkToChangeJournalMode(Pager *pPager){$/;"	f
sqlite3PagerOpen	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerOpen($/;"	f
sqlite3PagerOpenSavepoint	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerOpenSavepoint(Pager *pPager, int nSavepoint){$/;"	f
sqlite3PagerOpenWal	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerOpenWal($/;"	f
sqlite3PagerPageRefcount	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerPageRefcount(DbPage *pPage){$/;"	f
sqlite3PagerPagecount	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PagerPagecount(Pager *pPager, int *pnPage){$/;"	f
sqlite3PagerPagenumber	sqlite3_MFAW.c	/^SQLITE_PRIVATE Pgno sqlite3PagerPagenumber(DbPage *pPg){$/;"	f
sqlite3PagerReadFileheader	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerReadFileheader(Pager *pPager, int N, unsigned char *pDest){$/;"	f
sqlite3PagerRef	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PagerRef(DbPage *pPg){$/;"	f
sqlite3PagerRefcount	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerRefcount(Pager *pPager){$/;"	f
sqlite3PagerRekey	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PagerRekey(DbPage *pPg, Pgno iNew, u16 flags){$/;"	f
sqlite3PagerRollback	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerRollback(Pager *pPager){$/;"	f
sqlite3PagerSavepoint	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerSavepoint(Pager *pPager, int op, int iSavepoint){$/;"	f
sqlite3PagerSetBusyhandler	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PagerSetBusyhandler($/;"	f
sqlite3PagerSetCachesize	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PagerSetCachesize(Pager *pPager, int mxPage){$/;"	f
sqlite3PagerSetCodec	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PagerSetCodec($/;"	f
sqlite3PagerSetFlags	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PagerSetFlags($/;"	f
sqlite3PagerSetJournalMode	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerSetJournalMode(Pager *pPager, int eMode){$/;"	f
sqlite3PagerSetMmapLimit	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PagerSetMmapLimit(Pager *pPager, sqlite3_int64 szMmap){$/;"	f
sqlite3PagerSetPagesize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerSetPagesize(Pager *pPager, u32 *pPageSize, int nReserve){$/;"	f
sqlite3PagerSharedLock	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerSharedLock(Pager *pPager){$/;"	f
sqlite3PagerShrink	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PagerShrink(Pager *pPager){$/;"	f
sqlite3PagerState	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerState(Pager *pPager){$/;"	f
sqlite3PagerStats	sqlite3_MFAW.c	/^SQLITE_PRIVATE int *sqlite3PagerStats(Pager *pPager){$/;"	f
sqlite3PagerSync	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerSync(Pager *pPager, const char *zMaster){$/;"	f
sqlite3PagerTempSpace	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3PagerTempSpace(Pager *pPager){$/;"	f
sqlite3PagerTruncateImage	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PagerTruncateImage(Pager *pPager, Pgno nPage){$/;"	f
sqlite3PagerUnref	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PagerUnref(DbPage *pPg){$/;"	f
sqlite3PagerUnrefNotNull	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PagerUnrefNotNull(DbPage *pPg){$/;"	f
sqlite3PagerVfs	sqlite3_MFAW.c	/^SQLITE_PRIVATE const sqlite3_vfs *sqlite3PagerVfs(Pager *pPager){$/;"	f
sqlite3PagerWalCallback	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerWalCallback(Pager *pPager){$/;"	f
sqlite3PagerWalFramesize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerWalFramesize(Pager *pPager){$/;"	f
sqlite3PagerWalSupported	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerWalSupported(Pager *pPager){$/;"	f
sqlite3PagerWrite	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PagerWrite(PgHdr *pPg){$/;"	f
sqlite3ParseToplevel	sqlite3_MFAW.c	13337;"	d	file:
sqlite3ParseToplevel	sqlite3_MFAW.c	13346;"	d	file:
sqlite3ParseUri	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ParseUri($/;"	f
sqlite3Parser	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Parser($/;"	f
sqlite3ParserARG_FETCH	sqlite3_MFAW.c	123542;"	d	file:
sqlite3ParserARG_PDECL	sqlite3_MFAW.c	123541;"	d	file:
sqlite3ParserARG_SDECL	sqlite3_MFAW.c	123540;"	d	file:
sqlite3ParserARG_STORE	sqlite3_MFAW.c	123543;"	d	file:
sqlite3ParserAlloc	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3ParserAlloc(void *(*mallocProc)(u64)){$/;"	f
sqlite3ParserFree	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ParserFree($/;"	f
sqlite3ParserReset	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ParserReset(Parse *pParse){$/;"	f
sqlite3ParserStackPeak	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ParserStackPeak(void *p){$/;"	f
sqlite3ParserTOKENTYPE	sqlite3_MFAW.c	123517;"	d	file:
sqlite3ParserTrace	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ParserTrace(FILE *TraceFILE, char *zTracePrompt){$/;"	f
sqlite3Pcache1Mutex	sqlite3_MFAW.c	/^SQLITE_PRIVATE sqlite3_mutex *sqlite3Pcache1Mutex(void){$/;"	f
sqlite3PcacheCleanAll	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PcacheCleanAll(PCache *pCache){$/;"	f
sqlite3PcacheClear	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PcacheClear(PCache *pCache){$/;"	f
sqlite3PcacheClearSyncFlags	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PcacheClearSyncFlags(PCache *pCache){$/;"	f
sqlite3PcacheClose	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PcacheClose(PCache *pCache){$/;"	f
sqlite3PcacheDirtyList	sqlite3_MFAW.c	/^SQLITE_PRIVATE PgHdr *sqlite3PcacheDirtyList(PCache *pCache){$/;"	f
sqlite3PcacheDrop	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PcacheDrop(PgHdr *p){$/;"	f
sqlite3PcacheFetch	sqlite3_MFAW.c	/^SQLITE_PRIVATE sqlite3_pcache_page *sqlite3PcacheFetch($/;"	f
sqlite3PcacheFetchFinish	sqlite3_MFAW.c	/^SQLITE_PRIVATE PgHdr *sqlite3PcacheFetchFinish($/;"	f
sqlite3PcacheFetchStress	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PcacheFetchStress($/;"	f
sqlite3PcacheGetCachesize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PcacheGetCachesize(PCache *pCache){$/;"	f
sqlite3PcacheInitialize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PcacheInitialize(void){$/;"	f
sqlite3PcacheIterateDirty	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PcacheIterateDirty(PCache *pCache, void (*xIter)(PgHdr *)){$/;"	f
sqlite3PcacheMakeClean	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeClean(PgHdr *p){$/;"	f
sqlite3PcacheMakeDirty	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PcacheMakeDirty(PgHdr *p){$/;"	f
sqlite3PcacheMove	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PcacheMove(PgHdr *p, Pgno newPgno){$/;"	f
sqlite3PcacheOpen	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PcacheOpen($/;"	f
sqlite3PcachePageRefcount	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PcachePageRefcount(PgHdr *p){$/;"	f
sqlite3PcachePagecount	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PcachePagecount(PCache *pCache){$/;"	f
sqlite3PcacheRef	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PcacheRef(PgHdr *p){$/;"	f
sqlite3PcacheRefCount	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PcacheRefCount(PCache *pCache){$/;"	f
sqlite3PcacheRelease	sqlite3_MFAW.c	/^SQLITE_PRIVATE void SQLITE_NOINLINE sqlite3PcacheRelease(PgHdr *p){$/;"	f
sqlite3PcacheReleaseMemory	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PcacheReleaseMemory(int nReq){$/;"	f
sqlite3PcacheSetCachesize	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PcacheSetCachesize(PCache *pCache, int mxPage){$/;"	f
sqlite3PcacheSetPageSize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PcacheSetPageSize(PCache *pCache, int szPage){$/;"	f
sqlite3PcacheShrink	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PcacheShrink(PCache *pCache){$/;"	f
sqlite3PcacheShutdown	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PcacheShutdown(void){$/;"	f
sqlite3PcacheSize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PcacheSize(void){ return sizeof(PCache); }$/;"	f
sqlite3PcacheStats	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PcacheStats($/;"	f
sqlite3PcacheTruncate	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PcacheTruncate(PCache *pCache, Pgno pgno){$/;"	f
sqlite3PendingByte	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PendingByte = 0x40000000;$/;"	v
sqlite3PendingByte	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PendingByte;$/;"	v
sqlite3Pragma	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Pragma($/;"	f
sqlite3Prepare	sqlite3_MFAW.c	/^static int sqlite3Prepare($/;"	f	file:
sqlite3Prepare16	sqlite3_MFAW.c	/^static int sqlite3Prepare16($/;"	f	file:
sqlite3PrimaryKeyIndex	sqlite3_MFAW.c	/^SQLITE_PRIVATE Index *sqlite3PrimaryKeyIndex(Table *pTab){$/;"	f
sqlite3Prng	sqlite3_MFAW.c	/^} sqlite3Prng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3PrngRestoreState	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PrngRestoreState(void){$/;"	f
sqlite3PrngSaveState	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3PrngSaveState(void){$/;"	f
sqlite3PrngType	sqlite3_MFAW.c	/^static SQLITE_WSD struct sqlite3PrngType {$/;"	s	file:
sqlite3Put4byte	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Put4byte(unsigned char *p, u32 v){$/;"	f
sqlite3PutVarint	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3PutVarint(unsigned char *p, u64 v){$/;"	f
sqlite3ReadSchema	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ReadSchema(Parse *pParse){$/;"	f
sqlite3Realloc	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3Realloc(void *pOld, u64 nBytes){$/;"	f
sqlite3RefillIndex	sqlite3_MFAW.c	/^static void sqlite3RefillIndex(Parse *pParse, Index *pIndex, int memRootPage){$/;"	f	file:
sqlite3RegisterBuiltinFunctions	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3RegisterBuiltinFunctions(sqlite3 *db){$/;"	f
sqlite3RegisterDateTimeFunctions	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3RegisterDateTimeFunctions(void){$/;"	f
sqlite3RegisterGlobalFunctions	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3RegisterGlobalFunctions(void){$/;"	f
sqlite3RegisterLikeFunctions	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3RegisterLikeFunctions(sqlite3 *db, int caseSensitive){$/;"	f
sqlite3Reindex	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Reindex(Parse *pParse, Token *pName1, Token *pName2){$/;"	f
sqlite3ReleaseTempRange	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempRange(Parse *pParse, int iReg, int nReg){$/;"	f
sqlite3ReleaseTempReg	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ReleaseTempReg(Parse *pParse, int iReg){$/;"	f
sqlite3Reprepare	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Reprepare(Vdbe *p){$/;"	f
sqlite3ResetAllSchemasOfConnection	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ResetAllSchemasOfConnection(sqlite3 *db){$/;"	f
sqlite3ResetOneSchema	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ResetOneSchema(sqlite3 *db, int iDb){$/;"	f
sqlite3ResolveExprNames	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ResolveExprNames( $/;"	f
sqlite3ResolveOrderGroupBy	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ResolveOrderGroupBy($/;"	f
sqlite3ResolvePartIdxLabel	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ResolvePartIdxLabel(Parse *pParse, int iLabel){$/;"	f
sqlite3ResolveSelectNames	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ResolveSelectNames($/;"	f
sqlite3ResolveSelfReference	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ResolveSelfReference($/;"	f
sqlite3ResultSetOfSelect	sqlite3_MFAW.c	/^SQLITE_PRIVATE Table *sqlite3ResultSetOfSelect(Parse *pParse, Select *pSelect){$/;"	f
sqlite3RollbackAll	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3RollbackAll(sqlite3 *db, int tripCode){$/;"	f
sqlite3RollbackTransaction	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3RollbackTransaction(Parse *pParse){$/;"	f
sqlite3RootPageMoved	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3RootPageMoved(sqlite3 *db, int iDb, int iFrom, int iTo){$/;"	f
sqlite3RowSetClear	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3RowSetClear(RowSet *p){$/;"	f
sqlite3RowSetInit	sqlite3_MFAW.c	/^SQLITE_PRIVATE RowSet *sqlite3RowSetInit(sqlite3 *db, void *pSpace, unsigned int N){$/;"	f
sqlite3RowSetInsert	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3RowSetInsert(RowSet *p, i64 rowid){$/;"	f
sqlite3RowSetNext	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3RowSetNext(RowSet *p, i64 *pRowid){$/;"	f
sqlite3RowSetTest	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3RowSetTest(RowSet *pRowSet, int iBatch, sqlite3_int64 iRowid){$/;"	f
sqlite3RowidConstraint	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3RowidConstraint($/;"	f
sqlite3RtreeInit	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3RtreeInit(sqlite3 *db){$/;"	f
sqlite3RunParser	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3RunParser(Parse *pParse, const char *zSql, char **pzErrMsg){$/;"	f
sqlite3RunVacuum	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db){$/;"	f
sqlite3SafetyCheckOk	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckOk(sqlite3 *db){$/;"	f
sqlite3SafetyCheckSickOrOk	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3SafetyCheckSickOrOk(sqlite3 *db){$/;"	f
sqlite3SavedPrng	sqlite3_MFAW.c	/^static SQLITE_WSD struct sqlite3PrngType sqlite3SavedPrng;$/;"	v	typeref:struct:sqlite3PrngType	file:
sqlite3Savepoint	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Savepoint(Parse *pParse, int op, Token *pName){$/;"	f
sqlite3SchemaClear	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3SchemaClear(void *p){$/;"	f
sqlite3SchemaGet	sqlite3_MFAW.c	/^SQLITE_PRIVATE Schema *sqlite3SchemaGet(sqlite3 *db, Btree *pBt){$/;"	f
sqlite3SchemaMutexHeld	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3SchemaMutexHeld(sqlite3 *db, int iDb, Schema *pSchema){$/;"	f
sqlite3SchemaMutexHeld	sqlite3_MFAW.c	9613;"	d	file:
sqlite3SchemaToIndex	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3SchemaToIndex(sqlite3 *db, Schema *pSchema){$/;"	f
sqlite3ScratchFree	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ScratchFree(void *p){$/;"	f
sqlite3ScratchMalloc	sqlite3_MFAW.c	/^SQLITE_PRIVATE void *sqlite3ScratchMalloc(int n){$/;"	f
sqlite3SectorSize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3SectorSize(sqlite3_file *pFile){$/;"	f
sqlite3Select	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Select($/;"	f
sqlite3SelectAddTypeInfo	sqlite3_MFAW.c	/^static void sqlite3SelectAddTypeInfo(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectDelete	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3SelectDelete(sqlite3 *db, Select *p){$/;"	f
sqlite3SelectDestInit	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3SelectDestInit(SelectDest *pDest, int eDest, int iParm){$/;"	f
sqlite3SelectDup	sqlite3_MFAW.c	/^SQLITE_PRIVATE Select *sqlite3SelectDup(sqlite3 *db, Select *p, int flags){$/;"	f
sqlite3SelectExpand	sqlite3_MFAW.c	/^static void sqlite3SelectExpand(Parse *pParse, Select *pSelect){$/;"	f	file:
sqlite3SelectExprHeight	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3SelectExprHeight(Select *p){$/;"	f
sqlite3SelectExprHeight	sqlite3_MFAW.c	13706;"	d	file:
sqlite3SelectNew	sqlite3_MFAW.c	/^SQLITE_PRIVATE Select *sqlite3SelectNew($/;"	f
sqlite3SelectPrep	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3SelectPrep($/;"	f
sqlite3SelectSetName	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3SelectSetName(Select *p, const char *zName){$/;"	f
sqlite3SelectSetName	sqlite3_MFAW.c	13301;"	d	file:
sqlite3SelectTrace	sqlite3_MFAW.c	/^\/***\/ int sqlite3SelectTrace = 0;$/;"	v
sqlite3SetHasNullFlag	sqlite3_MFAW.c	/^static void sqlite3SetHasNullFlag(Vdbe *v, int iCur, int regHasNull){$/;"	f	file:
sqlite3SetString	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3SetString(char **pz, sqlite3 *db, const char *zFormat, ...){$/;"	f
sqlite3SharedCacheList	sqlite3_MFAW.c	/^SQLITE_PRIVATE BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v
sqlite3SharedCacheList	sqlite3_MFAW.c	/^static BtShared *SQLITE_WSD sqlite3SharedCacheList = 0;$/;"	v	file:
sqlite3SkipAccumulatorLoad	sqlite3_MFAW.c	/^static void sqlite3SkipAccumulatorLoad(sqlite3_context *context){$/;"	f	file:
sqlite3SrcListAppend	sqlite3_MFAW.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppend($/;"	f
sqlite3SrcListAppendFromTerm	sqlite3_MFAW.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListAppendFromTerm($/;"	f
sqlite3SrcListAssignCursors	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3SrcListAssignCursors(Parse *pParse, SrcList *pList){$/;"	f
sqlite3SrcListDelete	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3SrcListDelete(sqlite3 *db, SrcList *pList){$/;"	f
sqlite3SrcListDup	sqlite3_MFAW.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListDup(sqlite3 *db, SrcList *p, int flags){$/;"	f
sqlite3SrcListEnlarge	sqlite3_MFAW.c	/^SQLITE_PRIVATE SrcList *sqlite3SrcListEnlarge($/;"	f
sqlite3SrcListIndexedBy	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3SrcListIndexedBy(Parse *pParse, SrcList *p, Token *pIndexedBy){$/;"	f
sqlite3SrcListLookup	sqlite3_MFAW.c	/^SQLITE_PRIVATE Table *sqlite3SrcListLookup(Parse *pParse, SrcList *pSrc){$/;"	f
sqlite3SrcListShiftJoinType	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3SrcListShiftJoinType(SrcList *p){$/;"	f
sqlite3StackAllocRaw	sqlite3_MFAW.c	13019;"	d	file:
sqlite3StackAllocRaw	sqlite3_MFAW.c	13023;"	d	file:
sqlite3StackAllocZero	sqlite3_MFAW.c	13020;"	d	file:
sqlite3StackAllocZero	sqlite3_MFAW.c	13024;"	d	file:
sqlite3StackFree	sqlite3_MFAW.c	13021;"	d	file:
sqlite3StackFree	sqlite3_MFAW.c	13025;"	d	file:
sqlite3StartTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3StartTable($/;"	f
sqlite3Stat	sqlite3_MFAW.c	/^} sqlite3Stat = { {0,}, {0,} };$/;"	v	typeref:struct:sqlite3StatType	file:
sqlite3Stat4Column	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Stat4Column($/;"	f
sqlite3Stat4ProbeFree	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Stat4ProbeFree(UnpackedRecord *pRec){$/;"	f
sqlite3Stat4ProbeSetValue	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Stat4ProbeSetValue($/;"	f
sqlite3Stat4ValueFromExpr	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Stat4ValueFromExpr($/;"	f
sqlite3StatType	sqlite3_MFAW.c	/^static SQLITE_WSD struct sqlite3StatType {$/;"	s	file:
sqlite3StatType	sqlite3_MFAW.c	/^typedef struct sqlite3StatType sqlite3StatType;$/;"	t	typeref:struct:sqlite3StatType	file:
sqlite3StatusDown	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3StatusDown(int op, int N){$/;"	f
sqlite3StatusSet	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3StatusSet(int op, int X){$/;"	f
sqlite3StatusUp	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3StatusUp(int op, int N){$/;"	f
sqlite3StatusValue	sqlite3_MFAW.c	/^SQLITE_PRIVATE sqlite3_int64 sqlite3StatusValue(int op){$/;"	f
sqlite3Step	sqlite3_MFAW.c	/^static int sqlite3Step(Vdbe *p){$/;"	f	file:
sqlite3StmtCurrentTime	sqlite3_MFAW.c	/^SQLITE_PRIVATE sqlite3_int64 sqlite3StmtCurrentTime(sqlite3_context *p){$/;"	f
sqlite3StrAccumAppend	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3StrAccumAppend(StrAccum *p, const char *z, int N){$/;"	f
sqlite3StrAccumAppendAll	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3StrAccumAppendAll(StrAccum *p, const char *z){$/;"	f
sqlite3StrAccumEnlarge	sqlite3_MFAW.c	/^static int sqlite3StrAccumEnlarge(StrAccum *p, int N){$/;"	f	file:
sqlite3StrAccumFinish	sqlite3_MFAW.c	/^SQLITE_PRIVATE char *sqlite3StrAccumFinish(StrAccum *p){$/;"	f
sqlite3StrAccumInit	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3StrAccumInit(StrAccum *p, sqlite3 *db, char *zBase, int n, int mx){$/;"	f
sqlite3StrAccumReset	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3StrAccumReset(StrAccum *p){$/;"	f
sqlite3StrICmp	sqlite3_MFAW.c	12984;"	d	file:
sqlite3StrNICmp	sqlite3_MFAW.c	12986;"	d	file:
sqlite3Strlen30	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Strlen30(const char *z){$/;"	f
sqlite3SubInt64	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3SubInt64(i64 *pA, i64 iB){$/;"	f
sqlite3TableAffinity	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3TableAffinity(Vdbe *v, Table *pTab, int iReg){$/;"	f
sqlite3TableLock	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3TableLock($/;"	f
sqlite3TableLock	sqlite3_MFAW.c	13557;"	d	file:
sqlite3TempInMemory	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3TempInMemory(const sqlite3 *db){$/;"	f
sqlite3ThreadCreate	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ThreadCreate($/;"	f
sqlite3ThreadJoin	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ThreadJoin(SQLiteThread *p, void **ppOut){$/;"	f
sqlite3ThreadProc	sqlite3_MFAW.c	/^static unsigned __stdcall sqlite3ThreadProc($/;"	f	file:
sqlite3Tolower	sqlite3_MFAW.c	12969;"	d	file:
sqlite3Tolower	sqlite3_MFAW.c	12977;"	d	file:
sqlite3Toupper	sqlite3_MFAW.c	12963;"	d	file:
sqlite3Toupper	sqlite3_MFAW.c	12971;"	d	file:
sqlite3TransferBindings	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3TransferBindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3TreeViewExpr	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3TreeViewExpr(TreeView *pView, const Expr *pExpr, u8 moreToFollow){$/;"	f
sqlite3TreeViewExprList	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3TreeViewExprList($/;"	f
sqlite3TreeViewItem	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3TreeViewItem(TreeView *p, const char *zLabel, u8 moreToFollow){$/;"	f
sqlite3TreeViewLine	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3TreeViewLine(TreeView *p, const char *zFormat, ...){$/;"	f
sqlite3TreeViewPop	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3TreeViewPop(TreeView *p){$/;"	f
sqlite3TreeViewPush	sqlite3_MFAW.c	/^SQLITE_PRIVATE TreeView *sqlite3TreeViewPush(TreeView *p, u8 moreToFollow){$/;"	f
sqlite3TreeViewSelect	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3TreeViewSelect(TreeView *pView, const Select *p, u8 moreToFollow){$/;"	f
sqlite3TriggerColmask	sqlite3_MFAW.c	/^SQLITE_PRIVATE u32 sqlite3TriggerColmask($/;"	f
sqlite3TriggerColmask	sqlite3_MFAW.c	13347;"	d	file:
sqlite3TriggerDeleteStep	sqlite3_MFAW.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerDeleteStep($/;"	f
sqlite3TriggerInsertStep	sqlite3_MFAW.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerInsertStep($/;"	f
sqlite3TriggerList	sqlite3_MFAW.c	/^SQLITE_PRIVATE Trigger *sqlite3TriggerList(Parse *pParse, Table *pTab){$/;"	f
sqlite3TriggerList	sqlite3_MFAW.c	13345;"	d	file:
sqlite3TriggerSelectStep	sqlite3_MFAW.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerSelectStep(sqlite3 *db, Select *pSelect){$/;"	f
sqlite3TriggerUpdateStep	sqlite3_MFAW.c	/^SQLITE_PRIVATE TriggerStep *sqlite3TriggerUpdateStep($/;"	f
sqlite3TriggersExist	sqlite3_MFAW.c	/^SQLITE_PRIVATE Trigger *sqlite3TriggersExist($/;"	f
sqlite3TriggersExist	sqlite3_MFAW.c	13339;"	d	file:
sqlite3TwoPartName	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3TwoPartName($/;"	f
sqlite3UniqueConstraint	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3UniqueConstraint($/;"	f
sqlite3UnlinkAndDeleteIndex	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteIndex(sqlite3 *db, int iDb, const char *zIdxName){$/;"	f
sqlite3UnlinkAndDeleteTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTable(sqlite3 *db, int iDb, const char *zTabName){$/;"	f
sqlite3UnlinkAndDeleteTrigger	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3UnlinkAndDeleteTrigger(sqlite3 *db, int iDb, const char *zName){$/;"	f
sqlite3UnlinkAndDeleteTrigger	sqlite3_MFAW.c	13342;"	d	file:
sqlite3Update	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Update($/;"	f
sqlite3UpperToLower	sqlite3_MFAW.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[] = {$/;"	v
sqlite3UpperToLower	sqlite3_MFAW.c	/^SQLITE_PRIVATE const unsigned char sqlite3UpperToLower[];$/;"	v
sqlite3UserAuthTable	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3UserAuthTable(const char *zTable){$/;"	f
sqlite3Utf16ByteLen	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Utf16ByteLen(const void *zIn, int nChar){$/;"	f
sqlite3Utf16to8	sqlite3_MFAW.c	/^SQLITE_PRIVATE char *sqlite3Utf16to8(sqlite3 *db, const void *z, int nByte, u8 enc){$/;"	f
sqlite3Utf8CharLen	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Utf8CharLen(const char *zIn, int nByte){$/;"	f
sqlite3Utf8Read	sqlite3_MFAW.c	/^SQLITE_PRIVATE u32 sqlite3Utf8Read($/;"	f
sqlite3Utf8Read	sqlite3_MFAW.c	97084;"	d	file:
sqlite3Utf8To8	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3Utf8To8(unsigned char *zIn){$/;"	f
sqlite3Utf8Trans1	sqlite3_MFAW.c	/^static const unsigned char sqlite3Utf8Trans1[] = {$/;"	v	file:
sqlite3UtfSelfTest	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3UtfSelfTest(void){$/;"	f
sqlite3VMPrintf	sqlite3_MFAW.c	/^SQLITE_PRIVATE char *sqlite3VMPrintf(sqlite3 *db, const char *zFormat, va_list ap){$/;"	f
sqlite3VXPrintf	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VXPrintf($/;"	f
sqlite3Vacuum	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3Vacuum(Parse *pParse){$/;"	f
sqlite3ValueApplyAffinity	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ValueApplyAffinity($/;"	f
sqlite3ValueBytes	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ValueBytes(sqlite3_value *pVal, u8 enc){$/;"	f
sqlite3ValueFree	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ValueFree(sqlite3_value *v){$/;"	f
sqlite3ValueFromExpr	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ValueFromExpr($/;"	f
sqlite3ValueNew	sqlite3_MFAW.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3ValueNew(sqlite3 *db){$/;"	f
sqlite3ValueSetNull	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ValueSetNull(sqlite3_value *p){$/;"	f
sqlite3ValueSetStr	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3ValueSetStr($/;"	f
sqlite3ValueText	sqlite3_MFAW.c	/^SQLITE_PRIVATE const void *sqlite3ValueText(sqlite3_value* pVal, u8 enc){$/;"	f
sqlite3VarintLen	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VarintLen(u64 v){$/;"	f
sqlite3VdbeAddOp0	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp0(Vdbe *p, int op){$/;"	f
sqlite3VdbeAddOp1	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp1(Vdbe *p, int op, int p1){$/;"	f
sqlite3VdbeAddOp2	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp2(Vdbe *p, int op, int p1, int p2){$/;"	f
sqlite3VdbeAddOp3	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp3(Vdbe *p, int op, int p1, int p2, int p3){$/;"	f
sqlite3VdbeAddOp4	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4($/;"	f
sqlite3VdbeAddOp4Int	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOp4Int($/;"	f
sqlite3VdbeAddOpList	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeAddOpList(Vdbe *p, int nOp, VdbeOpList const *aOp, int iLineno){$/;"	f
sqlite3VdbeAddParseSchemaOp	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeAddParseSchemaOp(Vdbe *p, int iDb, char *zWhere){$/;"	f
sqlite3VdbeAllocUnpackedRecord	sqlite3_MFAW.c	/^SQLITE_PRIVATE UnpackedRecord *sqlite3VdbeAllocUnpackedRecord($/;"	f
sqlite3VdbeAssertMayAbort	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeAssertMayAbort(Vdbe *v, int mayAbort){$/;"	f
sqlite3VdbeChangeEncoding	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeChangeEncoding(Mem *pMem, int desiredEnc){$/;"	f
sqlite3VdbeChangeP1	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP1(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP2	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP2(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP3	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP3(Vdbe *p, u32 addr, int val){$/;"	f
sqlite3VdbeChangeP4	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP4(Vdbe *p, int addr, const char *zP4, int n){$/;"	f
sqlite3VdbeChangeP5	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeP5(Vdbe *p, u8 val){$/;"	f
sqlite3VdbeChangeToNoop	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeChangeToNoop(Vdbe *p, int addr){$/;"	f
sqlite3VdbeCheckFk	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeCheckFk(Vdbe *p, int deferred){$/;"	f
sqlite3VdbeCheckFk	sqlite3_MFAW.c	14983;"	d	file:
sqlite3VdbeCheckMemInvariants	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeCheckMemInvariants(Mem *p){$/;"	f
sqlite3VdbeClearObject	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeClearObject(sqlite3 *db, Vdbe *p){$/;"	f
sqlite3VdbeCloseStatement	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeCloseStatement(Vdbe *p, int eOp){$/;"	f
sqlite3VdbeComment	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeCountChanges	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeCountChanges(Vdbe *v){$/;"	f
sqlite3VdbeCreate	sqlite3_MFAW.c	/^SQLITE_PRIVATE Vdbe *sqlite3VdbeCreate(Parse *pParse){$/;"	f
sqlite3VdbeCurrentAddr	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeCurrentAddr(Vdbe *p){$/;"	f
sqlite3VdbeCursorMoveto	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeCursorMoveto(VdbeCursor *p){$/;"	f
sqlite3VdbeCursorRestore	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeCursorRestore(VdbeCursor *p){$/;"	f
sqlite3VdbeDb	sqlite3_MFAW.c	/^SQLITE_PRIVATE sqlite3 *sqlite3VdbeDb(Vdbe *v){$/;"	f
sqlite3VdbeDelete	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeDelete(Vdbe *p){$/;"	f
sqlite3VdbeDeleteAuxData	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeDeleteAuxData(Vdbe *pVdbe, int iOp, int mask){$/;"	f
sqlite3VdbeDeletePriorOpcode	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeDeletePriorOpcode(Vdbe *p, u8 op){$/;"	f
sqlite3VdbeEnter	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeEnter(Vdbe *p){$/;"	f
sqlite3VdbeEnter	sqlite3_MFAW.c	14971;"	d	file:
sqlite3VdbeExec	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeExec($/;"	f
sqlite3VdbeExpandSql	sqlite3_MFAW.c	/^SQLITE_PRIVATE char *sqlite3VdbeExpandSql($/;"	f
sqlite3VdbeFinalize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeFinalize(Vdbe *p){$/;"	f
sqlite3VdbeFindCompare	sqlite3_MFAW.c	/^SQLITE_PRIVATE RecordCompare sqlite3VdbeFindCompare(UnpackedRecord *p){$/;"	f
sqlite3VdbeFrameDelete	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeFrameDelete(VdbeFrame *p){$/;"	f
sqlite3VdbeFrameRestore	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeFrameRestore(VdbeFrame *pFrame){$/;"	f
sqlite3VdbeFreeCursor	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeFreeCursor(Vdbe *p, VdbeCursor *pCx){$/;"	f
sqlite3VdbeGetBoundValue	sqlite3_MFAW.c	/^SQLITE_PRIVATE sqlite3_value *sqlite3VdbeGetBoundValue(Vdbe *v, int iVar, u8 aff){$/;"	f
sqlite3VdbeGetOp	sqlite3_MFAW.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeGetOp(Vdbe *p, int addr){$/;"	f
sqlite3VdbeHalt	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeHalt(Vdbe *p){$/;"	f
sqlite3VdbeIOTraceSql	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeIOTraceSql(Vdbe *p){$/;"	f
sqlite3VdbeIOTraceSql	sqlite3_MFAW.c	13738;"	d	file:
sqlite3VdbeIdxKeyCompare	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxKeyCompare($/;"	f
sqlite3VdbeIdxRowid	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeIdxRowid(sqlite3 *db, BtCursor *pCur, i64 *rowid){$/;"	f
sqlite3VdbeIntValue	sqlite3_MFAW.c	/^SQLITE_PRIVATE i64 sqlite3VdbeIntValue(Mem *pMem){$/;"	f
sqlite3VdbeIntegerAffinity	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeIntegerAffinity(Mem *pMem){$/;"	f
sqlite3VdbeJumpHere	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeJumpHere(Vdbe *p, int addr){$/;"	f
sqlite3VdbeLeave	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeLeave(Vdbe *p){$/;"	f
sqlite3VdbeLeave	sqlite3_MFAW.c	14972;"	d	file:
sqlite3VdbeLinkSubProgram	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeLinkSubProgram(Vdbe *pVdbe, SubProgram *p){$/;"	f
sqlite3VdbeList	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeList($/;"	f
sqlite3VdbeMakeLabel	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeMakeLabel(Vdbe *v){$/;"	f
sqlite3VdbeMakeReady	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeMakeReady($/;"	f
sqlite3VdbeMemAboutToChange	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeMemAboutToChange(Vdbe *pVdbe, Mem *pMem){$/;"	f
sqlite3VdbeMemCast	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeMemCast(Mem *pMem, u8 aff, u8 encoding){$/;"	f
sqlite3VdbeMemClearAndResize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeMemClearAndResize(Mem *pMem, int szNew){$/;"	f
sqlite3VdbeMemCopy	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeMemCopy(Mem *pTo, const Mem *pFrom){$/;"	f
sqlite3VdbeMemExpandBlob	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeMemExpandBlob(Mem *pMem){$/;"	f
sqlite3VdbeMemExpandBlob	sqlite3_MFAW.c	14997;"	d	file:
sqlite3VdbeMemFinalize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFinalize(Mem *pMem, FuncDef *pFunc){$/;"	f
sqlite3VdbeMemFromBtree	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeMemFromBtree($/;"	f
sqlite3VdbeMemGrow	sqlite3_MFAW.c	/^SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemGrow(Mem *pMem, int n, int bPreserve){$/;"	f
sqlite3VdbeMemHandleBom	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeMemHandleBom(Mem *pMem){$/;"	f
sqlite3VdbeMemInit	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeMemInit(Mem *pMem, sqlite3 *db, u16 flags){$/;"	f
sqlite3VdbeMemIntegerify	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeMemIntegerify(Mem *pMem){$/;"	f
sqlite3VdbeMemMakeWriteable	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeMemMakeWriteable(Mem *pMem){$/;"	f
sqlite3VdbeMemMove	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeMemMove(Mem *pTo, Mem *pFrom){$/;"	f
sqlite3VdbeMemNulTerminate	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNulTerminate(Mem *pMem){$/;"	f
sqlite3VdbeMemNumerify	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeMemNumerify(Mem *pMem){$/;"	f
sqlite3VdbeMemPrettyPrint	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeMemPrettyPrint(Mem *pMem, char *zBuf){$/;"	f
sqlite3VdbeMemRealify	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeMemRealify(Mem *pMem){$/;"	f
sqlite3VdbeMemRelease	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeMemRelease(Mem *p){$/;"	f
sqlite3VdbeMemSetDouble	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetDouble(Mem *pMem, double val){$/;"	f
sqlite3VdbeMemSetDouble	sqlite3_MFAW.c	14928;"	d	file:
sqlite3VdbeMemSetInt64	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetInt64(Mem *pMem, i64 val){$/;"	f
sqlite3VdbeMemSetNull	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetNull(Mem *pMem){$/;"	f
sqlite3VdbeMemSetRowSet	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetRowSet(Mem *pMem){$/;"	f
sqlite3VdbeMemSetStr	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeMemSetStr($/;"	f
sqlite3VdbeMemSetZeroBlob	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeMemSetZeroBlob(Mem *pMem, int n){$/;"	f
sqlite3VdbeMemShallowCopy	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeMemShallowCopy(Mem *pTo, const Mem *pFrom, int srcType){$/;"	f
sqlite3VdbeMemStringify	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeMemStringify(Mem *pMem, u8 enc, u8 bForce){$/;"	f
sqlite3VdbeMemTooBig	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeMemTooBig(Mem *p){$/;"	f
sqlite3VdbeMemTranslate	sqlite3_MFAW.c	/^SQLITE_PRIVATE SQLITE_NOINLINE int sqlite3VdbeMemTranslate(Mem *pMem, u8 desiredEnc){$/;"	f
sqlite3VdbeNoopComment	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeNoopComment(Vdbe *p, const char *zFormat, ...){$/;"	f
sqlite3VdbeParameterIndex	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeParameterIndex(Vdbe *p, const char *zName, int nName){$/;"	f
sqlite3VdbePrintOp	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbePrintOp(FILE *pOut, int pc, Op *pOp){$/;"	f
sqlite3VdbePrintSql	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbePrintSql(Vdbe *p){$/;"	f
sqlite3VdbeRealValue	sqlite3_MFAW.c	/^SQLITE_PRIVATE double sqlite3VdbeRealValue(Mem *pMem){$/;"	f
sqlite3VdbeRecordCompare	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeRecordCompare($/;"	f
sqlite3VdbeRecordCompareWithSkip	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeRecordCompareWithSkip($/;"	f
sqlite3VdbeRecordUnpack	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeRecordUnpack($/;"	f
sqlite3VdbeReset	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeReset(Vdbe *p){$/;"	f
sqlite3VdbeResetStepResult	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeResetStepResult(Vdbe *p){$/;"	f
sqlite3VdbeResolveLabel	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeResolveLabel(Vdbe *v, int x){$/;"	f
sqlite3VdbeRewind	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeRewind(Vdbe *p){$/;"	f
sqlite3VdbeRunOnlyOnce	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeRunOnlyOnce(Vdbe *p){$/;"	f
sqlite3VdbeScanStatus	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeScanStatus($/;"	f
sqlite3VdbeScanStatus	sqlite3_MFAW.c	10107;"	d	file:
sqlite3VdbeSerialGet	sqlite3_MFAW.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialGet($/;"	f
sqlite3VdbeSerialPut	sqlite3_MFAW.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialPut(u8 *buf, Mem *pMem, u32 serial_type){$/;"	f
sqlite3VdbeSerialType	sqlite3_MFAW.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialType(Mem *pMem, int file_format){$/;"	f
sqlite3VdbeSerialTypeLen	sqlite3_MFAW.c	/^SQLITE_PRIVATE u32 sqlite3VdbeSerialTypeLen(u32 serial_type){$/;"	f
sqlite3VdbeSetChanges	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeSetChanges(sqlite3 *db, int nChange){$/;"	f
sqlite3VdbeSetColName	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeSetColName($/;"	f
sqlite3VdbeSetLineNumber	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeSetLineNumber(Vdbe *v, int iLine){$/;"	f
sqlite3VdbeSetNumCols	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeSetNumCols(Vdbe *p, int nResColumn){$/;"	f
sqlite3VdbeSetP4KeyInfo	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeSetP4KeyInfo(Parse *pParse, Index *pIdx){$/;"	f
sqlite3VdbeSetSql	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeSetSql(Vdbe *p, const char *z, int n, int isPrepareV2){$/;"	f
sqlite3VdbeSetVarmask	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeSetVarmask(Vdbe *v, int iVar){$/;"	f
sqlite3VdbeSorterClose	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeSorterClose(sqlite3 *db, VdbeCursor *pCsr){$/;"	f
sqlite3VdbeSorterCompare	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterCompare($/;"	f
sqlite3VdbeSorterInit	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterInit($/;"	f
sqlite3VdbeSorterNext	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterNext(sqlite3 *db, const VdbeCursor *pCsr, int *pbEof){$/;"	f
sqlite3VdbeSorterReset	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeSorterReset(sqlite3 *db, VdbeSorter *pSorter){$/;"	f
sqlite3VdbeSorterRewind	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterRewind(const VdbeCursor *pCsr, int *pbEof){$/;"	f
sqlite3VdbeSorterRowkey	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterRowkey(const VdbeCursor *pCsr, Mem *pOut){$/;"	f
sqlite3VdbeSorterWrite	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeSorterWrite($/;"	f
sqlite3VdbeSwap	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeSwap(Vdbe *pA, Vdbe *pB){$/;"	f
sqlite3VdbeTakeOpArray	sqlite3_MFAW.c	/^SQLITE_PRIVATE VdbeOp *sqlite3VdbeTakeOpArray(Vdbe *p, int *pnOp, int *pnMaxArg){$/;"	f
sqlite3VdbeTransferError	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VdbeTransferError(Vdbe *p){$/;"	f
sqlite3VdbeUsesBtree	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VdbeUsesBtree(Vdbe *p, int i){$/;"	f
sqlite3ViewGetColumnNames	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3ViewGetColumnNames(Parse *pParse, Table *pTable){$/;"	f
sqlite3ViewGetColumnNames	sqlite3_MFAW.c	13169;"	d	file:
sqlite3VtabArgExtend	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VtabArgExtend(Parse *pParse, Token *p){$/;"	f
sqlite3VtabArgInit	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VtabArgInit(Parse *pParse){$/;"	f
sqlite3VtabBegin	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VtabBegin(sqlite3 *db, VTable *pVTab){$/;"	f
sqlite3VtabBeginParse	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VtabBeginParse($/;"	f
sqlite3VtabCallConnect	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VtabCallConnect(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabCallCreate	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VtabCallCreate(sqlite3 *db, int iDb, const char *zTab, char **pzErr){$/;"	f
sqlite3VtabCallDestroy	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VtabCallDestroy(sqlite3 *db, int iDb, const char *zTab){$/;"	f
sqlite3VtabClear	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VtabClear(sqlite3 *db, Table *p){$/;"	f
sqlite3VtabClear	sqlite3_MFAW.c	13565;"	d	file:
sqlite3VtabCommit	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VtabCommit(sqlite3 *db){$/;"	f
sqlite3VtabCommit	sqlite3_MFAW.c	13568;"	d	file:
sqlite3VtabDisconnect	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VtabDisconnect(sqlite3 *db, Table *p){$/;"	f
sqlite3VtabFinishParse	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VtabFinishParse(Parse *pParse, Token *pEnd){$/;"	f
sqlite3VtabImportErrmsg	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VtabImportErrmsg(Vdbe *p, sqlite3_vtab *pVtab){$/;"	f
sqlite3VtabInSync	sqlite3_MFAW.c	13569;"	d	file:
sqlite3VtabInSync	sqlite3_MFAW.c	13587;"	d	file:
sqlite3VtabLock	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VtabLock(VTable *pVTab){$/;"	f
sqlite3VtabLock	sqlite3_MFAW.c	13570;"	d	file:
sqlite3VtabMakeWritable	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VtabMakeWritable(Parse *pParse, Table *pTab){$/;"	f
sqlite3VtabOverloadFunction	sqlite3_MFAW.c	/^SQLITE_PRIVATE FuncDef *sqlite3VtabOverloadFunction($/;"	f
sqlite3VtabRollback	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VtabRollback(sqlite3 *db){$/;"	f
sqlite3VtabRollback	sqlite3_MFAW.c	13567;"	d	file:
sqlite3VtabSavepoint	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VtabSavepoint(sqlite3 *db, int op, int iSavepoint){$/;"	f
sqlite3VtabSavepoint	sqlite3_MFAW.c	13573;"	d	file:
sqlite3VtabSync	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3VtabSync(sqlite3 *db, Vdbe *p){$/;"	f
sqlite3VtabSync	sqlite3_MFAW.c	13566;"	d	file:
sqlite3VtabUnlock	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VtabUnlock(VTable *pVTab){$/;"	f
sqlite3VtabUnlock	sqlite3_MFAW.c	13571;"	d	file:
sqlite3VtabUnlockList	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3VtabUnlockList(sqlite3 *db){$/;"	f
sqlite3VtabUnlockList	sqlite3_MFAW.c	13572;"	d	file:
sqlite3WalBeginReadTransaction	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalBeginReadTransaction(Wal *pWal, int *pChanged){$/;"	f
sqlite3WalBeginReadTransaction	sqlite3_MFAW.c	41573;"	d	file:
sqlite3WalBeginWriteTransaction	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalBeginWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalBeginWriteTransaction	sqlite3_MFAW.c	41576;"	d	file:
sqlite3WalCallback	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalCallback(Wal *pWal){$/;"	f
sqlite3WalCallback	sqlite3_MFAW.c	41583;"	d	file:
sqlite3WalCheckpoint	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalCheckpoint($/;"	f
sqlite3WalCheckpoint	sqlite3_MFAW.c	41582;"	d	file:
sqlite3WalClose	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalClose($/;"	f
sqlite3WalClose	sqlite3_MFAW.c	41572;"	d	file:
sqlite3WalDbsize	sqlite3_MFAW.c	/^SQLITE_PRIVATE Pgno sqlite3WalDbsize(Wal *pWal){$/;"	f
sqlite3WalDbsize	sqlite3_MFAW.c	41575;"	d	file:
sqlite3WalDefaultHook	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalDefaultHook($/;"	f
sqlite3WalEndReadTransaction	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3WalEndReadTransaction(Wal *pWal){$/;"	f
sqlite3WalEndReadTransaction	sqlite3_MFAW.c	41574;"	d	file:
sqlite3WalEndWriteTransaction	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalEndWriteTransaction(Wal *pWal){$/;"	f
sqlite3WalEndWriteTransaction	sqlite3_MFAW.c	41577;"	d	file:
sqlite3WalExclusiveMode	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalExclusiveMode(Wal *pWal, int op){$/;"	f
sqlite3WalExclusiveMode	sqlite3_MFAW.c	41584;"	d	file:
sqlite3WalFindFrame	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalFindFrame($/;"	f
sqlite3WalFindFrame	sqlite3_MFAW.c	41587;"	d	file:
sqlite3WalFrames	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalFrames($/;"	f
sqlite3WalFrames	sqlite3_MFAW.c	41581;"	d	file:
sqlite3WalFramesize	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalFramesize(Wal *pWal){$/;"	f
sqlite3WalFramesize	sqlite3_MFAW.c	41586;"	d	file:
sqlite3WalHeapMemory	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalHeapMemory(Wal *pWal){$/;"	f
sqlite3WalHeapMemory	sqlite3_MFAW.c	41585;"	d	file:
sqlite3WalLimit	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3WalLimit(Wal *pWal, i64 iLimit){$/;"	f
sqlite3WalLimit	sqlite3_MFAW.c	41571;"	d	file:
sqlite3WalOpen	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalOpen($/;"	f
sqlite3WalOpen	sqlite3_MFAW.c	41570;"	d	file:
sqlite3WalReadFrame	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalReadFrame($/;"	f
sqlite3WalSavepoint	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3WalSavepoint(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSavepoint	sqlite3_MFAW.c	41579;"	d	file:
sqlite3WalSavepointUndo	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalSavepointUndo(Wal *pWal, u32 *aWalData){$/;"	f
sqlite3WalSavepointUndo	sqlite3_MFAW.c	41580;"	d	file:
sqlite3WalTrace	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalTrace = 0;$/;"	v
sqlite3WalUndo	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalUndo(Wal *pWal, int (*xUndo)(void *, Pgno), void *pUndoCtx){$/;"	f
sqlite3WalUndo	sqlite3_MFAW.c	41578;"	d	file:
sqlite3WalkExpr	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalkExpr(Walker *pWalker, Expr *pExpr){$/;"	f
sqlite3WalkExprList	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalkExprList(Walker *pWalker, ExprList *p){$/;"	f
sqlite3WalkSelect	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalkSelect(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectExpr	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalkSelectExpr(Walker *pWalker, Select *p){$/;"	f
sqlite3WalkSelectFrom	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WalkSelectFrom(Walker *pWalker, Select *p){$/;"	f
sqlite3WhereBegin	sqlite3_MFAW.c	/^SQLITE_PRIVATE WhereInfo *sqlite3WhereBegin($/;"	f
sqlite3WhereBreakLabel	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WhereBreakLabel(WhereInfo *pWInfo){$/;"	f
sqlite3WhereContinueLabel	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WhereContinueLabel(WhereInfo *pWInfo){$/;"	f
sqlite3WhereEnd	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3WhereEnd(WhereInfo *pWInfo){$/;"	f
sqlite3WhereIsDistinct	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WhereIsDistinct(WhereInfo *pWInfo){$/;"	f
sqlite3WhereIsOrdered	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WhereIsOrdered(WhereInfo *pWInfo){$/;"	f
sqlite3WhereIsSorted	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WhereIsSorted(WhereInfo *pWInfo){$/;"	f
sqlite3WhereOkOnePass	sqlite3_MFAW.c	/^SQLITE_PRIVATE int sqlite3WhereOkOnePass(WhereInfo *pWInfo, int *aiCur){$/;"	f
sqlite3WhereOutputRowCount	sqlite3_MFAW.c	/^SQLITE_PRIVATE u64 sqlite3WhereOutputRowCount(WhereInfo *pWInfo){$/;"	f
sqlite3WhereTrace	sqlite3_MFAW.c	/^\/***\/ int sqlite3WhereTrace = 0;$/;"	v
sqlite3Win32Wait	sqlite3_MFAW.c	/^SQLITE_PRIVATE DWORD sqlite3Win32Wait(HANDLE hObject){$/;"	f
sqlite3WithAdd	sqlite3_MFAW.c	/^SQLITE_PRIVATE With *sqlite3WithAdd($/;"	f
sqlite3WithDelete	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3WithDelete(sqlite3 *db, With *pWith){$/;"	f
sqlite3WithDelete	sqlite3_MFAW.c	13619;"	d	file:
sqlite3WithPush	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3WithPush(Parse *pParse, With *pWith, u8 bFree){$/;"	f
sqlite3WithPush	sqlite3_MFAW.c	13618;"	d	file:
sqlite3XPrintf	sqlite3_MFAW.c	/^SQLITE_PRIVATE void sqlite3XPrintf(StrAccum *p, u32 bFlags, const char *zFormat, ...){$/;"	f
sqlite3_aggregate_context	sqlite3_MFAW.c	/^SQLITE_API void *SQLITE_STDCALL sqlite3_aggregate_context(sqlite3_context *p, int nByte){$/;"	f
sqlite3_aggregate_context	sqlite3_MFAW.c	102216;"	d	file:
sqlite3_aggregate_count	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_aggregate_count(sqlite3_context *p){$/;"	f
sqlite3_aggregate_count	sqlite3_MFAW.c	102218;"	d	file:
sqlite3_api_routines	sqlite3_MFAW.c	/^struct sqlite3_api_routines {$/;"	s	file:
sqlite3_api_routines	sqlite3_MFAW.c	/^typedef struct sqlite3_api_routines sqlite3_api_routines;$/;"	t	typeref:struct:sqlite3_api_routines	file:
sqlite3_auto_extension	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_auto_extension(void (*xInit)(void)){$/;"	f
sqlite3_auto_extension	sqlite3_MFAW.c	102420;"	d	file:
sqlite3_backup	sqlite3_MFAW.c	/^struct sqlite3_backup {$/;"	s	file:
sqlite3_backup	sqlite3_MFAW.c	/^typedef struct sqlite3_backup sqlite3_backup;$/;"	t	typeref:struct:sqlite3_backup	file:
sqlite3_backup_finish	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_backup_finish(sqlite3_backup *p){$/;"	f
sqlite3_backup_finish	sqlite3_MFAW.c	102381;"	d	file:
sqlite3_backup_init	sqlite3_MFAW.c	/^SQLITE_API sqlite3_backup *SQLITE_STDCALL sqlite3_backup_init($/;"	f
sqlite3_backup_init	sqlite3_MFAW.c	102382;"	d	file:
sqlite3_backup_pagecount	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_backup_pagecount(sqlite3_backup *p){$/;"	f
sqlite3_backup_pagecount	sqlite3_MFAW.c	102383;"	d	file:
sqlite3_backup_remaining	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_backup_remaining(sqlite3_backup *p){$/;"	f
sqlite3_backup_remaining	sqlite3_MFAW.c	102384;"	d	file:
sqlite3_backup_step	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_backup_step(sqlite3_backup *p, int nPage){$/;"	f
sqlite3_backup_step	sqlite3_MFAW.c	102385;"	d	file:
sqlite3_bind_blob	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_bind_blob($/;"	f
sqlite3_bind_blob	sqlite3_MFAW.c	102220;"	d	file:
sqlite3_bind_blob64	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_bind_blob64($/;"	f
sqlite3_bind_blob64	sqlite3_MFAW.c	102421;"	d	file:
sqlite3_bind_double	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_bind_double(sqlite3_stmt *pStmt, int i, double rValue){$/;"	f
sqlite3_bind_double	sqlite3_MFAW.c	102221;"	d	file:
sqlite3_bind_int	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_bind_int(sqlite3_stmt *p, int i, int iValue){$/;"	f
sqlite3_bind_int	sqlite3_MFAW.c	102222;"	d	file:
sqlite3_bind_int64	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_bind_int64(sqlite3_stmt *pStmt, int i, sqlite_int64 iValue){$/;"	f
sqlite3_bind_int64	sqlite3_MFAW.c	102223;"	d	file:
sqlite3_bind_null	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_bind_null(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_null	sqlite3_MFAW.c	102224;"	d	file:
sqlite3_bind_parameter_count	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_bind_parameter_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_bind_parameter_count	sqlite3_MFAW.c	102225;"	d	file:
sqlite3_bind_parameter_index	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_bind_parameter_index(sqlite3_stmt *pStmt, const char *zName){$/;"	f
sqlite3_bind_parameter_index	sqlite3_MFAW.c	102226;"	d	file:
sqlite3_bind_parameter_name	sqlite3_MFAW.c	/^SQLITE_API const char *SQLITE_STDCALL sqlite3_bind_parameter_name(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_bind_parameter_name	sqlite3_MFAW.c	102227;"	d	file:
sqlite3_bind_text	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_bind_text( $/;"	f
sqlite3_bind_text	sqlite3_MFAW.c	102228;"	d	file:
sqlite3_bind_text16	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_bind_text16($/;"	f
sqlite3_bind_text16	sqlite3_MFAW.c	102229;"	d	file:
sqlite3_bind_text16	sqlite3_MFAW.c	102476;"	d	file:
sqlite3_bind_text64	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_bind_text64( $/;"	f
sqlite3_bind_text64	sqlite3_MFAW.c	102422;"	d	file:
sqlite3_bind_value	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_bind_value(sqlite3_stmt *pStmt, int i, const sqlite3_value *pValue){$/;"	f
sqlite3_bind_value	sqlite3_MFAW.c	102230;"	d	file:
sqlite3_bind_zeroblob	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_bind_zeroblob(sqlite3_stmt *pStmt, int i, int n){$/;"	f
sqlite3_bind_zeroblob	sqlite3_MFAW.c	102346;"	d	file:
sqlite3_bind_zeroblob	sqlite3_MFAW.c	102537;"	d	file:
sqlite3_blob	sqlite3_MFAW.c	/^typedef struct sqlite3_blob sqlite3_blob;$/;"	t	typeref:struct:sqlite3_blob	file:
sqlite3_blob_bytes	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_blob_bytes(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_bytes	sqlite3_MFAW.c	102347;"	d	file:
sqlite3_blob_bytes	sqlite3_MFAW.c	102538;"	d	file:
sqlite3_blob_close	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_blob_close(sqlite3_blob *pBlob){$/;"	f
sqlite3_blob_close	sqlite3_MFAW.c	102348;"	d	file:
sqlite3_blob_close	sqlite3_MFAW.c	102539;"	d	file:
sqlite3_blob_open	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_blob_open($/;"	f
sqlite3_blob_open	sqlite3_MFAW.c	102349;"	d	file:
sqlite3_blob_open	sqlite3_MFAW.c	102540;"	d	file:
sqlite3_blob_read	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_blob_read(sqlite3_blob *pBlob, void *z, int n, int iOffset){$/;"	f
sqlite3_blob_read	sqlite3_MFAW.c	102350;"	d	file:
sqlite3_blob_read	sqlite3_MFAW.c	102541;"	d	file:
sqlite3_blob_reopen	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_blob_reopen(sqlite3_blob *pBlob, sqlite3_int64 iRow){$/;"	f
sqlite3_blob_reopen	sqlite3_MFAW.c	102402;"	d	file:
sqlite3_blob_reopen	sqlite3_MFAW.c	102543;"	d	file:
sqlite3_blob_write	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_blob_write(sqlite3_blob *pBlob, const void *z, int n, int iOffset){$/;"	f
sqlite3_blob_write	sqlite3_MFAW.c	102351;"	d	file:
sqlite3_blob_write	sqlite3_MFAW.c	102542;"	d	file:
sqlite3_busy_handler	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_busy_handler($/;"	f
sqlite3_busy_handler	sqlite3_MFAW.c	102231;"	d	file:
sqlite3_busy_timeout	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_busy_timeout(sqlite3 *db, int ms){$/;"	f
sqlite3_busy_timeout	sqlite3_MFAW.c	102232;"	d	file:
sqlite3_callback	sqlite3_MFAW.c	/^typedef int (*sqlite3_callback)(void*,int,char**, char**);$/;"	t	file:
sqlite3_cancel_auto_extension	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_cancel_auto_extension(void (*xInit)(void)){$/;"	f
sqlite3_cancel_auto_extension	sqlite3_MFAW.c	102423;"	d	file:
sqlite3_changes	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_changes(sqlite3 *db){$/;"	f
sqlite3_changes	sqlite3_MFAW.c	102233;"	d	file:
sqlite3_clear_bindings	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_clear_bindings(sqlite3_stmt *pStmt){$/;"	f
sqlite3_clear_bindings	sqlite3_MFAW.c	102345;"	d	file:
sqlite3_close	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_close(sqlite3 *db){ return sqlite3Close(db,0); }$/;"	f
sqlite3_close	sqlite3_MFAW.c	102234;"	d	file:
sqlite3_close_v2	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_close_v2(sqlite3 *db){ return sqlite3Close(db,1); }$/;"	f
sqlite3_close_v2	sqlite3_MFAW.c	102406;"	d	file:
sqlite3_collation_needed	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_collation_needed($/;"	f
sqlite3_collation_needed	sqlite3_MFAW.c	102235;"	d	file:
sqlite3_collation_needed16	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_collation_needed16($/;"	f
sqlite3_collation_needed16	sqlite3_MFAW.c	102236;"	d	file:
sqlite3_collation_needed16	sqlite3_MFAW.c	102477;"	d	file:
sqlite3_column_blob	sqlite3_MFAW.c	/^SQLITE_API const void *SQLITE_STDCALL sqlite3_column_blob(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_blob	sqlite3_MFAW.c	102237;"	d	file:
sqlite3_column_bytes	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_column_bytes(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes	sqlite3_MFAW.c	102238;"	d	file:
sqlite3_column_bytes16	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_column_bytes16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_bytes16	sqlite3_MFAW.c	102239;"	d	file:
sqlite3_column_count	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_column_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_column_count	sqlite3_MFAW.c	102240;"	d	file:
sqlite3_column_database_name	sqlite3_MFAW.c	/^SQLITE_API const char *SQLITE_STDCALL sqlite3_column_database_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_database_name	sqlite3_MFAW.c	102241;"	d	file:
sqlite3_column_database_name	sqlite3_MFAW.c	102463;"	d	file:
sqlite3_column_database_name16	sqlite3_MFAW.c	/^SQLITE_API const void *SQLITE_STDCALL sqlite3_column_database_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_database_name16	sqlite3_MFAW.c	102242;"	d	file:
sqlite3_column_database_name16	sqlite3_MFAW.c	102464;"	d	file:
sqlite3_column_database_name16	sqlite3_MFAW.c	102495;"	d	file:
sqlite3_column_decltype	sqlite3_MFAW.c	/^SQLITE_API const char *SQLITE_STDCALL sqlite3_column_decltype(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype	sqlite3_MFAW.c	102243;"	d	file:
sqlite3_column_decltype	sqlite3_MFAW.c	102507;"	d	file:
sqlite3_column_decltype16	sqlite3_MFAW.c	/^SQLITE_API const void *SQLITE_STDCALL sqlite3_column_decltype16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_decltype16	sqlite3_MFAW.c	102244;"	d	file:
sqlite3_column_decltype16	sqlite3_MFAW.c	102478;"	d	file:
sqlite3_column_decltype16	sqlite3_MFAW.c	102506;"	d	file:
sqlite3_column_double	sqlite3_MFAW.c	/^SQLITE_API double SQLITE_STDCALL sqlite3_column_double(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_double	sqlite3_MFAW.c	102245;"	d	file:
sqlite3_column_int	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_column_int(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int	sqlite3_MFAW.c	102246;"	d	file:
sqlite3_column_int64	sqlite3_MFAW.c	/^SQLITE_API sqlite_int64 SQLITE_STDCALL sqlite3_column_int64(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_int64	sqlite3_MFAW.c	102247;"	d	file:
sqlite3_column_name	sqlite3_MFAW.c	/^SQLITE_API const char *SQLITE_STDCALL sqlite3_column_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_name	sqlite3_MFAW.c	102248;"	d	file:
sqlite3_column_name16	sqlite3_MFAW.c	/^SQLITE_API const void *SQLITE_STDCALL sqlite3_column_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_name16	sqlite3_MFAW.c	102249;"	d	file:
sqlite3_column_name16	sqlite3_MFAW.c	102479;"	d	file:
sqlite3_column_origin_name	sqlite3_MFAW.c	/^SQLITE_API const char *SQLITE_STDCALL sqlite3_column_origin_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name	sqlite3_MFAW.c	102250;"	d	file:
sqlite3_column_origin_name	sqlite3_MFAW.c	102467;"	d	file:
sqlite3_column_origin_name16	sqlite3_MFAW.c	/^SQLITE_API const void *SQLITE_STDCALL sqlite3_column_origin_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_origin_name16	sqlite3_MFAW.c	102251;"	d	file:
sqlite3_column_origin_name16	sqlite3_MFAW.c	102468;"	d	file:
sqlite3_column_origin_name16	sqlite3_MFAW.c	102497;"	d	file:
sqlite3_column_table_name	sqlite3_MFAW.c	/^SQLITE_API const char *SQLITE_STDCALL sqlite3_column_table_name(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name	sqlite3_MFAW.c	102252;"	d	file:
sqlite3_column_table_name	sqlite3_MFAW.c	102465;"	d	file:
sqlite3_column_table_name16	sqlite3_MFAW.c	/^SQLITE_API const void *SQLITE_STDCALL sqlite3_column_table_name16(sqlite3_stmt *pStmt, int N){$/;"	f
sqlite3_column_table_name16	sqlite3_MFAW.c	102253;"	d	file:
sqlite3_column_table_name16	sqlite3_MFAW.c	102466;"	d	file:
sqlite3_column_table_name16	sqlite3_MFAW.c	102496;"	d	file:
sqlite3_column_text	sqlite3_MFAW.c	/^SQLITE_API const unsigned char *SQLITE_STDCALL sqlite3_column_text(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_text	sqlite3_MFAW.c	102254;"	d	file:
sqlite3_column_text16	sqlite3_MFAW.c	/^SQLITE_API const void *SQLITE_STDCALL sqlite3_column_text16(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_text16	sqlite3_MFAW.c	102255;"	d	file:
sqlite3_column_text16	sqlite3_MFAW.c	102480;"	d	file:
sqlite3_column_type	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_column_type(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_type	sqlite3_MFAW.c	102256;"	d	file:
sqlite3_column_value	sqlite3_MFAW.c	/^SQLITE_API sqlite3_value *SQLITE_STDCALL sqlite3_column_value(sqlite3_stmt *pStmt, int i){$/;"	f
sqlite3_column_value	sqlite3_MFAW.c	102257;"	d	file:
sqlite3_commit_hook	sqlite3_MFAW.c	/^SQLITE_API void *SQLITE_STDCALL sqlite3_commit_hook($/;"	f
sqlite3_commit_hook	sqlite3_MFAW.c	102258;"	d	file:
sqlite3_compileoption_get	sqlite3_MFAW.c	/^SQLITE_API const char *SQLITE_STDCALL sqlite3_compileoption_get(int N){$/;"	f
sqlite3_compileoption_get	sqlite3_MFAW.c	102386;"	d	file:
sqlite3_compileoption_used	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_compileoption_used(const char *zOptName){$/;"	f
sqlite3_compileoption_used	sqlite3_MFAW.c	102387;"	d	file:
sqlite3_complete	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_complete(const char *zSql){$/;"	f
sqlite3_complete	sqlite3_MFAW.c	102259;"	d	file:
sqlite3_complete	sqlite3_MFAW.c	102501;"	d	file:
sqlite3_complete16	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_complete16(const void *zSql){$/;"	f
sqlite3_complete16	sqlite3_MFAW.c	102260;"	d	file:
sqlite3_complete16	sqlite3_MFAW.c	102481;"	d	file:
sqlite3_complete16	sqlite3_MFAW.c	102502;"	d	file:
sqlite3_config	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_CDECL sqlite3_config(int op, ...){$/;"	f
sqlite3_context	sqlite3_MFAW.c	/^struct sqlite3_context {$/;"	s	file:
sqlite3_context	sqlite3_MFAW.c	/^typedef struct sqlite3_context sqlite3_context;$/;"	t	typeref:struct:sqlite3_context	file:
sqlite3_context_db_handle	sqlite3_MFAW.c	/^SQLITE_API sqlite3 *SQLITE_STDCALL sqlite3_context_db_handle(sqlite3_context *p){$/;"	f
sqlite3_context_db_handle	sqlite3_MFAW.c	102375;"	d	file:
sqlite3_create_collation	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_create_collation($/;"	f
sqlite3_create_collation	sqlite3_MFAW.c	102261;"	d	file:
sqlite3_create_collation16	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_create_collation16($/;"	f
sqlite3_create_collation16	sqlite3_MFAW.c	102262;"	d	file:
sqlite3_create_collation16	sqlite3_MFAW.c	102482;"	d	file:
sqlite3_create_collation_v2	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_create_collation_v2($/;"	f
sqlite3_create_collation_v2	sqlite3_MFAW.c	102352;"	d	file:
sqlite3_create_function	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_create_function($/;"	f
sqlite3_create_function	sqlite3_MFAW.c	102263;"	d	file:
sqlite3_create_function16	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_create_function16($/;"	f
sqlite3_create_function16	sqlite3_MFAW.c	102264;"	d	file:
sqlite3_create_function16	sqlite3_MFAW.c	102483;"	d	file:
sqlite3_create_function_v2	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_create_function_v2($/;"	f
sqlite3_create_function_v2	sqlite3_MFAW.c	102388;"	d	file:
sqlite3_create_module	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_create_module($/;"	f
sqlite3_create_module	sqlite3_MFAW.c	102265;"	d	file:
sqlite3_create_module	sqlite3_MFAW.c	102515;"	d	file:
sqlite3_create_module_v2	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_create_module_v2($/;"	f
sqlite3_create_module_v2	sqlite3_MFAW.c	102266;"	d	file:
sqlite3_create_module_v2	sqlite3_MFAW.c	102516;"	d	file:
sqlite3_current_time	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_current_time = 0;  \/* Fake system time in seconds since 1970. *\/$/;"	v
sqlite3_data_count	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_data_count(sqlite3_stmt *pStmt){$/;"	f
sqlite3_data_count	sqlite3_MFAW.c	102267;"	d	file:
sqlite3_data_directory	sqlite3_MFAW.c	/^SQLITE_API char *sqlite3_data_directory = 0;$/;"	v
sqlite3_data_directory	sqlite3_MFAW.c	/^SQLITE_API char *sqlite3_data_directory;$/;"	v
sqlite3_db_config	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_CDECL sqlite3_db_config(sqlite3 *db, int op, ...){$/;"	f
sqlite3_db_config	sqlite3_MFAW.c	102389;"	d	file:
sqlite3_db_filename	sqlite3_MFAW.c	/^SQLITE_API const char *SQLITE_STDCALL sqlite3_db_filename(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3_db_filename	sqlite3_MFAW.c	102407;"	d	file:
sqlite3_db_handle	sqlite3_MFAW.c	/^SQLITE_API sqlite3 *SQLITE_STDCALL sqlite3_db_handle(sqlite3_stmt *pStmt){$/;"	f
sqlite3_db_handle	sqlite3_MFAW.c	102268;"	d	file:
sqlite3_db_mutex	sqlite3_MFAW.c	/^SQLITE_API sqlite3_mutex *SQLITE_STDCALL sqlite3_db_mutex(sqlite3 *db){$/;"	f
sqlite3_db_mutex	sqlite3_MFAW.c	102390;"	d	file:
sqlite3_db_readonly	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_db_readonly(sqlite3 *db, const char *zDbName){$/;"	f
sqlite3_db_readonly	sqlite3_MFAW.c	102408;"	d	file:
sqlite3_db_release_memory	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_db_release_memory(sqlite3 *db){$/;"	f
sqlite3_db_release_memory	sqlite3_MFAW.c	102409;"	d	file:
sqlite3_db_status	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_db_status($/;"	f
sqlite3_db_status	sqlite3_MFAW.c	102391;"	d	file:
sqlite3_dbstat_register	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_dbstat_register(sqlite3 *db){$/;"	f
sqlite3_debug_mutex	sqlite3_MFAW.c	/^typedef struct sqlite3_debug_mutex {$/;"	s	file:
sqlite3_debug_mutex	sqlite3_MFAW.c	/^} sqlite3_debug_mutex;$/;"	t	typeref:struct:sqlite3_debug_mutex	file:
sqlite3_declare_vtab	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_declare_vtab(sqlite3 *db, const char *zCreateTable){$/;"	f
sqlite3_declare_vtab	sqlite3_MFAW.c	102269;"	d	file:
sqlite3_declare_vtab	sqlite3_MFAW.c	102517;"	d	file:
sqlite3_destructor_type	sqlite3_MFAW.c	/^typedef void (*sqlite3_destructor_type)(void*);$/;"	t	file:
sqlite3_diskfull	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_diskfull = 0;$/;"	v
sqlite3_diskfull_pending	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_diskfull_pending = 0;$/;"	v
sqlite3_enable_load_extension	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_enable_load_extension(sqlite3 *db, int onoff){$/;"	f
sqlite3_enable_shared_cache	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_enable_shared_cache(int enable){$/;"	f
sqlite3_enable_shared_cache	sqlite3_MFAW.c	102270;"	d	file:
sqlite3_enable_shared_cache	sqlite3_MFAW.c	102523;"	d	file:
sqlite3_errcode	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_errcode(sqlite3 *db){$/;"	f
sqlite3_errcode	sqlite3_MFAW.c	102271;"	d	file:
sqlite3_errmsg	sqlite3_MFAW.c	/^SQLITE_API const char *SQLITE_STDCALL sqlite3_errmsg(sqlite3 *db){$/;"	f
sqlite3_errmsg	sqlite3_MFAW.c	102272;"	d	file:
sqlite3_errmsg16	sqlite3_MFAW.c	/^SQLITE_API const void *SQLITE_STDCALL sqlite3_errmsg16(sqlite3 *db){$/;"	f
sqlite3_errmsg16	sqlite3_MFAW.c	102273;"	d	file:
sqlite3_errmsg16	sqlite3_MFAW.c	102484;"	d	file:
sqlite3_errstr	sqlite3_MFAW.c	/^SQLITE_API const char *SQLITE_STDCALL sqlite3_errstr(int rc){$/;"	f
sqlite3_errstr	sqlite3_MFAW.c	102410;"	d	file:
sqlite3_exec	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_exec($/;"	f
sqlite3_exec	sqlite3_MFAW.c	102274;"	d	file:
sqlite3_expired	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_expired(sqlite3_stmt *pStmt){$/;"	f
sqlite3_expired	sqlite3_MFAW.c	102276;"	d	file:
sqlite3_extended_errcode	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_extended_errcode(sqlite3 *db){$/;"	f
sqlite3_extended_errcode	sqlite3_MFAW.c	102392;"	d	file:
sqlite3_extended_result_codes	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_extended_result_codes(sqlite3 *db, int onoff){$/;"	f
sqlite3_extended_result_codes	sqlite3_MFAW.c	102376;"	d	file:
sqlite3_file	sqlite3_MFAW.c	/^struct sqlite3_file {$/;"	s	file:
sqlite3_file	sqlite3_MFAW.c	/^typedef struct sqlite3_file sqlite3_file;$/;"	t	typeref:struct:sqlite3_file	file:
sqlite3_file_control	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_file_control(sqlite3 *db, const char *zDbName, int op, void *pArg){$/;"	f
sqlite3_file_control	sqlite3_MFAW.c	102353;"	d	file:
sqlite3_finalize	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_finalize(sqlite3_stmt *pStmt){$/;"	f
sqlite3_finalize	sqlite3_MFAW.c	102278;"	d	file:
sqlite3_found_count	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_found_count = 0;$/;"	v
sqlite3_free	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_free(void *p){$/;"	f
sqlite3_free	sqlite3_MFAW.c	102279;"	d	file:
sqlite3_free_table	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_free_table($/;"	f
sqlite3_free_table	sqlite3_MFAW.c	102280;"	d	file:
sqlite3_free_table	sqlite3_MFAW.c	102532;"	d	file:
sqlite3_fts3_enable_parentheses	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_fts3_enable_parentheses = 0;$/;"	v
sqlite3_fts3_enable_parentheses	sqlite3_MFAW.c	139587;"	d	file:
sqlite3_fts3_enable_parentheses	sqlite3_MFAW.c	139589;"	d	file:
sqlite3_fullsync_count	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_fullsync_count = 0;$/;"	v
sqlite3_get_autocommit	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_get_autocommit(sqlite3 *db){$/;"	f
sqlite3_get_autocommit	sqlite3_MFAW.c	102281;"	d	file:
sqlite3_get_auxdata	sqlite3_MFAW.c	/^SQLITE_API void *SQLITE_STDCALL sqlite3_get_auxdata(sqlite3_context *pCtx, int iArg){$/;"	f
sqlite3_get_auxdata	sqlite3_MFAW.c	102282;"	d	file:
sqlite3_get_table	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_get_table($/;"	f
sqlite3_get_table	sqlite3_MFAW.c	102283;"	d	file:
sqlite3_get_table	sqlite3_MFAW.c	102533;"	d	file:
sqlite3_get_table_cb	sqlite3_MFAW.c	/^static int sqlite3_get_table_cb(void *pArg, int nCol, char **argv, char **colv){$/;"	f	file:
sqlite3_global_recover	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_global_recover(void){$/;"	f
sqlite3_global_recover	sqlite3_MFAW.c	102285;"	d	file:
sqlite3_hostid_num	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_hostid_num = 0;$/;"	v
sqlite3_index_constraint	sqlite3_MFAW.c	/^  struct sqlite3_index_constraint {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_constraint_usage	sqlite3_MFAW.c	/^  struct sqlite3_index_constraint_usage {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_index_info	sqlite3_MFAW.c	/^struct sqlite3_index_info {$/;"	s	file:
sqlite3_index_info	sqlite3_MFAW.c	/^typedef struct sqlite3_index_info sqlite3_index_info;$/;"	t	typeref:struct:sqlite3_index_info	file:
sqlite3_index_orderby	sqlite3_MFAW.c	/^  struct sqlite3_index_orderby {$/;"	s	struct:sqlite3_index_info	file:
sqlite3_initialize	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_initialize(void){$/;"	f
sqlite3_int64	sqlite3_MFAW.c	/^typedef sqlite_int64 sqlite3_int64;$/;"	t	file:
sqlite3_interrupt	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_interrupt(sqlite3 *db){$/;"	f
sqlite3_interrupt	sqlite3_MFAW.c	102287;"	d	file:
sqlite3_interrupt_count	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_interrupt_count = 0;$/;"	v
sqlite3_io_error_benign	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_io_error_benign = 0;         \/* True if errors are benign *\/$/;"	v
sqlite3_io_error_hardhit	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_io_error_hardhit = 0;        \/* Number of non-benign errors *\/$/;"	v
sqlite3_io_error_hit	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_io_error_hit = 0;            \/* Total number of I\/O Errors *\/$/;"	v
sqlite3_io_error_pending	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_io_error_pending = 0;        \/* Count down to first I\/O error *\/$/;"	v
sqlite3_io_error_persist	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_io_error_persist = 0;        \/* True if I\/O errors persist *\/$/;"	v
sqlite3_io_methods	sqlite3_MFAW.c	/^struct sqlite3_io_methods {$/;"	s	file:
sqlite3_io_methods	sqlite3_MFAW.c	/^typedef struct sqlite3_io_methods sqlite3_io_methods;$/;"	t	typeref:struct:sqlite3_io_methods	file:
sqlite3_last_insert_rowid	sqlite3_MFAW.c	/^SQLITE_API sqlite_int64 SQLITE_STDCALL sqlite3_last_insert_rowid(sqlite3 *db){$/;"	f
sqlite3_last_insert_rowid	sqlite3_MFAW.c	102288;"	d	file:
sqlite3_libversion	sqlite3_MFAW.c	/^SQLITE_API const char *SQLITE_STDCALL sqlite3_libversion(void){ return sqlite3_version; }$/;"	f
sqlite3_libversion	sqlite3_MFAW.c	102289;"	d	file:
sqlite3_libversion_number	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_libversion_number(void){ return SQLITE_VERSION_NUMBER; }$/;"	f
sqlite3_libversion_number	sqlite3_MFAW.c	102290;"	d	file:
sqlite3_like_count	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_like_count = 0;$/;"	v
sqlite3_limit	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_limit(sqlite3 *db, int limitId, int newLimit){$/;"	f
sqlite3_limit	sqlite3_MFAW.c	102377;"	d	file:
sqlite3_load_extension	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_load_extension($/;"	f
sqlite3_load_extension	sqlite3_MFAW.c	102424;"	d	file:
sqlite3_log	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_CDECL sqlite3_log(int iErrCode, const char *zFormat, ...){$/;"	f
sqlite3_log	sqlite3_MFAW.c	102393;"	d	file:
sqlite3_malloc	sqlite3_MFAW.c	/^SQLITE_API void *SQLITE_STDCALL sqlite3_malloc(int n){$/;"	f
sqlite3_malloc	sqlite3_MFAW.c	102291;"	d	file:
sqlite3_malloc64	sqlite3_MFAW.c	/^SQLITE_API void *SQLITE_STDCALL sqlite3_malloc64(sqlite3_uint64 n){$/;"	f
sqlite3_malloc64	sqlite3_MFAW.c	102425;"	d	file:
sqlite3_max_blobsize	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_max_blobsize = 0;$/;"	v
sqlite3_mem_methods	sqlite3_MFAW.c	/^struct sqlite3_mem_methods {$/;"	s	file:
sqlite3_mem_methods	sqlite3_MFAW.c	/^typedef struct sqlite3_mem_methods sqlite3_mem_methods;$/;"	t	typeref:struct:sqlite3_mem_methods	file:
sqlite3_memdebug_vfs_oom_test	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_memdebug_vfs_oom_test = 1;$/;"	v
sqlite3_memory_alarm	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_memory_alarm($/;"	f
sqlite3_memory_highwater	sqlite3_MFAW.c	/^SQLITE_API sqlite3_int64 SQLITE_STDCALL sqlite3_memory_highwater(int resetFlag){$/;"	f
sqlite3_memory_highwater	sqlite3_MFAW.c	102354;"	d	file:
sqlite3_memory_used	sqlite3_MFAW.c	/^SQLITE_API sqlite3_int64 SQLITE_STDCALL sqlite3_memory_used(void){$/;"	f
sqlite3_memory_used	sqlite3_MFAW.c	102355;"	d	file:
sqlite3_module	sqlite3_MFAW.c	/^struct sqlite3_module {$/;"	s	file:
sqlite3_module	sqlite3_MFAW.c	/^typedef struct sqlite3_module sqlite3_module;$/;"	t	typeref:struct:sqlite3_module	file:
sqlite3_mprintf	sqlite3_MFAW.c	/^SQLITE_API char *SQLITE_CDECL sqlite3_mprintf(const char *zFormat, ...){$/;"	f
sqlite3_mprintf	sqlite3_MFAW.c	102292;"	d	file:
sqlite3_msize	sqlite3_MFAW.c	/^SQLITE_API sqlite3_uint64 SQLITE_STDCALL sqlite3_msize(void *p){$/;"	f
sqlite3_msize	sqlite3_MFAW.c	102426;"	d	file:
sqlite3_mutex	sqlite3_MFAW.c	/^struct sqlite3_mutex {$/;"	s	file:
sqlite3_mutex	sqlite3_MFAW.c	/^typedef struct sqlite3_mutex sqlite3_mutex;$/;"	t	typeref:struct:sqlite3_mutex	file:
sqlite3_mutex_alloc	sqlite3_MFAW.c	/^SQLITE_API sqlite3_mutex *SQLITE_STDCALL sqlite3_mutex_alloc(int id){$/;"	f
sqlite3_mutex_alloc	sqlite3_MFAW.c	102356;"	d	file:
sqlite3_mutex_alloc	sqlite3_MFAW.c	10842;"	d	file:
sqlite3_mutex_enter	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_mutex_enter(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_enter	sqlite3_MFAW.c	102357;"	d	file:
sqlite3_mutex_enter	sqlite3_MFAW.c	10844;"	d	file:
sqlite3_mutex_free	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_mutex_free(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_free	sqlite3_MFAW.c	102358;"	d	file:
sqlite3_mutex_free	sqlite3_MFAW.c	10843;"	d	file:
sqlite3_mutex_held	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_mutex_held(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_held	sqlite3_MFAW.c	10847;"	d	file:
sqlite3_mutex_leave	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_mutex_leave(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_leave	sqlite3_MFAW.c	102359;"	d	file:
sqlite3_mutex_leave	sqlite3_MFAW.c	10846;"	d	file:
sqlite3_mutex_methods	sqlite3_MFAW.c	/^struct sqlite3_mutex_methods {$/;"	s	file:
sqlite3_mutex_methods	sqlite3_MFAW.c	/^typedef struct sqlite3_mutex_methods sqlite3_mutex_methods;$/;"	t	typeref:struct:sqlite3_mutex_methods	file:
sqlite3_mutex_notheld	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_mutex_notheld(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_notheld	sqlite3_MFAW.c	10848;"	d	file:
sqlite3_mutex_try	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_mutex_try(sqlite3_mutex *p){$/;"	f
sqlite3_mutex_try	sqlite3_MFAW.c	102360;"	d	file:
sqlite3_mutex_try	sqlite3_MFAW.c	10845;"	d	file:
sqlite3_next_stmt	sqlite3_MFAW.c	/^SQLITE_API sqlite3_stmt *SQLITE_STDCALL sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt){$/;"	f
sqlite3_next_stmt	sqlite3_MFAW.c	102378;"	d	file:
sqlite3_open	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_open($/;"	f
sqlite3_open	sqlite3_MFAW.c	102293;"	d	file:
sqlite3_open16	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_open16($/;"	f
sqlite3_open16	sqlite3_MFAW.c	102294;"	d	file:
sqlite3_open16	sqlite3_MFAW.c	102485;"	d	file:
sqlite3_open_file_count	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_open_file_count = 0;$/;"	v
sqlite3_open_v2	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_open_v2($/;"	f
sqlite3_open_v2	sqlite3_MFAW.c	102361;"	d	file:
sqlite3_opentemp_count	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_opentemp_count = 0;$/;"	v
sqlite3_os_end	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_os_end(void){ $/;"	f
sqlite3_os_end	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_os_end(void){$/;"	f
sqlite3_os_init	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_os_init(void){ $/;"	f
sqlite3_os_init	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_os_init(void){$/;"	f
sqlite3_os_type	sqlite3_MFAW.c	/^SQLITE_API LONG SQLITE_WIN32_VOLATILE sqlite3_os_type = 0;$/;"	v
sqlite3_os_type	sqlite3_MFAW.c	/^static LONG SQLITE_WIN32_VOLATILE sqlite3_os_type = 0;$/;"	v	file:
sqlite3_overload_function	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_overload_function($/;"	f
sqlite3_overload_function	sqlite3_MFAW.c	102342;"	d	file:
sqlite3_pager_readdb_count	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_pager_readdb_count = 0;    \/* Number of full pages read from DB *\/$/;"	v
sqlite3_pager_writedb_count	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_pager_writedb_count = 0;   \/* Number of full pages written to DB *\/$/;"	v
sqlite3_pager_writej_count	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_pager_writej_count = 0;    \/* Number of pages written to journal *\/$/;"	v
sqlite3_pcache	sqlite3_MFAW.c	/^typedef struct sqlite3_pcache sqlite3_pcache;$/;"	t	typeref:struct:sqlite3_pcache	file:
sqlite3_pcache_methods	sqlite3_MFAW.c	/^struct sqlite3_pcache_methods {$/;"	s	file:
sqlite3_pcache_methods	sqlite3_MFAW.c	/^typedef struct sqlite3_pcache_methods sqlite3_pcache_methods;$/;"	t	typeref:struct:sqlite3_pcache_methods	file:
sqlite3_pcache_methods2	sqlite3_MFAW.c	/^struct sqlite3_pcache_methods2 {$/;"	s	file:
sqlite3_pcache_methods2	sqlite3_MFAW.c	/^typedef struct sqlite3_pcache_methods2 sqlite3_pcache_methods2;$/;"	t	typeref:struct:sqlite3_pcache_methods2	file:
sqlite3_pcache_page	sqlite3_MFAW.c	/^struct sqlite3_pcache_page {$/;"	s	file:
sqlite3_pcache_page	sqlite3_MFAW.c	/^typedef struct sqlite3_pcache_page sqlite3_pcache_page;$/;"	t	typeref:struct:sqlite3_pcache_page	file:
sqlite3_prepare	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_prepare($/;"	f
sqlite3_prepare	sqlite3_MFAW.c	102295;"	d	file:
sqlite3_prepare16	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_prepare16($/;"	f
sqlite3_prepare16	sqlite3_MFAW.c	102296;"	d	file:
sqlite3_prepare16	sqlite3_MFAW.c	102486;"	d	file:
sqlite3_prepare16_v2	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_prepare16_v2($/;"	f
sqlite3_prepare16_v2	sqlite3_MFAW.c	102298;"	d	file:
sqlite3_prepare16_v2	sqlite3_MFAW.c	102344;"	d	file:
sqlite3_prepare16_v2	sqlite3_MFAW.c	102487;"	d	file:
sqlite3_prepare_v2	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_prepare_v2($/;"	f
sqlite3_prepare_v2	sqlite3_MFAW.c	102297;"	d	file:
sqlite3_prepare_v2	sqlite3_MFAW.c	102343;"	d	file:
sqlite3_profile	sqlite3_MFAW.c	/^SQLITE_API void *SQLITE_STDCALL sqlite3_profile($/;"	f
sqlite3_profile	sqlite3_MFAW.c	102299;"	d	file:
sqlite3_profile	sqlite3_MFAW.c	102527;"	d	file:
sqlite3_progress_handler	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_progress_handler($/;"	f
sqlite3_progress_handler	sqlite3_MFAW.c	102300;"	d	file:
sqlite3_progress_handler	sqlite3_MFAW.c	102511;"	d	file:
sqlite3_randomness	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_randomness(int N, void *pBuf){$/;"	f
sqlite3_randomness	sqlite3_MFAW.c	102374;"	d	file:
sqlite3_realloc	sqlite3_MFAW.c	/^SQLITE_API void *SQLITE_STDCALL sqlite3_realloc(void *pOld, int n){$/;"	f
sqlite3_realloc	sqlite3_MFAW.c	102301;"	d	file:
sqlite3_realloc64	sqlite3_MFAW.c	/^SQLITE_API void *SQLITE_STDCALL sqlite3_realloc64(void *pOld, sqlite3_uint64 n){$/;"	f
sqlite3_realloc64	sqlite3_MFAW.c	102427;"	d	file:
sqlite3_release_memory	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_release_memory(int n){$/;"	f
sqlite3_release_memory	sqlite3_MFAW.c	102362;"	d	file:
sqlite3_reset	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_reset(sqlite3_stmt *pStmt){$/;"	f
sqlite3_reset	sqlite3_MFAW.c	102302;"	d	file:
sqlite3_reset_auto_extension	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_reset_auto_extension(void){$/;"	f
sqlite3_reset_auto_extension	sqlite3_MFAW.c	102428;"	d	file:
sqlite3_result_blob	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_result_blob($/;"	f
sqlite3_result_blob	sqlite3_MFAW.c	102303;"	d	file:
sqlite3_result_blob64	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_result_blob64($/;"	f
sqlite3_result_blob64	sqlite3_MFAW.c	102429;"	d	file:
sqlite3_result_double	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_result_double(sqlite3_context *pCtx, double rVal){$/;"	f
sqlite3_result_double	sqlite3_MFAW.c	102304;"	d	file:
sqlite3_result_error	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_result_error(sqlite3_context *pCtx, const char *z, int n){$/;"	f
sqlite3_result_error	sqlite3_MFAW.c	102305;"	d	file:
sqlite3_result_error16	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_result_error16(sqlite3_context *pCtx, const void *z, int n){$/;"	f
sqlite3_result_error16	sqlite3_MFAW.c	102306;"	d	file:
sqlite3_result_error16	sqlite3_MFAW.c	102488;"	d	file:
sqlite3_result_error_code	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_result_error_code(sqlite3_context *pCtx, int errCode){$/;"	f
sqlite3_result_error_code	sqlite3_MFAW.c	102372;"	d	file:
sqlite3_result_error_nomem	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_result_error_nomem(sqlite3_context *pCtx){$/;"	f
sqlite3_result_error_nomem	sqlite3_MFAW.c	102363;"	d	file:
sqlite3_result_error_toobig	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_result_error_toobig(sqlite3_context *pCtx){$/;"	f
sqlite3_result_error_toobig	sqlite3_MFAW.c	102364;"	d	file:
sqlite3_result_int	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_result_int(sqlite3_context *pCtx, int iVal){$/;"	f
sqlite3_result_int	sqlite3_MFAW.c	102307;"	d	file:
sqlite3_result_int64	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_result_int64(sqlite3_context *pCtx, i64 iVal){$/;"	f
sqlite3_result_int64	sqlite3_MFAW.c	102308;"	d	file:
sqlite3_result_null	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_result_null(sqlite3_context *pCtx){$/;"	f
sqlite3_result_null	sqlite3_MFAW.c	102309;"	d	file:
sqlite3_result_text	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_result_text($/;"	f
sqlite3_result_text	sqlite3_MFAW.c	102310;"	d	file:
sqlite3_result_text16	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_result_text16($/;"	f
sqlite3_result_text16	sqlite3_MFAW.c	102311;"	d	file:
sqlite3_result_text16	sqlite3_MFAW.c	102489;"	d	file:
sqlite3_result_text16be	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_result_text16be($/;"	f
sqlite3_result_text16be	sqlite3_MFAW.c	102312;"	d	file:
sqlite3_result_text16be	sqlite3_MFAW.c	102490;"	d	file:
sqlite3_result_text16le	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_result_text16le($/;"	f
sqlite3_result_text16le	sqlite3_MFAW.c	102313;"	d	file:
sqlite3_result_text16le	sqlite3_MFAW.c	102491;"	d	file:
sqlite3_result_text64	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_result_text64($/;"	f
sqlite3_result_text64	sqlite3_MFAW.c	102430;"	d	file:
sqlite3_result_value	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_result_value(sqlite3_context *pCtx, sqlite3_value *pValue){$/;"	f
sqlite3_result_value	sqlite3_MFAW.c	102314;"	d	file:
sqlite3_result_zeroblob	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_result_zeroblob(sqlite3_context *pCtx, int n){$/;"	f
sqlite3_result_zeroblob	sqlite3_MFAW.c	102371;"	d	file:
sqlite3_rollback_hook	sqlite3_MFAW.c	/^SQLITE_API void *SQLITE_STDCALL sqlite3_rollback_hook($/;"	f
sqlite3_rollback_hook	sqlite3_MFAW.c	102315;"	d	file:
sqlite3_rtree_dbl	sqlite3_MFAW.c	/^  typedef double sqlite3_rtree_dbl;$/;"	t	file:
sqlite3_rtree_dbl	sqlite3_MFAW.c	/^  typedef sqlite3_int64 sqlite3_rtree_dbl;$/;"	t	file:
sqlite3_rtree_geometry	sqlite3_MFAW.c	/^struct sqlite3_rtree_geometry {$/;"	s	file:
sqlite3_rtree_geometry	sqlite3_MFAW.c	/^typedef struct sqlite3_rtree_geometry sqlite3_rtree_geometry;$/;"	t	typeref:struct:sqlite3_rtree_geometry	file:
sqlite3_rtree_geometry_callback	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_rtree_geometry_callback($/;"	f
sqlite3_rtree_query_callback	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_rtree_query_callback($/;"	f
sqlite3_rtree_query_info	sqlite3_MFAW.c	/^struct sqlite3_rtree_query_info {$/;"	s	file:
sqlite3_rtree_query_info	sqlite3_MFAW.c	/^typedef struct sqlite3_rtree_query_info sqlite3_rtree_query_info;$/;"	t	typeref:struct:sqlite3_rtree_query_info	file:
sqlite3_search_count	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_search_count = 0;$/;"	v
sqlite3_set_authorizer	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_set_authorizer($/;"	f
sqlite3_set_authorizer	sqlite3_MFAW.c	102316;"	d	file:
sqlite3_set_authorizer	sqlite3_MFAW.c	102472;"	d	file:
sqlite3_set_auxdata	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_set_auxdata($/;"	f
sqlite3_set_auxdata	sqlite3_MFAW.c	102317;"	d	file:
sqlite3_shutdown	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_shutdown(void){$/;"	f
sqlite3_sleep	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_sleep(int ms){$/;"	f
sqlite3_sleep	sqlite3_MFAW.c	102365;"	d	file:
sqlite3_snprintf	sqlite3_MFAW.c	/^SQLITE_API char *SQLITE_CDECL sqlite3_snprintf(int n, char *zBuf, const char *zFormat, ...){$/;"	f
sqlite3_snprintf	sqlite3_MFAW.c	102318;"	d	file:
sqlite3_soft_heap_limit	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_soft_heap_limit(int n){$/;"	f
sqlite3_soft_heap_limit	sqlite3_MFAW.c	102366;"	d	file:
sqlite3_soft_heap_limit64	sqlite3_MFAW.c	/^SQLITE_API sqlite3_int64 SQLITE_STDCALL sqlite3_soft_heap_limit64(sqlite3_int64 n){$/;"	f
sqlite3_soft_heap_limit64	sqlite3_MFAW.c	102394;"	d	file:
sqlite3_sort_count	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_sort_count = 0;$/;"	v
sqlite3_sourceid	sqlite3_MFAW.c	/^SQLITE_API const char *SQLITE_STDCALL sqlite3_sourceid(void){ return SQLITE_SOURCE_ID; }$/;"	f
sqlite3_sourceid	sqlite3_MFAW.c	102395;"	d	file:
sqlite3_sql	sqlite3_MFAW.c	/^SQLITE_API const char *SQLITE_STDCALL sqlite3_sql(sqlite3_stmt *pStmt){$/;"	f
sqlite3_sql	sqlite3_MFAW.c	102379;"	d	file:
sqlite3_status	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag){$/;"	f
sqlite3_status	sqlite3_MFAW.c	102380;"	d	file:
sqlite3_status64	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_status64($/;"	f
sqlite3_step	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_step(sqlite3_stmt *pStmt){$/;"	f
sqlite3_step	sqlite3_MFAW.c	102319;"	d	file:
sqlite3_stmt	sqlite3_MFAW.c	/^typedef struct sqlite3_stmt sqlite3_stmt;$/;"	t	typeref:struct:sqlite3_stmt	file:
sqlite3_stmt_busy	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_stmt_busy(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_busy	sqlite3_MFAW.c	102411;"	d	file:
sqlite3_stmt_readonly	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_stmt_readonly(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_readonly	sqlite3_MFAW.c	102412;"	d	file:
sqlite3_stmt_scanstatus	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_stmt_scanstatus($/;"	f
sqlite3_stmt_scanstatus_reset	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_stmt_scanstatus_reset(sqlite3_stmt *pStmt){$/;"	f
sqlite3_stmt_status	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_stmt_status(sqlite3_stmt *pStmt, int op, int resetFlag){$/;"	f
sqlite3_stmt_status	sqlite3_MFAW.c	102396;"	d	file:
sqlite3_strglob	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_strglob(const char *zGlobPattern, const char *zString){$/;"	f
sqlite3_strglob	sqlite3_MFAW.c	102431;"	d	file:
sqlite3_stricmp	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_stricmp(const char *zLeft, const char *zRight){$/;"	f
sqlite3_stricmp	sqlite3_MFAW.c	102413;"	d	file:
sqlite3_strnicmp	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_strnicmp(const char *zLeft, const char *zRight, int N){$/;"	f
sqlite3_strnicmp	sqlite3_MFAW.c	102397;"	d	file:
sqlite3_sync_count	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_sync_count = 0;$/;"	v
sqlite3_syscall_ptr	sqlite3_MFAW.c	/^typedef void (*sqlite3_syscall_ptr)(void);$/;"	t	file:
sqlite3_table_column_metadata	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_table_column_metadata($/;"	f
sqlite3_table_column_metadata	sqlite3_MFAW.c	102320;"	d	file:
sqlite3_temp_directory	sqlite3_MFAW.c	/^SQLITE_API char *sqlite3_temp_directory = 0;$/;"	v
sqlite3_temp_directory	sqlite3_MFAW.c	/^SQLITE_API char *sqlite3_temp_directory;$/;"	v
sqlite3_test_control	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_CDECL sqlite3_test_control(int op, ...){$/;"	f
sqlite3_test_control	sqlite3_MFAW.c	102373;"	d	file:
sqlite3_thread_cleanup	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_thread_cleanup(void){$/;"	f
sqlite3_thread_cleanup	sqlite3_MFAW.c	102321;"	d	file:
sqlite3_threadsafe	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_threadsafe(void){ return SQLITE_THREADSAFE; }$/;"	f
sqlite3_threadsafe	sqlite3_MFAW.c	102370;"	d	file:
sqlite3_tokenizer	sqlite3_MFAW.c	/^struct sqlite3_tokenizer {$/;"	s	file:
sqlite3_tokenizer	sqlite3_MFAW.c	/^typedef struct sqlite3_tokenizer sqlite3_tokenizer;$/;"	t	typeref:struct:sqlite3_tokenizer	file:
sqlite3_tokenizer_cursor	sqlite3_MFAW.c	/^struct sqlite3_tokenizer_cursor {$/;"	s	file:
sqlite3_tokenizer_cursor	sqlite3_MFAW.c	/^typedef struct sqlite3_tokenizer_cursor sqlite3_tokenizer_cursor;$/;"	t	typeref:struct:sqlite3_tokenizer_cursor	file:
sqlite3_tokenizer_module	sqlite3_MFAW.c	/^struct sqlite3_tokenizer_module {$/;"	s	file:
sqlite3_tokenizer_module	sqlite3_MFAW.c	/^typedef struct sqlite3_tokenizer_module sqlite3_tokenizer_module;$/;"	t	typeref:struct:sqlite3_tokenizer_module	file:
sqlite3_total_changes	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_total_changes(sqlite3 *db){$/;"	f
sqlite3_total_changes	sqlite3_MFAW.c	102322;"	d	file:
sqlite3_trace	sqlite3_MFAW.c	/^SQLITE_API void *SQLITE_STDCALL sqlite3_trace(sqlite3 *db, void (*xTrace)(void*,const char*), void *pArg){$/;"	f
sqlite3_trace	sqlite3_MFAW.c	102323;"	d	file:
sqlite3_trace	sqlite3_MFAW.c	102528;"	d	file:
sqlite3_transfer_bindings	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_transfer_bindings(sqlite3_stmt *pFromStmt, sqlite3_stmt *pToStmt){$/;"	f
sqlite3_transfer_bindings	sqlite3_MFAW.c	102325;"	d	file:
sqlite3_uint64	sqlite3_MFAW.c	/^typedef sqlite_uint64 sqlite3_uint64;$/;"	t	file:
sqlite3_unlock_notify	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_unlock_notify($/;"	f
sqlite3_unlock_notify	sqlite3_MFAW.c	102398;"	d	file:
sqlite3_update_hook	sqlite3_MFAW.c	/^SQLITE_API void *SQLITE_STDCALL sqlite3_update_hook($/;"	f
sqlite3_update_hook	sqlite3_MFAW.c	102327;"	d	file:
sqlite3_uri_boolean	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_uri_boolean(const char *zFilename, const char *zParam, int bDflt){$/;"	f
sqlite3_uri_boolean	sqlite3_MFAW.c	102414;"	d	file:
sqlite3_uri_int64	sqlite3_MFAW.c	/^SQLITE_API sqlite3_int64 SQLITE_STDCALL sqlite3_uri_int64($/;"	f
sqlite3_uri_int64	sqlite3_MFAW.c	102415;"	d	file:
sqlite3_uri_parameter	sqlite3_MFAW.c	/^SQLITE_API const char *SQLITE_STDCALL sqlite3_uri_parameter(const char *zFilename, const char *zParam){$/;"	f
sqlite3_uri_parameter	sqlite3_MFAW.c	102416;"	d	file:
sqlite3_uri_vsnprintf	sqlite3_MFAW.c	102417;"	d	file:
sqlite3_user_data	sqlite3_MFAW.c	/^SQLITE_API void *SQLITE_STDCALL sqlite3_user_data(sqlite3_context *p){$/;"	f
sqlite3_user_data	sqlite3_MFAW.c	102328;"	d	file:
sqlite3_userauth	sqlite3_MFAW.c	/^struct sqlite3_userauth {$/;"	s	file:
sqlite3_userauth	sqlite3_MFAW.c	/^typedef struct sqlite3_userauth sqlite3_userauth;$/;"	t	typeref:struct:sqlite3_userauth	file:
sqlite3_value	sqlite3_MFAW.c	/^typedef struct Mem sqlite3_value;$/;"	t	typeref:struct:Mem	file:
sqlite3_value_blob	sqlite3_MFAW.c	/^SQLITE_API const void *SQLITE_STDCALL sqlite3_value_blob(sqlite3_value *pVal){$/;"	f
sqlite3_value_blob	sqlite3_MFAW.c	102329;"	d	file:
sqlite3_value_bytes	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_value_bytes(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes	sqlite3_MFAW.c	102330;"	d	file:
sqlite3_value_bytes16	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_value_bytes16(sqlite3_value *pVal){$/;"	f
sqlite3_value_bytes16	sqlite3_MFAW.c	102331;"	d	file:
sqlite3_value_double	sqlite3_MFAW.c	/^SQLITE_API double SQLITE_STDCALL sqlite3_value_double(sqlite3_value *pVal){$/;"	f
sqlite3_value_double	sqlite3_MFAW.c	102332;"	d	file:
sqlite3_value_int	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_value_int(sqlite3_value *pVal){$/;"	f
sqlite3_value_int	sqlite3_MFAW.c	102333;"	d	file:
sqlite3_value_int64	sqlite3_MFAW.c	/^SQLITE_API sqlite_int64 SQLITE_STDCALL sqlite3_value_int64(sqlite3_value *pVal){$/;"	f
sqlite3_value_int64	sqlite3_MFAW.c	102334;"	d	file:
sqlite3_value_numeric_type	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_value_numeric_type(sqlite3_value *pVal){$/;"	f
sqlite3_value_numeric_type	sqlite3_MFAW.c	102335;"	d	file:
sqlite3_value_text	sqlite3_MFAW.c	/^SQLITE_API const unsigned char *SQLITE_STDCALL sqlite3_value_text(sqlite3_value *pVal){$/;"	f
sqlite3_value_text	sqlite3_MFAW.c	102336;"	d	file:
sqlite3_value_text16	sqlite3_MFAW.c	/^SQLITE_API const void *SQLITE_STDCALL sqlite3_value_text16(sqlite3_value* pVal){$/;"	f
sqlite3_value_text16	sqlite3_MFAW.c	102337;"	d	file:
sqlite3_value_text16	sqlite3_MFAW.c	102492;"	d	file:
sqlite3_value_text16be	sqlite3_MFAW.c	/^SQLITE_API const void *SQLITE_STDCALL sqlite3_value_text16be(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16be	sqlite3_MFAW.c	102338;"	d	file:
sqlite3_value_text16be	sqlite3_MFAW.c	102493;"	d	file:
sqlite3_value_text16le	sqlite3_MFAW.c	/^SQLITE_API const void *SQLITE_STDCALL sqlite3_value_text16le(sqlite3_value *pVal){$/;"	f
sqlite3_value_text16le	sqlite3_MFAW.c	102339;"	d	file:
sqlite3_value_text16le	sqlite3_MFAW.c	102494;"	d	file:
sqlite3_value_type	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_value_type(sqlite3_value* pVal){$/;"	f
sqlite3_value_type	sqlite3_MFAW.c	102340;"	d	file:
sqlite3_version	sqlite3_MFAW.c	/^SQLITE_API const char sqlite3_version[] = SQLITE_VERSION;$/;"	v
sqlite3_vfs	sqlite3_MFAW.c	/^struct sqlite3_vfs {$/;"	s	file:
sqlite3_vfs	sqlite3_MFAW.c	/^typedef struct sqlite3_vfs sqlite3_vfs;$/;"	t	typeref:struct:sqlite3_vfs	file:
sqlite3_vfs_find	sqlite3_MFAW.c	/^SQLITE_API sqlite3_vfs *SQLITE_STDCALL sqlite3_vfs_find(const char *zVfs){$/;"	f
sqlite3_vfs_find	sqlite3_MFAW.c	102367;"	d	file:
sqlite3_vfs_register	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_vfs_register(sqlite3_vfs *pVfs, int makeDflt){$/;"	f
sqlite3_vfs_register	sqlite3_MFAW.c	102368;"	d	file:
sqlite3_vfs_unregister	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_vfs_unregister(sqlite3_vfs *pVfs){$/;"	f
sqlite3_vfs_unregister	sqlite3_MFAW.c	102369;"	d	file:
sqlite3_vmprintf	sqlite3_MFAW.c	/^SQLITE_API char *SQLITE_STDCALL sqlite3_vmprintf(const char *zFormat, va_list ap){$/;"	f
sqlite3_vmprintf	sqlite3_MFAW.c	102341;"	d	file:
sqlite3_vsnprintf	sqlite3_MFAW.c	/^SQLITE_API char *SQLITE_STDCALL sqlite3_vsnprintf(int n, char *zBuf, const char *zFormat, va_list ap){$/;"	f
sqlite3_vtab	sqlite3_MFAW.c	/^struct sqlite3_vtab {$/;"	s	file:
sqlite3_vtab	sqlite3_MFAW.c	/^typedef struct sqlite3_vtab sqlite3_vtab;$/;"	t	typeref:struct:sqlite3_vtab	file:
sqlite3_vtab_config	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_CDECL sqlite3_vtab_config(sqlite3 *db, int op, ...){$/;"	f
sqlite3_vtab_config	sqlite3_MFAW.c	102403;"	d	file:
sqlite3_vtab_config	sqlite3_MFAW.c	102518;"	d	file:
sqlite3_vtab_cursor	sqlite3_MFAW.c	/^struct sqlite3_vtab_cursor {$/;"	s	file:
sqlite3_vtab_cursor	sqlite3_MFAW.c	/^typedef struct sqlite3_vtab_cursor sqlite3_vtab_cursor;$/;"	t	typeref:struct:sqlite3_vtab_cursor	file:
sqlite3_vtab_on_conflict	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_vtab_on_conflict(sqlite3 *db){$/;"	f
sqlite3_vtab_on_conflict	sqlite3_MFAW.c	102404;"	d	file:
sqlite3_vtab_on_conflict	sqlite3_MFAW.c	102519;"	d	file:
sqlite3_wal_autocheckpoint	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_wal_autocheckpoint(sqlite3 *db, int nFrame){$/;"	f
sqlite3_wal_autocheckpoint	sqlite3_MFAW.c	102399;"	d	file:
sqlite3_wal_checkpoint	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb){$/;"	f
sqlite3_wal_checkpoint	sqlite3_MFAW.c	102400;"	d	file:
sqlite3_wal_checkpoint_v2	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_wal_checkpoint_v2($/;"	f
sqlite3_wal_checkpoint_v2	sqlite3_MFAW.c	102418;"	d	file:
sqlite3_wal_hook	sqlite3_MFAW.c	/^SQLITE_API void *SQLITE_STDCALL sqlite3_wal_hook($/;"	f
sqlite3_wal_hook	sqlite3_MFAW.c	102401;"	d	file:
sqlite3_win32_compact_heap	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_win32_compact_heap(LPUINT pnLargest){$/;"	f
sqlite3_win32_is_nt	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_win32_is_nt(void){$/;"	f
sqlite3_win32_mbcs_to_utf8	sqlite3_MFAW.c	/^SQLITE_API char *SQLITE_STDCALL sqlite3_win32_mbcs_to_utf8(const char *zFilename){$/;"	f
sqlite3_win32_reset_heap	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_win32_reset_heap(){$/;"	f
sqlite3_win32_set_directory	sqlite3_MFAW.c	/^SQLITE_API int SQLITE_STDCALL sqlite3_win32_set_directory(DWORD type, LPCWSTR zValue){$/;"	f
sqlite3_win32_sleep	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_win32_sleep(DWORD milliseconds){$/;"	f
sqlite3_win32_utf8_to_mbcs	sqlite3_MFAW.c	/^SQLITE_API char *SQLITE_STDCALL sqlite3_win32_utf8_to_mbcs(const char *zFilename){$/;"	f
sqlite3_win32_write_debug	sqlite3_MFAW.c	/^SQLITE_API void SQLITE_STDCALL sqlite3_win32_write_debug(const char *zBuf, int nBuf){$/;"	f
sqlite3_xauth	sqlite3_MFAW.c	/^  typedef int (*sqlite3_xauth)(void*,int,const char*,const char*,const char*,$/;"	t	file:
sqlite3_xferopt_count	sqlite3_MFAW.c	/^SQLITE_API int sqlite3_xferopt_count;$/;"	v
sqlite3one	sqlite3_MFAW.c	/^SQLITE_PRIVATE const int sqlite3one = 1;$/;"	v
sqlite3one	sqlite3_MFAW.c	/^SQLITE_PRIVATE const int sqlite3one;$/;"	v
sqliteAuthBadReturnCode	sqlite3_MFAW.c	/^static void sqliteAuthBadReturnCode(Parse *pParse){$/;"	f	file:
sqliteDefaultBusyCallback	sqlite3_MFAW.c	/^static int sqliteDefaultBusyCallback($/;"	f	file:
sqliteDeleteColumnNames	sqlite3_MFAW.c	/^static void sqliteDeleteColumnNames(sqlite3 *db, Table *pTable){$/;"	f	file:
sqliteErrorFromPosixError	sqlite3_MFAW.c	/^static int sqliteErrorFromPosixError(int posixError, int sqliteIOErr) {$/;"	f	file:
sqliteHashData	sqlite3_MFAW.c	8644;"	d	file:
sqliteHashFirst	sqlite3_MFAW.c	8642;"	d	file:
sqliteHashNext	sqlite3_MFAW.c	8643;"	d	file:
sqliteProcessJoin	sqlite3_MFAW.c	/^static int sqliteProcessJoin(Parse *pParse, Select *p){$/;"	f	file:
sqliteViewResetAll	sqlite3_MFAW.c	/^static void sqliteViewResetAll(sqlite3 *db, int idx){$/;"	f	file:
sqliteViewResetAll	sqlite3_MFAW.c	93092;"	d	file:
sqlite_int64	sqlite3_MFAW.c	/^  typedef SQLITE_INT64_TYPE sqlite_int64;$/;"	t	file:
sqlite_int64	sqlite3_MFAW.c	/^  typedef __int64 sqlite_int64;$/;"	t	file:
sqlite_int64	sqlite3_MFAW.c	/^  typedef long long int sqlite_int64;$/;"	t	file:
sqlite_uint64	sqlite3_MFAW.c	/^  typedef unsigned SQLITE_INT64_TYPE sqlite_uint64;$/;"	t	file:
sqlite_uint64	sqlite3_MFAW.c	/^  typedef unsigned __int64 sqlite_uint64;$/;"	t	file:
sqlite_uint64	sqlite3_MFAW.c	/^  typedef unsigned long long int sqlite_uint64;$/;"	t	file:
star_oh	sqlite3_MFAW.c	/^static int star_oh(const char *z){$/;"	f	file:
start	mobibench.c	/^	long long start;$/;"	m	struct:script_thread_time	file:
start	mobibench_MFAW.c	/^	long long start;$/;"	m	struct:script_thread_time	file:
startEndFlag	sqlite3_MFAW.c	/^  unsigned char startEndFlag;       \/* 1=rel to end of fork, 0=rel to start *\/$/;"	m	struct:ByteRangeLockPB2	file:
startTime	sqlite3_MFAW.c	/^  i64 startTime;          \/* Time when query started - used for profiling *\/$/;"	m	struct:Vdbe	file:
started	mobibench.c	/^	int started;$/;"	m	struct:script_thread_time	file:
started	mobibench_MFAW.c	/^	int started;$/;"	m	struct:script_thread_time	file:
stat4Destructor	sqlite3_MFAW.c	/^static void stat4Destructor(void *pOld){$/;"	f	file:
stat4ValueFromExpr	sqlite3_MFAW.c	/^static int stat4ValueFromExpr($/;"	f	file:
statBestIndex	sqlite3_MFAW.c	/^static int statBestIndex(sqlite3_vtab *tab, sqlite3_index_info *pIdxInfo){$/;"	f	file:
statClearPage	sqlite3_MFAW.c	/^static void statClearPage(StatPage *p){$/;"	f	file:
statClose	sqlite3_MFAW.c	/^static int statClose(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
statColumn	sqlite3_MFAW.c	/^static int statColumn($/;"	f	file:
statConnect	sqlite3_MFAW.c	/^static int statConnect($/;"	f	file:
statDecodePage	sqlite3_MFAW.c	/^static int statDecodePage(Btree *pBt, StatPage *p){$/;"	f	file:
statDisconnect	sqlite3_MFAW.c	/^static int statDisconnect(sqlite3_vtab *pVtab){$/;"	f	file:
statEof	sqlite3_MFAW.c	/^static int statEof(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
statFilter	sqlite3_MFAW.c	/^static int statFilter($/;"	f	file:
statGet	sqlite3_MFAW.c	/^static void statGet($/;"	f	file:
statGetFuncdef	sqlite3_MFAW.c	/^static const FuncDef statGetFuncdef = {$/;"	v	file:
statInit	sqlite3_MFAW.c	/^static void statInit($/;"	f	file:
statInitFuncdef	sqlite3_MFAW.c	/^static const FuncDef statInitFuncdef = {$/;"	v	file:
statMutex	sqlite3_MFAW.c	/^static const char statMutex[] = {$/;"	v	file:
statNext	sqlite3_MFAW.c	/^static int statNext(sqlite3_vtab_cursor *pCursor){$/;"	f	file:
statOpen	sqlite3_MFAW.c	/^static int statOpen(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor){$/;"	f	file:
statPush	sqlite3_MFAW.c	/^static void statPush($/;"	f	file:
statPushFuncdef	sqlite3_MFAW.c	/^static const FuncDef statPushFuncdef = {$/;"	v	file:
statResetCsr	sqlite3_MFAW.c	/^static void statResetCsr(StatCursor *pCsr){$/;"	f	file:
statRowid	sqlite3_MFAW.c	/^static int statRowid(sqlite3_vtab_cursor *pCursor, sqlite_int64 *pRowid){$/;"	f	file:
statSizeAndOffset	sqlite3_MFAW.c	/^static void statSizeAndOffset(StatCursor *pCsr){$/;"	f	file:
stateno	sqlite3_MFAW.c	/^  YYACTIONTYPE stateno;  \/* The state-number *\/$/;"	m	struct:yyStackEntry	file:
status	sqlite3_MFAW.c	/^  int (*status)(int,int*,int*,int);$/;"	m	struct:sqlite3_api_routines	file:
stem	sqlite3_MFAW.c	/^static int stem($/;"	f	file:
step	sqlite3_MFAW.c	/^  int  (*step)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
step_list	sqlite3_MFAW.c	/^  TriggerStep *step_list; \/* Link list of trigger program steps             *\/$/;"	m	struct:Trigger	file:
stmt_busy	sqlite3_MFAW.c	/^  int (*stmt_busy)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
stmt_readonly	sqlite3_MFAW.c	/^  int (*stmt_readonly)(sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
stmt_status	sqlite3_MFAW.c	/^  int (*stmt_status)(sqlite3_stmt*,int,int);$/;"	m	struct:sqlite3_api_routines	file:
storage_count	mobibench.c	/^int storage_count=0;$/;"	v
storage_count	mobibench_MFAW.c	/^int storage_count=0;$/;"	v
storage_switches	mobibench.c	/^int storage_switches[2][1000] = {0, };$/;"	v
storage_switches	mobibench_MFAW.c	/^int storage_switches[2][1000] = {0, };$/;"	v
storeLastErrno	sqlite3_MFAW.c	/^static void storeLastErrno(unixFile *pFile, int error){$/;"	f	file:
str	sqlite3_MFAW.c	/^  StrAccum str;      \/* The string being accumulated *\/$/;"	m	struct:Explain	file:
strHash	sqlite3_MFAW.c	/^static unsigned int strHash(const char *z){$/;"	f	file:
strftimeFunc	sqlite3_MFAW.c	/^static void strftimeFunc($/;"	f	file:
strglob	sqlite3_MFAW.c	/^  int (*strglob)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
stricmp	sqlite3_MFAW.c	/^  int (*stricmp)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
strnicmp	sqlite3_MFAW.c	/^  int (*strnicmp)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
subjInMemory	sqlite3_MFAW.c	/^  u8 subjInMemory;            \/* True to use in-memory sub-journals *\/$/;"	m	struct:Pager	file:
subjRequiresPage	sqlite3_MFAW.c	/^static int subjRequiresPage(PgHdr *pPg){$/;"	f	file:
subjournalPage	sqlite3_MFAW.c	/^static int subjournalPage(PgHdr *pPg){$/;"	f	file:
substExpr	sqlite3_MFAW.c	/^static Expr *substExpr($/;"	f	file:
substExprList	sqlite3_MFAW.c	/^static void substExprList($/;"	f	file:
substSelect	sqlite3_MFAW.c	/^static void substSelect($/;"	f	file:
substrFunc	sqlite3_MFAW.c	/^static void substrFunc($/;"	f	file:
sumFinalize	sqlite3_MFAW.c	/^static void sumFinalize(sqlite3_context *context){$/;"	f	file:
sumStep	sqlite3_MFAW.c	/^static void sumStep(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
suppressErr	sqlite3_MFAW.c	/^  u8 suppressErr;               \/* Do not issue error messages if true *\/$/;"	m	struct:sqlite3	file:
swapMixedEndianFloat	sqlite3_MFAW.c	67840;"	d	file:
swapMixedEndianFloat	sqlite3_MFAW.c	67842;"	d	file:
switchLockProxyPath	sqlite3_MFAW.c	/^static int switchLockProxyPath(unixFile *pFile, const char *path) {$/;"	f	file:
syncFlags	sqlite3_MFAW.c	/^  int syncFlags;               \/* Flags for the fsync *\/$/;"	m	struct:WalWriter	file:
syncFlags	sqlite3_MFAW.c	/^  u8 syncFlags;               \/* SYNC_NORMAL or SYNC_FULL otherwise *\/$/;"	m	struct:Pager	file:
syncFlags	sqlite3_MFAW.c	/^  u8 syncFlags;              \/* Flags to use to sync header writes *\/$/;"	m	struct:Wal	file:
syncHeader	sqlite3_MFAW.c	/^  u8 syncHeader;             \/* Fsync the WAL header if true *\/$/;"	m	struct:Wal	file:
syncJournal	sqlite3_MFAW.c	/^static int syncJournal(Pager *pPager, int newHdr){$/;"	f	file:
synthCollSeq	sqlite3_MFAW.c	/^static int synthCollSeq(sqlite3 *db, CollSeq *pColl){$/;"	f	file:
sz	sqlite3_MFAW.c	/^  u16 sz;                 \/* Size of each buffer in bytes *\/$/;"	m	struct:Lookaside	file:
szAtom	sqlite3_MFAW.c	/^  int szAtom;      \/* Smallest possible allocation in bytes *\/$/;"	m	struct:Mem5Global	file:
szCache	sqlite3_MFAW.c	/^  int szCache;                        \/* Configured cache size *\/$/;"	m	struct:PCache	file:
szChunk	sqlite3_MFAW.c	/^  int szChunk;                        \/* Configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:unixFile	file:
szChunk	sqlite3_MFAW.c	/^  int szChunk;            \/* Chunk size configured by FCNTL_CHUNK_SIZE *\/$/;"	m	struct:winFile	file:
szEst	sqlite3_MFAW.c	/^  u8 szEst;        \/* Estimated size of this column.  INT==1 *\/$/;"	m	struct:Column	file:
szExtra	sqlite3_MFAW.c	/^  int szExtra;                        \/* Size of extra space for each page *\/$/;"	m	struct:PCache	file:
szExtra	sqlite3_MFAW.c	/^  int szExtra;                        \/* Size of extra space in bytes *\/$/;"	m	struct:PCache1	file:
szFirstBlock	sqlite3_MFAW.c	/^  int szFirstBlock;          \/* Size of first block written to WAL file *\/$/;"	m	struct:Wal	file:
szIdxRow	sqlite3_MFAW.c	/^  LogEst szIdxRow;         \/* Estimated average row size in bytes *\/$/;"	m	struct:Index	file:
szLookaside	sqlite3_MFAW.c	/^  int szLookaside;                  \/* Default lookaside buffer size *\/$/;"	m	struct:Sqlite3Config	file:
szMalloc	sqlite3_MFAW.c	/^  int szMalloc;       \/* Size of the zMalloc allocation *\/$/;"	m	struct:Mem	file:
szMaster	sqlite3_MFAW.c	/^  u32 szMaster;$/;"	m	struct:Mem3Global	file:
szMmap	sqlite3_MFAW.c	/^  i64 szMmap;                   \/* Default mmap_size setting *\/$/;"	m	struct:sqlite3	file:
szMmap	sqlite3_MFAW.c	/^  sqlite3_int64 szMmap;             \/* mmap() space per open file *\/$/;"	m	struct:Sqlite3Config	file:
szMmap	sqlite3_MFAW.c	/^  sqlite3_int64 szMmap;       \/* Desired maximum mmap size *\/$/;"	m	struct:Pager	file:
szOsFile	sqlite3_MFAW.c	/^  int szOsFile;            \/* Size of subclassed sqlite3_file *\/$/;"	m	struct:sqlite3_vfs	file:
szPMA	sqlite3_MFAW.c	/^  int szPMA;                      \/* Size of pList as PMA in bytes *\/$/;"	m	struct:SorterList	file:
szPage	sqlite3_MFAW.c	/^  int szPage;                         \/* Size of allocated pages in bytes *\/$/;"	m	struct:PCache1	file:
szPage	sqlite3_MFAW.c	/^  int szPage;                         \/* Size of every page in this cache *\/$/;"	m	struct:PCache	file:
szPage	sqlite3_MFAW.c	/^  int szPage;                       \/* Size of each page in pPage[] *\/$/;"	m	struct:Sqlite3Config	file:
szPage	sqlite3_MFAW.c	/^  int szPage;                     \/* Value of 'pgSize' column *\/$/;"	m	struct:StatCursor	file:
szPage	sqlite3_MFAW.c	/^  int szPage;                  \/* Size of one page *\/$/;"	m	struct:WalWriter	file:
szPage	sqlite3_MFAW.c	/^  u16 szPage;                     \/* Database page size in bytes. 1==64K *\/$/;"	m	struct:WalIndexHdr	file:
szPage	sqlite3_MFAW.c	/^  u32 szPage;                \/* Database page size *\/$/;"	m	struct:Wal	file:
szPma	sqlite3_MFAW.c	/^  u32 szPma;                        \/* Maximum Sorter PMA size *\/$/;"	m	struct:Sqlite3Config	file:
szRegion	sqlite3_MFAW.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:unixShmNode	file:
szRegion	sqlite3_MFAW.c	/^  int szRegion;              \/* Size of shared-memory regions *\/$/;"	m	struct:winShmNode	file:
szRow	sqlite3_MFAW.c	/^  u32 szRow;            \/* Byte available in aRow *\/$/;"	m	struct:VdbeCursor	file:
szScratch	sqlite3_MFAW.c	/^  int szScratch;                    \/* Size of each scratch buffer *\/$/;"	m	struct:Sqlite3Config	file:
szSlot	sqlite3_MFAW.c	/^  int szSlot;                    \/* Size of each free slot *\/$/;"	m	struct:PCacheGlobal	file:
szTabRow	sqlite3_MFAW.c	/^  LogEst szTabRow;     \/* Estimated size of each table row in bytes *\/$/;"	m	struct:Table	file:
tRowcnt	sqlite3_MFAW.c	/^ typedef u32 tRowcnt;    \/* 32-bit is the default *\/$/;"	t	file:
tRowcnt	sqlite3_MFAW.c	/^ typedef u64 tRowcnt;    \/* 64-bit only if requested at compile-time *\/$/;"	t	file:
tabFlags	sqlite3_MFAW.c	/^  u8 tabFlags;         \/* Mask of TF_* values *\/$/;"	m	struct:Table	file:
tabTnct	sqlite3_MFAW.c	/^  int tabTnct;    \/* Ephemeral table used for DISTINCT processing *\/$/;"	m	struct:DistinctCtx	file:
table	sqlite3_MFAW.c	/^  char *table;            \/* The table or view to which the trigger applies *\/$/;"	m	struct:Trigger	file:
tableAndColumnIndex	sqlite3_MFAW.c	/^static int tableAndColumnIndex($/;"	f	file:
tableOfTrigger	sqlite3_MFAW.c	/^static Table *tableOfTrigger(Trigger *pTrigger){$/;"	f	file:
table_column_metadata	sqlite3_MFAW.c	/^  int  (*table_column_metadata)(sqlite3*,const char*,const char*,const char*,$/;"	m	struct:sqlite3_api_routines	file:
targetSrcList	sqlite3_MFAW.c	/^static SrcList *targetSrcList($/;"	f	file:
tblHash	sqlite3_MFAW.c	/^  Hash tblHash;        \/* All tables indexed by name *\/$/;"	m	struct:Schema	file:
tempFile	sqlite3_MFAW.c	/^  u8 tempFile;                \/* zFilename is a temporary or immutable file *\/$/;"	m	struct:Pager	file:
tempReg	sqlite3_MFAW.c	/^    u8 tempReg;           \/* iReg is a temp register that needs to be freed *\/$/;"	m	struct:Parse::yColCache	file:
temp_store	sqlite3_MFAW.c	/^  u8 temp_store;                \/* 1: file 2: memory 0: default *\/$/;"	m	struct:sqlite3	file:
term	sqlite3_MFAW.c	/^  Blob term;                      \/* Current term *\/$/;"	m	struct:NodeReader	file:
termCanDriveIndex	sqlite3_MFAW.c	/^static int termCanDriveIndex($/;"	f	file:
testFunc	sqlite3_MFAW.c	/^static void testFunc($/;"	f	file:
test_addop_breakpoint	sqlite3_MFAW.c	/^static void test_addop_breakpoint(void){$/;"	f	file:
test_control	sqlite3_MFAW.c	/^  int (*test_control)(int, ...);$/;"	m	struct:sqlite3_api_routines	file:
test_fts3_node_chunk_threshold	sqlite3_MFAW.c	/^int test_fts3_node_chunk_threshold = (4*1024)*4;$/;"	v
test_fts3_node_chunksize	sqlite3_MFAW.c	/^int test_fts3_node_chunksize = (4*1024);$/;"	v
testcase	sqlite3_MFAW.c	132869;"	d	file:
testcase	sqlite3_MFAW.c	8457;"	d	file:
testcase	sqlite3_MFAW.c	8459;"	d	file:
thread_cleanup	sqlite3_MFAW.c	/^  void  (*thread_cleanup)(void);$/;"	m	struct:sqlite3_api_routines	file:
thread_cond1	mobibench.c	/^pthread_cond_t thread_cond1 = PTHREAD_COND_INITIALIZER;$/;"	v
thread_cond1	mobibench_MFAW.c	/^pthread_cond_t thread_cond1 = PTHREAD_COND_INITIALIZER;$/;"	v
thread_cond2	mobibench.c	/^pthread_cond_t thread_cond2 = PTHREAD_COND_INITIALIZER;$/;"	v
thread_cond2	mobibench_MFAW.c	/^pthread_cond_t thread_cond2 = PTHREAD_COND_INITIALIZER;$/;"	v
thread_cond3	mobibench.c	/^pthread_cond_t thread_cond3 = PTHREAD_COND_INITIALIZER;$/;"	v
thread_cond3	mobibench_MFAW.c	/^pthread_cond_t thread_cond3 = PTHREAD_COND_INITIALIZER;$/;"	v
thread_lock	mobibench.c	/^pthread_mutex_t thread_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v
thread_lock	mobibench_MFAW.c	/^pthread_mutex_t thread_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v
thread_main	mobibench.c	/^int thread_main(void* arg)$/;"	f
thread_main	mobibench_MFAW.c	/^int thread_main(void* arg)$/;"	f
thread_main_db	mobibench.c	/^int thread_main_db(void* arg)$/;"	f
thread_main_db	mobibench_MFAW.c	/^int thread_main_db(void* arg)$/;"	f
thread_num	mobibench.c	/^	int thread_num;$/;"	m	struct:script_entry	file:
thread_num	mobibench.c	/^	int thread_num;$/;"	m	struct:script_thread_info	file:
thread_num	mobibench.c	/^	int thread_num;$/;"	m	struct:script_thread_time	file:
thread_num	mobibench_MFAW.c	/^	int thread_num;$/;"	m	struct:script_entry	file:
thread_num	mobibench_MFAW.c	/^	int thread_num;$/;"	m	struct:script_thread_info	file:
thread_num	mobibench_MFAW.c	/^	int thread_num;$/;"	m	struct:script_thread_time	file:
thread_status	mobibench.c	/^thread_status_t thread_status[MAX_THREADS] = {0, };$/;"	v
thread_status	mobibench_MFAW.c	/^thread_status_t thread_status[MAX_THREADS] = {0, };$/;"	v
thread_status_t	mobibench.c	/^} thread_status_t;$/;"	t	typeref:enum:__anon31	file:
thread_status_t	mobibench_MFAW.c	/^} thread_status_t;$/;"	t	typeref:enum:__anon28	file:
threadid	sqlite3_MFAW.c	25763;"	d	file:
threadid	sqlite3_MFAW.c	25765;"	d	file:
throughput	mobibench.c	/^float throughput = 0;$/;"	v
throughput	mobibench_MFAW.c	/^float throughput = 0;$/;"	v
tid	sqlite3_MFAW.c	/^  pthread_t tid;                 \/* Thread ID *\/$/;"	m	struct:SQLiteThread	file:
tid	sqlite3_MFAW.c	/^  void *tid;               \/* The thread handle *\/$/;"	m	struct:SQLiteThread	file:
time	mobibench.c	/^	long long time;$/;"	m	struct:script_entry	file:
time	mobibench_MFAW.c	/^	long long time;$/;"	m	struct:script_entry	file:
timeFunc	sqlite3_MFAW.c	/^static void timeFunc($/;"	f	file:
time_start	mobibench.c	/^long long time_start;$/;"	v
time_start	mobibench_MFAW.c	/^long long time_start;$/;"	v
tkCREATE	sqlite3_MFAW.c	127733;"	d	file:
tkEND	sqlite3_MFAW.c	127736;"	d	file:
tkEXPLAIN	sqlite3_MFAW.c	127732;"	d	file:
tkOTHER	sqlite3_MFAW.c	127730;"	d	file:
tkSEMI	sqlite3_MFAW.c	127728;"	d	file:
tkTEMP	sqlite3_MFAW.c	127734;"	d	file:
tkTRIGGER	sqlite3_MFAW.c	127735;"	d	file:
tkWS	sqlite3_MFAW.c	127729;"	d	file:
tmask	sqlite3_MFAW.c	100750;"	d	file:
tnum	sqlite3_MFAW.c	/^  int tnum;                \/* DB Page containing root of this index *\/$/;"	m	struct:Index	file:
tnum	sqlite3_MFAW.c	/^  int tnum;            \/* Root BTree page for this table *\/$/;"	m	struct:Table	file:
token	sqlite3_MFAW.c	/^  void *token;                  \/* id that may be used to recursive triggers *\/$/;"	m	struct:SubProgram	file:
token	sqlite3_MFAW.c	/^  void *token;            \/* Copy of SubProgram.token *\/$/;"	m	struct:VdbeFrame	file:
totalAlloc	sqlite3_MFAW.c	/^  u64 totalAlloc;     \/* Total of all malloc calls - includes internal frag *\/$/;"	m	struct:Mem5Global	file:
totalExcess	sqlite3_MFAW.c	/^  u64 totalExcess;    \/* Total internal fragmentation *\/$/;"	m	struct:Mem5Global	file:
totalFinalize	sqlite3_MFAW.c	/^static void totalFinalize(sqlite3_context *context){$/;"	f	file:
total_changes	sqlite3_MFAW.c	/^  int  (*total_changes)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
total_changes	sqlite3_MFAW.c	/^static void total_changes($/;"	f	file:
tps	mobibench.c	/^float tps = 0;$/;"	v
tps	mobibench_MFAW.c	/^float tps = 0;$/;"	v
tr_tm	sqlite3_MFAW.c	/^  u8 tr_tm;               \/* One of TRIGGER_BEFORE, TRIGGER_AFTER *\/$/;"	m	struct:Trigger	file:
trace	sqlite3_MFAW.c	/^  int trace;                 \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
trace	sqlite3_MFAW.c	/^  void * (*trace)(sqlite3*,void(*xTrace)(void*,const char*),void*);$/;"	m	struct:sqlite3_api_routines	file:
trace	sqlite3_MFAW.c	/^  volatile int trace;        \/* True to trace changes *\/$/;"	m	struct:sqlite3_mutex	file:
transCntrChng	sqlite3_MFAW.c	/^  unsigned char transCntrChng;   \/* True if the transaction counter changed *\/$/;"	m	struct:unixFile	file:
transferJoinMarkings	sqlite3_MFAW.c	/^static void transferJoinMarkings(Expr *pDerived, Expr *pBase){$/;"	f	file:
transferParseError	sqlite3_MFAW.c	/^static void transferParseError(Parse *pTo, Parse *pFrom){$/;"	f	file:
transfer_bindings	sqlite3_MFAW.c	/^  int  (*transfer_bindings)(sqlite3_stmt*,sqlite3_stmt*);$/;"	m	struct:sqlite3_api_routines	file:
translateP	sqlite3_MFAW.c	/^static int translateP(char c, const Op *pOp){$/;"	f	file:
trigHash	sqlite3_MFAW.c	/^  Hash trigHash;       \/* All triggers indexed by name *\/$/;"	m	struct:Schema	file:
triggerStepAllocate	sqlite3_MFAW.c	/^static TriggerStep *triggerStepAllocate($/;"	f	file:
trimFunc	sqlite3_MFAW.c	/^static void trimFunc($/;"	f	file:
truncateOnCommit	sqlite3_MFAW.c	/^  u8 truncateOnCommit;       \/* True to truncate WAL file on commit *\/$/;"	m	struct:Wal	file:
truthProb	sqlite3_MFAW.c	/^  LogEst truthProb;       \/* Probability of truth for this expression *\/$/;"	m	struct:WhereTerm	file:
type	sqlite3_MFAW.c	/^  etByte type;             \/* Conversion paradigm *\/$/;"	m	struct:et_info	file:
type	sqlite3_MFAW.c	/^struct AttachKey { int type;  Token key; };$/;"	m	struct:AttachKey	file:
typeMask	sqlite3_MFAW.c	/^  u8 typeMask;$/;"	m	struct:VdbeSorter	file:
typeofFunc	sqlite3_MFAW.c	/^static void typeofFunc($/;"	f	file:
tz	sqlite3_MFAW.c	/^  int tz;            \/* Timezone offset in minutes *\/$/;"	m	struct:DateTime	file:
u	sqlite3_MFAW.c	/^    } u;$/;"	m	struct:ExprList::ExprList_item	typeref:union:ExprList::ExprList_item::__anon5	file:
u	sqlite3_MFAW.c	/^  u32 u;             \/* Unsigned for byte-order conversions *\/$/;"	m	union:RtreeCoord	file:
u	sqlite3_MFAW.c	/^  } u;$/;"	m	struct:Bitvec	typeref:union:Bitvec::__anon13	file:
u	sqlite3_MFAW.c	/^  } u;$/;"	m	struct:Expr	typeref:union:Expr::__anon3	file:
u	sqlite3_MFAW.c	/^  } u;$/;"	m	struct:Mem	typeref:union:Mem::MemValue	file:
u	sqlite3_MFAW.c	/^  } u;$/;"	m	struct:Mem3Block	typeref:union:Mem3Block::__anon10	file:
u	sqlite3_MFAW.c	/^  } u;$/;"	m	struct:RtreeConstraint	typeref:union:RtreeConstraint::__anon25	file:
u	sqlite3_MFAW.c	/^  } u;$/;"	m	struct:SorterRecord	typeref:union:SorterRecord::__anon14	file:
u	sqlite3_MFAW.c	/^  } u;$/;"	m	struct:Stat4Sample	typeref:union:Stat4Sample::__anon15	file:
u	sqlite3_MFAW.c	/^  } u;$/;"	m	struct:Walker	typeref:union:Walker::__anon8	file:
u	sqlite3_MFAW.c	/^  } u;$/;"	m	struct:WhereLevel	typeref:union:WhereLevel::__anon16	file:
u	sqlite3_MFAW.c	/^  } u;$/;"	m	struct:WhereLoop	typeref:union:WhereLoop::__anon18	file:
u	sqlite3_MFAW.c	/^  } u;$/;"	m	struct:WhereTerm	typeref:union:WhereTerm::__anon21	file:
u1	sqlite3_MFAW.c	/^  } u1;$/;"	m	struct:sqlite3	typeref:union:sqlite3::__anon2	file:
u16	sqlite3_MFAW.c	/^typedef UINT16_TYPE u16;           \/* 2-byte unsigned integer *\/$/;"	t	file:
u16	sqlite3_MFAW.c	/^typedef unsigned short u16;$/;"	t	file:
u32	sqlite3_MFAW.c	/^typedef UINT32_TYPE u32;           \/* 4-byte unsigned integer *\/$/;"	t	file:
u32	sqlite3_MFAW.c	/^typedef unsigned int u32;         \/* 4-byte unsigned integer *\/$/;"	t	file:
u32	sqlite3_MFAW.c	/^typedef unsigned int u32;$/;"	t	file:
u64	sqlite3_MFAW.c	/^typedef sqlite3_uint64 u64;       \/* 8-byte unsigned integer *\/$/;"	t	file:
u64	sqlite3_MFAW.c	/^typedef sqlite_uint64 u64;         \/* 8-byte unsigned integer *\/$/;"	t	file:
u8	sqlite3_MFAW.c	/^typedef UINT8_TYPE u8;             \/* 1-byte unsigned integer *\/$/;"	t	file:
u8	sqlite3_MFAW.c	/^typedef unsigned char u8;         \/* 1-byte (or larger) unsigned integer *\/$/;"	t	file:
u8	sqlite3_MFAW.c	/^typedef unsigned char u8;$/;"	t	file:
uTemp	sqlite3_MFAW.c	/^  u32 uTemp;          \/* Transient storage for serial_type in OP_MakeRecord *\/$/;"	m	struct:Mem	file:
unLockFlag	sqlite3_MFAW.c	/^  unsigned char unLockFlag;         \/* 1 = unlock, 0 = lock *\/$/;"	m	struct:ByteRangeLockPB2	file:
unicodeAddExceptions	sqlite3_MFAW.c	/^static int unicodeAddExceptions($/;"	f	file:
unicodeClose	sqlite3_MFAW.c	/^static int unicodeClose(sqlite3_tokenizer_cursor *pCursor){$/;"	f	file:
unicodeCreate	sqlite3_MFAW.c	/^static int unicodeCreate($/;"	f	file:
unicodeDestroy	sqlite3_MFAW.c	/^static int unicodeDestroy(sqlite3_tokenizer *pTokenizer){$/;"	f	file:
unicodeFunc	sqlite3_MFAW.c	/^static void unicodeFunc($/;"	f	file:
unicodeIsAlnum	sqlite3_MFAW.c	/^static int unicodeIsAlnum(unicode_tokenizer *p, int iCode){$/;"	f	file:
unicodeIsException	sqlite3_MFAW.c	/^static int unicodeIsException(unicode_tokenizer *p, int iCode){$/;"	f	file:
unicodeNext	sqlite3_MFAW.c	/^static int unicodeNext($/;"	f	file:
unicodeOpen	sqlite3_MFAW.c	/^static int unicodeOpen($/;"	f	file:
unicode_cursor	sqlite3_MFAW.c	/^struct unicode_cursor {$/;"	s	file:
unicode_cursor	sqlite3_MFAW.c	/^typedef struct unicode_cursor unicode_cursor;$/;"	t	typeref:struct:unicode_cursor	file:
unicode_tokenizer	sqlite3_MFAW.c	/^struct unicode_tokenizer {$/;"	s	file:
unicode_tokenizer	sqlite3_MFAW.c	/^typedef struct unicode_tokenizer unicode_tokenizer;$/;"	t	typeref:struct:unicode_tokenizer	file:
uniqNotNull	sqlite3_MFAW.c	/^  unsigned uniqNotNull:1;  \/* True if UNIQUE and NOT NULL for all columns *\/$/;"	m	struct:Index	file:
unixAccess	sqlite3_MFAW.c	/^static int unixAccess($/;"	f	file:
unixCheckReservedLock	sqlite3_MFAW.c	/^static int unixCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
unixClose	sqlite3_MFAW.c	/^static int unixClose(sqlite3_file *id){$/;"	f	file:
unixCurrentTime	sqlite3_MFAW.c	/^static int unixCurrentTime(sqlite3_vfs *NotUsed, double *prNow){$/;"	f	file:
unixCurrentTimeInt64	sqlite3_MFAW.c	/^static int unixCurrentTimeInt64(sqlite3_vfs *NotUsed, sqlite3_int64 *piNow){$/;"	f	file:
unixDelete	sqlite3_MFAW.c	/^static int unixDelete($/;"	f	file:
unixDeviceCharacteristics	sqlite3_MFAW.c	/^static int unixDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
unixDlClose	sqlite3_MFAW.c	/^static void unixDlClose(sqlite3_vfs *NotUsed, void *pHandle){$/;"	f	file:
unixDlClose	sqlite3_MFAW.c	31586;"	d	file:
unixDlError	sqlite3_MFAW.c	/^static void unixDlError(sqlite3_vfs *NotUsed, int nBuf, char *zBufOut){$/;"	f	file:
unixDlError	sqlite3_MFAW.c	31584;"	d	file:
unixDlOpen	sqlite3_MFAW.c	/^static void *unixDlOpen(sqlite3_vfs *NotUsed, const char *zFilename){$/;"	f	file:
unixDlOpen	sqlite3_MFAW.c	31583;"	d	file:
unixDlSym	sqlite3_MFAW.c	/^static void (*unixDlSym(sqlite3_vfs *NotUsed, void *p, const char*zSym))(void){$/;"	f	file:
unixDlSym	sqlite3_MFAW.c	31585;"	d	file:
unixEnterMutex	sqlite3_MFAW.c	/^static void unixEnterMutex(void){$/;"	f	file:
unixFetch	sqlite3_MFAW.c	/^static int unixFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){$/;"	f	file:
unixFile	sqlite3_MFAW.c	/^struct unixFile {$/;"	s	file:
unixFile	sqlite3_MFAW.c	/^typedef struct unixFile unixFile;$/;"	t	typeref:struct:unixFile	file:
unixFileControl	sqlite3_MFAW.c	/^static int unixFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
unixFileId	sqlite3_MFAW.c	/^struct unixFileId {$/;"	s	file:
unixFileLock	sqlite3_MFAW.c	/^static int unixFileLock(unixFile *pFile, struct flock *pLock){$/;"	f	file:
unixFileSize	sqlite3_MFAW.c	/^static int unixFileSize(sqlite3_file *id, i64 *pSize){$/;"	f	file:
unixFullPathname	sqlite3_MFAW.c	/^static int unixFullPathname($/;"	f	file:
unixGetLastError	sqlite3_MFAW.c	/^static int unixGetLastError(sqlite3_vfs *NotUsed, int NotUsed2, char *NotUsed3){$/;"	f	file:
unixGetSystemCall	sqlite3_MFAW.c	/^static sqlite3_syscall_ptr unixGetSystemCall($/;"	f	file:
unixGetTempname	sqlite3_MFAW.c	/^static int unixGetTempname(int nBuf, char *zBuf){$/;"	f	file:
unixGetpagesize	sqlite3_MFAW.c	/^static int unixGetpagesize(void){$/;"	f	file:
unixInodeInfo	sqlite3_MFAW.c	/^struct unixInodeInfo {$/;"	s	file:
unixInodeInfo	sqlite3_MFAW.c	/^typedef struct unixInodeInfo unixInodeInfo;   \/* An i-node *\/$/;"	t	typeref:struct:unixInodeInfo	file:
unixLeaveMutex	sqlite3_MFAW.c	/^static void unixLeaveMutex(void){$/;"	f	file:
unixLock	sqlite3_MFAW.c	/^static int unixLock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixLogError	sqlite3_MFAW.c	26585;"	d	file:
unixLogErrorAtLine	sqlite3_MFAW.c	/^static int unixLogErrorAtLine($/;"	f	file:
unixMapfile	sqlite3_MFAW.c	/^static int unixMapfile(unixFile *pFd, i64 nByte){$/;"	f	file:
unixModeBit	sqlite3_MFAW.c	/^static void unixModeBit(unixFile *pFile, unsigned char mask, int *pArg){$/;"	f	file:
unixMutexHeld	sqlite3_MFAW.c	/^static int unixMutexHeld(void) {$/;"	f	file:
unixNextSystemCall	sqlite3_MFAW.c	/^static const char *unixNextSystemCall(sqlite3_vfs *p, const char *zName){$/;"	f	file:
unixOpen	sqlite3_MFAW.c	/^static int unixOpen($/;"	f	file:
unixOpenSharedMemory	sqlite3_MFAW.c	/^static int unixOpenSharedMemory(unixFile *pDbFd){$/;"	f	file:
unixRandomness	sqlite3_MFAW.c	/^static int unixRandomness(sqlite3_vfs *NotUsed, int nBuf, char *zBuf){$/;"	f	file:
unixRead	sqlite3_MFAW.c	/^static int unixRead($/;"	f	file:
unixRemapfile	sqlite3_MFAW.c	/^static void unixRemapfile($/;"	f	file:
unixSectorSize	sqlite3_MFAW.c	/^static int unixSectorSize(sqlite3_file *NotUsed){$/;"	f	file:
unixSectorSize	sqlite3_MFAW.c	/^static int unixSectorSize(sqlite3_file *id){$/;"	f	file:
unixSetSystemCall	sqlite3_MFAW.c	/^static int unixSetSystemCall($/;"	f	file:
unixShm	sqlite3_MFAW.c	/^struct unixShm {$/;"	s	file:
unixShm	sqlite3_MFAW.c	/^typedef struct unixShm unixShm;               \/* Connection shared memory *\/$/;"	t	typeref:struct:unixShm	file:
unixShmBarrier	sqlite3_MFAW.c	/^static void unixShmBarrier($/;"	f	file:
unixShmBarrier	sqlite3_MFAW.c	30195;"	d	file:
unixShmLock	sqlite3_MFAW.c	/^static int unixShmLock($/;"	f	file:
unixShmLock	sqlite3_MFAW.c	30194;"	d	file:
unixShmMap	sqlite3_MFAW.c	/^static int unixShmMap($/;"	f	file:
unixShmMap	sqlite3_MFAW.c	30193;"	d	file:
unixShmNode	sqlite3_MFAW.c	/^struct unixShmNode {$/;"	s	file:
unixShmNode	sqlite3_MFAW.c	/^typedef struct unixShmNode unixShmNode;       \/* Shared memory instance *\/$/;"	t	typeref:struct:unixShmNode	file:
unixShmPurge	sqlite3_MFAW.c	/^static void unixShmPurge(unixFile *pFd){$/;"	f	file:
unixShmRegionPerMap	sqlite3_MFAW.c	/^static int unixShmRegionPerMap(void){$/;"	f	file:
unixShmSystemLock	sqlite3_MFAW.c	/^static int unixShmSystemLock($/;"	f	file:
unixShmUnmap	sqlite3_MFAW.c	/^static int unixShmUnmap($/;"	f	file:
unixShmUnmap	sqlite3_MFAW.c	30196;"	d	file:
unixSleep	sqlite3_MFAW.c	/^static int unixSleep(sqlite3_vfs *NotUsed, int microseconds){$/;"	f	file:
unixSync	sqlite3_MFAW.c	/^static int unixSync(sqlite3_file *id, int flags){$/;"	f	file:
unixTempFileDir	sqlite3_MFAW.c	/^static const char *unixTempFileDir(void){$/;"	f	file:
unixTruncate	sqlite3_MFAW.c	/^static int unixTruncate(sqlite3_file *id, i64 nByte){$/;"	f	file:
unixUnfetch	sqlite3_MFAW.c	/^static int unixUnfetch(sqlite3_file *fd, i64 iOff, void *p){$/;"	f	file:
unixUnlock	sqlite3_MFAW.c	/^static int unixUnlock(sqlite3_file *id, int eFileLock){$/;"	f	file:
unixUnmapfile	sqlite3_MFAW.c	/^static void unixUnmapfile(unixFile *pFd){$/;"	f	file:
unixWrite	sqlite3_MFAW.c	/^static int unixWrite($/;"	f	file:
unix_syscall	sqlite3_MFAW.c	/^static struct unix_syscall {$/;"	s	file:
unlikely	sqlite3_MFAW.c	8554;"	d	file:
unlockBtreeIfUnused	sqlite3_MFAW.c	/^static void unlockBtreeIfUnused(BtShared *pBt){$/;"	f	file:
unlockBtreeMutex	sqlite3_MFAW.c	/^static void SQLITE_NOINLINE unlockBtreeMutex(Btree *p){$/;"	f	file:
unlock_notify	sqlite3_MFAW.c	/^  int (*unlock_notify)(sqlite3*,void(*)(void**,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
untestedTerms	sqlite3_MFAW.c	/^  u8 untestedTerms;         \/* Not all WHERE terms resolved by outer loop *\/$/;"	m	struct:WhereInfo	file:
unused	sqlite3_MFAW.c	/^  u32 unused;                     \/* Unused (padding) field *\/$/;"	m	struct:WalIndexHdr	file:
updateAccumulator	sqlite3_MFAW.c	/^static void updateAccumulator(Parse *pParse, AggInfo *pAggInfo){$/;"	f	file:
updateMapping	sqlite3_MFAW.c	/^static int updateMapping($/;"	f	file:
updateMaxBlobsize	sqlite3_MFAW.c	/^static void updateMaxBlobsize(Mem *p){$/;"	f	file:
updateVirtualTable	sqlite3_MFAW.c	/^static void updateVirtualTable($/;"	f	file:
update_hook	sqlite3_MFAW.c	/^  void * (*update_hook)(sqlite3*,void(*)(void*,int ,char const*,char const*,$/;"	m	struct:sqlite3_api_routines	file:
upperFunc	sqlite3_MFAW.c	/^static void upperFunc(sqlite3_context *context, int argc, sqlite3_value **argv){$/;"	f	file:
uri_boolean	sqlite3_MFAW.c	/^  int (*uri_boolean)(const char*,const char*,int);$/;"	m	struct:sqlite3_api_routines	file:
uri_int64	sqlite3_MFAW.c	/^  sqlite3_int64 (*uri_int64)(const char*,const char*,sqlite3_int64);$/;"	m	struct:sqlite3_api_routines	file:
uri_parameter	sqlite3_MFAW.c	/^  const char *(*uri_parameter)(const char*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
usable	sqlite3_MFAW.c	/^     unsigned char usable;     \/* True if this constraint is usable *\/$/;"	m	struct:sqlite3_index_info::sqlite3_index_constraint	file:
usableSize	sqlite3_MFAW.c	/^  u32 usableSize;       \/* Number of usable bytes on each page *\/$/;"	m	struct:BtShared	file:
useJournal	sqlite3_MFAW.c	/^  u8 useJournal;              \/* Use a rollback journal on this file *\/$/;"	m	struct:Pager	file:
useRandomRowid	sqlite3_MFAW.c	/^  Bool useRandomRowid:1;\/* Generate new record numbers semi-randomly *\/$/;"	m	struct:VdbeCursor	file:
useSortingIdx	sqlite3_MFAW.c	/^  u8 useSortingIdx;       \/* In direct mode, reference the sorting index rather$/;"	m	struct:AggInfo	file:
usedAsColumnCache	sqlite3_MFAW.c	/^static int usedAsColumnCache(Parse *pParse, int iFrom, int iTo){$/;"	f	file:
user_data	sqlite3_MFAW.c	/^  void * (*user_data)(sqlite3_context*);$/;"	m	struct:sqlite3_api_routines	file:
usesStmtJournal	sqlite3_MFAW.c	/^  bft usesStmtJournal:1;  \/* True if uses a statement journal *\/$/;"	m	struct:Vdbe	file:
v	sqlite3_MFAW.c	/^  Vdbe *v;                   \/* Vdbe to iterate through the opcodes of *\/$/;"	m	struct:VdbeOpIter	file:
v	sqlite3_MFAW.c	/^  Vdbe *v;                \/* VM this frame belongs to *\/$/;"	m	struct:VdbeFrame	file:
v	sqlite3_MFAW.c	/^  i64 v;                        \/* ROWID value for this entry *\/$/;"	m	struct:RowSetEntry	file:
v1	sqlite3_MFAW.c	/^  int v1, v2;       \/* Values for up to two %d fields in zPfx *\/$/;"	m	struct:IntegrityCk	file:
v2	sqlite3_MFAW.c	/^  int v1, v2;       \/* Values for up to two %d fields in zPfx *\/$/;"	m	struct:IntegrityCk	file:
vacuumFinalize	sqlite3_MFAW.c	/^static int vacuumFinalize(sqlite3 *db, sqlite3_stmt *pStmt, char **pzErrMsg){$/;"	f	file:
validHMS	sqlite3_MFAW.c	/^  char validHMS;     \/* True (1) if h,m,s are valid *\/$/;"	m	struct:DateTime	file:
validJD	sqlite3_MFAW.c	/^  char validJD;      \/* True (1) if iJD is valid *\/$/;"	m	struct:DateTime	file:
validTZ	sqlite3_MFAW.c	/^  char validTZ;      \/* True (1) if tz is valid *\/$/;"	m	struct:DateTime	file:
validYMD	sqlite3_MFAW.c	/^  char validYMD;     \/* True (1) if Y,M,D are valid *\/$/;"	m	struct:DateTime	file:
value	sqlite3_MFAW.c	/^  struct {int value; int mask;} yy429;$/;"	m	struct:__anon22::__anon23	file:
valueFromExpr	sqlite3_MFAW.c	/^static int valueFromExpr($/;"	f	file:
valueFromFunction	sqlite3_MFAW.c	/^static int valueFromFunction($/;"	f	file:
valueFromFunction	sqlite3_MFAW.c	64397;"	d	file:
valueNew	sqlite3_MFAW.c	/^static sqlite3_value *valueNew(sqlite3 *db, struct ValueNewStat4Ctx *p){$/;"	f	file:
valueToText	sqlite3_MFAW.c	/^static SQLITE_NOINLINE const void *valueToText(sqlite3_value* pVal, u8 enc){$/;"	f	file:
value_blob	sqlite3_MFAW.c	/^  const void * (*value_blob)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_bytes	sqlite3_MFAW.c	/^  int  (*value_bytes)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_bytes16	sqlite3_MFAW.c	/^  int  (*value_bytes16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_double	sqlite3_MFAW.c	/^  double  (*value_double)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_int	sqlite3_MFAW.c	/^  int  (*value_int)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_int64	sqlite3_MFAW.c	/^  sqlite_int64  (*value_int64)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_numeric_type	sqlite3_MFAW.c	/^  int  (*value_numeric_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text	sqlite3_MFAW.c	/^  const unsigned char * (*value_text)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16	sqlite3_MFAW.c	/^  const void * (*value_text16)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16be	sqlite3_MFAW.c	/^  const void * (*value_text16be)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_text16le	sqlite3_MFAW.c	/^  const void * (*value_text16le)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
value_type	sqlite3_MFAW.c	/^  int  (*value_type)(sqlite3_value*);$/;"	m	struct:sqlite3_api_routines	file:
vdbeAssertFieldCountWithinLimits	sqlite3_MFAW.c	/^static void vdbeAssertFieldCountWithinLimits($/;"	f	file:
vdbeAssertFieldCountWithinLimits	sqlite3_MFAW.c	68251;"	d	file:
vdbeCommit	sqlite3_MFAW.c	/^static int vdbeCommit(sqlite3 *db, Vdbe *p){$/;"	f	file:
vdbeCompareMemString	sqlite3_MFAW.c	/^static int vdbeCompareMemString($/;"	f	file:
vdbeFreeOpArray	sqlite3_MFAW.c	/^static void vdbeFreeOpArray(sqlite3 *db, Op *aOp, int nOp){$/;"	f	file:
vdbeIncrBgPopulate	sqlite3_MFAW.c	/^static int vdbeIncrBgPopulate(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrFree	sqlite3_MFAW.c	/^static void vdbeIncrFree(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrMergerNew	sqlite3_MFAW.c	/^static int vdbeIncrMergerNew($/;"	f	file:
vdbeIncrMergerSetThreads	sqlite3_MFAW.c	/^static void vdbeIncrMergerSetThreads(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrPopulate	sqlite3_MFAW.c	/^static int vdbeIncrPopulate(IncrMerger *pIncr){$/;"	f	file:
vdbeIncrPopulateThread	sqlite3_MFAW.c	/^static void *vdbeIncrPopulateThread(void *pCtx){$/;"	f	file:
vdbeIncrSwap	sqlite3_MFAW.c	/^static int vdbeIncrSwap(IncrMerger *pIncr){$/;"	f	file:
vdbeInvokeSqllog	sqlite3_MFAW.c	/^static void vdbeInvokeSqllog(Vdbe *v){$/;"	f	file:
vdbeInvokeSqllog	sqlite3_MFAW.c	67428;"	d	file:
vdbeMemAddTerminator	sqlite3_MFAW.c	/^static SQLITE_NOINLINE int vdbeMemAddTerminator(Mem *pMem){$/;"	f	file:
vdbeMemClear	sqlite3_MFAW.c	/^static SQLITE_NOINLINE void vdbeMemClear(Mem *p){$/;"	f	file:
vdbeMemClearExternAndSetNull	sqlite3_MFAW.c	/^static SQLITE_NOINLINE void vdbeMemClearExternAndSetNull(Mem *p){$/;"	f	file:
vdbeMergeEngineCompare	sqlite3_MFAW.c	/^static void vdbeMergeEngineCompare($/;"	f	file:
vdbeMergeEngineFree	sqlite3_MFAW.c	/^static void vdbeMergeEngineFree(MergeEngine *pMerger){$/;"	f	file:
vdbeMergeEngineInit	sqlite3_MFAW.c	/^static int vdbeMergeEngineInit($/;"	f	file:
vdbeMergeEngineLevel0	sqlite3_MFAW.c	/^static int vdbeMergeEngineLevel0($/;"	f	file:
vdbeMergeEngineNew	sqlite3_MFAW.c	/^static MergeEngine *vdbeMergeEngineNew(int nReader){$/;"	f	file:
vdbeMergeEngineStep	sqlite3_MFAW.c	/^static int vdbeMergeEngineStep($/;"	f	file:
vdbePmaReadBlob	sqlite3_MFAW.c	/^static int vdbePmaReadBlob($/;"	f	file:
vdbePmaReadVarint	sqlite3_MFAW.c	/^static int vdbePmaReadVarint(PmaReader *p, u64 *pnOut){$/;"	f	file:
vdbePmaReaderBgIncrInit	sqlite3_MFAW.c	/^static void *vdbePmaReaderBgIncrInit(void *pCtx){$/;"	f	file:
vdbePmaReaderClear	sqlite3_MFAW.c	/^static void vdbePmaReaderClear(PmaReader *pReadr){$/;"	f	file:
vdbePmaReaderIncrInit	sqlite3_MFAW.c	/^static int vdbePmaReaderIncrInit(PmaReader *pReadr, int eMode){$/;"	f	file:
vdbePmaReaderIncrMergeInit	sqlite3_MFAW.c	/^static int vdbePmaReaderIncrMergeInit(PmaReader *pReadr, int eMode){$/;"	f	file:
vdbePmaReaderInit	sqlite3_MFAW.c	/^static int vdbePmaReaderInit($/;"	f	file:
vdbePmaReaderNext	sqlite3_MFAW.c	/^static int vdbePmaReaderNext(PmaReader *pReadr){$/;"	f	file:
vdbePmaReaderSeek	sqlite3_MFAW.c	/^static int vdbePmaReaderSeek($/;"	f	file:
vdbePmaWriteBlob	sqlite3_MFAW.c	/^static void vdbePmaWriteBlob(PmaWriter *p, u8 *pData, int nData){$/;"	f	file:
vdbePmaWriteVarint	sqlite3_MFAW.c	/^static void vdbePmaWriteVarint(PmaWriter *p, u64 iVal){$/;"	f	file:
vdbePmaWriterFinish	sqlite3_MFAW.c	/^static int vdbePmaWriterFinish(PmaWriter *p, i64 *piEof){$/;"	f	file:
vdbePmaWriterInit	sqlite3_MFAW.c	/^static void vdbePmaWriterInit($/;"	f	file:
vdbeRecordCompareDebug	sqlite3_MFAW.c	/^static int vdbeRecordCompareDebug($/;"	f	file:
vdbeRecordCompareInt	sqlite3_MFAW.c	/^static int vdbeRecordCompareInt($/;"	f	file:
vdbeRecordCompareString	sqlite3_MFAW.c	/^static int vdbeRecordCompareString($/;"	f	file:
vdbeRecordDecodeInt	sqlite3_MFAW.c	/^static i64 vdbeRecordDecodeInt(u32 serial_type, const u8 *aKey){$/;"	f	file:
vdbeReleaseAndSetInt64	sqlite3_MFAW.c	/^static SQLITE_NOINLINE void vdbeReleaseAndSetInt64(Mem *pMem, i64 val){$/;"	f	file:
vdbeSafety	sqlite3_MFAW.c	/^static int vdbeSafety(Vdbe *p){$/;"	f	file:
vdbeSafetyNotNull	sqlite3_MFAW.c	/^static int vdbeSafetyNotNull(Vdbe *p){$/;"	f	file:
vdbeSortAllocUnpacked	sqlite3_MFAW.c	/^static int vdbeSortAllocUnpacked(SortSubtask *pTask){$/;"	f	file:
vdbeSortSubtaskCleanup	sqlite3_MFAW.c	/^static void vdbeSortSubtaskCleanup(sqlite3 *db, SortSubtask *pTask){$/;"	f	file:
vdbeSorterAddToTree	sqlite3_MFAW.c	/^static int vdbeSorterAddToTree($/;"	f	file:
vdbeSorterBlockDebug	sqlite3_MFAW.c	/^static void vdbeSorterBlockDebug($/;"	f	file:
vdbeSorterBlockDebug	sqlite3_MFAW.c	79068;"	d	file:
vdbeSorterCompare	sqlite3_MFAW.c	/^static int vdbeSorterCompare($/;"	f	file:
vdbeSorterCompareInt	sqlite3_MFAW.c	/^static int vdbeSorterCompareInt($/;"	f	file:
vdbeSorterCompareTail	sqlite3_MFAW.c	/^static int vdbeSorterCompareTail($/;"	f	file:
vdbeSorterCompareText	sqlite3_MFAW.c	/^static int vdbeSorterCompareText($/;"	f	file:
vdbeSorterCreateThread	sqlite3_MFAW.c	/^static int vdbeSorterCreateThread($/;"	f	file:
vdbeSorterExtendFile	sqlite3_MFAW.c	/^static void vdbeSorterExtendFile(sqlite3 *db, sqlite3_file *pFd, i64 nByte){$/;"	f	file:
vdbeSorterExtendFile	sqlite3_MFAW.c	79257;"	d	file:
vdbeSorterFlushPMA	sqlite3_MFAW.c	/^static int vdbeSorterFlushPMA(VdbeSorter *pSorter){$/;"	f	file:
vdbeSorterFlushThread	sqlite3_MFAW.c	/^static void *vdbeSorterFlushThread(void *pCtx){$/;"	f	file:
vdbeSorterGetCompare	sqlite3_MFAW.c	/^static SorterCompare vdbeSorterGetCompare(VdbeSorter *p){$/;"	f	file:
vdbeSorterJoinAll	sqlite3_MFAW.c	/^static int vdbeSorterJoinAll(VdbeSorter *pSorter, int rcin){$/;"	f	file:
vdbeSorterJoinAll	sqlite3_MFAW.c	79128;"	d	file:
vdbeSorterJoinThread	sqlite3_MFAW.c	/^static int vdbeSorterJoinThread(SortSubtask *pTask){$/;"	f	file:
vdbeSorterJoinThread	sqlite3_MFAW.c	79129;"	d	file:
vdbeSorterListToPMA	sqlite3_MFAW.c	/^static int vdbeSorterListToPMA(SortSubtask *pTask, SorterList *pList){$/;"	f	file:
vdbeSorterMapFile	sqlite3_MFAW.c	/^static int vdbeSorterMapFile(SortSubtask *pTask, SorterFile *pFile, u8 **pp){$/;"	f	file:
vdbeSorterMerge	sqlite3_MFAW.c	/^static void vdbeSorterMerge($/;"	f	file:
vdbeSorterMergeTreeBuild	sqlite3_MFAW.c	/^static int vdbeSorterMergeTreeBuild($/;"	f	file:
vdbeSorterOpenTempFile	sqlite3_MFAW.c	/^static int vdbeSorterOpenTempFile($/;"	f	file:
vdbeSorterPopulateDebug	sqlite3_MFAW.c	/^static void vdbeSorterPopulateDebug($/;"	f	file:
vdbeSorterPopulateDebug	sqlite3_MFAW.c	79067;"	d	file:
vdbeSorterRecordFree	sqlite3_MFAW.c	/^static void vdbeSorterRecordFree(sqlite3 *db, SorterRecord *pRecord){$/;"	f	file:
vdbeSorterRewindDebug	sqlite3_MFAW.c	/^static void vdbeSorterRewindDebug(const char *zEvent){$/;"	f	file:
vdbeSorterRewindDebug	sqlite3_MFAW.c	79066;"	d	file:
vdbeSorterRowkey	sqlite3_MFAW.c	/^static void *vdbeSorterRowkey($/;"	f	file:
vdbeSorterSetupMerge	sqlite3_MFAW.c	/^static int vdbeSorterSetupMerge(VdbeSorter *pSorter){$/;"	f	file:
vdbeSorterSort	sqlite3_MFAW.c	/^static int vdbeSorterSort(SortSubtask *pTask, SorterList *pList){$/;"	f	file:
vdbeSorterTreeDepth	sqlite3_MFAW.c	/^static int vdbeSorterTreeDepth(int nPMA){$/;"	f	file:
vdbeSorterWorkDebug	sqlite3_MFAW.c	/^static void vdbeSorterWorkDebug(SortSubtask *pTask, const char *zEvent){$/;"	f	file:
vdbeSorterWorkDebug	sqlite3_MFAW.c	79065;"	d	file:
vdbeTakeBranch	sqlite3_MFAW.c	/^  static void vdbeTakeBranch(int iSrcLine, u8 I, u8 M){$/;"	f	file:
vdbeUnbind	sqlite3_MFAW.c	/^static int vdbeUnbind(Vdbe *p, int i){$/;"	f	file:
vdbeVComment	sqlite3_MFAW.c	/^static void vdbeVComment(Vdbe *p, const char *zFormat, va_list ap){$/;"	f	file:
verifyDbFile	sqlite3_MFAW.c	/^static void verifyDbFile(unixFile *pFile){$/;"	f	file:
versionFunc	sqlite3_MFAW.c	/^static void versionFunc($/;"	f	file:
vfsFlags	sqlite3_MFAW.c	/^  u32 vfsFlags;               \/* Flags for sqlite3_vfs.xOpen() *\/$/;"	m	struct:Pager	file:
vfsList	sqlite3_MFAW.c	/^static sqlite3_vfs * SQLITE_WSD vfsList = 0;$/;"	v	file:
vfsList	sqlite3_MFAW.c	16776;"	d	file:
vfsUnlink	sqlite3_MFAW.c	/^static void vfsUnlink(sqlite3_vfs *pVfs){$/;"	f	file:
vfs_find	sqlite3_MFAW.c	/^  sqlite3_vfs *(*vfs_find)(const char*);$/;"	m	struct:sqlite3_api_routines	file:
vfs_register	sqlite3_MFAW.c	/^  int (*vfs_register)(sqlite3_vfs*,int);$/;"	m	struct:sqlite3_api_routines	file:
vfs_unregister	sqlite3_MFAW.c	/^  int (*vfs_unregister)(sqlite3_vfs*);$/;"	m	struct:sqlite3_api_routines	file:
viaCoroutine	sqlite3_MFAW.c	/^    unsigned viaCoroutine :1;  \/* Implemented as a co-routine *\/$/;"	m	struct:SrcList::SrcList_item	file:
vmprintf	sqlite3_MFAW.c	/^  char *(*vmprintf)(const char*,va_list);$/;"	m	struct:sqlite3_api_routines	file:
vsnprintf	sqlite3_MFAW.c	/^  char *(*vsnprintf)(int,char*,const char*,va_list);$/;"	m	struct:sqlite3_api_routines	file:
vtab	sqlite3_MFAW.c	/^    } vtab;$/;"	m	union:WhereLoop::__anon18	typeref:struct:WhereLoop::__anon18::__anon20	file:
vtabBestIndex	sqlite3_MFAW.c	/^static int vtabBestIndex(Parse *pParse, Table *pTab, sqlite3_index_info *p){$/;"	f	file:
vtabCallConstructor	sqlite3_MFAW.c	/^static int vtabCallConstructor($/;"	f	file:
vtabDisconnectAll	sqlite3_MFAW.c	/^static VTable *vtabDisconnectAll(sqlite3 *db, Table *p){$/;"	f	file:
vtabOnConflict	sqlite3_MFAW.c	/^  u8 vtabOnConflict;            \/* Value to return for s3_vtab_on_conflict() *\/$/;"	m	struct:sqlite3	file:
vtab_config	sqlite3_MFAW.c	/^  int (*vtab_config)(sqlite3*,int op,...);$/;"	m	struct:sqlite3_api_routines	file:
vtab_on_conflict	sqlite3_MFAW.c	/^  int (*vtab_on_conflict)(sqlite3*);$/;"	m	struct:sqlite3_api_routines	file:
vxworksFileId	sqlite3_MFAW.c	/^struct vxworksFileId {$/;"	s	file:
vxworksFileList	sqlite3_MFAW.c	/^static struct vxworksFileId *vxworksFileList = 0;$/;"	v	typeref:struct:vxworksFileId	file:
vxworksFindFileId	sqlite3_MFAW.c	/^static struct vxworksFileId *vxworksFindFileId(const char *zAbsoluteName){$/;"	f	file:
vxworksIoFinder	sqlite3_MFAW.c	/^  *(*const vxworksIoFinder)(const char*,unixFile*) = vxworksIoFinderImpl;$/;"	v	file:
vxworksIoFinderImpl	sqlite3_MFAW.c	/^static const sqlite3_io_methods *vxworksIoFinderImpl($/;"	f	file:
vxworksReleaseFileId	sqlite3_MFAW.c	/^static void vxworksReleaseFileId(struct vxworksFileId *pId){$/;"	f	file:
vxworksSimplifyName	sqlite3_MFAW.c	/^static int vxworksSimplifyName(char *z, int n){$/;"	f	file:
wait_thread_status	mobibench.c	/^void wait_thread_status(int thread_num, thread_status_t stat, pthread_cond_t* cond)$/;"	f
wait_thread_status	mobibench_MFAW.c	/^void wait_thread_status(int thread_num, thread_status_t stat, pthread_cond_t* cond)$/;"	f
walBusyLock	sqlite3_MFAW.c	/^static int walBusyLock($/;"	f	file:
walCheckpoint	sqlite3_MFAW.c	/^static int walCheckpoint($/;"	f	file:
walChecksumBytes	sqlite3_MFAW.c	/^static void walChecksumBytes($/;"	f	file:
walCkptInfo	sqlite3_MFAW.c	/^static volatile WalCkptInfo *walCkptInfo(Wal *pWal){$/;"	f	file:
walCleanupHash	sqlite3_MFAW.c	/^static void walCleanupHash(Wal *pWal){$/;"	f	file:
walDecodeFrame	sqlite3_MFAW.c	/^static int walDecodeFrame($/;"	f	file:
walEncodeFrame	sqlite3_MFAW.c	/^static void walEncodeFrame($/;"	f	file:
walFrameOffset	sqlite3_MFAW.c	49374;"	d	file:
walFramePage	sqlite3_MFAW.c	/^static int walFramePage(u32 iFrame){$/;"	f	file:
walFramePgno	sqlite3_MFAW.c	/^static u32 walFramePgno(Wal *pWal, u32 iFrame){$/;"	f	file:
walHash	sqlite3_MFAW.c	/^static int walHash(u32 iPage){$/;"	f	file:
walHashGet	sqlite3_MFAW.c	/^static int walHashGet($/;"	f	file:
walIndexAppend	sqlite3_MFAW.c	/^static int walIndexAppend(Wal *pWal, u32 iFrame, u32 iPage){$/;"	f	file:
walIndexClose	sqlite3_MFAW.c	/^static void walIndexClose(Wal *pWal, int isDelete){$/;"	f	file:
walIndexHdr	sqlite3_MFAW.c	/^static volatile WalIndexHdr *walIndexHdr(Wal *pWal){$/;"	f	file:
walIndexPage	sqlite3_MFAW.c	/^static int walIndexPage(Wal *pWal, int iPage, volatile u32 **ppPage){$/;"	f	file:
walIndexReadHdr	sqlite3_MFAW.c	/^static int walIndexReadHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexRecover	sqlite3_MFAW.c	/^static int walIndexRecover(Wal *pWal){$/;"	f	file:
walIndexTryHdr	sqlite3_MFAW.c	/^static int walIndexTryHdr(Wal *pWal, int *pChanged){$/;"	f	file:
walIndexWriteHdr	sqlite3_MFAW.c	/^static void walIndexWriteHdr(Wal *pWal){$/;"	f	file:
walIteratorFree	sqlite3_MFAW.c	/^static void walIteratorFree(WalIterator *p){$/;"	f	file:
walIteratorInit	sqlite3_MFAW.c	/^static int walIteratorInit(Wal *pWal, WalIterator **pp){$/;"	f	file:
walIteratorNext	sqlite3_MFAW.c	/^static int walIteratorNext($/;"	f	file:
walLimitSize	sqlite3_MFAW.c	/^static void walLimitSize(Wal *pWal, i64 nMax){$/;"	f	file:
walLockExclusive	sqlite3_MFAW.c	/^static int walLockExclusive(Wal *pWal, int lockIdx, int n, int fBlock){$/;"	f	file:
walLockName	sqlite3_MFAW.c	/^static const char *walLockName(int lockIdx){$/;"	f	file:
walLockShared	sqlite3_MFAW.c	/^static int walLockShared(Wal *pWal, int lockIdx){$/;"	f	file:
walMerge	sqlite3_MFAW.c	/^static void walMerge($/;"	f	file:
walMergesort	sqlite3_MFAW.c	/^static void walMergesort($/;"	f	file:
walNextHash	sqlite3_MFAW.c	/^static int walNextHash(int iPriorHash){$/;"	f	file:
walPagesize	sqlite3_MFAW.c	/^static int walPagesize(Wal *pWal){$/;"	f	file:
walRestartHdr	sqlite3_MFAW.c	/^static void walRestartHdr(Wal *pWal, u32 salt1){$/;"	f	file:
walRestartLog	sqlite3_MFAW.c	/^static int walRestartLog(Wal *pWal){$/;"	f	file:
walShmBarrier	sqlite3_MFAW.c	/^static void walShmBarrier(Wal *pWal){$/;"	f	file:
walSyncFlags	sqlite3_MFAW.c	/^  u8 walSyncFlags;            \/* SYNC_NORMAL or SYNC_FULL for wal writes *\/$/;"	m	struct:Pager	file:
walTryBeginRead	sqlite3_MFAW.c	/^static int walTryBeginRead(Wal *pWal, int *pChanged, int useWal, int cnt){$/;"	f	file:
walUnlockExclusive	sqlite3_MFAW.c	/^static void walUnlockExclusive(Wal *pWal, int lockIdx, int n){$/;"	f	file:
walUnlockShared	sqlite3_MFAW.c	/^static void walUnlockShared(Wal *pWal, int lockIdx){$/;"	f	file:
walWriteOneFrame	sqlite3_MFAW.c	/^static int walWriteOneFrame($/;"	f	file:
walWriteToLog	sqlite3_MFAW.c	/^static int walWriteToLog($/;"	f	file:
wal_autocheckpoint	sqlite3_MFAW.c	/^  int (*wal_autocheckpoint)(sqlite3*,int);$/;"	m	struct:sqlite3_api_routines	file:
wal_checkpoint	sqlite3_MFAW.c	/^  int (*wal_checkpoint)(sqlite3*,const char*);$/;"	m	struct:sqlite3_api_routines	file:
wal_checkpoint_v2	sqlite3_MFAW.c	/^  int (*wal_checkpoint_v2)(sqlite3*,const char*,int,int*,int*);$/;"	m	struct:sqlite3_api_routines	file:
wal_hook	sqlite3_MFAW.c	/^  void *(*wal_hook)(sqlite3*,int(*)(void*,sqlite3*,const char*,int),void*);$/;"	m	struct:sqlite3_api_routines	file:
walkerDepth	sqlite3_MFAW.c	/^  int walkerDepth;                          \/* Number of subqueries *\/$/;"	m	struct:Walker	file:
wantToLock	sqlite3_MFAW.c	/^  int wantToLock;    \/* Number of nested calls to sqlite3BtreeEnter() *\/$/;"	m	struct:Btree	file:
wc	sqlite3_MFAW.c	/^  WhereClause wc;          \/* Decomposition into subterms *\/$/;"	m	struct:WhereOrInfo	file:
wc	sqlite3_MFAW.c	/^  WhereClause wc;          \/* The subexpression broken out *\/$/;"	m	struct:WhereAndInfo	file:
wctrlFlags	sqlite3_MFAW.c	/^  u16 wctrlFlags;           \/* Flags originally passed to sqlite3WhereBegin() *\/$/;"	m	struct:WhereInfo	file:
whereAndInfoDelete	sqlite3_MFAW.c	/^static void whereAndInfoDelete(sqlite3 *db, WhereAndInfo *p){$/;"	f	file:
whereClauseClear	sqlite3_MFAW.c	/^static void whereClauseClear(WhereClause *pWC){$/;"	f	file:
whereClauseInit	sqlite3_MFAW.c	/^static void whereClauseInit($/;"	f	file:
whereClauseInsert	sqlite3_MFAW.c	/^static int whereClauseInsert(WhereClause *pWC, Expr *p, u16 wtFlags){$/;"	f	file:
whereCombineDisjuncts	sqlite3_MFAW.c	/^static void whereCombineDisjuncts($/;"	f	file:
whereEqualScanEst	sqlite3_MFAW.c	/^static int whereEqualScanEst($/;"	f	file:
whereForeignKeys	sqlite3_MFAW.c	/^static char *whereForeignKeys(Parse *pParse, Table *pTab){$/;"	f	file:
whereInScanEst	sqlite3_MFAW.c	/^static int whereInScanEst($/;"	f	file:
whereInfoFree	sqlite3_MFAW.c	/^static void whereInfoFree(sqlite3 *db, WhereInfo *pWInfo){$/;"	f	file:
whereKeyStats	sqlite3_MFAW.c	/^static int whereKeyStats($/;"	f	file:
whereLikeOptimizationStringFixup	sqlite3_MFAW.c	/^static void whereLikeOptimizationStringFixup($/;"	f	file:
whereLoopAddAll	sqlite3_MFAW.c	/^static int whereLoopAddAll(WhereLoopBuilder *pBuilder){$/;"	f	file:
whereLoopAddBtree	sqlite3_MFAW.c	/^static int whereLoopAddBtree($/;"	f	file:
whereLoopAddBtreeIndex	sqlite3_MFAW.c	/^static int whereLoopAddBtreeIndex($/;"	f	file:
whereLoopAddOr	sqlite3_MFAW.c	/^static int whereLoopAddOr(WhereLoopBuilder *pBuilder, Bitmask mExtra){$/;"	f	file:
whereLoopAddVirtual	sqlite3_MFAW.c	/^static int whereLoopAddVirtual($/;"	f	file:
whereLoopAdjustCost	sqlite3_MFAW.c	/^static void whereLoopAdjustCost(const WhereLoop *p, WhereLoop *pTemplate){$/;"	f	file:
whereLoopCheaperProperSubset	sqlite3_MFAW.c	/^static int whereLoopCheaperProperSubset($/;"	f	file:
whereLoopClear	sqlite3_MFAW.c	/^static void whereLoopClear(sqlite3 *db, WhereLoop *p){$/;"	f	file:
whereLoopClearUnion	sqlite3_MFAW.c	/^static void whereLoopClearUnion(sqlite3 *db, WhereLoop *p){$/;"	f	file:
whereLoopDelete	sqlite3_MFAW.c	/^static void whereLoopDelete(sqlite3 *db, WhereLoop *p){$/;"	f	file:
whereLoopFindLesser	sqlite3_MFAW.c	/^static WhereLoop **whereLoopFindLesser($/;"	f	file:
whereLoopInit	sqlite3_MFAW.c	/^static void whereLoopInit(WhereLoop *p){$/;"	f	file:
whereLoopInsert	sqlite3_MFAW.c	/^static int whereLoopInsert(WhereLoopBuilder *pBuilder, WhereLoop *pTemplate){$/;"	f	file:
whereLoopOutputAdjust	sqlite3_MFAW.c	/^static void whereLoopOutputAdjust($/;"	f	file:
whereLoopPrint	sqlite3_MFAW.c	/^static void whereLoopPrint(WhereLoop *p, WhereClause *pWC){$/;"	f	file:
whereLoopResize	sqlite3_MFAW.c	/^static int whereLoopResize(sqlite3 *db, WhereLoop *p, int n){$/;"	f	file:
whereLoopXfer	sqlite3_MFAW.c	/^static int whereLoopXfer(sqlite3 *db, WhereLoop *pTo, WhereLoop *pFrom){$/;"	f	file:
whereNthSubterm	sqlite3_MFAW.c	/^static WhereTerm *whereNthSubterm(WhereTerm *pTerm, int N){$/;"	f	file:
whereOrInfoDelete	sqlite3_MFAW.c	/^static void whereOrInfoDelete(sqlite3 *db, WhereOrInfo *p){$/;"	f	file:
whereOrInsert	sqlite3_MFAW.c	/^static int whereOrInsert($/;"	f	file:
whereOrMove	sqlite3_MFAW.c	/^static void whereOrMove(WhereOrSet *pDest, WhereOrSet *pSrc){$/;"	f	file:
whereOrName	sqlite3_MFAW.c	/^static char *whereOrName(sqlite3 *db, char *zWhere, char *zConstant){$/;"	f	file:
wherePathName	sqlite3_MFAW.c	/^static const char *wherePathName(WherePath *pPath, int nLoop, WhereLoop *pLast){$/;"	f	file:
wherePathSatisfiesOrderBy	sqlite3_MFAW.c	/^static i8 wherePathSatisfiesOrderBy($/;"	f	file:
wherePathSolver	sqlite3_MFAW.c	/^static int wherePathSolver(WhereInfo *pWInfo, LogEst nRowEst){$/;"	f	file:
whereRangeAdjust	sqlite3_MFAW.c	/^static LogEst whereRangeAdjust(WhereTerm *pTerm, LogEst nNew){$/;"	f	file:
whereRangeScanEst	sqlite3_MFAW.c	/^static int whereRangeScanEst($/;"	f	file:
whereRangeSkipScanEst	sqlite3_MFAW.c	/^static int whereRangeSkipScanEst($/;"	f	file:
whereScanInit	sqlite3_MFAW.c	/^static WhereTerm *whereScanInit($/;"	f	file:
whereScanNext	sqlite3_MFAW.c	/^static WhereTerm *whereScanNext(WhereScan *pScan){$/;"	f	file:
whereShortCut	sqlite3_MFAW.c	/^static int whereShortCut(WhereLoopBuilder *pBuilder){$/;"	f	file:
whereSortingCost	sqlite3_MFAW.c	/^static LogEst whereSortingCost($/;"	f	file:
whereSplit	sqlite3_MFAW.c	/^static void whereSplit(WhereClause *pWC, Expr *pExpr, u8 op){$/;"	f	file:
whereTempTriggers	sqlite3_MFAW.c	/^static char *whereTempTriggers(Parse *pParse, Table *pTab){$/;"	f	file:
whereTermPrint	sqlite3_MFAW.c	/^static void whereTermPrint(WhereTerm *pTerm, int iTerm){$/;"	f	file:
whereUsablePartialIndex	sqlite3_MFAW.c	/^static int whereUsablePartialIndex(int iTab, WhereClause *pWC, Expr *pWhere){$/;"	f	file:
winAccess	sqlite3_MFAW.c	/^static int winAccess($/;"	f	file:
winCheckReservedLock	sqlite3_MFAW.c	/^static int winCheckReservedLock(sqlite3_file *id, int *pResOut){$/;"	f	file:
winClose	sqlite3_MFAW.c	/^static int winClose(sqlite3_file *id){$/;"	f	file:
winConvertFromUtf8Filename	sqlite3_MFAW.c	/^static void *winConvertFromUtf8Filename(const char *zFilename){$/;"	f	file:
winConvertToUtf8Filename	sqlite3_MFAW.c	/^static char *winConvertToUtf8Filename(const void *zFilename){$/;"	f	file:
winCurrentTime	sqlite3_MFAW.c	/^static int winCurrentTime(sqlite3_vfs *pVfs, double *prNow){$/;"	f	file:
winCurrentTimeInt64	sqlite3_MFAW.c	/^static int winCurrentTimeInt64(sqlite3_vfs *pVfs, sqlite3_int64 *piNow){$/;"	f	file:
winDelete	sqlite3_MFAW.c	/^static int winDelete($/;"	f	file:
winDeviceCharacteristics	sqlite3_MFAW.c	/^static int winDeviceCharacteristics(sqlite3_file *id){$/;"	f	file:
winDlClose	sqlite3_MFAW.c	/^static void winDlClose(sqlite3_vfs *pVfs, void *pHandle){$/;"	f	file:
winDlClose	sqlite3_MFAW.c	38601;"	d	file:
winDlError	sqlite3_MFAW.c	/^static void winDlError(sqlite3_vfs *pVfs, int nBuf, char *zBufOut){$/;"	f	file:
winDlError	sqlite3_MFAW.c	38599;"	d	file:
winDlOpen	sqlite3_MFAW.c	/^static void *winDlOpen(sqlite3_vfs *pVfs, const char *zFilename){$/;"	f	file:
winDlOpen	sqlite3_MFAW.c	38598;"	d	file:
winDlSym	sqlite3_MFAW.c	/^static void (*winDlSym(sqlite3_vfs *pVfs,void *pH,const char *zSym))(void){$/;"	f	file:
winDlSym	sqlite3_MFAW.c	38600;"	d	file:
winFetch	sqlite3_MFAW.c	/^static int winFetch(sqlite3_file *fd, i64 iOff, int nAmt, void **pp){$/;"	f	file:
winFile	sqlite3_MFAW.c	/^struct winFile {$/;"	s	file:
winFile	sqlite3_MFAW.c	/^typedef struct winFile winFile;$/;"	t	typeref:struct:winFile	file:
winFileControl	sqlite3_MFAW.c	/^static int winFileControl(sqlite3_file *id, int op, void *pArg){$/;"	f	file:
winFileSize	sqlite3_MFAW.c	/^static int winFileSize(sqlite3_file *id, sqlite3_int64 *pSize){$/;"	f	file:
winFullPathname	sqlite3_MFAW.c	/^static int winFullPathname($/;"	f	file:
winGetDirSep	sqlite3_MFAW.c	33402;"	d	file:
winGetLastError	sqlite3_MFAW.c	/^static int winGetLastError(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winGetLastErrorMsg	sqlite3_MFAW.c	/^static int winGetLastErrorMsg(DWORD lastErrno, int nBuf, char *zBuf){$/;"	f	file:
winGetReadLock	sqlite3_MFAW.c	/^static int winGetReadLock(winFile *pFile){$/;"	f	file:
winGetSystemCall	sqlite3_MFAW.c	/^static sqlite3_syscall_ptr winGetSystemCall($/;"	f	file:
winGetTempname	sqlite3_MFAW.c	/^static int winGetTempname(sqlite3_vfs *pVfs, char **pzBuf){$/;"	f	file:
winIoMethod	sqlite3_MFAW.c	/^static const sqlite3_io_methods winIoMethod = {$/;"	v	file:
winIoerrCanRetry1	sqlite3_MFAW.c	35173;"	d	file:
winIoerrRetry	sqlite3_MFAW.c	/^static int winIoerrRetry = SQLITE_WIN32_IOERR_RETRY;$/;"	v	file:
winIoerrRetryDelay	sqlite3_MFAW.c	/^static int winIoerrRetryDelay = SQLITE_WIN32_IOERR_RETRY_DELAY;$/;"	v	file:
winIsDir	sqlite3_MFAW.c	/^static int winIsDir(const void *zConverted){$/;"	f	file:
winIsDirSep	sqlite3_MFAW.c	33387;"	d	file:
winIsDriveLetterAndColon	sqlite3_MFAW.c	/^static BOOL winIsDriveLetterAndColon($/;"	f	file:
winIsVerbatimPathname	sqlite3_MFAW.c	/^static BOOL winIsVerbatimPathname($/;"	f	file:
winLock	sqlite3_MFAW.c	/^static int winLock(sqlite3_file *id, int locktype){$/;"	f	file:
winLockFile	sqlite3_MFAW.c	/^static BOOL winLockFile($/;"	f	file:
winLogError	sqlite3_MFAW.c	35116;"	d	file:
winLogErrorAtLine	sqlite3_MFAW.c	/^static int winLogErrorAtLine($/;"	f	file:
winLogIoerr	sqlite3_MFAW.c	/^static void winLogIoerr(int nRetry, int lineno){$/;"	f	file:
winMakeEndInDirSep	sqlite3_MFAW.c	/^static int winMakeEndInDirSep(int nBuf, char *zBuf){$/;"	f	file:
winMapfile	sqlite3_MFAW.c	/^static int winMapfile(winFile *pFd, sqlite3_int64 nByte){$/;"	f	file:
winMbcsToUnicode	sqlite3_MFAW.c	/^static LPWSTR winMbcsToUnicode(const char *zFilename){$/;"	f	file:
winMemAssertMagic	sqlite3_MFAW.c	33624;"	d	file:
winMemAssertMagic	sqlite3_MFAW.c	33626;"	d	file:
winMemAssertMagic1	sqlite3_MFAW.c	33622;"	d	file:
winMemAssertMagic2	sqlite3_MFAW.c	33623;"	d	file:
winMemData	sqlite3_MFAW.c	/^struct winMemData {$/;"	s	file:
winMemData	sqlite3_MFAW.c	/^typedef struct winMemData winMemData;$/;"	t	typeref:struct:winMemData	file:
winMemFree	sqlite3_MFAW.c	/^static void winMemFree(void *pPrior){$/;"	f	file:
winMemGetDataPtr	sqlite3_MFAW.c	33629;"	d	file:
winMemGetHeap	sqlite3_MFAW.c	33630;"	d	file:
winMemGetOwned	sqlite3_MFAW.c	33631;"	d	file:
winMemInit	sqlite3_MFAW.c	/^static int winMemInit(void *pAppData){$/;"	f	file:
winMemMalloc	sqlite3_MFAW.c	/^static void *winMemMalloc(int nBytes){$/;"	f	file:
winMemRealloc	sqlite3_MFAW.c	/^static void *winMemRealloc(void *pPrior, int nBytes){$/;"	f	file:
winMemRoundup	sqlite3_MFAW.c	/^static int winMemRoundup(int n){$/;"	f	file:
winMemShutdown	sqlite3_MFAW.c	/^static void winMemShutdown(void *pAppData){$/;"	f	file:
winMemSize	sqlite3_MFAW.c	/^static int winMemSize(void *p){$/;"	f	file:
winModeBit	sqlite3_MFAW.c	/^static void winModeBit(winFile *pFile, unsigned char mask, int *pArg){$/;"	f	file:
winMutexAlloc	sqlite3_MFAW.c	/^static sqlite3_mutex *winMutexAlloc(int iType){$/;"	f	file:
winMutexEnd	sqlite3_MFAW.c	/^static int winMutexEnd(void){$/;"	f	file:
winMutexEnter	sqlite3_MFAW.c	/^static void winMutexEnter(sqlite3_mutex *p){$/;"	f	file:
winMutexFree	sqlite3_MFAW.c	/^static void winMutexFree(sqlite3_mutex *p){$/;"	f	file:
winMutexHeld	sqlite3_MFAW.c	/^static int winMutexHeld(sqlite3_mutex *p){$/;"	f	file:
winMutexInit	sqlite3_MFAW.c	/^static int winMutexInit(void){$/;"	f	file:
winMutexLeave	sqlite3_MFAW.c	/^static void winMutexLeave(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld	sqlite3_MFAW.c	/^static int winMutexNotheld(sqlite3_mutex *p){$/;"	f	file:
winMutexNotheld2	sqlite3_MFAW.c	/^static int winMutexNotheld2(sqlite3_mutex *p, DWORD tid){$/;"	f	file:
winMutexTry	sqlite3_MFAW.c	/^static int winMutexTry(sqlite3_mutex *p){$/;"	f	file:
winMutex_isInit	sqlite3_MFAW.c	/^static int winMutex_isInit = 0;$/;"	v	file:
winMutex_isNt	sqlite3_MFAW.c	/^static int winMutex_isNt = -1; \/* <0 means "need to query" *\/$/;"	v	file:
winMutex_lock	sqlite3_MFAW.c	/^static LONG SQLITE_WIN32_VOLATILE winMutex_lock = 0;$/;"	v	file:
winMutex_staticMutexes	sqlite3_MFAW.c	/^static sqlite3_mutex winMutex_staticMutexes[] = {$/;"	v	file:
winNextSystemCall	sqlite3_MFAW.c	/^static const char *winNextSystemCall(sqlite3_vfs *p, const char *zName){$/;"	f	file:
winOpen	sqlite3_MFAW.c	/^static int winOpen($/;"	f	file:
winOpenSharedMemory	sqlite3_MFAW.c	/^static int winOpenSharedMemory(winFile *pDbFd){$/;"	f	file:
winRandomness	sqlite3_MFAW.c	/^static int winRandomness(sqlite3_vfs *pVfs, int nBuf, char *zBuf){$/;"	f	file:
winRead	sqlite3_MFAW.c	/^static int winRead($/;"	f	file:
winRetryIoerr	sqlite3_MFAW.c	/^static int winRetryIoerr(int *pnRetry, DWORD *pError){$/;"	f	file:
winSectorSize	sqlite3_MFAW.c	/^static int winSectorSize(sqlite3_file *id){$/;"	f	file:
winSeekFile	sqlite3_MFAW.c	/^static int winSeekFile(winFile *pFile, sqlite3_int64 iOffset){$/;"	f	file:
winSetSystemCall	sqlite3_MFAW.c	/^static int winSetSystemCall($/;"	f	file:
winShm	sqlite3_MFAW.c	/^struct winShm {$/;"	s	file:
winShm	sqlite3_MFAW.c	/^typedef struct winShm winShm;           \/* A connection to shared-memory *\/$/;"	t	typeref:struct:winShm	file:
winShmBarrier	sqlite3_MFAW.c	/^static void winShmBarrier($/;"	f	file:
winShmBarrier	sqlite3_MFAW.c	37239;"	d	file:
winShmEnterMutex	sqlite3_MFAW.c	/^static void winShmEnterMutex(void){$/;"	f	file:
winShmLeaveMutex	sqlite3_MFAW.c	/^static void winShmLeaveMutex(void){$/;"	f	file:
winShmLock	sqlite3_MFAW.c	/^static int winShmLock($/;"	f	file:
winShmLock	sqlite3_MFAW.c	37238;"	d	file:
winShmMap	sqlite3_MFAW.c	/^static int winShmMap($/;"	f	file:
winShmMap	sqlite3_MFAW.c	37237;"	d	file:
winShmMutexHeld	sqlite3_MFAW.c	/^static int winShmMutexHeld(void) {$/;"	f	file:
winShmNode	sqlite3_MFAW.c	/^struct winShmNode {$/;"	s	file:
winShmNode	sqlite3_MFAW.c	/^typedef struct winShmNode winShmNode;   \/* A region of shared-memory *\/$/;"	t	typeref:struct:winShmNode	file:
winShmNodeList	sqlite3_MFAW.c	/^static winShmNode *winShmNodeList = 0;$/;"	v	file:
winShmPurge	sqlite3_MFAW.c	/^static void winShmPurge(sqlite3_vfs *pVfs, int deleteFlag){$/;"	f	file:
winShmSystemLock	sqlite3_MFAW.c	/^static int winShmSystemLock($/;"	f	file:
winShmUnmap	sqlite3_MFAW.c	/^static int winShmUnmap($/;"	f	file:
winShmUnmap	sqlite3_MFAW.c	37240;"	d	file:
winSleep	sqlite3_MFAW.c	/^static int winSleep(sqlite3_vfs *pVfs, int microsec){$/;"	f	file:
winSync	sqlite3_MFAW.c	/^static int winSync(sqlite3_file *id, int flags){$/;"	f	file:
winSysInfo	sqlite3_MFAW.c	/^static SYSTEM_INFO winSysInfo;$/;"	v	file:
winTruncate	sqlite3_MFAW.c	/^static int winTruncate(sqlite3_file *id, sqlite3_int64 nByte){$/;"	f	file:
winUnfetch	sqlite3_MFAW.c	/^static int winUnfetch(sqlite3_file *fd, i64 iOff, void *p){$/;"	f	file:
winUnicodeToMbcs	sqlite3_MFAW.c	/^static char *winUnicodeToMbcs(LPCWSTR zWideFilename){$/;"	f	file:
winUnicodeToUtf8	sqlite3_MFAW.c	/^static char *winUnicodeToUtf8(LPCWSTR zWideFilename){$/;"	f	file:
winUnlock	sqlite3_MFAW.c	/^static int winUnlock(sqlite3_file *id, int locktype){$/;"	f	file:
winUnlockFile	sqlite3_MFAW.c	/^static BOOL winUnlockFile($/;"	f	file:
winUnlockReadLock	sqlite3_MFAW.c	/^static int winUnlockReadLock(winFile *pFile){$/;"	f	file:
winUnmapfile	sqlite3_MFAW.c	/^static int winUnmapfile(winFile *pFile){$/;"	f	file:
winUtf8ToUnicode	sqlite3_MFAW.c	/^static LPWSTR winUtf8ToUnicode(const char *zFilename){$/;"	f	file:
winWrite	sqlite3_MFAW.c	/^static int winWrite($/;"	f	file:
win_mem_data	sqlite3_MFAW.c	/^static struct winMemData win_mem_data = {$/;"	v	typeref:struct:winMemData	file:
win_syscall	sqlite3_MFAW.c	/^static struct win_syscall {$/;"	s	file:
winceCreateLock	sqlite3_MFAW.c	/^static int winceCreateLock(const char *zFilename, winFile *pFile){$/;"	f	file:
winceDestroyLock	sqlite3_MFAW.c	/^static void winceDestroyLock(winFile *pFile){$/;"	f	file:
winceLock	sqlite3_MFAW.c	/^typedef struct winceLock {$/;"	s	file:
winceLock	sqlite3_MFAW.c	/^} winceLock;$/;"	t	typeref:struct:winceLock	file:
winceLockFile	sqlite3_MFAW.c	/^static BOOL winceLockFile($/;"	f	file:
winceMutexAcquire	sqlite3_MFAW.c	/^static void winceMutexAcquire(HANDLE h){$/;"	f	file:
winceMutexRelease	sqlite3_MFAW.c	35272;"	d	file:
winceUnlockFile	sqlite3_MFAW.c	/^static BOOL winceUnlockFile($/;"	f	file:
withDup	sqlite3_MFAW.c	/^static With *withDup(sqlite3 *db, With *p){$/;"	f	file:
withDup	sqlite3_MFAW.c	83841;"	d	file:
withExpand	sqlite3_MFAW.c	/^static int withExpand($/;"	f	file:
write32bits	sqlite3_MFAW.c	/^static int write32bits(sqlite3_file *fd, i64 offset, u32 val){$/;"	f	file:
writeCoord	sqlite3_MFAW.c	/^static int writeCoord(u8 *p, RtreeCoord *pCoord){$/;"	f	file:
writeInt16	sqlite3_MFAW.c	/^static int writeInt16(u8 *p, int i){$/;"	f	file:
writeInt64	sqlite3_MFAW.c	/^static int writeInt64(u8 *p, i64 i){$/;"	f	file:
writeJournalHdr	sqlite3_MFAW.c	/^static int writeJournalHdr(Pager *pPager){$/;"	f	file:
writeLock	sqlite3_MFAW.c	/^  u8 writeLock;              \/* True if in a write transaction *\/$/;"	m	struct:Wal	file:
writeMask	sqlite3_MFAW.c	/^  yDbMask writeMask;   \/* Start a write transaction on these databases *\/$/;"	m	struct:Parse	file:
writeMasterJournal	sqlite3_MFAW.c	/^static int writeMasterJournal(Pager *pPager, const char *zMaster){$/;"	f	file:
write_size	mobibench.c	/^	int write_size;$/;"	m	struct:script_thread_time	file:
write_size	mobibench_MFAW.c	/^	int write_size;$/;"	m	struct:script_thread_time	file:
wsFlags	sqlite3_MFAW.c	/^  u32 wsFlags;          \/* WHERE_* flags describing the plan *\/$/;"	m	struct:WhereLoop	file:
wsdAutoext	sqlite3_MFAW.c	103068;"	d	file:
wsdAutoext	sqlite3_MFAW.c	103071;"	d	file:
wsdAutoextInit	sqlite3_MFAW.c	103066;"	d	file:
wsdAutoextInit	sqlite3_MFAW.c	103070;"	d	file:
wsdHooks	sqlite3_MFAW.c	16915;"	d	file:
wsdHooks	sqlite3_MFAW.c	16918;"	d	file:
wsdHooksInit	sqlite3_MFAW.c	16913;"	d	file:
wsdHooksInit	sqlite3_MFAW.c	16917;"	d	file:
wsdPrng	sqlite3_MFAW.c	22543;"	d	file:
wsdStat	sqlite3_MFAW.c	15046;"	d	file:
wsdStat	sqlite3_MFAW.c	15049;"	d	file:
wsdStatInit	sqlite3_MFAW.c	15045;"	d	file:
wsdStatInit	sqlite3_MFAW.c	15048;"	d	file:
wtFlags	sqlite3_MFAW.c	/^  u16 wtFlags;            \/* TERM_xxx bit flags.  See below *\/$/;"	m	struct:WhereTerm	file:
x	sqlite3_MFAW.c	/^      } x;$/;"	m	union:ExprList::ExprList_item::__anon5	typeref:struct:ExprList::ExprList_item::__anon5::__anon6	file:
x	sqlite3_MFAW.c	/^  } x;$/;"	m	struct:Expr	typeref:union:Expr::__anon4	file:
xAccess	sqlite3_MFAW.c	/^  int (*xAccess)(sqlite3_vfs*, const char *zName, int flags, int *pResOut);$/;"	m	struct:sqlite3_vfs	file:
xAdvance	sqlite3_MFAW.c	/^    int (*xAdvance)(BtCursor *, int *);$/;"	m	union:VdbeOp::__anon1	file:
xAuth	sqlite3_MFAW.c	/^  sqlite3_xauth xAuth;          \/* Access authorization function *\/$/;"	m	struct:sqlite3	file:
xBacktrace	sqlite3_MFAW.c	/^  void (*xBacktrace)(int, int, void **);$/;"	m	struct:__anon9	file:
xBegin	sqlite3_MFAW.c	/^  int (*xBegin)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xBenignBegin	sqlite3_MFAW.c	/^  void (*xBenignBegin)(void);$/;"	m	struct:BenignMallocHooks	file:
xBenignEnd	sqlite3_MFAW.c	/^  void (*xBenignEnd)(void);$/;"	m	struct:BenignMallocHooks	file:
xBestIndex	sqlite3_MFAW.c	/^  int (*xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info*);$/;"	m	struct:sqlite3_module	file:
xBusyHandler	sqlite3_MFAW.c	/^  int (*xBusyHandler)(void*); \/* Function to call when busy *\/$/;"	m	struct:Pager	file:
xCachesize	sqlite3_MFAW.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods	file:
xCachesize	sqlite3_MFAW.c	/^  void (*xCachesize)(sqlite3_pcache*, int nCachesize);$/;"	m	struct:sqlite3_pcache_methods2	file:
xCheckReservedLock	sqlite3_MFAW.c	/^  int (*xCheckReservedLock)(sqlite3_file*, int *pResOut);$/;"	m	struct:sqlite3_io_methods	file:
xClose	sqlite3_MFAW.c	/^  int (*xClose)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xClose	sqlite3_MFAW.c	/^  int (*xClose)(sqlite3_tokenizer_cursor *pCursor);$/;"	m	struct:sqlite3_tokenizer_module	file:
xClose	sqlite3_MFAW.c	/^  int (*xClose)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xCmp	sqlite3_MFAW.c	/^  int (*xCmp)(void*,int, const void*, int, const void*);$/;"	m	struct:CollSeq	file:
xCodec	sqlite3_MFAW.c	/^  void *(*xCodec)(void*,void*,Pgno,int); \/* Routine for en\/decoding data *\/$/;"	m	struct:Pager	file:
xCodecFree	sqlite3_MFAW.c	/^  void (*xCodecFree)(void*);             \/* Destructor for the codec *\/$/;"	m	struct:Pager	file:
xCodecSizeChng	sqlite3_MFAW.c	/^  void (*xCodecSizeChng)(void*,int,int); \/* Notify of page size changes *\/$/;"	m	struct:Pager	file:
xCollNeeded	sqlite3_MFAW.c	/^  void(*xCollNeeded)(void*,sqlite3*,int eTextRep,const char*);$/;"	m	struct:sqlite3	file:
xCollNeeded16	sqlite3_MFAW.c	/^  void(*xCollNeeded16)(void*,sqlite3*,int eTextRep,const void*);$/;"	m	struct:sqlite3	file:
xColumn	sqlite3_MFAW.c	/^  int (*xColumn)(sqlite3_vtab_cursor*, sqlite3_context*, int);$/;"	m	struct:sqlite3_module	file:
xCommit	sqlite3_MFAW.c	/^  int (*xCommit)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xCommitCallback	sqlite3_MFAW.c	/^  int (*xCommitCallback)(void*);    \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:
xCompare	sqlite3_MFAW.c	/^  SorterCompare xCompare;         \/* Compare function to use *\/$/;"	m	struct:SortSubtask	file:
xConnect	sqlite3_MFAW.c	/^  int (*xConnect)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:
xCreate	sqlite3_MFAW.c	/^  int (*xCreate)($/;"	m	struct:sqlite3_tokenizer_module	file:
xCreate	sqlite3_MFAW.c	/^  int (*xCreate)(sqlite3*, void *pAux,$/;"	m	struct:sqlite3_module	file:
xCreate	sqlite3_MFAW.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods	file:
xCreate	sqlite3_MFAW.c	/^  sqlite3_pcache *(*xCreate)(int szPage, int szExtra, int bPurgeable);$/;"	m	struct:sqlite3_pcache_methods2	file:
xCurrentTime	sqlite3_MFAW.c	/^  int (*xCurrentTime)(sqlite3_vfs*, double*);$/;"	m	struct:sqlite3_vfs	file:
xCurrentTimeInt64	sqlite3_MFAW.c	/^  int (*xCurrentTimeInt64)(sqlite3_vfs*, sqlite3_int64*);$/;"	m	struct:sqlite3_vfs	file:
xDel	sqlite3_MFAW.c	/^  void (*xDel)(void*);  \/* Destructor for pUser *\/$/;"	m	struct:CollSeq	file:
xDel	sqlite3_MFAW.c	/^  void (*xDel)(void*);\/* Destructor for Mem.z - only valid if MEM_Dyn *\/$/;"	m	struct:Mem	file:
xDelUser	sqlite3_MFAW.c	/^  void (*xDelUser)(void *);       \/* Called by SQLite to clean up pUser *\/$/;"	m	struct:sqlite3_rtree_geometry	file:
xDelUser	sqlite3_MFAW.c	/^  void (*xDelUser)(void*);          \/* function to free pUser *\/$/;"	m	struct:sqlite3_rtree_query_info	file:
xDelete	sqlite3_MFAW.c	/^  int (*xDelete)(sqlite3_vfs*, const char *zName, int syncDir);$/;"	m	struct:sqlite3_vfs	file:
xDelete	sqlite3_MFAW.c	/^  void (*xDelete)(void *);        \/* Destructor for the aux data *\/$/;"	m	struct:AuxData	file:
xDestroy	sqlite3_MFAW.c	/^  int (*xDestroy)(sqlite3_tokenizer *pTokenizer);$/;"	m	struct:sqlite3_tokenizer_module	file:
xDestroy	sqlite3_MFAW.c	/^  int (*xDestroy)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xDestroy	sqlite3_MFAW.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:
xDestroy	sqlite3_MFAW.c	/^  void (*xDestroy)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xDestroy	sqlite3_MFAW.c	/^  void (*xDestroy)(void *);            \/* Module destructor function *\/$/;"	m	struct:Module	file:
xDestroy	sqlite3_MFAW.c	/^  void (*xDestroy)(void *);$/;"	m	struct:FuncDestructor	file:
xDestructor	sqlite3_MFAW.c	/^  void (*xDestructor)(void*);$/;"	m	struct:RtreeGeomCallback	file:
xDeviceCharacteristics	sqlite3_MFAW.c	/^  int (*xDeviceCharacteristics)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xDisconnect	sqlite3_MFAW.c	/^  int (*xDisconnect)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xDlClose	sqlite3_MFAW.c	/^  void (*xDlClose)(sqlite3_vfs*, void*);$/;"	m	struct:sqlite3_vfs	file:
xDlError	sqlite3_MFAW.c	/^  void (*xDlError)(sqlite3_vfs*, int nByte, char *zErrMsg);$/;"	m	struct:sqlite3_vfs	file:
xDlOpen	sqlite3_MFAW.c	/^  void *(*xDlOpen)(sqlite3_vfs*, const char *zFilename);$/;"	m	struct:sqlite3_vfs	file:
xEof	sqlite3_MFAW.c	/^  int (*xEof)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xExprCallback	sqlite3_MFAW.c	/^  int (*xExprCallback)(Walker*, Expr*);     \/* Callback for expressions *\/$/;"	m	struct:Walker	file:
xFetch	sqlite3_MFAW.c	/^  int (*xFetch)(sqlite3_file*, sqlite3_int64 iOfst, int iAmt, void **pp);$/;"	m	struct:sqlite3_io_methods	file:
xFetch	sqlite3_MFAW.c	/^  sqlite3_pcache_page *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods2	file:
xFetch	sqlite3_MFAW.c	/^  void *(*xFetch)(sqlite3_pcache*, unsigned key, int createFlag);$/;"	m	struct:sqlite3_pcache_methods	file:
xFileControl	sqlite3_MFAW.c	/^  int (*xFileControl)(sqlite3_file*, int op, void *pArg);$/;"	m	struct:sqlite3_io_methods	file:
xFileSize	sqlite3_MFAW.c	/^  int (*xFileSize)(sqlite3_file*, sqlite3_int64 *pSize);$/;"	m	struct:sqlite3_io_methods	file:
xFilter	sqlite3_MFAW.c	/^  int (*xFilter)(sqlite3_vtab_cursor*, int idxNum, const char *idxStr,$/;"	m	struct:sqlite3_module	file:
xFinalize	sqlite3_MFAW.c	/^  void (*xFinalize)(sqlite3_context*);                \/* Aggregate finalizer *\/$/;"	m	struct:FuncDef	file:
xFindFunction	sqlite3_MFAW.c	/^  int (*xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName,$/;"	m	struct:sqlite3_module	file:
xFree	sqlite3_MFAW.c	/^  void (*xFree)(void*);          \/* Free a prior allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xFree	sqlite3_MFAW.c	/^static void xFree(void *p){$/;"	f	file:
xFreeSchema	sqlite3_MFAW.c	/^  void (*xFreeSchema)(void*);  \/* Destructor for BtShared.pSchema *\/$/;"	m	struct:BtShared	file:
xFullPathname	sqlite3_MFAW.c	/^  int (*xFullPathname)(sqlite3_vfs*, const char *zName, int nOut, char *zOut);$/;"	m	struct:sqlite3_vfs	file:
xFunc	sqlite3_MFAW.c	/^  int (*xFunc)(void *,int);  \/* The busy callback *\/$/;"	m	struct:BusyHandler	file:
xFunc	sqlite3_MFAW.c	/^  void (*xFunc)(sqlite3_context*,int,sqlite3_value**); \/* Regular function *\/$/;"	m	struct:FuncDef	file:
xGeom	sqlite3_MFAW.c	/^    int (*xGeom)(sqlite3_rtree_geometry*,int,RtreeDValue*,int*);$/;"	m	union:RtreeConstraint::__anon25	file:
xGeom	sqlite3_MFAW.c	/^  int (*xGeom)(sqlite3_rtree_geometry*, int, RtreeDValue*, int*);$/;"	m	struct:RtreeGeomCallback	file:
xGetLastError	sqlite3_MFAW.c	/^  int (*xGetLastError)(sqlite3_vfs*, int, char *);$/;"	m	struct:sqlite3_vfs	file:
xGetSystemCall	sqlite3_MFAW.c	/^  sqlite3_syscall_ptr (*xGetSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	file:
xInit	sqlite3_MFAW.c	/^  int (*xInit)(void*);           \/* Initialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:
xInit	sqlite3_MFAW.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:
xInit	sqlite3_MFAW.c	/^  int (*xInit)(void*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xLanguageid	sqlite3_MFAW.c	/^  int (*xLanguageid)(sqlite3_tokenizer_cursor *pCsr, int iLangid);$/;"	m	struct:sqlite3_tokenizer_module	file:
xLock	sqlite3_MFAW.c	/^  int (*xLock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:
xLog	sqlite3_MFAW.c	/^  void (*xLog)(void*,int,const char*); \/* Function for logging *\/$/;"	m	struct:Sqlite3Config	file:
xMalloc	sqlite3_MFAW.c	/^  void *(*xMalloc)(int);         \/* Memory allocation function *\/$/;"	m	struct:sqlite3_mem_methods	file:
xMutexAlloc	sqlite3_MFAW.c	/^  sqlite3_mutex *(*xMutexAlloc)(int);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexEnd	sqlite3_MFAW.c	/^  int (*xMutexEnd)(void);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexEnter	sqlite3_MFAW.c	/^  void (*xMutexEnter)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexFree	sqlite3_MFAW.c	/^  void (*xMutexFree)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexHeld	sqlite3_MFAW.c	/^  int (*xMutexHeld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexInit	sqlite3_MFAW.c	/^  int (*xMutexInit)(void);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexLeave	sqlite3_MFAW.c	/^  void (*xMutexLeave)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexNotheld	sqlite3_MFAW.c	/^  int (*xMutexNotheld)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xMutexTry	sqlite3_MFAW.c	/^  int (*xMutexTry)(sqlite3_mutex *);$/;"	m	struct:sqlite3_mutex_methods	file:
xNext	sqlite3_MFAW.c	/^  int (*xNext)($/;"	m	struct:sqlite3_tokenizer_module	file:
xNext	sqlite3_MFAW.c	/^  int (*xNext)(sqlite3_vtab_cursor*);$/;"	m	struct:sqlite3_module	file:
xNextSystemCall	sqlite3_MFAW.c	/^  const char *(*xNextSystemCall)(sqlite3_vfs*, const char *zName);$/;"	m	struct:sqlite3_vfs	file:
xOpen	sqlite3_MFAW.c	/^  int (*xOpen)($/;"	m	struct:sqlite3_tokenizer_module	file:
xOpen	sqlite3_MFAW.c	/^  int (*xOpen)(sqlite3_vfs*, const char *zName, sqlite3_file*,$/;"	m	struct:sqlite3_vfs	file:
xOpen	sqlite3_MFAW.c	/^  int (*xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);$/;"	m	struct:sqlite3_module	file:
xPagecount	sqlite3_MFAW.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods	file:
xPagecount	sqlite3_MFAW.c	/^  int (*xPagecount)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xProfile	sqlite3_MFAW.c	/^  void (*xProfile)(void*,const char*,u64);  \/* Profiling function *\/$/;"	m	struct:sqlite3	file:
xProgress	sqlite3_MFAW.c	/^  int (*xProgress)(void *);     \/* The progress callback *\/$/;"	m	struct:sqlite3	file:
xQueryFunc	sqlite3_MFAW.c	/^    int (*xQueryFunc)(sqlite3_rtree_query_info*);$/;"	m	union:RtreeConstraint::__anon25	file:
xQueryFunc	sqlite3_MFAW.c	/^  int (*xQueryFunc)(sqlite3_rtree_query_info*);$/;"	m	struct:RtreeGeomCallback	file:
xRandomness	sqlite3_MFAW.c	/^  int (*xRandomness)(sqlite3_vfs*, int nByte, char *zOut);$/;"	m	struct:sqlite3_vfs	file:
xRead	sqlite3_MFAW.c	/^  int (*xRead)(sqlite3_file*, void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:
xRealloc	sqlite3_MFAW.c	/^  void *(*xRealloc)(void*,int);  \/* Resize an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xReiniter	sqlite3_MFAW.c	/^  void (*xReiniter)(DbPage*); \/* Call this routine when reloading pages *\/$/;"	m	struct:Pager	file:
xRekey	sqlite3_MFAW.c	/^  void (*xRekey)(sqlite3_pcache*, sqlite3_pcache_page*, $/;"	m	struct:sqlite3_pcache_methods2	file:
xRekey	sqlite3_MFAW.c	/^  void (*xRekey)(sqlite3_pcache*, void*, unsigned oldKey, unsigned newKey);$/;"	m	struct:sqlite3_pcache_methods	file:
xRelease	sqlite3_MFAW.c	/^  int (*xRelease)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xRename	sqlite3_MFAW.c	/^  int (*xRename)(sqlite3_vtab *pVtab, const char *zNew);$/;"	m	struct:sqlite3_module	file:
xRollback	sqlite3_MFAW.c	/^  int (*xRollback)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xRollbackCallback	sqlite3_MFAW.c	/^  void (*xRollbackCallback)(void*); \/* Invoked at every commit. *\/$/;"	m	struct:sqlite3	file:
xRollbackTo	sqlite3_MFAW.c	/^  int (*xRollbackTo)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xRoundup	sqlite3_MFAW.c	/^  int (*xRoundup)(int);          \/* Round up request size to allocation size *\/$/;"	m	struct:sqlite3_mem_methods	file:
xRowid	sqlite3_MFAW.c	/^  int (*xRowid)(sqlite3_vtab_cursor*, sqlite3_int64 *pRowid);$/;"	m	struct:sqlite3_module	file:
xSavepoint	sqlite3_MFAW.c	/^  int (*xSavepoint)(sqlite3_vtab *pVTab, int);$/;"	m	struct:sqlite3_module	file:
xSectorSize	sqlite3_MFAW.c	/^  int (*xSectorSize)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xSelectCallback	sqlite3_MFAW.c	/^  int (*xSelectCallback)(Walker*,Select*);  \/* Callback for SELECTs *\/$/;"	m	struct:Walker	file:
xSelectCallback2	sqlite3_MFAW.c	/^  void (*xSelectCallback2)(Walker*,Select*);\/* Second callback for SELECTs *\/$/;"	m	struct:Walker	file:
xSetSystemCall	sqlite3_MFAW.c	/^  int (*xSetSystemCall)(sqlite3_vfs*, const char *zName, sqlite3_syscall_ptr);$/;"	m	struct:sqlite3_vfs	file:
xShmBarrier	sqlite3_MFAW.c	/^  void (*xShmBarrier)(sqlite3_file*);$/;"	m	struct:sqlite3_io_methods	file:
xShmLock	sqlite3_MFAW.c	/^  int (*xShmLock)(sqlite3_file*, int offset, int n, int flags);$/;"	m	struct:sqlite3_io_methods	file:
xShmMap	sqlite3_MFAW.c	/^  int (*xShmMap)(sqlite3_file*, int iPg, int pgsz, int, void volatile**);$/;"	m	struct:sqlite3_io_methods	file:
xShmUnmap	sqlite3_MFAW.c	/^  int (*xShmUnmap)(sqlite3_file*, int deleteFlag);$/;"	m	struct:sqlite3_io_methods	file:
xShrink	sqlite3_MFAW.c	/^  void (*xShrink)(sqlite3_pcache*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xShutdown	sqlite3_MFAW.c	/^  void (*xShutdown)(void*);      \/* Deinitialize the memory allocator *\/$/;"	m	struct:sqlite3_mem_methods	file:
xShutdown	sqlite3_MFAW.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods	file:
xShutdown	sqlite3_MFAW.c	/^  void (*xShutdown)(void*);$/;"	m	struct:sqlite3_pcache_methods2	file:
xSize	sqlite3_MFAW.c	/^  int (*xSize)(void*);           \/* Return the size of an allocation *\/$/;"	m	struct:sqlite3_mem_methods	file:
xSleep	sqlite3_MFAW.c	/^  int (*xSleep)(sqlite3_vfs*, int microseconds);$/;"	m	struct:sqlite3_vfs	file:
xSqllog	sqlite3_MFAW.c	/^  void(*xSqllog)(void*,sqlite3*,const char*, int);$/;"	m	struct:Sqlite3Config	file:
xStep	sqlite3_MFAW.c	/^  void (*xStep)(sqlite3_context*,int,sqlite3_value**); \/* Aggregate step *\/$/;"	m	struct:FuncDef	file:
xStress	sqlite3_MFAW.c	/^  int (*xStress)(void*,PgHdr*);       \/* Call to try make a page clean *\/$/;"	m	struct:PCache	file:
xSync	sqlite3_MFAW.c	/^  int (*xSync)(sqlite3_file*, int flags);$/;"	m	struct:sqlite3_io_methods	file:
xSync	sqlite3_MFAW.c	/^  int (*xSync)(sqlite3_vtab *pVTab);$/;"	m	struct:sqlite3_module	file:
xTask	sqlite3_MFAW.c	/^  void *(*xTask)(void*);         \/* The thread routine *\/$/;"	m	struct:SQLiteThread	file:
xTask	sqlite3_MFAW.c	/^  void *(*xTask)(void*);   \/* The routine to run as a thread *\/$/;"	m	struct:SQLiteThread	file:
xTestCallback	sqlite3_MFAW.c	/^  int (*xTestCallback)(int);        \/* Invoked by sqlite3FaultSim() *\/$/;"	m	struct:Sqlite3Config	file:
xTrace	sqlite3_MFAW.c	/^  void (*xTrace)(void*,const char*);        \/* Trace function *\/$/;"	m	struct:sqlite3	file:
xTruncate	sqlite3_MFAW.c	/^  int (*xTruncate)(sqlite3_file*, sqlite3_int64 size);$/;"	m	struct:sqlite3_io_methods	file:
xTruncate	sqlite3_MFAW.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods	file:
xTruncate	sqlite3_MFAW.c	/^  void (*xTruncate)(sqlite3_pcache*, unsigned iLimit);$/;"	m	struct:sqlite3_pcache_methods2	file:
xUnfetch	sqlite3_MFAW.c	/^  int (*xUnfetch)(sqlite3_file*, sqlite3_int64 iOfst, void *p);$/;"	m	struct:sqlite3_io_methods	file:
xUnlock	sqlite3_MFAW.c	/^  int (*xUnlock)(sqlite3_file*, int);$/;"	m	struct:sqlite3_io_methods	file:
xUnlockNotify	sqlite3_MFAW.c	/^  void (*xUnlockNotify)(void **, int);  \/* Unlock notify callback *\/$/;"	m	struct:sqlite3	file:
xUnpin	sqlite3_MFAW.c	/^  void (*xUnpin)(sqlite3_pcache*, sqlite3_pcache_page*, int discard);$/;"	m	struct:sqlite3_pcache_methods2	file:
xUnpin	sqlite3_MFAW.c	/^  void (*xUnpin)(sqlite3_pcache*, void*, int discard);$/;"	m	struct:sqlite3_pcache_methods	file:
xUpdate	sqlite3_MFAW.c	/^  int (*xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);$/;"	m	struct:sqlite3_module	file:
xUpdateCallback	sqlite3_MFAW.c	/^  void (*xUpdateCallback)(void*,int, const char*,const char*,sqlite_int64);$/;"	m	struct:sqlite3	file:
xVdbeBranch	sqlite3_MFAW.c	/^  void (*xVdbeBranch)(void*,int iSrcLine,u8 eThis,u8 eMx);  \/* Callback *\/$/;"	m	struct:Sqlite3Config	file:
xWalCallback	sqlite3_MFAW.c	/^  int (*xWalCallback)(void *, sqlite3 *, const char *, int);$/;"	m	struct:sqlite3	file:
xWrite	sqlite3_MFAW.c	/^  int (*xWrite)(sqlite3_file*, const void*, int iAmt, sqlite3_int64 iOfst);$/;"	m	struct:sqlite3_io_methods	file:
xferCompatibleCollation	sqlite3_MFAW.c	/^static int xferCompatibleCollation(const char *z1, const char *z2){$/;"	f	file:
xferCompatibleIndex	sqlite3_MFAW.c	/^static int xferCompatibleIndex(Index *pDest, Index *pSrc){$/;"	f	file:
xferOptimization	sqlite3_MFAW.c	/^static int xferOptimization($/;"	f	file:
xthreadsafe	sqlite3_MFAW.c	/^  int (*xthreadsafe)(void);$/;"	m	struct:sqlite3_api_routines	file:
yColCache	sqlite3_MFAW.c	/^  struct yColCache {$/;"	s	struct:Parse	file:
yDbMask	sqlite3_MFAW.c	/^  typedef unsigned char yDbMask[(SQLITE_MAX_ATTACHED+9)\/8];$/;"	t	file:
yDbMask	sqlite3_MFAW.c	/^  typedef unsigned int yDbMask;$/;"	t	file:
ynVar	sqlite3_MFAW.c	/^typedef i16 ynVar;$/;"	t	file:
ynVar	sqlite3_MFAW.c	/^typedef int ynVar;$/;"	t	file:
yy0	sqlite3_MFAW.c	/^  sqlite3ParserTOKENTYPE yy0;$/;"	m	union:__anon22	file:
yy132	sqlite3_MFAW.c	/^  Expr* yy132;$/;"	m	union:__anon22	file:
yy14	sqlite3_MFAW.c	/^  ExprList* yy14;$/;"	m	union:__anon22	file:
yy186	sqlite3_MFAW.c	/^  u8 yy186;$/;"	m	union:__anon22	file:
yy3	sqlite3_MFAW.c	/^  Select* yy3;$/;"	m	union:__anon22	file:
yy328	sqlite3_MFAW.c	/^  int yy328;$/;"	m	union:__anon22	file:
yy346	sqlite3_MFAW.c	/^  ExprSpan yy346;$/;"	m	union:__anon22	file:
yy378	sqlite3_MFAW.c	/^  struct TrigEvent yy378;$/;"	m	union:__anon22	typeref:struct:__anon22::TrigEvent	file:
yy381	sqlite3_MFAW.c	/^  u16 yy381;$/;"	m	union:__anon22	file:
yy408	sqlite3_MFAW.c	/^  IdList* yy408;$/;"	m	union:__anon22	file:
yy429	sqlite3_MFAW.c	/^  struct {int value; int mask;} yy429;$/;"	m	union:__anon22	typeref:struct:__anon22::__anon23	file:
yy473	sqlite3_MFAW.c	/^  TriggerStep* yy473;$/;"	m	union:__anon22	file:
yy476	sqlite3_MFAW.c	/^  struct LimitVal yy476;$/;"	m	union:__anon22	typeref:struct:__anon22::LimitVal	file:
yy59	sqlite3_MFAW.c	/^  With* yy59;$/;"	m	union:__anon22	file:
yy65	sqlite3_MFAW.c	/^  SrcList* yy65;$/;"	m	union:__anon22	file:
yy96	sqlite3_MFAW.c	/^  struct LikeOp yy96;$/;"	m	union:__anon22	typeref:struct:__anon22::LikeOp	file:
yyFallback	sqlite3_MFAW.c	/^static const YYCODETYPE yyFallback[] = {$/;"	v	file:
yyGrowStack	sqlite3_MFAW.c	/^static void yyGrowStack(yyParser *p){$/;"	f	file:
yyParser	sqlite3_MFAW.c	/^struct yyParser {$/;"	s	file:
yyParser	sqlite3_MFAW.c	/^typedef struct yyParser yyParser;$/;"	t	typeref:struct:yyParser	file:
yyRuleInfo	sqlite3_MFAW.c	/^} yyRuleInfo[] = {$/;"	v	typeref:struct:__anon24	file:
yyRuleName	sqlite3_MFAW.c	/^static const char *const yyRuleName[] = {$/;"	v	file:
yyStackEntry	sqlite3_MFAW.c	/^struct yyStackEntry {$/;"	s	file:
yyStackEntry	sqlite3_MFAW.c	/^typedef struct yyStackEntry yyStackEntry;$/;"	t	typeref:struct:yyStackEntry	file:
yyStackOverflow	sqlite3_MFAW.c	/^static void yyStackOverflow(yyParser *yypParser, YYMINORTYPE *yypMinor){$/;"	f	file:
yyTokenName	sqlite3_MFAW.c	/^static const char *const yyTokenName[] = { $/;"	v	file:
yyTraceFILE	sqlite3_MFAW.c	/^static FILE *yyTraceFILE = 0;$/;"	v	file:
yyTracePrompt	sqlite3_MFAW.c	/^static char *yyTracePrompt = 0;$/;"	v	file:
yy_accept	sqlite3_MFAW.c	/^static void yy_accept($/;"	f	file:
yy_action	sqlite3_MFAW.c	/^static const YYACTIONTYPE yy_action[] = {$/;"	v	file:
yy_default	sqlite3_MFAW.c	/^static const YYACTIONTYPE yy_default[] = {$/;"	v	file:
yy_destructor	sqlite3_MFAW.c	/^static void yy_destructor($/;"	f	file:
yy_find_reduce_action	sqlite3_MFAW.c	/^static int yy_find_reduce_action($/;"	f	file:
yy_find_shift_action	sqlite3_MFAW.c	/^static int yy_find_shift_action($/;"	f	file:
yy_lookahead	sqlite3_MFAW.c	/^static const YYCODETYPE yy_lookahead[] = {$/;"	v	file:
yy_parse_failed	sqlite3_MFAW.c	/^static void yy_parse_failed($/;"	f	file:
yy_pop_parser_stack	sqlite3_MFAW.c	/^static int yy_pop_parser_stack(yyParser *pParser){$/;"	f	file:
yy_reduce	sqlite3_MFAW.c	/^static void yy_reduce($/;"	f	file:
yy_reduce_ofst	sqlite3_MFAW.c	/^static const short yy_reduce_ofst[] = {$/;"	v	file:
yy_shift	sqlite3_MFAW.c	/^static void yy_shift($/;"	f	file:
yy_shift_ofst	sqlite3_MFAW.c	/^static const short yy_shift_ofst[] = {$/;"	v	file:
yy_syntax_error	sqlite3_MFAW.c	/^static void yy_syntax_error($/;"	f	file:
yyerrcnt	sqlite3_MFAW.c	/^  int yyerrcnt;                 \/* Shifts left before out of the error *\/$/;"	m	struct:yyParser	file:
yyidx	sqlite3_MFAW.c	/^  int yyidx;                    \/* Index of top element in stack *\/$/;"	m	struct:yyParser	file:
yyidxMax	sqlite3_MFAW.c	/^  int yyidxMax;                 \/* Maximum value of yyidx *\/$/;"	m	struct:yyParser	file:
yyinit	sqlite3_MFAW.c	/^  int yyinit;$/;"	m	union:__anon22	file:
yystack	sqlite3_MFAW.c	/^  yyStackEntry *yystack;        \/* The parser's stack *\/$/;"	m	struct:yyParser	file:
yystksz	sqlite3_MFAW.c	/^  int yystksz;                  \/* Current side of the stack *\/$/;"	m	struct:yyParser	file:
yytestcase	sqlite3_MFAW.c	123333;"	d	file:
yytestcase	sqlite3_MFAW.c	123564;"	d	file:
yyzerominor	sqlite3_MFAW.c	/^static const YYMINORTYPE yyzerominor = { 0 };$/;"	v	file:
z	sqlite3_MFAW.c	/^    char *z;               \/* Pointer to data for string (char array) types *\/$/;"	m	union:VdbeOp::__anon1	file:
z	sqlite3_MFAW.c	/^  char *z;                        \/* Pointer to buffer containing string *\/$/;"	m	struct:StrBuffer	file:
z	sqlite3_MFAW.c	/^  char *z;                        \/* Text of the token *\/$/;"	m	struct:Fts3PhraseToken	file:
z	sqlite3_MFAW.c	/^  char *z;            \/* String or BLOB value *\/$/;"	m	struct:Mem	file:
z	sqlite3_MFAW.c	/^  const char *z;     \/* Text of the token.  Not NULL-terminated! *\/$/;"	m	struct:Token	file:
zAlias	sqlite3_MFAW.c	/^    char *zAlias;     \/* The "B" part of a "A AS B" phrase.  zName is the "A" *\/$/;"	m	struct:SrcList::SrcList_item	file:
zAuthContext	sqlite3_MFAW.c	/^  const char *zAuthContext;   \/* Put saved Parse.zAuthContext here *\/$/;"	m	struct:AuthContext	file:
zAuthContext	sqlite3_MFAW.c	/^  const char *zAuthContext; \/* The 6th parameter to db->xAuth callbacks *\/$/;"	m	struct:Parse	file:
zAuthPW	sqlite3_MFAW.c	/^  char *zAuthPW;                \/* Password used to authenticate *\/$/;"	m	struct:sqlite3_userauth	file:
zAuthUser	sqlite3_MFAW.c	/^  char *zAuthUser;              \/* User name used to authenticate *\/$/;"	m	struct:sqlite3_userauth	file:
zBase	sqlite3_MFAW.c	/^  char *zBase;         \/* A base allocation.  Not from malloc. *\/$/;"	m	struct:StrAccum	file:
zBase	sqlite3_MFAW.c	/^  char zBase[100];   \/* Initial space *\/$/;"	m	struct:Explain	file:
zBuf	sqlite3_MFAW.c	/^  char *zBuf;                     \/* Space to buffer journal writes *\/$/;"	m	struct:JournalFile	file:
zBuffer	sqlite3_MFAW.c	/^  char *zBuffer;$/;"	m	struct:IcuCursor	file:
zCanonicalName	sqlite3_MFAW.c	/^  char *zCanonicalName;         \/* Canonical filename *\/$/;"	m	struct:vxworksFileId	file:
zChunk	sqlite3_MFAW.c	/^  u8 zChunk[JOURNAL_CHUNKSIZE];   \/* Content of this chunk *\/$/;"	m	struct:FileChunk	file:
zCol	sqlite3_MFAW.c	/^    char *zCol;           \/* Name of column in zTo.  If NULL use PRIMARY KEY *\/$/;"	m	struct:FKey::sColMap	file:
zColAff	sqlite3_MFAW.c	/^  char *zColAff;           \/* String defining the affinity of each column *\/$/;"	m	struct:Index	file:
zColAff	sqlite3_MFAW.c	/^  char *zColAff;       \/* String defining the affinity of each column *\/$/;"	m	struct:Table	file:
zColl	sqlite3_MFAW.c	/^  char *zColl;     \/* Collating sequence.  If NULL, use the default *\/$/;"	m	struct:Column	file:
zCollName	sqlite3_MFAW.c	/^  char *zCollName;           \/* Required collating sequence, if not NULL *\/$/;"	m	struct:WhereScan	file:
zComment	sqlite3_MFAW.c	/^  char *zComment;          \/* Comment to improve readability *\/$/;"	m	struct:VdbeOp	file:
zContentTbl	sqlite3_MFAW.c	/^  char *zContentTbl;              \/* content=xxx option, or NULL *\/$/;"	m	struct:Fts3Table	file:
zData	sqlite3_MFAW.c	/^  u8 *zData;                  \/* Content of the node, as should be on disk *\/$/;"	m	struct:RtreeNode	file:
zDatabase	sqlite3_MFAW.c	/^    char *zDatabase;  \/* Name of database holding this table *\/$/;"	m	struct:SrcList::SrcList_item	file:
zDatabase	sqlite3_MFAW.c	/^  const char *zDatabase;$/;"	m	struct:analysisInfo	file:
zDb	sqlite3_MFAW.c	/^  char *zDb;                  \/* Name of database containing r-tree table *\/$/;"	m	struct:Rtree	file:
zDb	sqlite3_MFAW.c	/^  const char *zDb;                \/* logical database name *\/$/;"	m	struct:Fts3Table	file:
zDb	sqlite3_MFAW.c	/^  const char *zDb;    \/* Make sure all objects are contained in this database *\/$/;"	m	struct:DbFixer	file:
zDeleteOnClose	sqlite3_MFAW.c	/^  LPWSTR zDeleteOnClose;  \/* Name of file to delete when closing *\/$/;"	m	struct:winFile	file:
zDflt	sqlite3_MFAW.c	/^  char *zDflt;     \/* Original text of the default value *\/$/;"	m	struct:Column	file:
zEnd	sqlite3_MFAW.c	/^  const char *zEnd;     \/* One character past the end of input text *\/$/;"	m	struct:ExprSpan	file:
zErr	sqlite3_MFAW.c	/^    const char *zErr;               \/* Error message for circular references *\/$/;"	m	struct:With::Cte	file:
zErrMsg	sqlite3_MFAW.c	/^  char *zErrMsg;                  \/* Error message from sqlite3_mprintf() *\/$/;"	m	struct:sqlite3_vtab	file:
zErrMsg	sqlite3_MFAW.c	/^  char *zErrMsg;          \/* Error message written here *\/$/;"	m	struct:Vdbe	file:
zErrMsg	sqlite3_MFAW.c	/^  char *zErrMsg;       \/* An error message *\/$/;"	m	struct:Parse	file:
zErrMsg	sqlite3_MFAW.c	/^  char *zErrMsg;     \/* Error message text, if an error occurs *\/$/;"	m	struct:TabResult	file:
zFilename	sqlite3_MFAW.c	/^  char *zFilename;            \/* Name of the database file *\/$/;"	m	struct:Pager	file:
zFilename	sqlite3_MFAW.c	/^  char *zFilename;           \/* Name of the file *\/$/;"	m	struct:winShmNode	file:
zFilename	sqlite3_MFAW.c	/^  char *zFilename;           \/* Name of the mmapped file *\/$/;"	m	struct:unixShmNode	file:
zIndex	sqlite3_MFAW.c	/^    char *zIndex;     \/* Identifier from "INDEXED BY <zIndex>" clause *\/$/;"	m	struct:SrcList::SrcList_item	file:
zInput	sqlite3_MFAW.c	/^  char *zInput;                   \/* Input string *\/$/;"	m	struct:Fts3tokCursor	file:
zInput	sqlite3_MFAW.c	/^  const char *zInput;          \/* input we are tokenizing *\/$/;"	m	struct:porter_tokenizer_cursor	file:
zJournal	sqlite3_MFAW.c	/^  char *zJournal;             \/* Name of the journal file *\/$/;"	m	struct:Pager	file:
zJournal	sqlite3_MFAW.c	/^  const char *zJournal;           \/* Name of the journal file *\/$/;"	m	struct:JournalFile	file:
zLanguageid	sqlite3_MFAW.c	/^  char *zLanguageid;              \/* languageid=xxx option, or NULL *\/$/;"	m	struct:Fts3Table	file:
zLocale	sqlite3_MFAW.c	/^  char *zLocale;$/;"	m	struct:IcuTokenizer	file:
zMagicHeader	sqlite3_MFAW.c	/^static const char zMagicHeader[] = SQLITE_FILE_HEADER;$/;"	v	file:
zMalloc	sqlite3_MFAW.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentNode	file:
zMalloc	sqlite3_MFAW.c	/^  char *zMalloc;                  \/* Malloc'd space (possibly) used for zTerm *\/$/;"	m	struct:SegmentWriter	file:
zMalloc	sqlite3_MFAW.c	/^  char *zMalloc;      \/* Space to hold MEM_Str or MEM_Blob if szMalloc>0 *\/$/;"	m	struct:Mem	file:
zMatchinfo	sqlite3_MFAW.c	/^  char *zMatchinfo;               \/* Matchinfo specification *\/$/;"	m	struct:Fts3Cursor	file:
zName	sqlite3_MFAW.c	/^    char *zName;                    \/* Name of this CTE *\/$/;"	m	struct:With::Cte	file:
zName	sqlite3_MFAW.c	/^    char *zName;            \/* Token associated with this expression *\/$/;"	m	struct:ExprList::ExprList_item	file:
zName	sqlite3_MFAW.c	/^    char *zName;      \/* Name of the identifier *\/$/;"	m	struct:IdList::IdList_item	file:
zName	sqlite3_MFAW.c	/^    char *zName;      \/* Name of the table *\/$/;"	m	struct:SrcList::SrcList_item	file:
zName	sqlite3_MFAW.c	/^  char *zName;                        \/* Savepoint name (nul-terminated) *\/$/;"	m	struct:Savepoint	file:
zName	sqlite3_MFAW.c	/^  char *zName;                    \/* Name of table or index *\/$/;"	m	struct:ScanStatus	file:
zName	sqlite3_MFAW.c	/^  char *zName;                    \/* Value of 'name' column *\/$/;"	m	struct:StatCursor	file:
zName	sqlite3_MFAW.c	/^  char *zName;                \/* Name of r-tree table *\/ $/;"	m	struct:Rtree	file:
zName	sqlite3_MFAW.c	/^  char *zName;             \/* Name of this index *\/$/;"	m	struct:Index	file:
zName	sqlite3_MFAW.c	/^  char *zName;            \/* The name of the trigger                        *\/$/;"	m	struct:Trigger	file:
zName	sqlite3_MFAW.c	/^  char *zName;          \/* Name of the collating sequence, UTF-8 encoded *\/$/;"	m	struct:CollSeq	file:
zName	sqlite3_MFAW.c	/^  char *zName;         \/* Name of the table or view *\/$/;"	m	struct:Table	file:
zName	sqlite3_MFAW.c	/^  char *zName;         \/* Name of this database *\/$/;"	m	struct:Db	file:
zName	sqlite3_MFAW.c	/^  char *zName;         \/* SQL name of the function. *\/$/;"	m	struct:FuncDef	file:
zName	sqlite3_MFAW.c	/^  char *zName;     \/* Name of this column *\/$/;"	m	struct:Column	file:
zName	sqlite3_MFAW.c	/^  const char *const zName;  \/* Name of pragma *\/$/;"	m	struct:sPragmaNames	file:
zName	sqlite3_MFAW.c	/^  const char *zName;                   \/* Name passed to create_module() *\/$/;"	m	struct:Module	file:
zName	sqlite3_MFAW.c	/^  const char *zName;              \/* virtual table name *\/$/;"	m	struct:Fts3Table	file:
zName	sqlite3_MFAW.c	/^  const char *zName;            \/* Name of the system call *\/$/;"	m	struct:unix_syscall	file:
zName	sqlite3_MFAW.c	/^  const char *zName;            \/* Name of the system call *\/$/;"	m	struct:win_syscall	file:
zName	sqlite3_MFAW.c	/^  const char *zName;       \/* Name of this virtual file system *\/$/;"	m	struct:sqlite3_vfs	file:
zName	sqlite3_MFAW.c	/^  const char *zName;   \/* Name of the table *\/$/;"	m	struct:TableLock	file:
zPagetype	sqlite3_MFAW.c	/^  char *zPagetype;                \/* Value of 'pagetype' column *\/$/;"	m	struct:StatCursor	file:
zPath	sqlite3_MFAW.c	/^  char *zPath;                    \/* Path to this page *\/$/;"	m	struct:StatPage	file:
zPath	sqlite3_MFAW.c	/^  char *zPath;                    \/* Value of 'path' column *\/$/;"	m	struct:StatCursor	file:
zPath	sqlite3_MFAW.c	/^  const char *zPath;                  \/* Name of the file *\/$/;"	m	struct:unixFile	file:
zPath	sqlite3_MFAW.c	/^  const char *zPath;      \/* Full pathname of this file *\/$/;"	m	struct:winFile	file:
zPfx	sqlite3_MFAW.c	/^  const char *zPfx; \/* Error message prefix *\/$/;"	m	struct:IntegrityCk	file:
zPool	sqlite3_MFAW.c	/^  u8 *zPool;       \/* Memory available to be allocated *\/$/;"	m	struct:Mem5Global	file:
zReadExprlist	sqlite3_MFAW.c	/^  char *zReadExprlist;$/;"	m	struct:Fts3Table	file:
zSegmentsTbl	sqlite3_MFAW.c	/^  char *zSegmentsTbl;             \/* Name of %_segments table *\/$/;"	m	struct:Fts3Table	file:
zSelName	sqlite3_MFAW.c	/^  char zSelName[12];     \/* Symbolic name of this SELECT use for debugging *\/$/;"	m	struct:Select	file:
zSpan	sqlite3_MFAW.c	/^    char *zSpan;            \/* Original text of the expression *\/$/;"	m	struct:ExprList::ExprList_item	file:
zSql	sqlite3_MFAW.c	/^  char *zSql;             \/* Text of the SQL statement that generated this *\/$/;"	m	struct:Vdbe	file:
zStart	sqlite3_MFAW.c	/^  const char *zStart;   \/* First character of input text *\/$/;"	m	struct:ExprSpan	file:
zStop	sqlite3_MFAW.c	/^  char *zStop;$/;"	m	struct:Fts3auxCursor	file:
zTail	sqlite3_MFAW.c	/^  const char *zTail;        \/* All SQL text past the last semicolon parsed *\/$/;"	m	struct:Parse	file:
zTarget	sqlite3_MFAW.c	/^  char *zTarget;       \/* Target table for DELETE, UPDATE, INSERT *\/$/;"	m	struct:TriggerStep	file:
zTerm	sqlite3_MFAW.c	/^  char *zTerm;                    \/* Pointer to current term *\/$/;"	m	struct:Fts3SegReader	file:
zTerm	sqlite3_MFAW.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentNode	file:
zTerm	sqlite3_MFAW.c	/^  char *zTerm;                    \/* Pointer to previous term buffer *\/$/;"	m	struct:SegmentWriter	file:
zTerm	sqlite3_MFAW.c	/^  char *zTerm;                    \/* Pointer to term buffer *\/$/;"	m	struct:Fts3MultiSegReader	file:
zTerm	sqlite3_MFAW.c	/^  const char *zTerm;$/;"	m	struct:Fts3SegFilter	file:
zText	sqlite3_MFAW.c	/^  char *zText;         \/* The string collected so far *\/$/;"	m	struct:StrAccum	file:
zTitle	sqlite3_MFAW.c	/^  char zTitle[100];  \/* The title text *\/$/;"	m	struct:__anon9	file:
zTo	sqlite3_MFAW.c	/^  char *zTo;        \/* Name of table that the key points to (aka: Parent) *\/$/;"	m	struct:FKey	file:
zToken	sqlite3_MFAW.c	/^    char *zToken;          \/* Token value. Zero terminated and dequoted *\/$/;"	m	union:Expr::__anon3	file:
zToken	sqlite3_MFAW.c	/^  char *zToken;                   \/* storage for current token *\/$/;"	m	struct:unicode_cursor	file:
zToken	sqlite3_MFAW.c	/^  char *zToken;                \/* storage for current token *\/$/;"	m	struct:porter_tokenizer_cursor	file:
zToken	sqlite3_MFAW.c	/^  const char *zToken;             \/* Current 'token' value *\/$/;"	m	struct:Fts3tokCursor	file:
zType	sqlite3_MFAW.c	/^  char *zType;     \/* Data type for this column *\/$/;"	m	struct:Column	file:
zType	sqlite3_MFAW.c	/^  const char *zType;  \/* Type of the container - used for error messages *\/$/;"	m	struct:DbFixer	file:
zWal	sqlite3_MFAW.c	/^  char *zWal;                 \/* File name for write-ahead log *\/$/;"	m	struct:Pager	file:
zWalName	sqlite3_MFAW.c	/^  const char *zWalName;      \/* Name of WAL file *\/$/;"	m	struct:Wal	file:
zWriteExprlist	sqlite3_MFAW.c	/^  char *zWriteExprlist;$/;"	m	struct:Fts3Table	file:
zeroJournalHdr	sqlite3_MFAW.c	/^static int zeroJournalHdr(Pager *pPager, int doTruncate){$/;"	f	file:
zeroPage	sqlite3_MFAW.c	/^static void zeroPage(MemPage *pPage, int flags){$/;"	f	file:
zeroblobFunc	sqlite3_MFAW.c	/^static void zeroblobFunc($/;"	f	file:
