!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDRS_PER_BLOCK	include/linux/f2fs_fs.h	200;"	d
ADDRS_PER_INODE	include/linux/f2fs_fs.h	199;"	d
ADDRS_PER_PAGE	include/linux/f2fs_fs.h	205;"	d
ALLOC_LEFT	fs/f2fs/segment.h	/^	ALLOC_LEFT$/;"	e	enum:__anon3
ALLOC_MODE_DEFAULT	fs/f2fs/f2fs.h	/^	ALLOC_MODE_DEFAULT,	\/* stay default *\/$/;"	e	enum:__anon27
ALLOC_MODE_REUSE	fs/f2fs/f2fs.h	/^	ALLOC_MODE_REUSE,	\/* reuse segments as much as possible *\/$/;"	e	enum:__anon27
ALLOC_NEXT	fs/f2fs/segment.h	/^	ALLOC_NEXT,$/;"	e	enum:__anon5
ALLOC_NODE	fs/f2fs/f2fs.h	/^	ALLOC_NODE,			\/* allocate a new node page if needed *\/$/;"	e	enum:__anon17
ALLOC_RIGHT	fs/f2fs/segment.h	/^	ALLOC_RIGHT = 0,$/;"	e	enum:__anon3
APPEND_INO	fs/f2fs/f2fs.h	/^	APPEND_INO,		\/* for append ino list *\/$/;"	e	enum:__anon12
APP_BUFFERED_IO	fs/f2fs/f2fs.h	/^	APP_BUFFERED_IO,		\/* app buffered IOs *\/$/;"	e	enum:iostat_type
APP_DIRECT_IO	fs/f2fs/f2fs.h	/^	APP_DIRECT_IO,			\/* app direct IOs *\/$/;"	e	enum:iostat_type
APP_MAPPED_IO	fs/f2fs/f2fs.h	/^	APP_MAPPED_IO,			\/* app mapped IOs *\/$/;"	e	enum:iostat_type
APP_WRITE_IO	fs/f2fs/f2fs.h	/^	APP_WRITE_IO,			\/* app write IOs *\/$/;"	e	enum:iostat_type
ATOMIC_FILE	fs/f2fs/f2fs.h	/^	ATOMIC_FILE,			\/* for all atomic files *\/$/;"	e	enum:inode_type
ATOMIC_WRITTEN_PAGE	fs/f2fs/segment.h	210;"	d
ATTR_LIST	fs/f2fs/sysfs.c	433;"	d	file:
BASE_CHECK	fs/f2fs/node.h	/^	BASE_CHECK,	\/* check kernel status *\/$/;"	e	enum:mem_type
BD_PART_WRITTEN	fs/f2fs/f2fs.h	1333;"	d
BG_GC	fs/f2fs/segment.h	/^	BG_GC = 0,$/;"	e	enum:__anon6
BLKS_PER_SEC	fs/f2fs/segment.h	91;"	d
COLD	fs/f2fs/f2fs.h	/^	COLD,$/;"	e	enum:temp_type
COLD_BIT_SHIFT	include/linux/f2fs_fs.h	/^	COLD_BIT_SHIFT = 0,$/;"	e	enum:__anon32
CP_COMPACT_SUM_FLAG	include/linux/f2fs_fs.h	129;"	d
CP_CRC_RECOVERY_FLAG	include/linux/f2fs_fs.h	125;"	d
CP_DISCARD	fs/f2fs/f2fs.h	176;"	d
CP_ERROR_FLAG	include/linux/f2fs_fs.h	128;"	d
CP_FASTBOOT	fs/f2fs/f2fs.h	173;"	d
CP_FASTBOOT_FLAG	include/linux/f2fs_fs.h	126;"	d
CP_FASTBOOT_MODE	fs/f2fs/f2fs.h	/^	CP_FASTBOOT_MODE,$/;"	e	enum:cp_reason_type
CP_FSCK_FLAG	include/linux/f2fs_fs.h	127;"	d
CP_HARDLINK	fs/f2fs/f2fs.h	/^	CP_HARDLINK,$/;"	e	enum:cp_reason_type
CP_LARGE_NAT_BITMAP_FLAG	include/linux/f2fs_fs.h	121;"	d
CP_NAT_BITS_FLAG	include/linux/f2fs_fs.h	124;"	d
CP_NOCRC_RECOVERY_FLAG	include/linux/f2fs_fs.h	122;"	d
CP_NODE_NEED_CP	fs/f2fs/f2fs.h	/^	CP_NODE_NEED_CP,$/;"	e	enum:cp_reason_type
CP_NON_REGULAR	fs/f2fs/f2fs.h	/^	CP_NON_REGULAR,$/;"	e	enum:cp_reason_type
CP_NO_NEEDED	fs/f2fs/f2fs.h	/^	CP_NO_NEEDED,$/;"	e	enum:cp_reason_type
CP_NO_SPC_ROLL	fs/f2fs/f2fs.h	/^	CP_NO_SPC_ROLL,$/;"	e	enum:cp_reason_type
CP_ORPHAN_PRESENT_FLAG	include/linux/f2fs_fs.h	130;"	d
CP_RECOVERY	fs/f2fs/f2fs.h	175;"	d
CP_RECOVER_DIR	fs/f2fs/f2fs.h	/^	CP_RECOVER_DIR,$/;"	e	enum:cp_reason_type
CP_SB_NEED_CP	fs/f2fs/f2fs.h	/^	CP_SB_NEED_CP,$/;"	e	enum:cp_reason_type
CP_SPEC_LOG_NUM	fs/f2fs/f2fs.h	/^	CP_SPEC_LOG_NUM,$/;"	e	enum:cp_reason_type
CP_SYNC	fs/f2fs/f2fs.h	174;"	d
CP_TIME	fs/f2fs/f2fs.h	/^	CP_TIME,$/;"	e	enum:__anon24
CP_TRIMMED	fs/f2fs/f2fs.h	177;"	d
CP_TRIMMED_FLAG	include/linux/f2fs_fs.h	123;"	d
CP_UMOUNT	fs/f2fs/f2fs.h	172;"	d
CP_UMOUNT_FLAG	include/linux/f2fs_fs.h	131;"	d
CP_WRONG_PINO	fs/f2fs/f2fs.h	/^	CP_WRONG_PINO,$/;"	e	enum:cp_reason_type
CREATE_TRACE_POINTS	fs/f2fs/super.c	37;"	d	file:
CURSEG_COLD_DATA	fs/f2fs/f2fs.h	/^	CURSEG_COLD_DATA,	\/* multimedia or GCed data blocks *\/$/;"	e	enum:__anon22
CURSEG_COLD_NODE	fs/f2fs/f2fs.h	/^	CURSEG_COLD_NODE,	\/* indirect node blocks *\/$/;"	e	enum:__anon22
CURSEG_HOT_DATA	fs/f2fs/f2fs.h	/^	CURSEG_HOT_DATA	= 0,	\/* directory entry blocks *\/$/;"	e	enum:__anon22
CURSEG_HOT_NODE	fs/f2fs/f2fs.h	/^	CURSEG_HOT_NODE,	\/* direct node blocks of directory files *\/$/;"	e	enum:__anon22
CURSEG_I	fs/f2fs/segment.h	/^static inline struct curseg_info *CURSEG_I(struct f2fs_sb_info *sbi, int type)$/;"	f
CURSEG_WARM_DATA	fs/f2fs/f2fs.h	/^	CURSEG_WARM_DATA,	\/* data blocks *\/$/;"	e	enum:__anon22
CURSEG_WARM_NODE	fs/f2fs/f2fs.h	/^	CURSEG_WARM_NODE,	\/* direct node blocks of normal files *\/$/;"	e	enum:__anon22
CUR_ADDRS_PER_INODE	include/linux/f2fs_fs.h	196;"	d
DATA	fs/f2fs/f2fs.h	/^	DATA,$/;"	e	enum:page_type
DCC_INFO	fs/f2fs/sysfs.c	/^	DCC_INFO,	\/* struct discard_cmd_control *\/$/;"	e	enum:__anon8	file:
DEFAULT_DISCARD_GRANULARITY	fs/f2fs/f2fs.h	237;"	d
DEFAULT_INLINE_XATTR_ADDRS	include/linux/f2fs_fs.h	194;"	d
DEF_ADDRS_PER_INODE	include/linux/f2fs_fs.h	195;"	d
DEF_CP_INTERVAL	fs/f2fs/f2fs.h	186;"	d
DEF_DIRTY_NAT_RATIO_THRESHOLD	fs/f2fs/node.h	30;"	d
DEF_DIR_LEVEL	fs/f2fs/f2fs.h	624;"	d
DEF_DISCARD_URGENT_UTIL	fs/f2fs/f2fs.h	185;"	d
DEF_GC_FAILED_PINNED_FILES	fs/f2fs/gc.h	23;"	d
DEF_GC_THREAD_MAX_SLEEP_TIME	fs/f2fs/gc.h	18;"	d
DEF_GC_THREAD_MIN_SLEEP_TIME	fs/f2fs/gc.h	17;"	d
DEF_GC_THREAD_NOGC_SLEEP_TIME	fs/f2fs/gc.h	19;"	d
DEF_GC_THREAD_URGENT_SLEEP_TIME	fs/f2fs/gc.h	16;"	d
DEF_IDLE_INTERVAL	fs/f2fs/f2fs.h	187;"	d
DEF_INLINE_RESERVED_SIZE	fs/f2fs/f2fs.h	439;"	d
DEF_MAX_DISCARD_ISSUE_TIME	fs/f2fs/f2fs.h	184;"	d
DEF_MAX_DISCARD_LEN	fs/f2fs/f2fs.h	181;"	d
DEF_MAX_DISCARD_REQUEST	fs/f2fs/f2fs.h	180;"	d
DEF_MAX_RECLAIM_PREFREE_SEGMENTS	fs/f2fs/segment.h	19;"	d
DEF_MAX_VICTIM_SEARCH	fs/f2fs/gc.h	26;"	d
DEF_MID_DISCARD_ISSUE_TIME	fs/f2fs/f2fs.h	183;"	d
DEF_MIN_DISCARD_ISSUE_TIME	fs/f2fs/f2fs.h	182;"	d
DEF_MIN_FSYNC_BLOCKS	fs/f2fs/segment.h	605;"	d
DEF_MIN_HOT_BLOCKS	fs/f2fs/segment.h	606;"	d
DEF_MIN_INLINE_SIZE	fs/f2fs/f2fs.h	440;"	d
DEF_MIN_IPU_UTIL	fs/f2fs/segment.h	604;"	d
DEF_NAT_CACHE_THRESHOLD	fs/f2fs/node.h	32;"	d
DEF_NIDS_PER_INODE	include/linux/f2fs_fs.h	198;"	d
DEF_RAM_THRESHOLD	fs/f2fs/node.h	27;"	d
DEF_RA_NID_PAGES	fs/f2fs/node.h	21;"	d
DEF_RECLAIM_PREFREE_SEGMENTS	fs/f2fs/segment.h	18;"	d
DELTA	fs/f2fs/hash.c	26;"	d	file:
DENT_BIT_SHIFT	include/linux/f2fs_fs.h	/^	DENT_BIT_SHIFT,$/;"	e	enum:__anon32
DIRTY	fs/f2fs/segment.h	/^	DIRTY,			\/* to count # of dirty segments *\/$/;"	e	enum:dirty_type
DIRTY_COLD_DATA	fs/f2fs/segment.h	/^	DIRTY_COLD_DATA,	\/* dirty segments assigned as cold data logs *\/$/;"	e	enum:dirty_type
DIRTY_COLD_NODE	fs/f2fs/segment.h	/^	DIRTY_COLD_NODE,	\/* dirty segments assigned as cold node logs *\/$/;"	e	enum:dirty_type
DIRTY_DENTS	fs/f2fs/node.h	/^	DIRTY_DENTS,	\/* indicates dirty dentry pages *\/$/;"	e	enum:mem_type
DIRTY_HOT_DATA	fs/f2fs/segment.h	/^	DIRTY_HOT_DATA,		\/* dirty segments assigned as hot data logs *\/$/;"	e	enum:dirty_type
DIRTY_HOT_NODE	fs/f2fs/segment.h	/^	DIRTY_HOT_NODE,		\/* dirty segments assigned as hot node logs *\/$/;"	e	enum:dirty_type
DIRTY_I	fs/f2fs/f2fs.h	/^static inline struct dirty_seglist_info *DIRTY_I(struct f2fs_sb_info *sbi)$/;"	f
DIRTY_META	fs/f2fs/f2fs.h	/^	DIRTY_META,			\/* for all dirtied inode metadata *\/$/;"	e	enum:inode_type
DIRTY_WARM_DATA	fs/f2fs/segment.h	/^	DIRTY_WARM_DATA,	\/* dirty segments assigned as warm data logs *\/$/;"	e	enum:dirty_type
DIRTY_WARM_NODE	fs/f2fs/segment.h	/^	DIRTY_WARM_NODE,	\/* dirty segments assigned as warm node logs *\/$/;"	e	enum:dirty_type
DIR_INODE	fs/f2fs/f2fs.h	/^	DIR_INODE,			\/* for dirty dir inode *\/$/;"	e	enum:inode_type
DPOLICY_BG	fs/f2fs/f2fs.h	/^	DPOLICY_BG,$/;"	e	enum:__anon16
DPOLICY_FORCE	fs/f2fs/f2fs.h	/^	DPOLICY_FORCE,$/;"	e	enum:__anon16
DPOLICY_FSTRIM	fs/f2fs/f2fs.h	/^	DPOLICY_FSTRIM,$/;"	e	enum:__anon16
DPOLICY_UMOUNT	fs/f2fs/f2fs.h	/^	DPOLICY_UMOUNT,$/;"	e	enum:__anon16
DUMMY_ENCRYPTION_ENABLED	fs/f2fs/f2fs.h	1129;"	d
DUMMY_ENCRYPTION_ENABLED	fs/f2fs/f2fs.h	1132;"	d
DUMMY_WRITTEN_PAGE	fs/f2fs/segment.h	211;"	d
D_DONE	fs/f2fs/f2fs.h	/^	D_DONE,$/;"	e	enum:__anon13
D_PREP	fs/f2fs/f2fs.h	/^	D_PREP,$/;"	e	enum:__anon13
D_SUBMIT	fs/f2fs/f2fs.h	/^	D_SUBMIT,$/;"	e	enum:__anon13
ENTRIES_IN_SUM	include/linux/f2fs_fs.h	392;"	d
ENTRY_SIZE	fs/f2fs/xattr.h	63;"	d
EXTENT_CACHE	fs/f2fs/node.h	/^	EXTENT_CACHE,	\/* indicates extent cache *\/$/;"	e	enum:mem_type
EXTENT_CACHE_SHRINK_NUMBER	fs/f2fs/f2fs.h	526;"	d
EXTRA_INFO_RESERVED	include/linux/f2fs_fs.h	432;"	d
EXT_TREE_VEC_SIZE	fs/f2fs/f2fs.h	520;"	d
F2FS_ACL_VERSION	fs/f2fs/acl.h	20;"	d
F2FS_APPEND_FL	fs/f2fs/f2fs.h	2200;"	d
F2FS_ATTR_OFFSET	fs/f2fs/sysfs.c	357;"	d	file:
F2FS_BLKSIZE	include/linux/f2fs_fs.h	21;"	d
F2FS_BLKSIZE_BITS	include/linux/f2fs_fs.h	22;"	d
F2FS_BLK_ALIGN	include/linux/f2fs_fs.h	25;"	d
F2FS_BLK_TO_BYTES	include/linux/f2fs_fs.h	31;"	d
F2FS_BYTES_TO_BLK	include/linux/f2fs_fs.h	30;"	d
F2FS_CKPT	fs/f2fs/f2fs.h	/^static inline struct f2fs_checkpoint *F2FS_CKPT(struct f2fs_sb_info *sbi)$/;"	f
F2FS_CLEAR_FEATURE	fs/f2fs/f2fs.h	155;"	d
F2FS_COMPRBLK_FL	fs/f2fs/f2fs.h	2205;"	d
F2FS_COMPR_FL	fs/f2fs/f2fs.h	2197;"	d
F2FS_CP_PACKS	include/linux/f2fs_fs.h	133;"	d
F2FS_DATA_EXIST	include/linux/f2fs_fs.h	217;"	d
F2FS_DDOT_HASH	include/linux/f2fs_fs.h	492;"	d
F2FS_DEF_PROJID	include/linux/f2fs_fs.h	562;"	d
F2FS_DEF_RESGID	fs/f2fs/f2fs.h	162;"	d
F2FS_DEF_RESUID	fs/f2fs/f2fs.h	161;"	d
F2FS_DIRSYNC_FL	fs/f2fs/f2fs.h	2213;"	d
F2FS_DIRTY_DATA	fs/f2fs/f2fs.h	/^	F2FS_DIRTY_DATA,$/;"	e	enum:count_type
F2FS_DIRTY_DENTS	fs/f2fs/f2fs.h	/^	F2FS_DIRTY_DENTS,$/;"	e	enum:count_type
F2FS_DIRTY_FL	fs/f2fs/f2fs.h	2204;"	d
F2FS_DIRTY_IMETA	fs/f2fs/f2fs.h	/^	F2FS_DIRTY_IMETA,$/;"	e	enum:count_type
F2FS_DIRTY_META	fs/f2fs/f2fs.h	/^	F2FS_DIRTY_META,$/;"	e	enum:count_type
F2FS_DIRTY_NODES	fs/f2fs/f2fs.h	/^	F2FS_DIRTY_NODES,$/;"	e	enum:count_type
F2FS_DIRTY_QDATA	fs/f2fs/f2fs.h	/^	F2FS_DIRTY_QDATA,$/;"	e	enum:count_type
F2FS_DOT_HASH	include/linux/f2fs_fs.h	491;"	d
F2FS_EA_INODE_FL	fs/f2fs/f2fs.h	2217;"	d
F2FS_ENCRYPT_FL	fs/f2fs/f2fs.h	2207;"	d
F2FS_EOFBLOCKS_FL	fs/f2fs/f2fs.h	2218;"	d
F2FS_EXTENSION_LEN	include/linux/f2fs_fs.h	24;"	d
F2FS_EXTENTS_FL	fs/f2fs/f2fs.h	2216;"	d
F2FS_EXTRA_ATTR	include/linux/f2fs_fs.h	219;"	d
F2FS_FEATURE_ATOMIC_WRITE	fs/f2fs/f2fs.h	141;"	d
F2FS_FEATURE_BLKZONED	fs/f2fs/f2fs.h	140;"	d
F2FS_FEATURE_ENCRYPT	fs/f2fs/f2fs.h	139;"	d
F2FS_FEATURE_EXTRA_ATTR	fs/f2fs/f2fs.h	142;"	d
F2FS_FEATURE_FLEXIBLE_INLINE_XATTR	fs/f2fs/f2fs.h	145;"	d
F2FS_FEATURE_FUNCS	fs/f2fs/f2fs.h	3339;"	d
F2FS_FEATURE_INODE_CHKSUM	fs/f2fs/f2fs.h	144;"	d
F2FS_FEATURE_INODE_CRTIME	fs/f2fs/f2fs.h	147;"	d
F2FS_FEATURE_LOST_FOUND	fs/f2fs/f2fs.h	148;"	d
F2FS_FEATURE_PRJQUOTA	fs/f2fs/f2fs.h	143;"	d
F2FS_FEATURE_QUOTA_INO	fs/f2fs/f2fs.h	146;"	d
F2FS_FEATURE_RO_ATTR	fs/f2fs/sysfs.c	374;"	d	file:
F2FS_FEATURE_VERITY	fs/f2fs/f2fs.h	149;"	d
F2FS_FITS_IN_INODE	fs/f2fs/f2fs.h	2675;"	d
F2FS_FL_INHERITED	fs/f2fs/f2fs.h	2235;"	d
F2FS_FL_USER_MODIFIABLE	fs/f2fs/f2fs.h	2224;"	d
F2FS_FL_USER_VISIBLE	fs/f2fs/f2fs.h	2223;"	d
F2FS_FL_XFLAG_VISIBLE	fs/f2fs/f2fs.h	2227;"	d
F2FS_FT_BLKDEV	include/linux/f2fs_fs.h	/^	F2FS_FT_BLKDEV,$/;"	e	enum:__anon39
F2FS_FT_CHRDEV	include/linux/f2fs_fs.h	/^	F2FS_FT_CHRDEV,$/;"	e	enum:__anon39
F2FS_FT_DIR	include/linux/f2fs_fs.h	/^	F2FS_FT_DIR,$/;"	e	enum:__anon39
F2FS_FT_FIFO	include/linux/f2fs_fs.h	/^	F2FS_FT_FIFO,$/;"	e	enum:__anon39
F2FS_FT_MAX	include/linux/f2fs_fs.h	/^	F2FS_FT_MAX$/;"	e	enum:__anon39
F2FS_FT_REG_FILE	include/linux/f2fs_fs.h	/^	F2FS_FT_REG_FILE,$/;"	e	enum:__anon39
F2FS_FT_SOCK	include/linux/f2fs_fs.h	/^	F2FS_FT_SOCK,$/;"	e	enum:__anon39
F2FS_FT_SYMLINK	include/linux/f2fs_fs.h	/^	F2FS_FT_SYMLINK,$/;"	e	enum:__anon39
F2FS_FT_UNKNOWN	include/linux/f2fs_fs.h	/^	F2FS_FT_UNKNOWN,$/;"	e	enum:__anon39
F2FS_GENERAL_RO_ATTR	fs/f2fs/sysfs.c	371;"	d	file:
F2FS_GET_BLOCK_BMAP	fs/f2fs/f2fs.h	/^	F2FS_GET_BLOCK_BMAP,$/;"	e	enum:__anon20
F2FS_GET_BLOCK_DEFAULT	fs/f2fs/f2fs.h	/^	F2FS_GET_BLOCK_DEFAULT,$/;"	e	enum:__anon20
F2FS_GET_BLOCK_FIEMAP	fs/f2fs/f2fs.h	/^	F2FS_GET_BLOCK_FIEMAP,$/;"	e	enum:__anon20
F2FS_GET_BLOCK_PRECACHE	fs/f2fs/f2fs.h	/^	F2FS_GET_BLOCK_PRECACHE,$/;"	e	enum:__anon20
F2FS_GET_BLOCK_PRE_AIO	fs/f2fs/f2fs.h	/^	F2FS_GET_BLOCK_PRE_AIO,$/;"	e	enum:__anon20
F2FS_GET_BLOCK_PRE_DIO	fs/f2fs/f2fs.h	/^	F2FS_GET_BLOCK_PRE_DIO,$/;"	e	enum:__anon20
F2FS_GOING_DOWN_FULLSYNC	fs/f2fs/f2fs.h	398;"	d
F2FS_GOING_DOWN_METAFLUSH	fs/f2fs/f2fs.h	401;"	d
F2FS_GOING_DOWN_METASYNC	fs/f2fs/f2fs.h	399;"	d
F2FS_GOING_DOWN_NOSYNC	fs/f2fs/f2fs.h	400;"	d
F2FS_HASH_COL_BIT	include/linux/f2fs_fs.h	494;"	d
F2FS_HAS_BLOCKS	fs/f2fs/f2fs.h	/^static inline int F2FS_HAS_BLOCKS(struct inode *inode)$/;"	f
F2FS_HAS_FEATURE	fs/f2fs/f2fs.h	151;"	d
F2FS_HUGE_FILE_FL	fs/f2fs/f2fs.h	2215;"	d
F2FS_I	fs/f2fs/f2fs.h	/^static inline struct f2fs_inode_info *F2FS_I(struct inode *inode)$/;"	f
F2FS_IMAGIC_FL	fs/f2fs/f2fs.h	2210;"	d
F2FS_IMMUTABLE_FL	fs/f2fs/f2fs.h	2199;"	d
F2FS_INDEX_FL	fs/f2fs/f2fs.h	2209;"	d
F2FS_INLINE_DATA	include/linux/f2fs_fs.h	215;"	d
F2FS_INLINE_DATA_FL	fs/f2fs/f2fs.h	2219;"	d
F2FS_INLINE_DENTRY	include/linux/f2fs_fs.h	216;"	d
F2FS_INLINE_DOTS	include/linux/f2fs_fs.h	218;"	d
F2FS_INLINE_XATTR	include/linux/f2fs_fs.h	214;"	d
F2FS_INMEM_PAGES	fs/f2fs/f2fs.h	/^	F2FS_INMEM_PAGES,$/;"	e	enum:count_type
F2FS_INODE	fs/f2fs/f2fs.h	/^static inline struct f2fs_inode *F2FS_INODE(struct page *page)$/;"	f
F2FS_IOC32_GETFLAGS	fs/f2fs/f2fs.h	407;"	d
F2FS_IOC32_GETVERSION	fs/f2fs/f2fs.h	409;"	d
F2FS_IOC32_SETFLAGS	fs/f2fs/f2fs.h	408;"	d
F2FS_IOCTL_MAGIC	fs/f2fs/f2fs.h	364;"	d
F2FS_IOC_ABORT_VOLATILE_WRITE	fs/f2fs/f2fs.h	369;"	d
F2FS_IOC_ADD_ATOMIC_FILE	fs/f2fs/f2fs.h	384;"	d
F2FS_IOC_COMMIT_ATOMIC_FILE_SET	fs/f2fs/f2fs.h	386;"	d
F2FS_IOC_COMMIT_ATOMIC_WRITE	fs/f2fs/f2fs.h	366;"	d
F2FS_IOC_DEFRAGMENT	fs/f2fs/f2fs.h	372;"	d
F2FS_IOC_END_ATOMIC_FILE_SET	fs/f2fs/f2fs.h	387;"	d
F2FS_IOC_FLUSH_DEVICE	fs/f2fs/f2fs.h	376;"	d
F2FS_IOC_FSGETXATTR	fs/f2fs/f2fs.h	412;"	d
F2FS_IOC_FSSETXATTR	fs/f2fs/f2fs.h	413;"	d
F2FS_IOC_GARBAGE_COLLECT	fs/f2fs/f2fs.h	370;"	d
F2FS_IOC_GARBAGE_COLLECT_RANGE	fs/f2fs/f2fs.h	378;"	d
F2FS_IOC_GETFLAGS	fs/f2fs/f2fs.h	360;"	d
F2FS_IOC_GETVERSION	fs/f2fs/f2fs.h	362;"	d
F2FS_IOC_GET_ENCRYPTION_POLICY	fs/f2fs/f2fs.h	390;"	d
F2FS_IOC_GET_ENCRYPTION_PWSALT	fs/f2fs/f2fs.h	391;"	d
F2FS_IOC_GET_FEATURES	fs/f2fs/f2fs.h	380;"	d
F2FS_IOC_GET_PIN_FILE	fs/f2fs/f2fs.h	382;"	d
F2FS_IOC_MOVE_RANGE	fs/f2fs/f2fs.h	374;"	d
F2FS_IOC_PRECACHE_EXTENTS	fs/f2fs/f2fs.h	383;"	d
F2FS_IOC_RELEASE_VOLATILE_WRITE	fs/f2fs/f2fs.h	368;"	d
F2FS_IOC_SETFLAGS	fs/f2fs/f2fs.h	361;"	d
F2FS_IOC_SET_ENCRYPTION_POLICY	fs/f2fs/f2fs.h	389;"	d
F2FS_IOC_SET_PIN_FILE	fs/f2fs/f2fs.h	381;"	d
F2FS_IOC_SHUTDOWN	fs/f2fs/f2fs.h	397;"	d
F2FS_IOC_START_ATOMIC_FILE_SET	fs/f2fs/f2fs.h	385;"	d
F2FS_IOC_START_ATOMIC_WRITE	fs/f2fs/f2fs.h	365;"	d
F2FS_IOC_START_VOLATILE_WRITE	fs/f2fs/f2fs.h	367;"	d
F2FS_IOC_WRITE_CHECKPOINT	fs/f2fs/f2fs.h	371;"	d
F2FS_IO_SIZE	include/linux/f2fs_fs.h	42;"	d
F2FS_IO_SIZE_BITS	include/linux/f2fs_fs.h	45;"	d
F2FS_IO_SIZE_BYTES	include/linux/f2fs_fs.h	44;"	d
F2FS_IO_SIZE_KB	include/linux/f2fs_fs.h	43;"	d
F2FS_IO_SIZE_MASK	include/linux/f2fs_fs.h	46;"	d
F2FS_IPU_ASYNC	fs/f2fs/segment.h	/^	F2FS_IPU_ASYNC,$/;"	e	enum:__anon7
F2FS_IPU_FORCE	fs/f2fs/segment.h	/^	F2FS_IPU_FORCE,$/;"	e	enum:__anon7
F2FS_IPU_FSYNC	fs/f2fs/segment.h	/^	F2FS_IPU_FSYNC,$/;"	e	enum:__anon7
F2FS_IPU_SSR	fs/f2fs/segment.h	/^	F2FS_IPU_SSR,$/;"	e	enum:__anon7
F2FS_IPU_SSR_UTIL	fs/f2fs/segment.h	/^	F2FS_IPU_SSR_UTIL,$/;"	e	enum:__anon7
F2FS_IPU_UTIL	fs/f2fs/segment.h	/^	F2FS_IPU_UTIL,$/;"	e	enum:__anon7
F2FS_I_SB	fs/f2fs/f2fs.h	/^static inline struct f2fs_sb_info *F2FS_I_SB(struct inode *inode)$/;"	f
F2FS_JOURNAL_DATA_FL	fs/f2fs/f2fs.h	2211;"	d
F2FS_LINK_MAX	fs/f2fs/f2fs.h	515;"	d
F2FS_LOG_SECTORS_PER_BLOCK	include/linux/f2fs_fs.h	20;"	d
F2FS_MAP_FLAGS	fs/f2fs/f2fs.h	573;"	d
F2FS_MAP_MAPPED	fs/f2fs/f2fs.h	571;"	d
F2FS_MAP_NEW	fs/f2fs/f2fs.h	570;"	d
F2FS_MAP_UNWRITTEN	fs/f2fs/f2fs.h	572;"	d
F2FS_MAX_EXTENSION	include/linux/f2fs_fs.h	23;"	d
F2FS_MAX_HASH	include/linux/f2fs_fs.h	493;"	d
F2FS_MAX_LOG_SECTOR_SIZE	include/linux/f2fs_fs.h	19;"	d
F2FS_MAX_QUOTAS	include/linux/f2fs_fs.h	40;"	d
F2FS_MAX_SEGMENT	include/linux/f2fs_fs.h	352;"	d
F2FS_META_INO	include/linux/f2fs_fs.h	38;"	d
F2FS_MIN_EXTENT_LEN	fs/f2fs/f2fs.h	523;"	d
F2FS_MIN_LOG_SECTOR_SIZE	include/linux/f2fs_fs.h	18;"	d
F2FS_MIN_SEGMENTS	fs/f2fs/segment.h	21;"	d
F2FS_MOUNT_ADAPTIVE	fs/f2fs/f2fs.h	92;"	d
F2FS_MOUNT_BG_GC	fs/f2fs/f2fs.h	75;"	d
F2FS_MOUNT_DATA_FLUSH	fs/f2fs/f2fs.h	90;"	d
F2FS_MOUNT_DISABLE_EXT_IDENTIFY	fs/f2fs/f2fs.h	81;"	d
F2FS_MOUNT_DISABLE_ROLL_FORWARD	fs/f2fs/f2fs.h	76;"	d
F2FS_MOUNT_DISCARD	fs/f2fs/f2fs.h	77;"	d
F2FS_MOUNT_EXTENT_CACHE	fs/f2fs/f2fs.h	88;"	d
F2FS_MOUNT_FASTBOOT	fs/f2fs/f2fs.h	87;"	d
F2FS_MOUNT_FAULT_INJECTION	fs/f2fs/f2fs.h	91;"	d
F2FS_MOUNT_FLUSH_MERGE	fs/f2fs/f2fs.h	85;"	d
F2FS_MOUNT_FORCE_FG_GC	fs/f2fs/f2fs.h	89;"	d
F2FS_MOUNT_GRPQUOTA	fs/f2fs/f2fs.h	95;"	d
F2FS_MOUNT_INLINE_DATA	fs/f2fs/f2fs.h	83;"	d
F2FS_MOUNT_INLINE_DENTRY	fs/f2fs/f2fs.h	84;"	d
F2FS_MOUNT_INLINE_XATTR	fs/f2fs/f2fs.h	82;"	d
F2FS_MOUNT_INLINE_XATTR_SIZE	fs/f2fs/f2fs.h	98;"	d
F2FS_MOUNT_LFS	fs/f2fs/f2fs.h	93;"	d
F2FS_MOUNT_NOBARRIER	fs/f2fs/f2fs.h	86;"	d
F2FS_MOUNT_NOHEAP	fs/f2fs/f2fs.h	78;"	d
F2FS_MOUNT_POSIX_ACL	fs/f2fs/f2fs.h	80;"	d
F2FS_MOUNT_PRJQUOTA	fs/f2fs/f2fs.h	96;"	d
F2FS_MOUNT_QUOTA	fs/f2fs/f2fs.h	97;"	d
F2FS_MOUNT_RESERVE_ROOT	fs/f2fs/f2fs.h	99;"	d
F2FS_MOUNT_USRQUOTA	fs/f2fs/f2fs.h	94;"	d
F2FS_MOUNT_XATTR_USER	fs/f2fs/f2fs.h	79;"	d
F2FS_M_SB	fs/f2fs/f2fs.h	/^static inline struct f2fs_sb_info *F2FS_M_SB(struct address_space *mapping)$/;"	f
F2FS_NAME_LEN	include/linux/f2fs_fs.h	192;"	d
F2FS_NOATIME_FL	fs/f2fs/f2fs.h	2202;"	d
F2FS_NOCOMPR_FL	fs/f2fs/f2fs.h	2206;"	d
F2FS_NODE	fs/f2fs/f2fs.h	/^static inline struct f2fs_node *F2FS_NODE(struct page *page)$/;"	f
F2FS_NODE_INO	include/linux/f2fs_fs.h	37;"	d
F2FS_NODUMP_FL	fs/f2fs/f2fs.h	2201;"	d
F2FS_NOTAIL_FL	fs/f2fs/f2fs.h	2212;"	d
F2FS_OLD_ATTRIBUTE_SIZE	fs/f2fs/f2fs.h	2674;"	d
F2FS_OPTION	fs/f2fs/f2fs.h	101;"	d
F2FS_ORPHANS_PER_BLOCK	include/linux/f2fs_fs.h	169;"	d
F2FS_OTHER_FLMASK	fs/f2fs/f2fs.h	2245;"	d
F2FS_PIN_FILE	include/linux/f2fs_fs.h	220;"	d
F2FS_PROJINHERIT_FL	fs/f2fs/f2fs.h	2220;"	d
F2FS_P_SB	fs/f2fs/f2fs.h	/^static inline struct f2fs_sb_info *F2FS_P_SB(struct page *page)$/;"	f
F2FS_RAW_SUPER	fs/f2fs/f2fs.h	/^static inline struct f2fs_super_block *F2FS_RAW_SUPER(struct f2fs_sb_info *sbi)$/;"	f
F2FS_REG_FLMASK	fs/f2fs/f2fs.h	2242;"	d
F2FS_REPORT_NR_ZONES	fs/f2fs/super.c	2420;"	d	file:
F2FS_RESERVED_FL	fs/f2fs/f2fs.h	2221;"	d
F2FS_RESERVED_NODE_NUM	include/linux/f2fs_fs.h	34;"	d
F2FS_ROOT_INO	include/linux/f2fs_fs.h	36;"	d
F2FS_RW_ATTR	fs/f2fs/sysfs.c	366;"	d	file:
F2FS_SB	fs/f2fs/f2fs.h	/^static inline struct f2fs_sb_info *F2FS_SB(struct super_block *sb)$/;"	f
F2FS_SBI	fs/f2fs/sysfs.c	/^	F2FS_SBI,	\/* struct f2fs_sb_info *\/$/;"	e	enum:__anon8	file:
F2FS_SECRM_FL	fs/f2fs/f2fs.h	2195;"	d
F2FS_SET_FEATURE	fs/f2fs/f2fs.h	153;"	d
F2FS_SLOT_LEN	include/linux/f2fs_fs.h	499;"	d
F2FS_SLOT_LEN_BITS	include/linux/f2fs_fs.h	500;"	d
F2FS_STAT	fs/f2fs/f2fs.h	/^static inline struct f2fs_stat_info *F2FS_STAT(struct f2fs_sb_info *sbi)$/;"	f
F2FS_SUPER_OFFSET	include/linux/f2fs_fs.h	17;"	d
F2FS_SUPPORTED_FS_XFLAGS	fs/f2fs/file.c	2647;"	d	file:
F2FS_SYNC_FL	fs/f2fs/f2fs.h	2198;"	d
F2FS_SYSTEM_ADVISE_NAME	fs/f2fs/xattr.h	30;"	d
F2FS_TOPDIR_FL	fs/f2fs/f2fs.h	2214;"	d
F2FS_TOTAL_EXTRA_ATTR_SIZE	fs/f2fs/f2fs.h	2670;"	d
F2FS_UNRM_FL	fs/f2fs/f2fs.h	2196;"	d
F2FS_WB_CP_DATA	fs/f2fs/f2fs.h	/^	F2FS_WB_CP_DATA,$/;"	e	enum:count_type
F2FS_WB_DATA	fs/f2fs/f2fs.h	/^	F2FS_WB_DATA,$/;"	e	enum:count_type
F2FS_XATTR_INDEX_ADVISE	fs/f2fs/xattr.h	37;"	d
F2FS_XATTR_INDEX_ENCRYPTION	fs/f2fs/xattr.h	39;"	d
F2FS_XATTR_INDEX_LUSTRE	fs/f2fs/xattr.h	35;"	d
F2FS_XATTR_INDEX_POSIX_ACL_ACCESS	fs/f2fs/xattr.h	32;"	d
F2FS_XATTR_INDEX_POSIX_ACL_DEFAULT	fs/f2fs/xattr.h	33;"	d
F2FS_XATTR_INDEX_SECURITY	fs/f2fs/xattr.h	36;"	d
F2FS_XATTR_INDEX_TRUSTED	fs/f2fs/xattr.h	34;"	d
F2FS_XATTR_INDEX_USER	fs/f2fs/xattr.h	31;"	d
F2FS_XATTR_MAGIC	fs/f2fs/xattr.h	24;"	d
F2FS_XATTR_NAME_ENCRYPTION_CONTEXT	fs/f2fs/xattr.h	41;"	d
F2FS_XATTR_REFCOUNT_MAX	fs/f2fs/xattr.h	27;"	d
FADVISE_COLD_BIT	fs/f2fs/f2fs.h	599;"	d
FADVISE_ENCRYPT_BIT	fs/f2fs/f2fs.h	601;"	d
FADVISE_ENC_NAME_BIT	fs/f2fs/f2fs.h	602;"	d
FADVISE_HOT_BIT	fs/f2fs/f2fs.h	604;"	d
FADVISE_KEEP_SIZE_BIT	fs/f2fs/f2fs.h	603;"	d
FADVISE_LOST_PINO_BIT	fs/f2fs/f2fs.h	600;"	d
FADVISE_VERITY_BIT	fs/f2fs/f2fs.h	605;"	d
FAULT_ALLOC_BIO	fs/f2fs/f2fs.h	/^	FAULT_ALLOC_BIO,$/;"	e	enum:__anon9
FAULT_ALLOC_NID	fs/f2fs/f2fs.h	/^	FAULT_ALLOC_NID,$/;"	e	enum:__anon9
FAULT_BLOCK	fs/f2fs/f2fs.h	/^	FAULT_BLOCK,$/;"	e	enum:__anon9
FAULT_CHECKPOINT	fs/f2fs/f2fs.h	/^	FAULT_CHECKPOINT,$/;"	e	enum:__anon9
FAULT_DIR_DEPTH	fs/f2fs/f2fs.h	/^	FAULT_DIR_DEPTH,$/;"	e	enum:__anon9
FAULT_EVICT_INODE	fs/f2fs/f2fs.h	/^	FAULT_EVICT_INODE,$/;"	e	enum:__anon9
FAULT_INFO_RATE	fs/f2fs/sysfs.c	/^	FAULT_INFO_RATE,	\/* struct f2fs_fault_info *\/$/;"	e	enum:__anon8	file:
FAULT_INFO_TYPE	fs/f2fs/sysfs.c	/^	FAULT_INFO_TYPE,	\/* struct f2fs_fault_info *\/$/;"	e	enum:__anon8	file:
FAULT_IO	fs/f2fs/f2fs.h	/^	FAULT_IO,$/;"	e	enum:__anon9
FAULT_KMALLOC	fs/f2fs/f2fs.h	/^	FAULT_KMALLOC,$/;"	e	enum:__anon9
FAULT_KVMALLOC	fs/f2fs/f2fs.h	/^	FAULT_KVMALLOC,$/;"	e	enum:__anon9
FAULT_MAX	fs/f2fs/f2fs.h	/^	FAULT_MAX,$/;"	e	enum:__anon9
FAULT_ORPHAN	fs/f2fs/f2fs.h	/^	FAULT_ORPHAN,$/;"	e	enum:__anon9
FAULT_PAGE_ALLOC	fs/f2fs/f2fs.h	/^	FAULT_PAGE_ALLOC,$/;"	e	enum:__anon9
FAULT_PAGE_GET	fs/f2fs/f2fs.h	/^	FAULT_PAGE_GET,$/;"	e	enum:__anon9
FAULT_TRUNCATE	fs/f2fs/f2fs.h	/^	FAULT_TRUNCATE,$/;"	e	enum:__anon9
FDEV	fs/f2fs/f2fs.h	1058;"	d
FEAT_ATOMIC_WRITE	fs/f2fs/sysfs.c	/^	FEAT_ATOMIC_WRITE,$/;"	e	enum:feat_id	file:
FEAT_BLKZONED	fs/f2fs/sysfs.c	/^	FEAT_BLKZONED,$/;"	e	enum:feat_id	file:
FEAT_CRYPTO	fs/f2fs/sysfs.c	/^	FEAT_CRYPTO = 0,$/;"	e	enum:feat_id	file:
FEAT_EXTRA_ATTR	fs/f2fs/sysfs.c	/^	FEAT_EXTRA_ATTR,$/;"	e	enum:feat_id	file:
FEAT_FLEXIBLE_INLINE_XATTR	fs/f2fs/sysfs.c	/^	FEAT_FLEXIBLE_INLINE_XATTR,$/;"	e	enum:feat_id	file:
FEAT_INODE_CHECKSUM	fs/f2fs/sysfs.c	/^	FEAT_INODE_CHECKSUM,$/;"	e	enum:feat_id	file:
FEAT_INODE_CRTIME	fs/f2fs/sysfs.c	/^	FEAT_INODE_CRTIME,$/;"	e	enum:feat_id	file:
FEAT_LOST_FOUND	fs/f2fs/sysfs.c	/^	FEAT_LOST_FOUND,$/;"	e	enum:feat_id	file:
FEAT_PROJECT_QUOTA	fs/f2fs/sysfs.c	/^	FEAT_PROJECT_QUOTA,$/;"	e	enum:feat_id	file:
FEAT_QUOTA_INO	fs/f2fs/sysfs.c	/^	FEAT_QUOTA_INO,$/;"	e	enum:feat_id	file:
FG_GC	fs/f2fs/segment.h	/^	FG_GC,$/;"	e	enum:__anon6
FILE_INODE	fs/f2fs/f2fs.h	/^	FILE_INODE,			\/* for dirty regular\/symlink inode *\/$/;"	e	enum:inode_type
FI_ACL_MODE	fs/f2fs/f2fs.h	/^	FI_ACL_MODE,		\/* indicate acl mode *\/$/;"	e	enum:__anon28
FI_ADDED_ATOMIC_FILE	fs/f2fs/f2fs.h	/^	FI_ADDED_ATOMIC_FILE,	\/* indicate file is in atomic file set *\/$/;"	e	enum:__anon28
FI_APPEND_WRITE	fs/f2fs/f2fs.h	/^	FI_APPEND_WRITE,	\/* inode has appended data *\/$/;"	e	enum:__anon28
FI_ATOMIC_COMMIT	fs/f2fs/f2fs.h	/^	FI_ATOMIC_COMMIT,	\/* indicate the state of atomical committing *\/$/;"	e	enum:__anon28
FI_ATOMIC_FILE	fs/f2fs/f2fs.h	/^	FI_ATOMIC_FILE,		\/* indicate atomic file *\/$/;"	e	enum:__anon28
FI_ATOMIC_REVOKE_REQUEST	fs/f2fs/f2fs.h	/^	FI_ATOMIC_REVOKE_REQUEST, \/* request to drop atomic data *\/$/;"	e	enum:__anon28
FI_AUTO_RECOVER	fs/f2fs/f2fs.h	/^	FI_AUTO_RECOVER,	\/* indicate inode is recoverable *\/$/;"	e	enum:__anon28
FI_DATA_EXIST	fs/f2fs/f2fs.h	/^	FI_DATA_EXIST,		\/* indicate data exists *\/$/;"	e	enum:__anon28
FI_DIRTY_DIR	fs/f2fs/f2fs.h	/^	FI_DIRTY_DIR,		\/* indicate directory has dirty pages *\/$/;"	e	enum:__anon28
FI_DIRTY_FILE	fs/f2fs/f2fs.h	/^	FI_DIRTY_FILE,		\/* indicate regular\/symlink has dirty pages *\/$/;"	e	enum:__anon28
FI_DIRTY_INODE	fs/f2fs/f2fs.h	/^	FI_DIRTY_INODE,		\/* indicate inode is dirty or not *\/$/;"	e	enum:__anon28
FI_DO_DEFRAG	fs/f2fs/f2fs.h	/^	FI_DO_DEFRAG,		\/* indicate defragment is running *\/$/;"	e	enum:__anon28
FI_DROP_CACHE	fs/f2fs/f2fs.h	/^	FI_DROP_CACHE,		\/* drop dirty page cache *\/$/;"	e	enum:__anon28
FI_EXTRA_ATTR	fs/f2fs/f2fs.h	/^	FI_EXTRA_ATTR,		\/* indicate file has extra attribute *\/$/;"	e	enum:__anon28
FI_FIRST_BLOCK_WRITTEN	fs/f2fs/f2fs.h	/^	FI_FIRST_BLOCK_WRITTEN,	\/* indicate #0 data block was written *\/$/;"	e	enum:__anon28
FI_FREE_NID	fs/f2fs/f2fs.h	/^	FI_FREE_NID,		\/* free allocated nide *\/$/;"	e	enum:__anon28
FI_HOT_DATA	fs/f2fs/f2fs.h	/^	FI_HOT_DATA,		\/* indicate file is hot *\/$/;"	e	enum:__anon28
FI_INC_LINK	fs/f2fs/f2fs.h	/^	FI_INC_LINK,		\/* need to increment i_nlink *\/$/;"	e	enum:__anon28
FI_INLINE_DATA	fs/f2fs/f2fs.h	/^	FI_INLINE_DATA,		\/* used for inline data*\/$/;"	e	enum:__anon28
FI_INLINE_DENTRY	fs/f2fs/f2fs.h	/^	FI_INLINE_DENTRY,	\/* used for inline dentry *\/$/;"	e	enum:__anon28
FI_INLINE_DOTS	fs/f2fs/f2fs.h	/^	FI_INLINE_DOTS,		\/* indicate inline dot dentries *\/$/;"	e	enum:__anon28
FI_INLINE_XATTR	fs/f2fs/f2fs.h	/^	FI_INLINE_XATTR,	\/* used for inline xattr *\/$/;"	e	enum:__anon28
FI_NEED_IPU	fs/f2fs/f2fs.h	/^	FI_NEED_IPU,		\/* used for ipu per file *\/$/;"	e	enum:__anon28
FI_NEW_INODE	fs/f2fs/f2fs.h	/^	FI_NEW_INODE,		\/* indicate newly allocated inode *\/$/;"	e	enum:__anon28
FI_NO_ALLOC	fs/f2fs/f2fs.h	/^	FI_NO_ALLOC,		\/* should not allocate any blocks *\/$/;"	e	enum:__anon28
FI_NO_EXTENT	fs/f2fs/f2fs.h	/^	FI_NO_EXTENT,		\/* not to use the extent cache *\/$/;"	e	enum:__anon28
FI_NO_PREALLOC	fs/f2fs/f2fs.h	/^	FI_NO_PREALLOC,		\/* indicate skipped preallocated blocks *\/$/;"	e	enum:__anon28
FI_PIN_FILE	fs/f2fs/f2fs.h	/^	FI_PIN_FILE,		\/* indicate file should not be gced *\/$/;"	e	enum:__anon28
FI_PROJ_INHERIT	fs/f2fs/f2fs.h	/^	FI_PROJ_INHERIT,	\/* indicate file inherits projectid *\/$/;"	e	enum:__anon28
FI_UPDATE_WRITE	fs/f2fs/f2fs.h	/^	FI_UPDATE_WRITE,	\/* inode has in-place-update data *\/$/;"	e	enum:__anon28
FI_VOLATILE_FILE	fs/f2fs/f2fs.h	/^	FI_VOLATILE_FILE,	\/* indicate volatile file *\/$/;"	e	enum:__anon28
FLUSH_DEVICE	fs/f2fs/segment.h	/^	FLUSH_DEVICE,$/;"	e	enum:__anon5
FLUSH_INO	fs/f2fs/f2fs.h	/^	FLUSH_INO,		\/* for multiple device flushing *\/$/;"	e	enum:__anon12
FORCE_FG_GC	fs/f2fs/segment.h	/^	FORCE_FG_GC,$/;"	e	enum:__anon6
FREE_I	fs/f2fs/f2fs.h	/^static inline struct free_segmap_info *FREE_I(struct f2fs_sb_info *sbi)$/;"	f
FREE_NID	fs/f2fs/f2fs.h	/^	FREE_NID,		\/* newly added to free nid list *\/$/;"	e	enum:nid_state
FREE_NIDS	fs/f2fs/node.h	/^	FREE_NIDS,	\/* indicates the free nid list *\/$/;"	e	enum:mem_type
FREE_NID_PAGES	fs/f2fs/node.h	18;"	d
FSYNC_BIT_SHIFT	include/linux/f2fs_fs.h	/^	FSYNC_BIT_SHIFT,$/;"	e	enum:__anon32
FSYNC_MODE_NOBARRIER	fs/f2fs/f2fs.h	/^	FSYNC_MODE_NOBARRIER,	\/* fsync behaves nobarrier based on posix *\/$/;"	e	enum:fsync_mode
FSYNC_MODE_POSIX	fs/f2fs/f2fs.h	/^	FSYNC_MODE_POSIX,	\/* fsync follows posix semantics *\/$/;"	e	enum:fsync_mode
FSYNC_MODE_STRICT	fs/f2fs/f2fs.h	/^	FSYNC_MODE_STRICT,	\/* fsync behaves in line with ext4 *\/$/;"	e	enum:fsync_mode
FS_CP_DATA_IO	fs/f2fs/f2fs.h	/^	FS_CP_DATA_IO,			\/* data IOs from checkpoint *\/$/;"	e	enum:iostat_type
FS_CP_META_IO	fs/f2fs/f2fs.h	/^	FS_CP_META_IO,			\/* meta IOs from checkpoint *\/$/;"	e	enum:iostat_type
FS_CP_NODE_IO	fs/f2fs/f2fs.h	/^	FS_CP_NODE_IO,			\/* node IOs from checkpoint *\/$/;"	e	enum:iostat_type
FS_DATA_IO	fs/f2fs/f2fs.h	/^	FS_DATA_IO,			\/* data IOs from kworker\/fsync\/reclaimer *\/$/;"	e	enum:iostat_type
FS_DISCARD	fs/f2fs/f2fs.h	/^	FS_DISCARD,			\/* discard *\/$/;"	e	enum:iostat_type
FS_GC_DATA_IO	fs/f2fs/f2fs.h	/^	FS_GC_DATA_IO,			\/* data IOs from forground gc *\/$/;"	e	enum:iostat_type
FS_GC_NODE_IO	fs/f2fs/f2fs.h	/^	FS_GC_NODE_IO,			\/* node IOs from forground gc *\/$/;"	e	enum:iostat_type
FS_META_IO	fs/f2fs/f2fs.h	/^	FS_META_IO,			\/* meta IOs from kworker\/reclaimer *\/$/;"	e	enum:iostat_type
FS_NODE_IO	fs/f2fs/f2fs.h	/^	FS_NODE_IO,			\/* node IOs from kworker\/fsync\/reclaimer *\/$/;"	e	enum:iostat_type
GC_CB	fs/f2fs/segment.h	/^	GC_CB = 0,$/;"	e	enum:__anon5
GC_FAILURE_ATOMIC	fs/f2fs/f2fs.h	/^	GC_FAILURE_ATOMIC,$/;"	e	enum:__anon21
GC_FAILURE_PIN	fs/f2fs/f2fs.h	/^	GC_FAILURE_PIN,$/;"	e	enum:__anon21
GC_GREEDY	fs/f2fs/segment.h	/^	GC_GREEDY,$/;"	e	enum:__anon5
GC_IDLE_CB	fs/f2fs/f2fs.h	/^	GC_IDLE_CB,$/;"	e	enum:__anon25
GC_IDLE_GREEDY	fs/f2fs/f2fs.h	/^	GC_IDLE_GREEDY,$/;"	e	enum:__anon25
GC_NORMAL	fs/f2fs/f2fs.h	/^	GC_NORMAL,$/;"	e	enum:__anon25
GC_THREAD	fs/f2fs/sysfs.c	/^	GC_THREAD,	\/* struct f2fs_gc_thread *\/$/;"	e	enum:__anon8	file:
GC_THREAD_MIN_WB_PAGES	fs/f2fs/gc.h	11;"	d
GC_URGENT	fs/f2fs/f2fs.h	/^	GC_URGENT,$/;"	e	enum:__anon25
GET_BLKOFF_FROM_SEG0	fs/f2fs/segment.h	84;"	d
GET_DENTRY_SLOTS	include/linux/f2fs_fs.h	502;"	d
GET_L2R_SEGNO	fs/f2fs/segment.h	24;"	d
GET_ORPHAN_BLOCKS	include/linux/f2fs_fs.h	171;"	d
GET_R2L_SEGNO	fs/f2fs/segment.h	25;"	d
GET_SEC_FROM_SEG	fs/f2fs/segment.h	93;"	d
GET_SEGNO	fs/f2fs/segment.h	87;"	d
GET_SEGNO_FROM_SEG0	fs/f2fs/segment.h	82;"	d
GET_SEGOFF_FROM_SEG0	fs/f2fs/segment.h	81;"	d
GET_SEG_FROM_SEC	fs/f2fs/segment.h	95;"	d
GET_SIT_TYPE	include/linux/f2fs_fs.h	363;"	d
GET_SIT_VBLOCKS	include/linux/f2fs_fs.h	361;"	d
GET_SUM_BLOCK	fs/f2fs/segment.h	102;"	d
GET_SUM_TYPE	fs/f2fs/segment.h	105;"	d
GET_ZONE_FROM_SEC	fs/f2fs/segment.h	97;"	d
GET_ZONE_FROM_SEG	fs/f2fs/segment.h	99;"	d
GFP_F2FS_ZERO	include/linux/f2fs_fs.h	49;"	d
HAS_FSYNCED_INODE	fs/f2fs/node.h	/^	HAS_FSYNCED_INODE,	\/* is the inode fsynced before? *\/$/;"	e	enum:__anon1
HAS_LAST_FSYNC	fs/f2fs/node.h	/^	HAS_LAST_FSYNC,		\/* has the latest node fsync mark? *\/$/;"	e	enum:__anon1
HOT	fs/f2fs/f2fs.h	/^	HOT = 0,	\/* must be zero for meta bio *\/$/;"	e	enum:temp_type
INLINE_DENTRY_BITMAP_SIZE	fs/f2fs/f2fs.h	452;"	d
INLINE_RESERVED_SIZE	fs/f2fs/f2fs.h	454;"	d
INMEM	fs/f2fs/f2fs.h	/^	INMEM,		\/* the below types are used by tracepoints only. *\/$/;"	e	enum:page_type
INMEM_DROP	fs/f2fs/f2fs.h	/^	INMEM_DROP,$/;"	e	enum:page_type
INMEM_INVALIDATE	fs/f2fs/f2fs.h	/^	INMEM_INVALIDATE,$/;"	e	enum:page_type
INMEM_PAGES	fs/f2fs/node.h	/^	INMEM_PAGES,	\/* indicates inmemory pages *\/$/;"	e	enum:mem_type
INMEM_REVOKE	fs/f2fs/f2fs.h	/^	INMEM_REVOKE,$/;"	e	enum:page_type
INO_ENTRIES	fs/f2fs/node.h	/^	INO_ENTRIES,	\/* indicates inode entries *\/$/;"	e	enum:mem_type
IPU	fs/f2fs/f2fs.h	/^	IPU,$/;"	e	enum:page_type
IS_ATOMIC_WRITTEN_PAGE	fs/f2fs/segment.h	213;"	d
IS_CHECKPOINTED	fs/f2fs/node.h	/^	IS_CHECKPOINTED,	\/* is it checkpointed before? *\/$/;"	e	enum:__anon1
IS_COLD	fs/f2fs/segment.h	32;"	d
IS_CURSEC	fs/f2fs/segment.h	42;"	d
IS_CURSEG	fs/f2fs/segment.h	34;"	d
IS_DATASEG	fs/f2fs/segment.h	27;"	d
IS_DIRTY	fs/f2fs/node.h	/^	IS_DIRTY,		\/* this nat entry is dirty? *\/$/;"	e	enum:__anon1
IS_DNODE	fs/f2fs/node.h	/^static inline bool IS_DNODE(struct page *node_page)$/;"	f
IS_DUMMY_WRITTEN_PAGE	fs/f2fs/segment.h	215;"	d
IS_FAULT_SET	fs/f2fs/f2fs.h	69;"	d
IS_HOT	fs/f2fs/segment.h	30;"	d
IS_INODE	fs/f2fs/f2fs.h	/^static inline bool IS_INODE(struct page *page)$/;"	f
IS_NODESEG	fs/f2fs/segment.h	28;"	d
IS_PREALLOC	fs/f2fs/node.h	/^	IS_PREALLOC,		\/* nat entry is preallocated *\/$/;"	e	enum:__anon1
IS_WARM	fs/f2fs/segment.h	31;"	d
IS_XATTR_LAST_ENTRY	fs/f2fs/xattr.h	69;"	d
LFS	fs/f2fs/segment.h	/^	LFS = 0,$/;"	e	enum:__anon4
LIMIT_FREE_BLOCK	fs/f2fs/gc.h	21;"	d
LIMIT_INVALID_BLOCK	fs/f2fs/gc.h	20;"	d
LOCKED_PAGE	fs/f2fs/node.h	39;"	d
LOCK_DONE	fs/f2fs/f2fs.h	/^	LOCK_DONE,$/;"	e	enum:need_lock_type
LOCK_REQ	fs/f2fs/f2fs.h	/^	LOCK_REQ = 0,$/;"	e	enum:need_lock_type
LOCK_RETRY	fs/f2fs/f2fs.h	/^	LOCK_RETRY,$/;"	e	enum:need_lock_type
LOOKUP_NODE	fs/f2fs/f2fs.h	/^	LOOKUP_NODE,			\/* look up a node without readahead *\/$/;"	e	enum:__anon17
LOOKUP_NODE_RA	fs/f2fs/f2fs.h	/^	LOOKUP_NODE_RA,			\/*$/;"	e	enum:__anon17
MAIN_BLKADDR	fs/f2fs/segment.h	56;"	d
MAIN_SECS	fs/f2fs/segment.h	64;"	d
MAIN_SEGS	fs/f2fs/segment.h	63;"	d
MASTER_NODE_OFFSET	fs/f2fs/f2fs.h	690;"	d
MAX_ACTIVE_DATA_LOGS	include/linux/f2fs_fs.h	59;"	d
MAX_ACTIVE_LOGS	include/linux/f2fs_fs.h	57;"	d
MAX_ACTIVE_NODE_LOGS	include/linux/f2fs_fs.h	58;"	d
MAX_BLKADDR	fs/f2fs/segment.h	71;"	d
MAX_DEVICES	include/linux/f2fs_fs.h	64;"	d
MAX_DIR_BUCKETS	include/linux/f2fs_fs.h	508;"	d
MAX_DIR_HASH_DEPTH	include/linux/f2fs_fs.h	505;"	d
MAX_DIR_RA_PAGES	fs/f2fs/f2fs.h	517;"	d
MAX_DISCARD_BLOCKS	fs/f2fs/f2fs.h	179;"	d
MAX_DPOLICY	fs/f2fs/f2fs.h	/^	MAX_DPOLICY,$/;"	e	enum:__anon16
MAX_FREE_NIDS	fs/f2fs/node.h	19;"	d
MAX_GC_FAILURE	fs/f2fs/f2fs.h	/^	MAX_GC_FAILURE$/;"	e	enum:__anon21
MAX_GC_POLICY	fs/f2fs/segment.h	/^	MAX_GC_POLICY,$/;"	e	enum:__anon5
MAX_INLINE_DATA	fs/f2fs/f2fs.h	443;"	d
MAX_INO_ENTRY	fs/f2fs/f2fs.h	/^	MAX_INO_ENTRY,		\/* max. list *\/$/;"	e	enum:__anon12
MAX_NAT_JENTRIES	fs/f2fs/f2fs.h	330;"	d
MAX_NID_STATE	fs/f2fs/f2fs.h	/^	MAX_NID_STATE,$/;"	e	enum:nid_state
MAX_PATH_LEN	include/linux/f2fs_fs.h	63;"	d
MAX_PLIST_NUM	fs/f2fs/f2fs.h	240;"	d
MAX_RA_NODE	fs/f2fs/node.h	24;"	d
MAX_SIT_JENTRIES	fs/f2fs/f2fs.h	331;"	d
MAX_SKIP_ATOMIC_COUNT	fs/f2fs/segment.h	218;"	d
MAX_TIME	fs/f2fs/f2fs.h	/^	MAX_TIME,$/;"	e	enum:__anon24
MAX_VALUE_LEN	fs/f2fs/xattr.h	80;"	d
MAX_VOLUME_NAME	include/linux/f2fs_fs.h	62;"	d
META	fs/f2fs/f2fs.h	/^	META,$/;"	e	enum:page_type
META_CP	fs/f2fs/f2fs.h	/^	META_CP,$/;"	e	enum:__anon11
META_FLUSH	fs/f2fs/f2fs.h	/^	META_FLUSH,$/;"	e	enum:page_type
META_MAPPING	fs/f2fs/f2fs.h	/^static inline struct address_space *META_MAPPING(struct f2fs_sb_info *sbi)$/;"	f
META_NAT	fs/f2fs/f2fs.h	/^	META_NAT,$/;"	e	enum:__anon11
META_POR	fs/f2fs/f2fs.h	/^	META_POR,$/;"	e	enum:__anon11
META_SIT	fs/f2fs/f2fs.h	/^	META_SIT,$/;"	e	enum:__anon11
META_SSA	fs/f2fs/f2fs.h	/^	META_SSA,$/;"	e	enum:__anon11
MIN_OFFSET	fs/f2fs/xattr.h	77;"	d
NATVEC_SIZE	fs/f2fs/node.h	35;"	d
NAT_BITMAP	fs/f2fs/f2fs.h	/^	NAT_BITMAP,$/;"	e	enum:__anon10
NAT_BLOCK_OFFSET	fs/f2fs/node.h	15;"	d
NAT_ENTRIES	fs/f2fs/node.h	/^	NAT_ENTRIES,	\/* indicates the cached nat entry *\/$/;"	e	enum:mem_type
NAT_ENTRY_BITMAP_SIZE	include/linux/f2fs_fs.h	322;"	d
NAT_ENTRY_BITMAP_SIZE_ALIGNED	include/linux/f2fs_fs.h	323;"	d
NAT_ENTRY_PER_BLOCK	include/linux/f2fs_fs.h	321;"	d
NAT_JOURNAL	include/linux/f2fs_fs.h	/^	NAT_JOURNAL = 0,$/;"	e	enum:__anon36
NAT_JOURNAL_ENTRIES	include/linux/f2fs_fs.h	420;"	d
NAT_JOURNAL_RESERVED	include/linux/f2fs_fs.h	422;"	d
NEW_ADDR	include/linux/f2fs_fs.h	28;"	d
NEXT_FREE_BLKADDR	fs/f2fs/segment.h	78;"	d
NIDS_PER_BLOCK	include/linux/f2fs_fs.h	201;"	d
NM_I	fs/f2fs/f2fs.h	/^static inline struct f2fs_nm_info *NM_I(struct f2fs_sb_info *sbi)$/;"	f
NM_INFO	fs/f2fs/sysfs.c	/^	NM_INFO,	\/* struct f2fs_nm_info *\/$/;"	e	enum:__anon8	file:
NODE	fs/f2fs/f2fs.h	/^	NODE,$/;"	e	enum:page_type
NODE_DIND_BLOCK	include/linux/f2fs_fs.h	212;"	d
NODE_DIR1_BLOCK	include/linux/f2fs_fs.h	208;"	d
NODE_DIR2_BLOCK	include/linux/f2fs_fs.h	209;"	d
NODE_IND1_BLOCK	include/linux/f2fs_fs.h	210;"	d
NODE_IND2_BLOCK	include/linux/f2fs_fs.h	211;"	d
NODE_MAPPING	fs/f2fs/f2fs.h	/^static inline struct address_space *NODE_MAPPING(struct f2fs_sb_info *sbi)$/;"	f
NO_CHECK_TYPE	fs/f2fs/f2fs.h	/^	NO_CHECK_TYPE,$/;"	e	enum:__anon22
NR_COUNT_TYPE	fs/f2fs/f2fs.h	/^	NR_COUNT_TYPE,$/;"	e	enum:count_type
NR_CURSEG_DATA_TYPE	fs/f2fs/f2fs.h	866;"	d
NR_CURSEG_NODE_TYPE	fs/f2fs/f2fs.h	867;"	d
NR_CURSEG_TYPE	fs/f2fs/f2fs.h	868;"	d
NR_DENTRY_IN_BLOCK	include/linux/f2fs_fs.h	522;"	d
NR_DIRTY_TYPE	fs/f2fs/segment.h	/^	NR_DIRTY_TYPE$/;"	e	enum:dirty_type
NR_INLINE_DENTRY	fs/f2fs/f2fs.h	449;"	d
NR_INODE_TYPE	fs/f2fs/f2fs.h	/^	NR_INODE_TYPE,$/;"	e	enum:inode_type
NR_IO_TYPE	fs/f2fs/f2fs.h	/^	NR_IO_TYPE,$/;"	e	enum:iostat_type
NR_PAGE_TYPE	fs/f2fs/f2fs.h	/^	NR_PAGE_TYPE,$/;"	e	enum:page_type
NR_TEMP_TYPE	fs/f2fs/f2fs.h	/^	NR_TEMP_TYPE,$/;"	e	enum:temp_type
NULL_ADDR	include/linux/f2fs_fs.h	27;"	d
NULL_SECNO	fs/f2fs/segment.h	16;"	d
NULL_SEGNO	fs/f2fs/segment.h	15;"	d
NUM_PREALLOC_POST_READ_CTXS	fs/f2fs/data.c	31;"	d	file:
OFFSET_BIT_MASK	include/linux/f2fs_fs.h	297;"	d
OFFSET_BIT_SHIFT	include/linux/f2fs_fs.h	/^	OFFSET_BIT_SHIFT$/;"	e	enum:__anon32
OPU	fs/f2fs/f2fs.h	/^	OPU,$/;"	e	enum:page_type
ORPHAN_INO	fs/f2fs/f2fs.h	/^	ORPHAN_INO,		\/* for orphan ino list *\/$/;"	e	enum:__anon12
Opt_acl	fs/f2fs/super.c	/^	Opt_acl,$/;"	e	enum:__anon2	file:
Opt_active_logs	fs/f2fs/super.c	/^	Opt_active_logs,$/;"	e	enum:__anon2	file:
Opt_alloc	fs/f2fs/super.c	/^	Opt_alloc,$/;"	e	enum:__anon2	file:
Opt_data_flush	fs/f2fs/super.c	/^	Opt_data_flush,$/;"	e	enum:__anon2	file:
Opt_disable_ext_identify	fs/f2fs/super.c	/^	Opt_disable_ext_identify,$/;"	e	enum:__anon2	file:
Opt_disable_roll_forward	fs/f2fs/super.c	/^	Opt_disable_roll_forward,$/;"	e	enum:__anon2	file:
Opt_discard	fs/f2fs/super.c	/^	Opt_discard,$/;"	e	enum:__anon2	file:
Opt_err	fs/f2fs/super.c	/^	Opt_err,$/;"	e	enum:__anon2	file:
Opt_extent_cache	fs/f2fs/super.c	/^	Opt_extent_cache,$/;"	e	enum:__anon2	file:
Opt_fastboot	fs/f2fs/super.c	/^	Opt_fastboot,$/;"	e	enum:__anon2	file:
Opt_fault_injection	fs/f2fs/super.c	/^	Opt_fault_injection,$/;"	e	enum:__anon2	file:
Opt_flush_merge	fs/f2fs/super.c	/^	Opt_flush_merge,$/;"	e	enum:__anon2	file:
Opt_fsync	fs/f2fs/super.c	/^	Opt_fsync,$/;"	e	enum:__anon2	file:
Opt_gc_background	fs/f2fs/super.c	/^	Opt_gc_background,$/;"	e	enum:__anon2	file:
Opt_grpjquota	fs/f2fs/super.c	/^	Opt_grpjquota,$/;"	e	enum:__anon2	file:
Opt_grpquota	fs/f2fs/super.c	/^	Opt_grpquota,$/;"	e	enum:__anon2	file:
Opt_heap	fs/f2fs/super.c	/^	Opt_heap,$/;"	e	enum:__anon2	file:
Opt_inline_data	fs/f2fs/super.c	/^	Opt_inline_data,$/;"	e	enum:__anon2	file:
Opt_inline_dentry	fs/f2fs/super.c	/^	Opt_inline_dentry,$/;"	e	enum:__anon2	file:
Opt_inline_xattr	fs/f2fs/super.c	/^	Opt_inline_xattr,$/;"	e	enum:__anon2	file:
Opt_inline_xattr_size	fs/f2fs/super.c	/^	Opt_inline_xattr_size,$/;"	e	enum:__anon2	file:
Opt_io_size_bits	fs/f2fs/super.c	/^	Opt_io_size_bits,$/;"	e	enum:__anon2	file:
Opt_jqfmt_vfsold	fs/f2fs/super.c	/^	Opt_jqfmt_vfsold,$/;"	e	enum:__anon2	file:
Opt_jqfmt_vfsv0	fs/f2fs/super.c	/^	Opt_jqfmt_vfsv0,$/;"	e	enum:__anon2	file:
Opt_jqfmt_vfsv1	fs/f2fs/super.c	/^	Opt_jqfmt_vfsv1,$/;"	e	enum:__anon2	file:
Opt_lazytime	fs/f2fs/super.c	/^	Opt_lazytime,$/;"	e	enum:__anon2	file:
Opt_mode	fs/f2fs/super.c	/^	Opt_mode,$/;"	e	enum:__anon2	file:
Opt_noacl	fs/f2fs/super.c	/^	Opt_noacl,$/;"	e	enum:__anon2	file:
Opt_nobarrier	fs/f2fs/super.c	/^	Opt_nobarrier,$/;"	e	enum:__anon2	file:
Opt_nodiscard	fs/f2fs/super.c	/^	Opt_nodiscard,$/;"	e	enum:__anon2	file:
Opt_noextent_cache	fs/f2fs/super.c	/^	Opt_noextent_cache,$/;"	e	enum:__anon2	file:
Opt_noflush_merge	fs/f2fs/super.c	/^	Opt_noflush_merge,$/;"	e	enum:__anon2	file:
Opt_noheap	fs/f2fs/super.c	/^	Opt_noheap,$/;"	e	enum:__anon2	file:
Opt_noinline_data	fs/f2fs/super.c	/^	Opt_noinline_data,$/;"	e	enum:__anon2	file:
Opt_noinline_dentry	fs/f2fs/super.c	/^	Opt_noinline_dentry,$/;"	e	enum:__anon2	file:
Opt_noinline_xattr	fs/f2fs/super.c	/^	Opt_noinline_xattr,$/;"	e	enum:__anon2	file:
Opt_nolazytime	fs/f2fs/super.c	/^	Opt_nolazytime,$/;"	e	enum:__anon2	file:
Opt_noquota	fs/f2fs/super.c	/^	Opt_noquota,$/;"	e	enum:__anon2	file:
Opt_norecovery	fs/f2fs/super.c	/^	Opt_norecovery,$/;"	e	enum:__anon2	file:
Opt_nouser_xattr	fs/f2fs/super.c	/^	Opt_nouser_xattr,$/;"	e	enum:__anon2	file:
Opt_offgrpjquota	fs/f2fs/super.c	/^	Opt_offgrpjquota,$/;"	e	enum:__anon2	file:
Opt_offprjjquota	fs/f2fs/super.c	/^	Opt_offprjjquota,$/;"	e	enum:__anon2	file:
Opt_offusrjquota	fs/f2fs/super.c	/^	Opt_offusrjquota,$/;"	e	enum:__anon2	file:
Opt_prjjquota	fs/f2fs/super.c	/^	Opt_prjjquota,$/;"	e	enum:__anon2	file:
Opt_prjquota	fs/f2fs/super.c	/^	Opt_prjquota,$/;"	e	enum:__anon2	file:
Opt_quota	fs/f2fs/super.c	/^	Opt_quota,$/;"	e	enum:__anon2	file:
Opt_reserve_root	fs/f2fs/super.c	/^	Opt_reserve_root,$/;"	e	enum:__anon2	file:
Opt_resgid	fs/f2fs/super.c	/^	Opt_resgid,$/;"	e	enum:__anon2	file:
Opt_resuid	fs/f2fs/super.c	/^	Opt_resuid,$/;"	e	enum:__anon2	file:
Opt_test_dummy_encryption	fs/f2fs/super.c	/^	Opt_test_dummy_encryption,$/;"	e	enum:__anon2	file:
Opt_user_xattr	fs/f2fs/super.c	/^	Opt_user_xattr,$/;"	e	enum:__anon2	file:
Opt_usrjquota	fs/f2fs/super.c	/^	Opt_usrjquota,$/;"	e	enum:__anon2	file:
Opt_usrquota	fs/f2fs/super.c	/^	Opt_usrquota,$/;"	e	enum:__anon2	file:
Opt_whint	fs/f2fs/super.c	/^	Opt_whint,$/;"	e	enum:__anon2	file:
PAGE_TYPE_OF_BIO	fs/f2fs/f2fs.h	968;"	d
PIDVEC_SIZE	fs/f2fs/trace.c	128;"	d	file:
PRE	fs/f2fs/segment.h	/^	PRE,			\/* to count # of entirely obsolete segments *\/$/;"	e	enum:dirty_type
PREALLOC_NID	fs/f2fs/f2fs.h	/^	PREALLOC_NID,		\/* it is preallocated *\/$/;"	e	enum:nid_state
QTYPE2NAME	fs/f2fs/super.c	242;"	d	file:
RAW_IS_INODE	fs/f2fs/f2fs.h	2089;"	d
RDEV	fs/f2fs/f2fs.h	1059;"	d
REQ_TIME	fs/f2fs/f2fs.h	/^	REQ_TIME,$/;"	e	enum:__anon24
RESERVED_BLOCKS	fs/f2fs/sysfs.c	/^	RESERVED_BLOCKS,	\/* struct f2fs_sb_info *\/$/;"	e	enum:__anon8	file:
SBI_IS_CLOSE	fs/f2fs/f2fs.h	/^	SBI_IS_CLOSE,				\/* specify unmounting *\/$/;"	e	enum:__anon23
SBI_IS_DIRTY	fs/f2fs/f2fs.h	/^	SBI_IS_DIRTY,				\/* dirty flag for checkpoint *\/$/;"	e	enum:__anon23
SBI_NEED_CP	fs/f2fs/f2fs.h	/^	SBI_NEED_CP,				\/* need to checkpoint *\/$/;"	e	enum:__anon23
SBI_NEED_FSCK	fs/f2fs/f2fs.h	/^	SBI_NEED_FSCK,				\/* need fsck.f2fs to fix *\/$/;"	e	enum:__anon23
SBI_NEED_SB_WRITE	fs/f2fs/f2fs.h	/^	SBI_NEED_SB_WRITE,			\/* need to recover superblock *\/$/;"	e	enum:__anon23
SBI_POR_DOING	fs/f2fs/f2fs.h	/^	SBI_POR_DOING,				\/* recovery is doing or not *\/$/;"	e	enum:__anon23
SECTOR_FROM_BLOCK	fs/f2fs/segment.h	119;"	d
SECTOR_TO_BLOCK	fs/f2fs/segment.h	121;"	d
SEG0_BLKADDR	fs/f2fs/segment.h	59;"	d
SEGMENT_SIZE	fs/f2fs/segment.h	72;"	d
SETVEC_SIZE	fs/f2fs/node.h	36;"	d
SET_SUM_TYPE	fs/f2fs/segment.h	106;"	d
SIT_BITMAP	fs/f2fs/f2fs.h	/^	SIT_BITMAP$/;"	e	enum:__anon10
SIT_BLK_CNT	fs/f2fs/segment.h	114;"	d
SIT_BLOCK_OFFSET	fs/f2fs/segment.h	110;"	d
SIT_ENTRY_OFFSET	fs/f2fs/segment.h	108;"	d
SIT_ENTRY_PER_BLOCK	include/linux/f2fs_fs.h	346;"	d
SIT_I	fs/f2fs/f2fs.h	/^static inline struct sit_info *SIT_I(struct f2fs_sb_info *sbi)$/;"	f
SIT_JOURNAL	include/linux/f2fs_fs.h	/^	SIT_JOURNAL$/;"	e	enum:__anon36
SIT_JOURNAL_ENTRIES	include/linux/f2fs_fs.h	424;"	d
SIT_JOURNAL_RESERVED	include/linux/f2fs_fs.h	426;"	d
SIT_VBLOCKS_MASK	include/linux/f2fs_fs.h	360;"	d
SIT_VBLOCKS_SHIFT	include/linux/f2fs_fs.h	359;"	d
SIT_VBLOCK_MAP_SIZE	include/linux/f2fs_fs.h	345;"	d
SIZE_OF_DENTRY_BITMAP	include/linux/f2fs_fs.h	524;"	d
SIZE_OF_DIR_ENTRY	include/linux/f2fs_fs.h	523;"	d
SIZE_OF_RESERVED	include/linux/f2fs_fs.h	526;"	d
SMALL_VOLUME_SEGMENTS	fs/f2fs/segment.h	608;"	d
SM_I	fs/f2fs/f2fs.h	/^static inline struct f2fs_sm_info *SM_I(struct f2fs_sb_info *sbi)$/;"	f
SM_INFO	fs/f2fs/sysfs.c	/^	SM_INFO,	\/* struct f2fs_sm_info *\/$/;"	e	enum:__anon8	file:
SSR	fs/f2fs/segment.h	/^	SSR$/;"	e	enum:__anon4
START_BLOCK	fs/f2fs/segment.h	75;"	d
START_NID	fs/f2fs/node.h	12;"	d
START_SEGNO	fs/f2fs/segment.h	112;"	d
STEP_DECRYPT	fs/f2fs/data.c	/^	STEP_DECRYPT,$/;"	e	enum:bio_post_read_step	file:
STEP_INITIAL	fs/f2fs/data.c	/^	STEP_INITIAL = 0,$/;"	e	enum:bio_post_read_step	file:
SUMMARY_SIZE	include/linux/f2fs_fs.h	393;"	d
SUM_ENTRY_SIZE	include/linux/f2fs_fs.h	395;"	d
SUM_FOOTER_SIZE	include/linux/f2fs_fs.h	394;"	d
SUM_JOURNAL_SIZE	include/linux/f2fs_fs.h	418;"	d
SUM_TYPE_DATA	include/linux/f2fs_fs.h	411;"	d
SUM_TYPE_NODE	include/linux/f2fs_fs.h	410;"	d
S_SHIFT	include/linux/f2fs_fs.h	560;"	d
TEA_transform	fs/f2fs/hash.c	/^static void TEA_transform(unsigned int buf[4], unsigned int const in[])$/;"	f	file:
TOTAL_BLKS	fs/f2fs/segment.h	69;"	d
TOTAL_SEGS	fs/f2fs/segment.h	66;"	d
TRANS_DIR_INO	fs/f2fs/f2fs.h	/^	TRANS_DIR_INO,		\/* for trasactions dir ino list *\/$/;"	e	enum:__anon12
UPDATE_INO	fs/f2fs/f2fs.h	/^	UPDATE_INO,		\/* for update ino list *\/$/;"	e	enum:__anon12
VALID_XATTR_BLOCK_SIZE	fs/f2fs/xattr.h	75;"	d
VERSION_LEN	include/linux/f2fs_fs.h	61;"	d
WARM	fs/f2fs/f2fs.h	/^	WARM,$/;"	e	enum:temp_type
WB_DATA_TYPE	fs/f2fs/f2fs.h	943;"	d
WHINT_MODE_FS	fs/f2fs/f2fs.h	/^	WHINT_MODE_FS,		\/* pass down hints with F2FS policy *\/$/;"	e	enum:__anon26
WHINT_MODE_OFF	fs/f2fs/f2fs.h	/^	WHINT_MODE_OFF,		\/* not pass down write hints *\/$/;"	e	enum:__anon26
WHINT_MODE_USER	fs/f2fs/f2fs.h	/^	WHINT_MODE_USER,	\/* try to pass down hints given by users *\/$/;"	e	enum:__anon26
XATTR_ALIGN	fs/f2fs/xattr.h	61;"	d
XATTR_ENTRY	fs/f2fs/xattr.h	57;"	d
XATTR_FIRST_ENTRY	fs/f2fs/xattr.h	58;"	d
XATTR_HDR	fs/f2fs/xattr.h	56;"	d
XATTR_NEXT_ENTRY	fs/f2fs/xattr.h	66;"	d
XATTR_NODE_OFFSET	fs/f2fs/f2fs.h	504;"	d
XATTR_PADDING_SIZE	fs/f2fs/xattr.h	76;"	d
XATTR_ROUND	fs/f2fs/xattr.h	59;"	d
_LINUX_F2FS_FS_H	include/linux/f2fs_fs.h	12;"	d
_LINUX_F2FS_H	fs/f2fs/f2fs.h	12;"	d
__ATOMIC_FILE	fs/f2fs/trace.h	/^	__ATOMIC_FILE,$/;"	e	enum:file_type
__DIR_FILE	fs/f2fs/trace.h	/^	__DIR_FILE,$/;"	e	enum:file_type
__F2FS_ACL_H__	fs/f2fs/acl.h	16;"	d
__F2FS_TRACE_H__	fs/f2fs/trace.h	12;"	d
__F2FS_XATTR_H__	fs/f2fs/xattr.h	18;"	d
__FS_HAS_ENCRYPTION	fs/f2fs/f2fs.h	29;"	d
__META_FILE	fs/f2fs/trace.h	/^	__META_FILE,$/;"	e	enum:file_type
__MISC_FILE	fs/f2fs/trace.h	/^	__MISC_FILE,$/;"	e	enum:file_type
__NODE_FILE	fs/f2fs/trace.h	/^	__NODE_FILE,$/;"	e	enum:file_type
__NORMAL_FILE	fs/f2fs/trace.h	/^	__NORMAL_FILE,$/;"	e	enum:file_type
__VOLATILE_FILE	fs/f2fs/trace.h	/^	__VOLATILE_FILE,$/;"	e	enum:file_type
__add_dirty_inode	fs/f2fs/checkpoint.c	/^static void __add_dirty_inode(struct inode *inode, enum inode_type type)$/;"	f	file:
__add_ino_entry	fs/f2fs/checkpoint.c	/^static void __add_ino_entry(struct f2fs_sb_info *sbi, nid_t ino,$/;"	f	file:
__add_sum_entry	fs/f2fs/segment.c	/^static void __add_sum_entry(struct f2fs_sb_info *sbi, int type,$/;"	f	file:
__adjust_nat_entry_set	fs/f2fs/node.c	/^static void __adjust_nat_entry_set(struct nat_entry_set *nes,$/;"	f	file:
__alloc_nat_entry	fs/f2fs/node.c	/^static struct nat_entry *__alloc_nat_entry(nid_t nid, bool no_fail)$/;"	f	file:
__allocate_data_block	fs/f2fs/data.c	/^static int __allocate_data_block(struct dnode_of_data *dn, int seg_type)$/;"	f	file:
__allow_reserved_blocks	fs/f2fs/f2fs.h	/^static inline bool __allow_reserved_blocks(struct f2fs_sb_info *sbi,$/;"	f
__attach_discard_cmd	fs/f2fs/segment.c	/^static struct discard_cmd *__attach_discard_cmd(struct f2fs_sb_info *sbi,$/;"	f	file:
__attach_extent_node	fs/f2fs/extent_cache.c	/^static struct extent_node *__attach_extent_node(struct f2fs_sb_info *sbi,$/;"	f	file:
__bio_alloc	fs/f2fs/data.c	/^static struct bio *__bio_alloc(struct f2fs_sb_info *sbi, block_t blk_addr,$/;"	f	file:
__bitmap_ptr	fs/f2fs/f2fs.h	/^static inline void *__bitmap_ptr(struct f2fs_sb_info *sbi, int flag)$/;"	f
__bitmap_size	fs/f2fs/f2fs.h	/^static inline unsigned long __bitmap_size(struct f2fs_sb_info *sbi, int flag)$/;"	f
__check_sit_bitmap	fs/f2fs/segment.c	/^static void __check_sit_bitmap(struct f2fs_sb_info *sbi,$/;"	f	file:
__clear_ckpt_flags	fs/f2fs/f2fs.h	/^static inline void __clear_ckpt_flags(struct f2fs_checkpoint *cp, unsigned int f)$/;"	f
__clear_nat_cache_dirty	fs/f2fs/node.c	/^static void __clear_nat_cache_dirty(struct f2fs_nm_info *nm_i,$/;"	f	file:
__clone_blkaddrs	fs/f2fs/file.c	/^static int __clone_blkaddrs(struct inode *src_inode, struct inode *dst_inode,$/;"	f	file:
__count_extent_cache	fs/f2fs/shrinker.c	/^static unsigned long __count_extent_cache(struct f2fs_sb_info *sbi)$/;"	f	file:
__count_free_nids	fs/f2fs/shrinker.c	/^static unsigned long __count_free_nids(struct f2fs_sb_info *sbi)$/;"	f	file:
__count_nat_entries	fs/f2fs/shrinker.c	/^static unsigned long __count_nat_entries(struct f2fs_sb_info *sbi)$/;"	f	file:
__cp_payload	fs/f2fs/f2fs.h	/^static inline block_t __cp_payload(struct f2fs_sb_info *sbi)$/;"	f
__create_discard_cmd	fs/f2fs/segment.c	/^static struct discard_cmd *__create_discard_cmd(struct f2fs_sb_info *sbi,$/;"	f	file:
__del_from_nat_cache	fs/f2fs/node.c	/^static void __del_from_nat_cache(struct f2fs_nm_info *nm_i, struct nat_entry *e)$/;"	f	file:
__detach_discard_cmd	fs/f2fs/segment.c	/^static void __detach_discard_cmd(struct discard_cmd_control *dcc,$/;"	f	file:
__detach_extent_node	fs/f2fs/extent_cache.c	/^static void __detach_extent_node(struct f2fs_sb_info *sbi,$/;"	f	file:
__do_map_lock	fs/f2fs/data.c	/^static inline void __do_map_lock(struct f2fs_sb_info *sbi, int flag, bool lock)$/;"	f	file:
__drop_discard_cmd	fs/f2fs/segment.c	/^static bool __drop_discard_cmd(struct f2fs_sb_info *sbi)$/;"	f	file:
__drop_largest_extent	fs/f2fs/extent_cache.c	/^static void __drop_largest_extent(struct inode *inode,$/;"	f	file:
__exchange_data_block	fs/f2fs/file.c	/^static int __exchange_data_block(struct inode *src_inode,$/;"	f	file:
__exist_node_summaries	fs/f2fs/f2fs.h	/^static inline bool __exist_node_summaries(struct f2fs_sb_info *sbi)$/;"	f
__f2fs_build_free_nids	fs/f2fs/node.c	/^static void __f2fs_build_free_nids(struct f2fs_sb_info *sbi,$/;"	f	file:
__f2fs_commit_inmem_pages	fs/f2fs/segment.c	/^static int __f2fs_commit_inmem_pages(struct inode *inode)$/;"	f	file:
__f2fs_commit_super	fs/f2fs/super.c	/^static int __f2fs_commit_super(struct buffer_head *bh,$/;"	f	file:
__f2fs_crc32	fs/f2fs/f2fs.h	/^static inline u32 __f2fs_crc32(struct f2fs_sb_info *sbi, u32 crc,$/;"	f
__f2fs_find_entry	fs/f2fs/dir.c	/^struct f2fs_dir_entry *__f2fs_find_entry(struct inode *dir,$/;"	f
__f2fs_get_acl	fs/f2fs/acl.c	/^static struct posix_acl *__f2fs_get_acl(struct inode *inode, int type,$/;"	f	file:
__f2fs_get_curseg	fs/f2fs/segment.c	/^static inline int __f2fs_get_curseg(struct f2fs_sb_info *sbi,$/;"	f	file:
__f2fs_init_extent_tree	fs/f2fs/extent_cache.c	/^static bool __f2fs_init_extent_tree(struct inode *inode, struct f2fs_extent *i_ext)$/;"	f	file:
__f2fs_ioc_setflags	fs/f2fs/file.c	/^static int __f2fs_ioc_setflags(struct inode *inode, unsigned int flags)$/;"	f	file:
__f2fs_issue_discard_zone	fs/f2fs/segment.c	/^static int __f2fs_issue_discard_zone(struct f2fs_sb_info *sbi,$/;"	f	file:
__f2fs_set_acl	fs/f2fs/acl.c	/^static int __f2fs_set_acl(struct inode *inode, int type,$/;"	f	file:
__f2fs_setxattr	fs/f2fs/xattr.c	/^static int __f2fs_setxattr(struct inode *inode, int index,$/;"	f	file:
__f2fs_submit_merged_write	fs/f2fs/data.c	/^static void __f2fs_submit_merged_write(struct f2fs_sb_info *sbi,$/;"	f	file:
__f2fs_tmpfile	fs/f2fs/namei.c	/^static int __f2fs_tmpfile(struct inode *dir, struct dentry *dentry,$/;"	f	file:
__f2fs_write_data_pages	fs/f2fs/data.c	/^static int __f2fs_write_data_pages(struct address_space *mapping,$/;"	f	file:
__f2fs_write_meta_page	fs/f2fs/checkpoint.c	/^static int __f2fs_write_meta_page(struct page *page,$/;"	f	file:
__file_type	fs/f2fs/trace.c	/^static int __file_type(struct inode *inode, pid_t pid)$/;"	f	file:
__find_inline_xattr	fs/f2fs/xattr.c	/^static struct f2fs_xattr_entry *__find_inline_xattr(struct inode *inode,$/;"	f	file:
__find_rev_next_bit	fs/f2fs/segment.c	/^static unsigned long __find_rev_next_bit(const unsigned long *addr,$/;"	f	file:
__find_rev_next_zero_bit	fs/f2fs/segment.c	/^static unsigned long __find_rev_next_zero_bit(const unsigned long *addr,$/;"	f	file:
__find_xattr	fs/f2fs/xattr.c	/^static struct f2fs_xattr_entry *__find_xattr(void *base_addr, int index,$/;"	f	file:
__flush_nat_entry_set	fs/f2fs/node.c	/^static void __flush_nat_entry_set(struct f2fs_sb_info *sbi,$/;"	f	file:
__found_offset	fs/f2fs/file.c	/^static bool __found_offset(block_t blkaddr, pgoff_t dirty, pgoff_t pgofs,$/;"	f	file:
__free_extent_tree	fs/f2fs/extent_cache.c	/^static unsigned int __free_extent_tree(struct f2fs_sb_info *sbi,$/;"	f	file:
__free_nat_entry	fs/f2fs/node.c	/^static void __free_nat_entry(struct nat_entry *e)$/;"	f	file:
__gang_lookup_nat_cache	fs/f2fs/node.c	/^static unsigned int __gang_lookup_nat_cache(struct f2fs_nm_info *nm_i,$/;"	f	file:
__gang_lookup_nat_set	fs/f2fs/node.c	/^static unsigned int __gang_lookup_nat_set(struct f2fs_nm_info *nm_i,$/;"	f	file:
__get_cp_reason	fs/f2fs/f2fs.h	/^static inline int __get_cp_reason(struct f2fs_sb_info *sbi)$/;"	f
__get_data_block	fs/f2fs/data.c	/^static int __get_data_block(struct inode *inode, sector_t iblock,$/;"	f	file:
__get_first_dirty_index	fs/f2fs/file.c	/^static pgoff_t __get_first_dirty_index(struct address_space *mapping,$/;"	f	file:
__get_inode_rdev	fs/f2fs/inode.c	/^static void __get_inode_rdev(struct inode *inode, struct f2fs_inode *ri)$/;"	f	file:
__get_meta_page	fs/f2fs/checkpoint.c	/^static struct page *__get_meta_page(struct f2fs_sb_info *sbi, pgoff_t index,$/;"	f	file:
__get_nat_bitmaps	fs/f2fs/node.c	/^static int __get_nat_bitmaps(struct f2fs_sb_info *sbi)$/;"	f	file:
__get_next_segno	fs/f2fs/segment.c	/^static unsigned int __get_next_segno(struct f2fs_sb_info *sbi, int type)$/;"	f	file:
__get_node_page	fs/f2fs/node.c	/^static struct page *__get_node_page(struct f2fs_sb_info *sbi, pgoff_t nid,$/;"	f	file:
__get_segment_type	fs/f2fs/segment.c	/^static int __get_segment_type(struct f2fs_io_info *fio)$/;"	f	file:
__get_segment_type_2	fs/f2fs/segment.c	/^static int __get_segment_type_2(struct f2fs_io_info *fio)$/;"	f	file:
__get_segment_type_4	fs/f2fs/segment.c	/^static int __get_segment_type_4(struct f2fs_io_info *fio)$/;"	f	file:
__get_segment_type_6	fs/f2fs/segment.c	/^static int __get_segment_type_6(struct f2fs_io_info *fio)$/;"	f	file:
__get_victim	fs/f2fs/gc.c	/^static int __get_victim(struct f2fs_sb_info *sbi, unsigned int *victim,$/;"	f	file:
__grab_extent_tree	fs/f2fs/extent_cache.c	/^static struct extent_tree *__grab_extent_tree(struct inode *inode)$/;"	f	file:
__grab_nat_entry_set	fs/f2fs/node.c	/^static struct nat_entry_set *__grab_nat_entry_set(struct f2fs_nm_info *nm_i,$/;"	f	file:
__has_curseg_space	fs/f2fs/segment.c	/^static bool __has_curseg_space(struct f2fs_sb_info *sbi, int type)$/;"	f	file:
__has_cursum_space	fs/f2fs/f2fs.h	/^static inline bool __has_cursum_space(struct f2fs_journal *journal,$/;"	f
__has_merged_page	fs/f2fs/data.c	/^static bool __has_merged_page(struct f2fs_bio_info *io,$/;"	f	file:
__init_discard_policy	fs/f2fs/segment.c	/^static void __init_discard_policy(struct f2fs_sb_info *sbi,$/;"	f	file:
__init_extent_tree	fs/f2fs/extent_cache.c	/^static struct extent_node *__init_extent_tree(struct f2fs_sb_info *sbi,$/;"	f	file:
__init_nat_entry	fs/f2fs/node.c	/^static struct nat_entry *__init_nat_entry(struct f2fs_nm_info *nm_i,$/;"	f	file:
__insert_discard_tree	fs/f2fs/segment.c	/^static struct discard_cmd *__insert_discard_tree(struct f2fs_sb_info *sbi,$/;"	f	file:
__insert_extent_tree	fs/f2fs/extent_cache.c	/^static struct extent_node *__insert_extent_tree(struct inode *inode,$/;"	f	file:
__insert_free_nid	fs/f2fs/node.c	/^static int __insert_free_nid(struct f2fs_sb_info *sbi,$/;"	f	file:
__is_back_mergeable	fs/f2fs/f2fs.h	/^static inline bool __is_back_mergeable(struct extent_info *cur,$/;"	f
__is_cp_guaranteed	fs/f2fs/data.c	/^static bool __is_cp_guaranteed(struct page *page)$/;"	f	file:
__is_discard_back_mergeable	fs/f2fs/f2fs.h	/^static inline bool __is_discard_back_mergeable(struct discard_info *cur,$/;"	f
__is_discard_front_mergeable	fs/f2fs/f2fs.h	/^static inline bool __is_discard_front_mergeable(struct discard_info *cur,$/;"	f
__is_discard_mergeable	fs/f2fs/f2fs.h	/^static inline bool __is_discard_mergeable(struct discard_info *back,$/;"	f
__is_extent_mergeable	fs/f2fs/f2fs.h	/^static inline bool __is_extent_mergeable(struct extent_info *back,$/;"	f
__is_front_mergeable	fs/f2fs/f2fs.h	/^static inline bool __is_front_mergeable(struct extent_info *cur,$/;"	f
__is_set_ckpt_flags	fs/f2fs/f2fs.h	/^static inline bool __is_set_ckpt_flags(struct f2fs_checkpoint *cp, unsigned int f)$/;"	f
__issue_discard_async	fs/f2fs/segment.c	/^static int __issue_discard_async(struct f2fs_sb_info *sbi,$/;"	f	file:
__issue_discard_cmd	fs/f2fs/segment.c	/^static int __issue_discard_cmd(struct f2fs_sb_info *sbi,$/;"	f	file:
__issue_discard_cmd_range	fs/f2fs/segment.c	/^static void __issue_discard_cmd_range(struct f2fs_sb_info *sbi,$/;"	f	file:
__locate_dirty_segment	fs/f2fs/segment.c	/^static void __locate_dirty_segment(struct f2fs_sb_info *sbi, unsigned int segno,$/;"	f	file:
__lookup_free_nid_list	fs/f2fs/node.c	/^static struct free_nid *__lookup_free_nid_list(struct f2fs_nm_info *nm_i,$/;"	f	file:
__lookup_nat_cache	fs/f2fs/node.c	/^static struct nat_entry *__lookup_nat_cache(struct f2fs_nm_info *nm_i, nid_t n)$/;"	f	file:
__lookup_rb_tree_fast	fs/f2fs/extent_cache.c	/^static struct rb_entry *__lookup_rb_tree_fast(struct rb_entry *cached_re,$/;"	f	file:
__lookup_rb_tree_slow	fs/f2fs/extent_cache.c	/^static struct rb_entry *__lookup_rb_tree_slow(struct rb_root *root,$/;"	f	file:
__mark_inode_dirty_flag	fs/f2fs/f2fs.h	/^static inline void __mark_inode_dirty_flag(struct inode *inode,$/;"	f
__mark_sit_entry_dirty	fs/f2fs/segment.c	/^static bool __mark_sit_entry_dirty(struct f2fs_sb_info *sbi, unsigned int segno)$/;"	f	file:
__move_free_nid	fs/f2fs/node.c	/^static void __move_free_nid(struct f2fs_sb_info *sbi, struct free_nid *i,$/;"	f	file:
__next_free_blkoff	fs/f2fs/segment.c	/^static void __next_free_blkoff(struct f2fs_sb_info *sbi,$/;"	f	file:
__packed	include/linux/f2fs_fs.h	/^		} __packed;$/;"	m	union:f2fs_inode::__anon30	typeref:struct:f2fs_inode::__anon30::__anon31
__packed	include/linux/f2fs_fs.h	/^		} __packed;$/;"	m	union:f2fs_summary::__anon34	typeref:struct:f2fs_summary::__anon34::__anon35
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:direct_node
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:f2fs_checkpoint
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:f2fs_dentry_block
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:f2fs_device
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:f2fs_dir_entry
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:f2fs_extent
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:f2fs_extra_info
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:f2fs_inode
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:f2fs_journal
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:f2fs_nat_block
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:f2fs_nat_entry
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:f2fs_node
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:f2fs_orphan_block
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:f2fs_sit_block
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:f2fs_sit_entry
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:f2fs_summary
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:f2fs_summary_block
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:f2fs_super_block
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:indirect_node
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:master_node
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:nat_journal
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:nat_journal_entry
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:node_footer
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:sit_journal
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:sit_journal_entry
__packed	include/linux/f2fs_fs.h	/^} __packed;$/;"	v	typeref:struct:summary_footer
__prepare_cp_block	fs/f2fs/checkpoint.c	/^static void __prepare_cp_block(struct f2fs_sb_info *sbi)$/;"	f	file:
__print_last_io	fs/f2fs/trace.c	/^static inline void __print_last_io(void)$/;"	f	file:
__punch_discard_cmd	fs/f2fs/segment.c	/^static void __punch_discard_cmd(struct f2fs_sb_info *sbi,$/;"	f	file:
__queue_discard_cmd	fs/f2fs/segment.c	/^static int __queue_discard_cmd(struct f2fs_sb_info *sbi,$/;"	f	file:
__read_end_io	fs/f2fs/data.c	/^static void __read_end_io(struct bio *bio)$/;"	f	file:
__read_out_blkaddrs	fs/f2fs/file.c	/^static int __read_out_blkaddrs(struct inode *inode, block_t *blkaddr,$/;"	f	file:
__recover_dot_dentries	fs/f2fs/namei.c	/^static int __recover_dot_dentries(struct inode *dir, nid_t pino)$/;"	f	file:
__recover_inline_status	fs/f2fs/inode.c	/^static void __recover_inline_status(struct inode *inode, struct page *ipage)$/;"	f	file:
__refresh_next_blkoff	fs/f2fs/segment.c	/^static void __refresh_next_blkoff(struct f2fs_sb_info *sbi,$/;"	f	file:
__release_extent_node	fs/f2fs/extent_cache.c	/^static void __release_extent_node(struct f2fs_sb_info *sbi,$/;"	f	file:
__relocate_discard_cmd	fs/f2fs/segment.c	/^static void __relocate_discard_cmd(struct discard_cmd_control *dcc,$/;"	f	file:
__remain_node_summaries	fs/f2fs/f2fs.h	/^static inline bool __remain_node_summaries(int reason)$/;"	f
__remove_dirty_inode	fs/f2fs/checkpoint.c	/^static void __remove_dirty_inode(struct inode *inode, enum inode_type type)$/;"	f	file:
__remove_dirty_segment	fs/f2fs/segment.c	/^static void __remove_dirty_segment(struct f2fs_sb_info *sbi, unsigned int segno,$/;"	f	file:
__remove_discard_cmd	fs/f2fs/segment.c	/^static void __remove_discard_cmd(struct f2fs_sb_info *sbi,$/;"	f	file:
__remove_free_nid	fs/f2fs/node.c	/^static void __remove_free_nid(struct f2fs_sb_info *sbi,$/;"	f	file:
__remove_ino_entry	fs/f2fs/checkpoint.c	/^static void __remove_ino_entry(struct f2fs_sb_info *sbi, nid_t ino, int type)$/;"	f	file:
__reverse_ffs	fs/f2fs/segment.c	/^static inline unsigned long __reverse_ffs(unsigned long word)$/;"	f	file:
__reverse_ffz	fs/f2fs/segment.c	29;"	d	file:
__reverse_ulong	fs/f2fs/segment.c	/^static unsigned long __reverse_ulong(unsigned char *str)$/;"	f	file:
__revoke_inmem_pages	fs/f2fs/segment.c	/^static int __revoke_inmem_pages(struct inode *inode,$/;"	f	file:
__roll_back_blkaddrs	fs/f2fs/file.c	/^static int __roll_back_blkaddrs(struct inode *inode, block_t *blkaddr,$/;"	f	file:
__same_bdev	fs/f2fs/data.c	/^static bool __same_bdev(struct f2fs_sb_info *sbi,$/;"	f	file:
__sbi_store	fs/f2fs/sysfs.c	/^static ssize_t __sbi_store(struct f2fs_attr *a,$/;"	f	file:
__seg_info_to_raw_sit	fs/f2fs/segment.h	/^static inline void __seg_info_to_raw_sit(struct seg_entry *se,$/;"	f
__set_ckpt_flags	fs/f2fs/f2fs.h	/^static inline void __set_ckpt_flags(struct f2fs_checkpoint *cp, unsigned int f)$/;"	f
__set_cp_next_pack	fs/f2fs/f2fs.h	/^static inline void __set_cp_next_pack(struct f2fs_sb_info *sbi)$/;"	f
__set_data_blkaddr	fs/f2fs/data.c	/^static void __set_data_blkaddr(struct dnode_of_data *dn)$/;"	f	file:
__set_free	fs/f2fs/segment.h	/^static inline void __set_free(struct f2fs_sb_info *sbi, unsigned int segno)$/;"	f
__set_inode_rdev	fs/f2fs/inode.c	/^static void __set_inode_rdev(struct inode *inode, struct f2fs_inode *ri)$/;"	f	file:
__set_inuse	fs/f2fs/segment.h	/^static inline void __set_inuse(struct f2fs_sb_info *sbi,$/;"	f
__set_nat_cache_dirty	fs/f2fs/node.c	/^static void __set_nat_cache_dirty(struct f2fs_nm_info *nm_i,$/;"	f	file:
__set_sit_entry_type	fs/f2fs/segment.c	/^static void __set_sit_entry_type(struct f2fs_sb_info *sbi, int type,$/;"	f	file:
__set_test_and_free	fs/f2fs/segment.h	/^static inline void __set_test_and_free(struct f2fs_sb_info *sbi,$/;"	f
__set_test_and_inuse	fs/f2fs/segment.h	/^static inline void __set_test_and_inuse(struct f2fs_sb_info *sbi,$/;"	f
__setattr_copy	fs/f2fs/file.c	/^static void __setattr_copy(struct inode *inode, const struct iattr *attr)$/;"	f	file:
__setattr_copy	fs/f2fs/file.c	750;"	d	file:
__start_cp_addr	fs/f2fs/f2fs.h	/^static inline block_t __start_cp_addr(struct f2fs_sb_info *sbi)$/;"	f
__start_cp_next_addr	fs/f2fs/f2fs.h	/^static inline block_t __start_cp_next_addr(struct f2fs_sb_info *sbi)$/;"	f
__start_sum_addr	fs/f2fs/f2fs.h	/^static inline block_t __start_sum_addr(struct f2fs_sb_info *sbi)$/;"	f
__struct_ptr	fs/f2fs/sysfs.c	/^static unsigned char *__struct_ptr(struct f2fs_sb_info *sbi, int struct_type)$/;"	f	file:
__submit_bio	fs/f2fs/data.c	/^static inline void __submit_bio(struct f2fs_sb_info *sbi,$/;"	f	file:
__submit_discard_cmd	fs/f2fs/segment.c	/^static void __submit_discard_cmd(struct f2fs_sb_info *sbi,$/;"	f	file:
__submit_flush_wait	fs/f2fs/segment.c	/^static int __submit_flush_wait(struct f2fs_sb_info *sbi,$/;"	f	file:
__submit_merged_bio	fs/f2fs/data.c	/^static void __submit_merged_bio(struct f2fs_bio_info *io)$/;"	f	file:
__submit_merged_write_cond	fs/f2fs/data.c	/^static void __submit_merged_write_cond(struct f2fs_sb_info *sbi,$/;"	f	file:
__try_merge_extent_node	fs/f2fs/extent_cache.c	/^static struct extent_node *__try_merge_extent_node(struct inode *inode,$/;"	f	file:
__try_update_largest_extent	fs/f2fs/f2fs.h	/^static inline void __try_update_largest_extent(struct inode *inode,$/;"	f
__update_discard_tree_range	fs/f2fs/segment.c	/^static void __update_discard_tree_range(struct f2fs_sb_info *sbi,$/;"	f	file:
__update_nat_bits	fs/f2fs/node.c	/^static void __update_nat_bits(struct f2fs_sb_info *sbi, nid_t start_nid,$/;"	f	file:
__wait_all_discard_cmd	fs/f2fs/segment.c	/^static void __wait_all_discard_cmd(struct f2fs_sb_info *sbi,$/;"	f	file:
__wait_discard_cmd_range	fs/f2fs/segment.c	/^static unsigned int __wait_discard_cmd_range(struct f2fs_sb_info *sbi,$/;"	f	file:
__wait_one_discard_bio	fs/f2fs/segment.c	/^static unsigned int __wait_one_discard_bio(struct f2fs_sb_info *sbi,$/;"	f	file:
__write_data_page	fs/f2fs/data.c	/^static int __write_data_page(struct page *page, bool *submitted,$/;"	f	file:
__write_node_page	fs/f2fs/node.c	/^static int __write_node_page(struct page *page, bool atomic, bool *submitted,$/;"	f	file:
__written_first_block	fs/f2fs/inode.c	/^static bool __written_first_block(struct f2fs_inode *ri)$/;"	f	file:
a_version	fs/f2fs/acl.h	/^	__le32 a_version;$/;"	m	struct:f2fs_acl_header
active_logs	fs/f2fs/f2fs.h	/^	int active_logs;		\/* # of active logs *\/$/;"	m	struct:f2fs_mount_info
add_discard_addrs	fs/f2fs/segment.c	/^static bool add_discard_addrs(struct f2fs_sb_info *sbi, struct cp_control *cpc,$/;"	f	file:
add_free_nid	fs/f2fs/node.c	/^static bool add_free_nid(struct f2fs_sb_info *sbi,$/;"	f	file:
add_fsync_inode	fs/f2fs/recovery.c	/^static struct fsync_inode_entry *add_fsync_inode(struct f2fs_sb_info *sbi,$/;"	f	file:
add_gc_inode	fs/f2fs/gc.c	/^static void add_gc_inode(struct gc_inode_list *gc_list, struct inode *inode)$/;"	f	file:
add_sit_entry	fs/f2fs/segment.c	/^static void add_sit_entry(unsigned int segno, struct list_head *head)$/;"	f	file:
add_sits_in_set	fs/f2fs/segment.c	/^static void add_sits_in_set(struct f2fs_sb_info *sbi)$/;"	f	file:
addr	include/linux/f2fs_fs.h	/^	__le32 addr[ADDRS_PER_BLOCK];	\/* array of data block address *\/$/;"	m	struct:direct_node
addrs_per_inode	fs/f2fs/f2fs.h	/^static inline unsigned int addrs_per_inode(struct inode *inode)$/;"	f
adjust_sit_entry_set	fs/f2fs/segment.c	/^static void adjust_sit_entry_set(struct sit_entry_set *ses,$/;"	f	file:
af_list	fs/f2fs/f2fs.h	/^	struct list_head af_list;	\/* atomic file list *\/$/;"	m	struct:atomic_file_set	typeref:struct:atomic_file_set::list_head
all_area_segs	fs/f2fs/f2fs.h	/^	int all_area_segs, sit_area_segs, nat_area_segs, ssa_area_segs;$/;"	m	struct:f2fs_stat_info
alloc_mode	fs/f2fs/f2fs.h	/^	int alloc_mode;			\/* segment allocation policy *\/$/;"	m	struct:f2fs_mount_info
alloc_mode	fs/f2fs/segment.h	/^	int alloc_mode;			\/* LFS or SSR *\/$/;"	m	struct:victim_sel_policy
alloc_nids	fs/f2fs/f2fs.h	/^	int free_nids, avail_nids, alloc_nids;$/;"	m	struct:f2fs_stat_info
alloc_type	fs/f2fs/segment.h	/^	unsigned char alloc_type;		\/* current allocation type *\/$/;"	m	struct:curseg_info
alloc_type	include/linux/f2fs_fs.h	/^	unsigned char alloc_type[MAX_ACTIVE_LOGS];$/;"	m	struct:f2fs_checkpoint
alloc_valid_block_count	fs/f2fs/f2fs.h	/^	struct percpu_counter alloc_valid_block_count;$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::percpu_counter
allocate_segment	fs/f2fs/segment.h	/^	void (*allocate_segment)(struct f2fs_sb_info *, int, bool);$/;"	m	struct:segment_allocation
allocate_segment_by_default	fs/f2fs/segment.c	/^static void allocate_segment_by_default(struct f2fs_sb_info *sbi,$/;"	f	file:
append	fs/f2fs/f2fs.h	/^	int inline_xattr, inline_inode, inline_dir, append, update, orphans;$/;"	m	struct:f2fs_stat_info
atm_addrs	include/linux/f2fs_fs.h	/^	__le32 atm_addrs[ADDRS_PER_MASTER_NODE];$/;"	m	struct:master_node
atomic_file	fs/f2fs/f2fs.h	/^struct atomic_file {$/;"	s
atomic_file_set	fs/f2fs/f2fs.h	/^struct atomic_file_set {$/;"	s
attr	fs/f2fs/sysfs.c	/^	struct attribute attr;$/;"	m	struct:f2fs_attr	typeref:struct:f2fs_attr::attribute	file:
avail_nids	fs/f2fs/f2fs.h	/^	int free_nids, avail_nids, alloc_nids;$/;"	m	struct:f2fs_stat_info
available_nids	fs/f2fs/f2fs.h	/^	nid_t available_nids;		\/* # of available node ids *\/$/;"	m	struct:f2fs_nm_info
avg_vblocks	fs/f2fs/f2fs.h	/^	unsigned int bimodal, avg_vblocks;$/;"	m	struct:f2fs_stat_info
aw_cnt	fs/f2fs/f2fs.h	/^	atomic_t aw_cnt;			\/* # of atomic writes *\/$/;"	m	struct:f2fs_sb_info
aw_cnt	fs/f2fs/f2fs.h	/^	int aw_cnt, max_aw_cnt, vw_cnt, max_vw_cnt;$/;"	m	struct:f2fs_stat_info
base_mem	fs/f2fs/f2fs.h	/^	unsigned long long base_mem, cache_mem, page_mem;$/;"	m	struct:f2fs_stat_info
bdev	fs/f2fs/f2fs.h	/^	struct block_device *bdev;	\/* bdev *\/$/;"	m	struct:discard_cmd	typeref:struct:discard_cmd::block_device
bdev	fs/f2fs/f2fs.h	/^	struct block_device *bdev;$/;"	m	struct:f2fs_dev_info	typeref:struct:f2fs_dev_info::block_device
bg_cp_count	fs/f2fs/f2fs.h	/^	int prefree_count, call_count, cp_count, bg_cp_count;$/;"	m	struct:f2fs_stat_info
bg_data_blks	fs/f2fs/f2fs.h	/^	int bg_data_blks, bg_node_blks;$/;"	m	struct:f2fs_stat_info
bg_data_segs	fs/f2fs/f2fs.h	/^	int bg_node_segs, bg_data_segs;$/;"	m	struct:f2fs_stat_info
bg_gc	fs/f2fs/f2fs.h	/^	int bg_gc, nr_wb_cp_data, nr_wb_data;$/;"	m	struct:f2fs_stat_info
bg_gc	fs/f2fs/f2fs.h	/^	int bg_gc;				\/* background gc calls *\/$/;"	m	struct:f2fs_sb_info
bg_node_blks	fs/f2fs/f2fs.h	/^	int bg_data_blks, bg_node_blks;$/;"	m	struct:f2fs_stat_info
bg_node_segs	fs/f2fs/f2fs.h	/^	int bg_node_segs, bg_data_segs;$/;"	m	struct:f2fs_stat_info
bimodal	fs/f2fs/f2fs.h	/^	unsigned int bimodal, avg_vblocks;$/;"	m	struct:f2fs_stat_info
bio	fs/f2fs/data.c	/^	struct bio *bio;$/;"	m	struct:bio_post_read_ctx	typeref:struct:bio_post_read_ctx::bio	file:
bio	fs/f2fs/f2fs.h	/^	struct bio *bio;		\/* bios to merge *\/$/;"	m	struct:f2fs_bio_info	typeref:struct:f2fs_bio_info::bio
bio_post_read_ctx	fs/f2fs/data.c	/^struct bio_post_read_ctx {$/;"	s	file:
bio_post_read_ctx_cache	fs/f2fs/data.c	/^static struct kmem_cache *bio_post_read_ctx_cache;$/;"	v	typeref:struct:kmem_cache	file:
bio_post_read_ctx_pool	fs/f2fs/data.c	/^static mempool_t *bio_post_read_ctx_pool;$/;"	v	file:
bio_post_read_processing	fs/f2fs/data.c	/^static void bio_post_read_processing(struct bio_post_read_ctx *ctx)$/;"	f	file:
bio_post_read_step	fs/f2fs/data.c	/^enum bio_post_read_step {$/;"	g	file:
bitmap	fs/f2fs/f2fs.h	/^	void *bitmap;$/;"	m	struct:f2fs_dentry_ptr
bitmap_size	fs/f2fs/f2fs.h	/^	int bitmap_size;		\/* bitmap size *\/$/;"	m	struct:f2fs_nm_info
bitmap_size	fs/f2fs/segment.h	/^	unsigned int bitmap_size;	\/* SIT bitmap size *\/$/;"	m	struct:sit_info
blk	fs/f2fs/f2fs.h	/^			u32 blk;$/;"	m	struct:extent_node::__anon18::__anon19
blk	fs/f2fs/f2fs.h	/^	u32 blk;			\/* start block address of the extent *\/$/;"	m	struct:extent_info
blk	include/linux/f2fs_fs.h	/^	__le32 blk;		\/* start block address of the extent *\/$/;"	m	struct:f2fs_extent
blk_addr	fs/f2fs/node.h	/^	block_t	blk_addr;	\/* block address of the node *\/$/;"	m	struct:node_info
blk_addr	include/linux/f2fs_fs.h	/^	__le16 blk_addr;	\/* block index in current CP *\/$/;"	m	struct:f2fs_orphan_block
blk_count	include/linux/f2fs_fs.h	/^	__le16 blk_count;	\/* Number of orphan inode blocks in CP *\/$/;"	m	struct:f2fs_orphan_block
blk_to_logical	fs/f2fs/data.c	/^static inline loff_t blk_to_logical(struct inode *inode, sector_t blk)$/;"	f	file:
blkaddr	fs/f2fs/f2fs.h	/^	block_t blkaddr;	\/* block address locating the last fsync *\/$/;"	m	struct:fsync_inode_entry
blkaddr_in_node	fs/f2fs/f2fs.h	/^static inline __le32 *blkaddr_in_node(struct f2fs_node *node)$/;"	f
blkz_type	fs/f2fs/f2fs.h	/^	u8 *blkz_type;				\/* Array of zones type *\/$/;"	m	struct:f2fs_dev_info
block_addr	include/linux/f2fs_fs.h	/^	__le32 block_addr;	\/* block address *\/$/;"	m	struct:f2fs_nat_entry
block_count	fs/f2fs/f2fs.h	/^	unsigned int block_count[2];		\/* # of allocated blocks *\/$/;"	m	struct:f2fs_sb_info
block_count	fs/f2fs/f2fs.h	/^	unsigned int block_count[2];$/;"	m	struct:f2fs_stat_info
block_count	include/linux/f2fs_fs.h	/^	__le64 block_count;		\/* total # of user blocks *\/$/;"	m	struct:f2fs_super_block
block_operations	fs/f2fs/checkpoint.c	/^static int block_operations(struct f2fs_sb_info *sbi)$/;"	f	file:
block_t	fs/f2fs/f2fs.h	/^typedef u32 block_t;	\/*$/;"	t
blocks_per_blkz	fs/f2fs/f2fs.h	/^	unsigned int blocks_per_blkz;		\/* F2FS blocks per zone *\/$/;"	m	struct:f2fs_sb_info
blocks_per_seg	fs/f2fs/f2fs.h	/^	unsigned int blocks_per_seg;		\/* blocks per segment *\/$/;"	m	struct:f2fs_sb_info
blocksize	fs/f2fs/f2fs.h	/^	unsigned int blocksize;			\/* block size *\/$/;"	m	struct:f2fs_sb_info
bucket_blocks	fs/f2fs/dir.c	/^static unsigned int bucket_blocks(unsigned int level)$/;"	f	file:
build_curseg	fs/f2fs/segment.c	/^static int build_curseg(struct f2fs_sb_info *sbi)$/;"	f	file:
build_dirty_segmap	fs/f2fs/segment.c	/^static int build_dirty_segmap(struct f2fs_sb_info *sbi)$/;"	f	file:
build_free_segmap	fs/f2fs/segment.c	/^static int build_free_segmap(struct f2fs_sb_info *sbi)$/;"	f	file:
build_lock	fs/f2fs/f2fs.h	/^	struct mutex build_lock;	\/* lock for build free nids *\/$/;"	m	struct:f2fs_nm_info	typeref:struct:f2fs_nm_info::mutex
build_sit_entries	fs/f2fs/segment.c	/^static int build_sit_entries(struct f2fs_sb_info *sbi)$/;"	f	file:
build_sit_info	fs/f2fs/segment.c	/^static int build_sit_info(struct f2fs_sb_info *sbi)$/;"	f	file:
cache_mem	fs/f2fs/f2fs.h	/^	unsigned long long base_mem, cache_mem, page_mem;$/;"	m	struct:f2fs_stat_info
cache_nat_entry	fs/f2fs/node.c	/^static void cache_nat_entry(struct f2fs_sb_info *sbi, nid_t nid,$/;"	f	file:
cached_en	fs/f2fs/f2fs.h	/^	struct extent_node *cached_en;	\/* recently accessed extent node *\/$/;"	m	struct:extent_tree	typeref:struct:extent_tree::extent_node
call_count	fs/f2fs/f2fs.h	/^	int prefree_count, call_count, cp_count, bg_cp_count;$/;"	m	struct:f2fs_stat_info
change_curseg	fs/f2fs/segment.c	/^static void change_curseg(struct f2fs_sb_info *sbi, int type)$/;"	f	file:
chash	fs/f2fs/f2fs.h	/^	f2fs_hash_t chash;		\/* hash value of given file name *\/$/;"	m	struct:f2fs_inode_info
check_bg_victims	fs/f2fs/gc.c	/^static unsigned int check_bg_victims(struct f2fs_sb_info *sbi)$/;"	f	file:
check_block_count	fs/f2fs/segment.h	/^static inline int check_block_count(struct f2fs_sb_info *sbi,$/;"	f
check_direct_IO	fs/f2fs/data.c	/^static int check_direct_IO(struct inode *inode, struct iov_iter *iter,$/;"	f	file:
check_index_in_prev_nodes	fs/f2fs/recovery.c	/^static int check_index_in_prev_nodes(struct f2fs_sb_info *sbi,$/;"	f	file:
check_inplace_update_policy	fs/f2fs/data.c	/^static inline bool check_inplace_update_policy(struct inode *inode,$/;"	f	file:
check_seg_range	fs/f2fs/segment.h	/^static inline void check_seg_range(struct f2fs_sb_info *sbi, unsigned int segno)$/;"	f
check_sum	include/linux/f2fs_fs.h	/^	__le32 check_sum;		\/* summary checksum *\/$/;"	m	struct:summary_footer
check_sum	include/linux/f2fs_fs.h	/^	__le32 check_sum;	\/* CRC32 for orphan inode block *\/$/;"	m	struct:f2fs_orphan_block
check_valid_map	fs/f2fs/gc.c	/^static int check_valid_map(struct f2fs_sb_info *sbi,$/;"	f	file:
checkpoint_ver	include/linux/f2fs_fs.h	/^	__le64 checkpoint_ver;		\/* checkpoint block version number *\/$/;"	m	struct:f2fs_checkpoint
checksum_offset	include/linux/f2fs_fs.h	/^	__le32 checksum_offset;		\/* checksum offset inside cp block *\/$/;"	m	struct:f2fs_checkpoint
checksum_offset	include/linux/f2fs_fs.h	/^	__le32 checksum_offset;		\/* checksum offset inside super block *\/$/;"	m	struct:f2fs_super_block
ckpt	fs/f2fs/f2fs.h	/^	struct f2fs_checkpoint *ckpt;		\/* raw checkpoint pointer *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::f2fs_checkpoint
ckpt_flags	include/linux/f2fs_fs.h	/^	__le32 ckpt_flags;		\/* Flags : umount and journal_present *\/$/;"	m	struct:f2fs_checkpoint
ckpt_valid_blocks	fs/f2fs/segment.h	/^	unsigned int ckpt_valid_blocks:10;	\/* # of valid blocks last cp *\/$/;"	m	struct:seg_entry
ckpt_valid_map	fs/f2fs/segment.h	/^	unsigned char *ckpt_valid_map;	\/* validity bitmap of blocks last cp *\/$/;"	m	struct:seg_entry
clear_ckpt_flags	fs/f2fs/f2fs.h	/^static inline void clear_ckpt_flags(struct f2fs_sb_info *sbi, unsigned int f)$/;"	f
clear_cold_data	fs/f2fs/node.h	/^static inline void clear_cold_data(struct page *page)$/;"	f
clear_file	fs/f2fs/f2fs.h	/^static inline void clear_file(struct inode *inode, int type)$/;"	f
clear_inline_node	fs/f2fs/node.h	/^static inline void clear_inline_node(struct page *page)$/;"	f
clear_inode_flag	fs/f2fs/f2fs.h	/^static inline void clear_inode_flag(struct inode *inode, int flag)$/;"	f
clear_node_page_dirty	fs/f2fs/node.c	/^static void clear_node_page_dirty(struct page *page)$/;"	f	file:
clear_opt	fs/f2fs/f2fs.h	102;"	d
clear_sbi_flag	fs/f2fs/f2fs.h	/^static inline void clear_sbi_flag(struct f2fs_sb_info *sbi, unsigned int type)$/;"	f
clevel	fs/f2fs/f2fs.h	/^	unsigned int clevel;		\/* maximum level of given file name *\/$/;"	m	struct:f2fs_inode_info
cmd_lock	fs/f2fs/f2fs.h	/^	struct mutex cmd_lock;$/;"	m	struct:discard_cmd_control	typeref:struct:discard_cmd_control::mutex
commit_checkpoint	fs/f2fs/checkpoint.c	/^static void commit_checkpoint(struct f2fs_sb_info *sbi,$/;"	f	file:
copy_node_footer	fs/f2fs/node.h	/^static inline void copy_node_footer(struct page *dst, struct page *src)$/;"	f
copy_node_info	fs/f2fs/node.h	/^static inline void copy_node_info(struct node_info *dst,$/;"	f
count_bits	fs/f2fs/gc.c	/^static unsigned int count_bits(const unsigned long *addr,$/;"	f	file:
count_type	fs/f2fs/f2fs.h	/^enum count_type {$/;"	g
count_valid_addr	include/linux/f2fs_fs.h	/^	__le32 count_valid_addr;$/;"	m	struct:master_node
cp_blkaddr	include/linux/f2fs_fs.h	/^	__le32 cp_blkaddr;		\/* start block address of checkpoint *\/$/;"	m	struct:f2fs_super_block
cp_control	fs/f2fs/f2fs.h	/^struct cp_control {$/;"	s
cp_count	fs/f2fs/f2fs.h	/^	int prefree_count, call_count, cp_count, bg_cp_count;$/;"	m	struct:f2fs_stat_info
cp_lock	fs/f2fs/f2fs.h	/^	spinlock_t cp_lock;			\/* for flag in ckpt *\/$/;"	m	struct:f2fs_sb_info
cp_mutex	fs/f2fs/f2fs.h	/^	struct mutex cp_mutex;			\/* checkpoint procedure lock *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::mutex
cp_pack_start_sum	include/linux/f2fs_fs.h	/^	__le32 cp_pack_start_sum;	\/* start block number of data summary *\/$/;"	m	struct:f2fs_checkpoint
cp_pack_total_block_count	include/linux/f2fs_fs.h	/^	__le32 cp_pack_total_block_count;	\/* total # of one cp pack *\/$/;"	m	struct:f2fs_checkpoint
cp_payload	include/linux/f2fs_fs.h	/^	__le32 cp_payload;$/;"	m	struct:f2fs_super_block
cp_reason_type	fs/f2fs/f2fs.h	/^enum cp_reason_type {$/;"	g
cp_rwsem	fs/f2fs/f2fs.h	/^	struct rw_semaphore cp_rwsem;		\/* blocking FS operations *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::rw_semaphore
cp_task	fs/f2fs/f2fs.h	/^	struct task_struct *cp_task;	\/* separate cp\/wb IO stats*\/$/;"	m	struct:f2fs_inode_info	typeref:struct:f2fs_inode_info::task_struct
cp_ver	include/linux/f2fs_fs.h	/^	__le64 cp_ver;		\/* checkpoint version *\/$/;"	m	struct:node_footer
cp_wait	fs/f2fs/f2fs.h	/^	wait_queue_head_t cp_wait;$/;"	m	struct:f2fs_sb_info
cpver_of_node	fs/f2fs/node.h	/^static inline __u64 cpver_of_node(struct page *node_page)$/;"	f
create_discard_cmd_control	fs/f2fs/segment.c	/^static int create_discard_cmd_control(struct f2fs_sb_info *sbi)$/;"	f	file:
cur_cp_crc	fs/f2fs/f2fs.h	/^static inline __u64 cur_cp_crc(struct f2fs_checkpoint *cp)$/;"	f
cur_cp_pack	fs/f2fs/f2fs.h	/^	int cur_cp_pack;			\/* remain current cp pack *\/$/;"	m	struct:f2fs_sb_info
cur_cp_version	fs/f2fs/f2fs.h	/^static inline unsigned long long cur_cp_version(struct f2fs_checkpoint *cp)$/;"	f
cur_data_blkoff	include/linux/f2fs_fs.h	/^	__le16 cur_data_blkoff[MAX_ACTIVE_DATA_LOGS];$/;"	m	struct:f2fs_checkpoint
cur_data_segno	include/linux/f2fs_fs.h	/^	__le32 cur_data_segno[MAX_ACTIVE_DATA_LOGS];$/;"	m	struct:f2fs_checkpoint
cur_level	fs/f2fs/f2fs.h	/^	char cur_level;			\/* level of hole node page *\/$/;"	m	struct:dnode_of_data
cur_node_blkoff	include/linux/f2fs_fs.h	/^	__le16 cur_node_blkoff[MAX_ACTIVE_NODE_LOGS];$/;"	m	struct:f2fs_checkpoint
cur_node_segno	include/linux/f2fs_fs.h	/^	__le32 cur_node_segno[MAX_ACTIVE_NODE_LOGS];$/;"	m	struct:f2fs_checkpoint
cur_step	fs/f2fs/data.c	/^	unsigned int cur_step;$/;"	m	struct:bio_post_read_ctx	file:
cur_valid_map	fs/f2fs/segment.h	/^	unsigned char *cur_valid_map;	\/* validity bitmap of blocks *\/$/;"	m	struct:seg_entry
cur_valid_map_mir	fs/f2fs/segment.h	/^	unsigned char *cur_valid_map_mir;	\/* mirror of current valid bitmap *\/$/;"	m	struct:seg_entry
cur_victim_sec	fs/f2fs/f2fs.h	/^	unsigned int cur_victim_sec;		\/* current victim section num *\/$/;"	m	struct:f2fs_sb_info
current_nat_addr	fs/f2fs/node.h	/^static inline pgoff_t current_nat_addr(struct f2fs_sb_info *sbi, nid_t start)$/;"	f
current_reserved_blocks	fs/f2fs/f2fs.h	/^	block_t current_reserved_blocks;	\/* current reserved blocks *\/$/;"	m	struct:f2fs_sb_info
current_reserved_blocks	fs/f2fs/sysfs.c	/^F2FS_GENERAL_RO_ATTR(current_reserved_blocks);$/;"	v
current_reserved_blocks_show	fs/f2fs/sysfs.c	/^static ssize_t current_reserved_blocks_show(struct f2fs_attr *a,$/;"	f	file:
current_sit_addr	fs/f2fs/segment.h	/^static inline pgoff_t current_sit_addr(struct f2fs_sb_info *sbi,$/;"	f
cursec	fs/f2fs/f2fs.h	/^	int cursec[NR_CURSEG_TYPE];$/;"	m	struct:f2fs_stat_info
curseg	fs/f2fs/f2fs.h	/^	int curseg[NR_CURSEG_TYPE];$/;"	m	struct:f2fs_stat_info
curseg_alloc_type	fs/f2fs/segment.h	/^static inline unsigned char curseg_alloc_type(struct f2fs_sb_info *sbi,$/;"	f
curseg_array	fs/f2fs/f2fs.h	/^	struct curseg_info *curseg_array;	\/* active segment information *\/$/;"	m	struct:f2fs_sm_info	typeref:struct:f2fs_sm_info::curseg_info
curseg_blkoff	fs/f2fs/segment.h	/^static inline unsigned short curseg_blkoff(struct f2fs_sb_info *sbi, int type)$/;"	f
curseg_info	fs/f2fs/segment.h	/^struct curseg_info {$/;"	s
curseg_lock	fs/f2fs/f2fs.h	/^	struct rw_semaphore curseg_lock;	\/* for preventing curseg change *\/$/;"	m	struct:f2fs_sm_info	typeref:struct:f2fs_sm_info::rw_semaphore
curseg_mutex	fs/f2fs/segment.h	/^	struct mutex curseg_mutex;		\/* lock for consistency *\/$/;"	m	struct:curseg_info	typeref:struct:curseg_info::mutex
curseg_segno	fs/f2fs/segment.h	/^static inline unsigned int curseg_segno(struct f2fs_sb_info *sbi,$/;"	f
curzone	fs/f2fs/f2fs.h	/^	int curzone[NR_CURSEG_TYPE];$/;"	m	struct:f2fs_stat_info
data_blkaddr	fs/f2fs/f2fs.h	/^	block_t	data_blkaddr;		\/* block address of the node block *\/$/;"	m	struct:dnode_of_data
data_blks	fs/f2fs/f2fs.h	/^	int tot_blks, data_blks, node_blks;$/;"	m	struct:f2fs_stat_info
data_segs	fs/f2fs/f2fs.h	/^	int tot_segs, node_segs, data_segs, free_segs, free_secs;$/;"	m	struct:f2fs_stat_info
datablock_addr	fs/f2fs/f2fs.h	/^static inline block_t datablock_addr(struct inode *inode,$/;"	f
dcc_info	fs/f2fs/f2fs.h	/^	struct discard_cmd_control *dcc_info;$/;"	m	struct:f2fs_sm_info	typeref:struct:f2fs_sm_info::discard_cmd_control
dec_page_count	fs/f2fs/f2fs.h	/^static inline void dec_page_count(struct f2fs_sb_info *sbi, int count_type)$/;"	f
dec_valid_block_count	fs/f2fs/f2fs.h	/^static inline void dec_valid_block_count(struct f2fs_sb_info *sbi,$/;"	f
dec_valid_inode_count	fs/f2fs/f2fs.h	/^static inline void dec_valid_inode_count(struct f2fs_sb_info *sbi)$/;"	f
dec_valid_node_count	fs/f2fs/f2fs.h	/^static inline void dec_valid_node_count(struct f2fs_sb_info *sbi,$/;"	f
decrease_sleep_time	fs/f2fs/gc.h	/^static inline void decrease_sleep_time(struct f2fs_gc_kthread *gc_th,$/;"	f
decrypt_work	fs/f2fs/data.c	/^static void decrypt_work(struct work_struct *work)$/;"	f	file:
default_options	fs/f2fs/super.c	/^static void default_options(struct f2fs_sb_info *sbi)$/;"	f	file:
default_salloc_ops	fs/f2fs/segment.c	/^static const struct segment_allocation default_salloc_ops = {$/;"	v	typeref:struct:segment_allocation	file:
default_v_ops	fs/f2fs/gc.c	/^static const struct victim_selection default_v_ops = {$/;"	v	typeref:struct:victim_selection	file:
del_fsync_inode	fs/f2fs/recovery.c	/^static void del_fsync_inode(struct fsync_inode_entry *entry)$/;"	f	file:
dentry	fs/f2fs/f2fs.h	/^	struct f2fs_dir_entry *dentry;$/;"	m	struct:f2fs_dentry_ptr	typeref:struct:f2fs_dentry_ptr::f2fs_dir_entry
dentry	include/linux/f2fs_fs.h	/^	struct f2fs_dir_entry dentry[NR_DENTRY_IN_BLOCK];$/;"	m	struct:f2fs_dentry_block	typeref:struct:f2fs_dentry_block::f2fs_dir_entry
dentry_bitmap	include/linux/f2fs_fs.h	/^	__u8 dentry_bitmap[SIZE_OF_DENTRY_BITMAP];$/;"	m	struct:f2fs_dentry_block
destroy_curseg	fs/f2fs/segment.c	/^static void destroy_curseg(struct f2fs_sb_info *sbi)$/;"	f	file:
destroy_device_list	fs/f2fs/super.c	/^static void destroy_device_list(struct f2fs_sb_info *sbi)$/;"	f	file:
destroy_dirty_segmap	fs/f2fs/segment.c	/^static void destroy_dirty_segmap(struct f2fs_sb_info *sbi)$/;"	f	file:
destroy_discard_cmd_control	fs/f2fs/segment.c	/^static void destroy_discard_cmd_control(struct f2fs_sb_info *sbi)$/;"	f	file:
destroy_free_segmap	fs/f2fs/segment.c	/^static void destroy_free_segmap(struct f2fs_sb_info *sbi)$/;"	f	file:
destroy_fsync_dnodes	fs/f2fs/recovery.c	/^static void destroy_fsync_dnodes(struct list_head *head)$/;"	f	file:
destroy_inodecache	fs/f2fs/super.c	/^static void destroy_inodecache(void)$/;"	f	file:
destroy_percpu_info	fs/f2fs/super.c	/^static void destroy_percpu_info(struct f2fs_sb_info *sbi)$/;"	f	file:
destroy_sit_info	fs/f2fs/segment.c	/^static void destroy_sit_info(struct f2fs_sb_info *sbi)$/;"	f	file:
destroy_victim_secmap	fs/f2fs/segment.c	/^static void destroy_victim_secmap(struct f2fs_sb_info *sbi)$/;"	f	file:
dev_lock	fs/f2fs/f2fs.h	/^	spinlock_t dev_lock;			\/* protect dirty_device *\/$/;"	m	struct:f2fs_sb_info
dev_num	fs/f2fs/f2fs.h	/^	u32 dev_num;		\/* device number to flush *\/$/;"	m	struct:f2fs_flush_device
devs	fs/f2fs/f2fs.h	/^	struct f2fs_dev_info *devs;		\/* for device list *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::f2fs_dev_info
devs	include/linux/f2fs_fs.h	/^	struct f2fs_device devs[MAX_DEVICES];	\/* device list *\/$/;"	m	struct:f2fs_super_block	typeref:struct:f2fs_super_block::f2fs_device
di	fs/f2fs/f2fs.h	/^		struct discard_info di;	\/* discard info *\/$/;"	m	union:discard_cmd::__anon14	typeref:struct:discard_cmd::__anon14::discard_info
dir_block_index	fs/f2fs/dir.c	/^static unsigned long dir_block_index(unsigned int level,$/;"	f	file:
dir_blocks	fs/f2fs/dir.c	/^static unsigned long dir_blocks(struct inode *inode)$/;"	f	file:
dir_buckets	fs/f2fs/dir.c	/^static unsigned int dir_buckets(unsigned int level, int dir_level)$/;"	f	file:
dir_level	fs/f2fs/f2fs.h	/^	int dir_level;				\/* directory level *\/$/;"	m	struct:f2fs_sb_info
direct_node	include/linux/f2fs_fs.h	/^struct direct_node {$/;"	s
dirty_count	fs/f2fs/f2fs.h	/^	int dirty_count, node_pages, meta_pages;$/;"	m	struct:f2fs_stat_info
dirty_device	fs/f2fs/f2fs.h	/^	unsigned int dirty_device;		\/* for checkpoint data flush *\/$/;"	m	struct:f2fs_sb_info
dirty_device	fs/f2fs/f2fs.h	/^	unsigned int dirty_device;	\/* dirty device bitmap *\/$/;"	m	struct:ino_entry
dirty_info	fs/f2fs/f2fs.h	/^	struct dirty_seglist_info *dirty_info;	\/* dirty segment information *\/$/;"	m	struct:f2fs_sm_info	typeref:struct:f2fs_sm_info::dirty_seglist_info
dirty_list	fs/f2fs/f2fs.h	/^	struct list_head dirty_list;	\/* dirty list for dirs and files *\/$/;"	m	struct:f2fs_inode_info	typeref:struct:f2fs_inode_info::list_head
dirty_nat_cnt	fs/f2fs/f2fs.h	/^	unsigned int dirty_nat_cnt;	\/* total num of nat entries in set *\/$/;"	m	struct:f2fs_nm_info
dirty_nats	fs/f2fs/f2fs.h	/^	int nats, dirty_nats, sits, dirty_sits;$/;"	m	struct:f2fs_stat_info
dirty_nats_ratio	fs/f2fs/f2fs.h	/^	unsigned int dirty_nats_ratio;	\/* control dirty nats ratio threshold *\/$/;"	m	struct:f2fs_nm_info
dirty_pages	fs/f2fs/f2fs.h	/^	atomic_t dirty_pages;		\/* # of dirty pages *\/$/;"	m	struct:f2fs_inode_info
dirty_seglist_info	fs/f2fs/segment.h	/^struct dirty_seglist_info {$/;"	s
dirty_segmap	fs/f2fs/segment.h	/^	unsigned long *dirty_segmap;	\/* dirty segment bitmap *\/$/;"	m	struct:victim_sel_policy
dirty_segmap	fs/f2fs/segment.h	/^	unsigned long *dirty_segmap[NR_DIRTY_TYPE];$/;"	m	struct:dirty_seglist_info
dirty_segments	fs/f2fs/segment.h	/^static inline unsigned int dirty_segments(struct f2fs_sb_info *sbi)$/;"	f
dirty_segments	fs/f2fs/sysfs.c	/^F2FS_GENERAL_RO_ATTR(dirty_segments);$/;"	v
dirty_segments_show	fs/f2fs/sysfs.c	/^static ssize_t dirty_segments_show(struct f2fs_attr *a,$/;"	f	file:
dirty_sentries	fs/f2fs/segment.h	/^	unsigned int dirty_sentries;		\/* # of dirty sentries *\/$/;"	m	struct:sit_info
dirty_sentries_bitmap	fs/f2fs/segment.h	/^	unsigned long *dirty_sentries_bitmap;	\/* bitmap for dirty sentries *\/$/;"	m	struct:sit_info
dirty_sits	fs/f2fs/f2fs.h	/^	int nats, dirty_nats, sits, dirty_sits;$/;"	m	struct:f2fs_stat_info
dirty_type	fs/f2fs/segment.h	/^enum dirty_type {$/;"	g
disable_nat_bits	fs/f2fs/f2fs.h	/^static inline void disable_nat_bits(struct f2fs_sb_info *sbi, bool lock)$/;"	f
discard_blks	fs/f2fs/f2fs.h	/^	block_t discard_blks;			\/* discard command candidats *\/$/;"	m	struct:f2fs_sb_info
discard_blks	fs/f2fs/f2fs.h	/^	unsigned int valid_count, valid_node_count, valid_inode_count, discard_blks;$/;"	m	struct:f2fs_stat_info
discard_blocks	fs/f2fs/f2fs.h	/^static inline block_t discard_blocks(struct f2fs_sb_info *sbi)$/;"	f
discard_cmd	fs/f2fs/f2fs.h	/^struct discard_cmd {$/;"	s
discard_cmd_cnt	fs/f2fs/f2fs.h	/^	atomic_t discard_cmd_cnt;		\/* # of cached cmd count *\/$/;"	m	struct:discard_cmd_control
discard_cmd_control	fs/f2fs/f2fs.h	/^struct discard_cmd_control {$/;"	s
discard_cmd_slab	fs/f2fs/segment.c	/^static struct kmem_cache *discard_cmd_slab;$/;"	v	typeref:struct:kmem_cache	file:
discard_dirty_segmap	fs/f2fs/segment.c	/^static void discard_dirty_segmap(struct f2fs_sb_info *sbi,$/;"	f	file:
discard_entry	fs/f2fs/f2fs.h	/^struct discard_entry {$/;"	s
discard_entry_slab	fs/f2fs/segment.c	/^static struct kmem_cache *discard_entry_slab;$/;"	v	typeref:struct:kmem_cache	file:
discard_granularity	fs/f2fs/f2fs.h	/^	unsigned int discard_granularity;	\/* discard granularity *\/$/;"	m	struct:discard_cmd_control
discard_info	fs/f2fs/f2fs.h	/^struct discard_info {$/;"	s
discard_map	fs/f2fs/f2fs.h	/^	unsigned char discard_map[SIT_VBLOCK_MAP_SIZE];	\/* segment discard bitmap *\/$/;"	m	struct:discard_entry
discard_map	fs/f2fs/segment.h	/^	unsigned char *discard_map;$/;"	m	struct:seg_entry
discard_policy	fs/f2fs/f2fs.h	/^struct discard_policy {$/;"	s
discard_wait_queue	fs/f2fs/f2fs.h	/^	wait_queue_head_t discard_wait_queue;	\/* waiting queue for wake-up *\/$/;"	m	struct:discard_cmd_control
discard_wake	fs/f2fs/f2fs.h	/^	unsigned int discard_wake;		\/* to wake up discard thread *\/$/;"	m	struct:discard_cmd_control
dispatch_list	fs/f2fs/f2fs.h	/^	struct llist_node *dispatch_list;	\/* list for command dispatch *\/$/;"	m	struct:flush_cmd_control	typeref:struct:flush_cmd_control::llist_node
dn	include/linux/f2fs_fs.h	/^		struct direct_node dn;$/;"	m	union:f2fs_node::__anon33	typeref:struct:f2fs_node::__anon33::direct_node
dnode_of_data	fs/f2fs/f2fs.h	/^struct dnode_of_data {$/;"	s
do_checkpoint	fs/f2fs/checkpoint.c	/^static int do_checkpoint(struct f2fs_sb_info *sbi, struct cp_control *cpc)$/;"	f	file:
do_garbage_collect	fs/f2fs/gc.c	/^static int do_garbage_collect(struct f2fs_sb_info *sbi,$/;"	f	file:
do_read_inode	fs/f2fs/inode.c	/^static int do_read_inode(struct inode *inode)$/;"	f	file:
do_recover_data	fs/f2fs/recovery.c	/^static int do_recover_data(struct f2fs_sb_info *sbi, struct inode *inode,$/;"	f	file:
do_write_page	fs/f2fs/segment.c	/^static void do_write_page(struct f2fs_summary *sum, struct f2fs_io_info *fio)$/;"	f	file:
dst_fd	fs/f2fs/f2fs.h	/^	u32 dst_fd;		\/* destination fd *\/$/;"	m	struct:f2fs_move_range
e_id	fs/f2fs/acl.h	/^	__le32 e_id;$/;"	m	struct:f2fs_acl_entry
e_name	fs/f2fs/xattr.h	/^	char    e_name[0];      \/* attribute name *\/$/;"	m	struct:f2fs_xattr_entry
e_name_index	fs/f2fs/xattr.h	/^	__u8    e_name_index;$/;"	m	struct:f2fs_xattr_entry
e_name_len	fs/f2fs/xattr.h	/^	__u8    e_name_len;$/;"	m	struct:f2fs_xattr_entry
e_perm	fs/f2fs/acl.h	/^	__le16 e_perm;$/;"	m	struct:f2fs_acl_entry
e_perm	fs/f2fs/acl.h	/^	__le16 e_perm;$/;"	m	struct:f2fs_acl_entry_short
e_tag	fs/f2fs/acl.h	/^	__le16 e_tag;$/;"	m	struct:f2fs_acl_entry
e_tag	fs/f2fs/acl.h	/^	__le16 e_tag;$/;"	m	struct:f2fs_acl_entry_short
e_value_size	fs/f2fs/xattr.h	/^	__le16  e_value_size;   \/* size of attribute value *\/$/;"	m	struct:f2fs_xattr_entry
ei	fs/f2fs/f2fs.h	/^		struct extent_info ei;	\/* extent info *\/$/;"	m	union:extent_node::__anon18	typeref:struct:extent_node::__anon18::extent_info
elapsed_time	fs/f2fs/segment.h	/^	unsigned long long elapsed_time;	\/* elapsed time after mount *\/$/;"	m	struct:sit_info
elapsed_time	include/linux/f2fs_fs.h	/^	__le64 elapsed_time;		\/* mounted time *\/$/;"	m	struct:f2fs_checkpoint
empty_nat_bits	fs/f2fs/f2fs.h	/^	unsigned char *empty_nat_bits;	\/* empty NAT pages *\/$/;"	m	struct:f2fs_nm_info
enabled_nat_bits	fs/f2fs/f2fs.h	/^static inline bool enabled_nat_bits(struct f2fs_sb_info *sbi,$/;"	f
enabled_steps	fs/f2fs/data.c	/^	unsigned int enabled_steps;$/;"	m	struct:bio_post_read_ctx	file:
encrypt_one_page	fs/f2fs/data.c	/^static int encrypt_one_page(struct f2fs_io_info *fio)$/;"	f	file:
encrypt_pw_salt	include/linux/f2fs_fs.h	/^	__u8 encrypt_pw_salt[16];	\/* Salt used for string2key algorithm *\/$/;"	m	struct:f2fs_super_block
encrypted_page	fs/f2fs/f2fs.h	/^	struct page *encrypted_page;	\/* encrypted page *\/$/;"	m	struct:f2fs_io_info	typeref:struct:f2fs_io_info::page
encryption_level	include/linux/f2fs_fs.h	/^	__u8 encryption_level;		\/* versioning level for encryption *\/$/;"	m	struct:f2fs_super_block
end_blk	fs/f2fs/f2fs.h	/^	block_t end_blk;$/;"	m	struct:f2fs_dev_info
entries	include/linux/f2fs_fs.h	/^	struct f2fs_nat_entry entries[NAT_ENTRY_PER_BLOCK];$/;"	m	struct:f2fs_nat_block	typeref:struct:f2fs_nat_block::f2fs_nat_entry
entries	include/linux/f2fs_fs.h	/^	struct f2fs_sit_entry entries[SIT_ENTRY_PER_BLOCK];$/;"	m	struct:f2fs_sit_block	typeref:struct:f2fs_sit_block::f2fs_sit_entry
entries	include/linux/f2fs_fs.h	/^	struct f2fs_summary entries[ENTRIES_IN_SUM];$/;"	m	struct:f2fs_summary_block	typeref:struct:f2fs_summary_block::f2fs_summary
entries	include/linux/f2fs_fs.h	/^	struct nat_journal_entry entries[NAT_JOURNAL_ENTRIES];$/;"	m	struct:nat_journal	typeref:struct:nat_journal::nat_journal_entry
entries	include/linux/f2fs_fs.h	/^	struct sit_journal_entry entries[SIT_JOURNAL_ENTRIES];$/;"	m	struct:sit_journal	typeref:struct:sit_journal::sit_journal_entry
entry_cnt	fs/f2fs/node.h	/^	unsigned int entry_cnt;		\/* the # of nat entries in set *\/$/;"	m	struct:nat_entry_set
entry_cnt	fs/f2fs/segment.h	/^	unsigned int entry_cnt;		\/* the # of sit entries in set *\/$/;"	m	struct:sit_entry_set
entry_count	include/linux/f2fs_fs.h	/^	__le32 entry_count;	\/* Total number of orphan nodes in current CP *\/$/;"	m	struct:f2fs_orphan_block
entry_list	fs/f2fs/f2fs.h	/^	struct list_head entry_list;		\/* 4KB discard entry list *\/$/;"	m	struct:discard_cmd_control	typeref:struct:discard_cmd_control::list_head
entry_list	fs/f2fs/node.h	/^	struct list_head entry_list;	\/* link with dirty nat entries *\/$/;"	m	struct:nat_entry_set	typeref:struct:nat_entry_set::list_head
entry_type	include/linux/f2fs_fs.h	/^	unsigned char entry_type;	\/* SUM_TYPE_XXX *\/$/;"	m	struct:summary_footer
error	fs/f2fs/f2fs.h	/^	int error;			\/* bio error *\/$/;"	m	struct:discard_cmd
et	fs/f2fs/f2fs.h	/^	struct extent_tree *et;		\/* extent tree pointer *\/$/;"	m	struct:extent_node	typeref:struct:extent_node::extent_tree
excess_cached_nats	fs/f2fs/node.h	/^static inline bool excess_cached_nats(struct f2fs_sb_info *sbi)$/;"	f
excess_dirty_nats	fs/f2fs/node.h	/^static inline bool excess_dirty_nats(struct f2fs_sb_info *sbi)$/;"	f
excess_prefree_segs	fs/f2fs/segment.h	/^static inline bool excess_prefree_segs(struct f2fs_sb_info *sbi)$/;"	f
exit_f2fs_fs	fs/f2fs/super.c	/^static void __exit exit_f2fs_fs(void)$/;"	f	file:
expand_inode_data	fs/f2fs/file.c	/^static int expand_inode_data(struct inode *inode, loff_t offset,$/;"	f	file:
ext_node	fs/f2fs/f2fs.h	/^	int ext_tree, zombie_tree, ext_node;$/;"	m	struct:f2fs_stat_info
ext_tree	fs/f2fs/f2fs.h	/^	int ext_tree, zombie_tree, ext_node;$/;"	m	struct:f2fs_stat_info
extension_count	include/linux/f2fs_fs.h	/^	__le32 extension_count;		\/* # of extensions below *\/$/;"	m	struct:f2fs_super_block
extension_list	include/linux/f2fs_fs.h	/^	__u8 extension_list[F2FS_MAX_EXTENSION][F2FS_EXTENSION_LEN];\/* extension array *\/$/;"	m	struct:f2fs_super_block
extent_info	fs/f2fs/f2fs.h	/^struct extent_info {$/;"	s
extent_list	fs/f2fs/f2fs.h	/^	struct list_head extent_list;		\/* lru list for shrinker *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::list_head
extent_lock	fs/f2fs/f2fs.h	/^	spinlock_t extent_lock;			\/* locking extent lru list *\/$/;"	m	struct:f2fs_sb_info
extent_node	fs/f2fs/f2fs.h	/^struct extent_node {$/;"	s
extent_node_slab	fs/f2fs/extent_cache.c	/^static struct kmem_cache *extent_node_slab;$/;"	v	typeref:struct:kmem_cache	file:
extent_tree	fs/f2fs/f2fs.h	/^	struct extent_tree *extent_tree;	\/* cached extent_tree entry *\/$/;"	m	struct:f2fs_inode_info	typeref:struct:f2fs_inode_info::extent_tree
extent_tree	fs/f2fs/f2fs.h	/^struct extent_tree {$/;"	s
extent_tree_lock	fs/f2fs/f2fs.h	/^	struct mutex extent_tree_lock;	\/* locking extent radix tree *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::mutex
extent_tree_root	fs/f2fs/f2fs.h	/^	struct radix_tree_root extent_tree_root;\/* cache extent cache entries *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::radix_tree_root
extent_tree_slab	fs/f2fs/extent_cache.c	/^static struct kmem_cache *extent_tree_slab;$/;"	v	typeref:struct:kmem_cache	file:
f2fs-y	fs/f2fs/Makefile	/^f2fs-y		:= dir.o file.o inode.o namei.o hash.o super.o inline.o$/;"	m
f2fs_acl_clone	fs/f2fs/acl.c	/^static struct posix_acl *f2fs_acl_clone(const struct posix_acl *acl,$/;"	f	file:
f2fs_acl_count	fs/f2fs/acl.c	/^static inline int f2fs_acl_count(size_t size)$/;"	f	file:
f2fs_acl_create	fs/f2fs/acl.c	/^static int f2fs_acl_create(struct inode *dir, umode_t *mode,$/;"	f	file:
f2fs_acl_create_masq	fs/f2fs/acl.c	/^static int f2fs_acl_create_masq(struct posix_acl *acl, umode_t *mode_p)$/;"	f	file:
f2fs_acl_entry	fs/f2fs/acl.h	/^struct f2fs_acl_entry {$/;"	s
f2fs_acl_entry_short	fs/f2fs/acl.h	/^struct f2fs_acl_entry_short {$/;"	s
f2fs_acl_from_disk	fs/f2fs/acl.c	/^static struct posix_acl *f2fs_acl_from_disk(const char *value, size_t size)$/;"	f	file:
f2fs_acl_header	fs/f2fs/acl.h	/^struct f2fs_acl_header {$/;"	s
f2fs_acl_size	fs/f2fs/acl.c	/^static inline size_t f2fs_acl_size(int count)$/;"	f	file:
f2fs_acl_to_disk	fs/f2fs/acl.c	/^static void *f2fs_acl_to_disk(struct f2fs_sb_info *sbi,$/;"	f	file:
f2fs_acquire_orphan_inode	fs/f2fs/checkpoint.c	/^int f2fs_acquire_orphan_inode(struct f2fs_sb_info *sbi)$/;"	f
f2fs_add_dentry	fs/f2fs/dir.c	/^int f2fs_add_dentry(struct inode *dir, struct fscrypt_name *fname,$/;"	f
f2fs_add_inline_entries	fs/f2fs/inline.c	/^static int f2fs_add_inline_entries(struct inode *dir, void *inline_dentry)$/;"	f	file:
f2fs_add_inline_entry	fs/f2fs/inline.c	/^int f2fs_add_inline_entry(struct inode *dir, const struct qstr *new_name,$/;"	f
f2fs_add_ino_entry	fs/f2fs/checkpoint.c	/^void f2fs_add_ino_entry(struct f2fs_sb_info *sbi, nid_t ino, int type)$/;"	f
f2fs_add_link	fs/f2fs/f2fs.h	/^static inline int f2fs_add_link(struct dentry *dentry, struct inode *inode)$/;"	f
f2fs_add_orphan_inode	fs/f2fs/checkpoint.c	/^void f2fs_add_orphan_inode(struct inode *inode)$/;"	f
f2fs_add_regular_entry	fs/f2fs/dir.c	/^int f2fs_add_regular_entry(struct inode *dir, const struct qstr *new_name,$/;"	f
f2fs_alloc_inode	fs/f2fs/super.c	/^static struct inode *f2fs_alloc_inode(struct super_block *sb)$/;"	f	file:
f2fs_alloc_nid	fs/f2fs/node.c	/^bool f2fs_alloc_nid(struct f2fs_sb_info *sbi, nid_t *nid)$/;"	f
f2fs_alloc_nid_done	fs/f2fs/node.c	/^void f2fs_alloc_nid_done(struct f2fs_sb_info *sbi, nid_t nid)$/;"	f
f2fs_alloc_nid_failed	fs/f2fs/node.c	/^void f2fs_alloc_nid_failed(struct f2fs_sb_info *sbi, nid_t nid)$/;"	f
f2fs_allocate_data_block	fs/f2fs/segment.c	/^void f2fs_allocate_data_block(struct f2fs_sb_info *sbi, struct page *page,$/;"	f
f2fs_allocate_new_segments	fs/f2fs/segment.c	/^void f2fs_allocate_new_segments(struct f2fs_sb_info *sbi)$/;"	f
f2fs_attr	fs/f2fs/sysfs.c	/^struct f2fs_attr {$/;"	s	file:
f2fs_attr_ops	fs/f2fs/sysfs.c	/^static const struct sysfs_ops f2fs_attr_ops = {$/;"	v	typeref:struct:sysfs_ops	file:
f2fs_attr_show	fs/f2fs/sysfs.c	/^static ssize_t f2fs_attr_show(struct kobject *kobj,$/;"	f	file:
f2fs_attr_store	fs/f2fs/sysfs.c	/^static ssize_t f2fs_attr_store(struct kobject *kobj, struct attribute *attr,$/;"	f	file:
f2fs_attrs	fs/f2fs/sysfs.c	/^static struct attribute *f2fs_attrs[] = {$/;"	v	typeref:struct:attribute	file:
f2fs_available_free_memory	fs/f2fs/node.c	/^bool f2fs_available_free_memory(struct f2fs_sb_info *sbi, int type)$/;"	f
f2fs_balance_fs	fs/f2fs/segment.c	/^void f2fs_balance_fs(struct f2fs_sb_info *sbi, bool need)$/;"	f
f2fs_balance_fs_bg	fs/f2fs/segment.c	/^void f2fs_balance_fs_bg(struct f2fs_sb_info *sbi)$/;"	f
f2fs_bio_alloc	fs/f2fs/f2fs.h	/^static inline struct bio *f2fs_bio_alloc(struct f2fs_sb_info *sbi,$/;"	f
f2fs_bio_info	fs/f2fs/f2fs.h	/^struct f2fs_bio_info {$/;"	s
f2fs_bio_post_read_required	fs/f2fs/data.c	/^static bool f2fs_bio_post_read_required(struct bio *bio)$/;"	f	file:
f2fs_bitmap_size	fs/f2fs/segment.h	116;"	d
f2fs_bmap	fs/f2fs/data.c	/^static sector_t f2fs_bmap(struct address_space *mapping, sector_t block)$/;"	f	file:
f2fs_bug_on	fs/f2fs/f2fs.h	33;"	d
f2fs_bug_on	fs/f2fs/f2fs.h	35;"	d
f2fs_build_fault_attr	fs/f2fs/super.c	/^static void f2fs_build_fault_attr(struct f2fs_sb_info *sbi,$/;"	f	file:
f2fs_build_free_nids	fs/f2fs/node.c	/^void f2fs_build_free_nids(struct f2fs_sb_info *sbi, bool sync, bool mount)$/;"	f
f2fs_build_gc_manager	fs/f2fs/gc.c	/^void f2fs_build_gc_manager(struct f2fs_sb_info *sbi)$/;"	f
f2fs_build_node_manager	fs/f2fs/node.c	/^int f2fs_build_node_manager(struct f2fs_sb_info *sbi)$/;"	f
f2fs_build_segment_manager	fs/f2fs/segment.c	/^int f2fs_build_segment_manager(struct f2fs_sb_info *sbi)$/;"	f
f2fs_build_stats	fs/f2fs/debug.c	/^int f2fs_build_stats(struct f2fs_sb_info *sbi)$/;"	f
f2fs_build_stats	fs/f2fs/f2fs.h	/^static inline int f2fs_build_stats(struct f2fs_sb_info *sbi) { return 0; }$/;"	f
f2fs_build_trace_ios	fs/f2fs/trace.c	/^void f2fs_build_trace_ios(void)$/;"	f
f2fs_build_trace_ios	fs/f2fs/trace.h	42;"	d
f2fs_change_bit	fs/f2fs/f2fs.h	/^static inline void f2fs_change_bit(unsigned int nr, char *addr)$/;"	f
f2fs_check_nid_range	fs/f2fs/node.c	/^int f2fs_check_nid_range(struct f2fs_sb_info *sbi, nid_t nid)$/;"	f
f2fs_check_quota_options	fs/f2fs/super.c	/^static int f2fs_check_quota_options(struct f2fs_sb_info *sbi)$/;"	f	file:
f2fs_check_rb_tree_consistence	fs/f2fs/extent_cache.c	/^bool f2fs_check_rb_tree_consistence(struct f2fs_sb_info *sbi,$/;"	f
f2fs_checkpoint	include/linux/f2fs_fs.h	/^struct f2fs_checkpoint {$/;"	s
f2fs_chksum	fs/f2fs/f2fs.h	/^static inline u32 f2fs_chksum(struct f2fs_sb_info *sbi, u32 crc,$/;"	f
f2fs_clear_bit	fs/f2fs/f2fs.h	/^static inline void f2fs_clear_bit(unsigned int nr, char *addr)$/;"	f
f2fs_clear_prefree_segments	fs/f2fs/segment.c	/^void f2fs_clear_prefree_segments(struct f2fs_sb_info *sbi,$/;"	f
f2fs_clear_qf_name	fs/f2fs/super.c	/^static int f2fs_clear_qf_name(struct super_block *sb, int qtype)$/;"	f	file:
f2fs_clear_radix_tree_dirty_tag	fs/f2fs/data.c	/^void f2fs_clear_radix_tree_dirty_tag(struct page *page)$/;"	f
f2fs_collapse_range	fs/f2fs/file.c	/^static int f2fs_collapse_range(struct inode *inode, loff_t offset, loff_t len)$/;"	f	file:
f2fs_commit_inmem_pages	fs/f2fs/segment.c	/^int f2fs_commit_inmem_pages(struct inode *inode)$/;"	f
f2fs_commit_super	fs/f2fs/super.c	/^int f2fs_commit_super(struct f2fs_sb_info *sbi, bool recover)$/;"	f
f2fs_compat_ioctl	fs/f2fs/file.c	/^long f2fs_compat_ioctl(struct file *file, unsigned int cmd, unsigned long arg)$/;"	f
f2fs_convert_inline_dir	fs/f2fs/inline.c	/^static int f2fs_convert_inline_dir(struct inode *dir, struct page *ipage,$/;"	f	file:
f2fs_convert_inline_inode	fs/f2fs/inline.c	/^int f2fs_convert_inline_inode(struct inode *inode)$/;"	f
f2fs_convert_inline_page	fs/f2fs/inline.c	/^int f2fs_convert_inline_page(struct dnode_of_data *dn, struct page *page)$/;"	f
f2fs_copy_page	fs/f2fs/f2fs.h	/^static inline void f2fs_copy_page(struct page *src, struct page *dst)$/;"	f
f2fs_cp_error	fs/f2fs/f2fs.h	/^static inline bool f2fs_cp_error(struct f2fs_sb_info *sbi)$/;"	f
f2fs_crc32	fs/f2fs/f2fs.h	/^static inline u32 f2fs_crc32(struct f2fs_sb_info *sbi, const void *address,$/;"	f
f2fs_crc_valid	fs/f2fs/f2fs.h	/^static inline bool f2fs_crc_valid(struct f2fs_sb_info *sbi, __u32 blk_crc,$/;"	f
f2fs_create	fs/f2fs/namei.c	/^static int f2fs_create(struct inode *dir, struct dentry *dentry, umode_t mode,$/;"	f	file:
f2fs_create_checkpoint_caches	fs/f2fs/checkpoint.c	/^int __init f2fs_create_checkpoint_caches(void)$/;"	f
f2fs_create_extent_cache	fs/f2fs/extent_cache.c	/^int __init f2fs_create_extent_cache(void)$/;"	f
f2fs_create_flush_cmd_control	fs/f2fs/segment.c	/^int f2fs_create_flush_cmd_control(struct f2fs_sb_info *sbi)$/;"	f
f2fs_create_node_manager_caches	fs/f2fs/node.c	/^int __init f2fs_create_node_manager_caches(void)$/;"	f
f2fs_create_root_stats	fs/f2fs/debug.c	/^int __init f2fs_create_root_stats(void)$/;"	f
f2fs_create_root_stats	fs/f2fs/f2fs.h	/^static inline int __init f2fs_create_root_stats(void) { return 0; }$/;"	f
f2fs_create_segment_manager_caches	fs/f2fs/segment.c	/^int __init f2fs_create_segment_manager_caches(void)$/;"	f
f2fs_create_whiteout	fs/f2fs/namei.c	/^static int f2fs_create_whiteout(struct inode *dir, struct inode **whiteout)$/;"	f	file:
f2fs_cross_rename	fs/f2fs/namei.c	/^static int f2fs_cross_rename(struct inode *old_dir, struct dentry *old_dentry,$/;"	f	file:
f2fs_cryptops	fs/f2fs/super.c	/^static const struct fscrypt_operations f2fs_cryptops = {$/;"	v	typeref:struct:fscrypt_operations	file:
f2fs_dblock_aops	fs/f2fs/data.c	/^const struct address_space_operations f2fs_dblock_aops = {$/;"	v	typeref:struct:address_space_operations
f2fs_debugfs_root	fs/f2fs/debug.c	/^static struct dentry *f2fs_debugfs_root;$/;"	v	typeref:struct:dentry	file:
f2fs_defragment	fs/f2fs/f2fs.h	/^struct f2fs_defragment {$/;"	s
f2fs_defragment_range	fs/f2fs/file.c	/^static int f2fs_defragment_range(struct f2fs_sb_info *sbi,$/;"	f	file:
f2fs_delete_entry	fs/f2fs/dir.c	/^void f2fs_delete_entry(struct f2fs_dir_entry *dentry, struct page *page,$/;"	f
f2fs_delete_inline_entry	fs/f2fs/inline.c	/^void f2fs_delete_inline_entry(struct f2fs_dir_entry *dentry, struct page *page,$/;"	f
f2fs_dentry_block	include/linux/f2fs_fs.h	/^struct f2fs_dentry_block {$/;"	s
f2fs_dentry_hash	fs/f2fs/hash.c	/^f2fs_hash_t f2fs_dentry_hash(const struct qstr *name_info,$/;"	f
f2fs_dentry_ptr	fs/f2fs/f2fs.h	/^struct f2fs_dentry_ptr {$/;"	s
f2fs_destroy_checkpoint_caches	fs/f2fs/checkpoint.c	/^void f2fs_destroy_checkpoint_caches(void)$/;"	f
f2fs_destroy_extent_cache	fs/f2fs/extent_cache.c	/^void f2fs_destroy_extent_cache(void)$/;"	f
f2fs_destroy_extent_node	fs/f2fs/extent_cache.c	/^unsigned int f2fs_destroy_extent_node(struct inode *inode)$/;"	f
f2fs_destroy_extent_tree	fs/f2fs/extent_cache.c	/^void f2fs_destroy_extent_tree(struct inode *inode)$/;"	f
f2fs_destroy_flush_cmd_control	fs/f2fs/segment.c	/^void f2fs_destroy_flush_cmd_control(struct f2fs_sb_info *sbi, bool free)$/;"	f
f2fs_destroy_inode	fs/f2fs/super.c	/^static void f2fs_destroy_inode(struct inode *inode)$/;"	f	file:
f2fs_destroy_node_manager	fs/f2fs/node.c	/^void f2fs_destroy_node_manager(struct f2fs_sb_info *sbi)$/;"	f
f2fs_destroy_node_manager_caches	fs/f2fs/node.c	/^void f2fs_destroy_node_manager_caches(void)$/;"	f
f2fs_destroy_post_read_processing	fs/f2fs/data.c	/^void __exit f2fs_destroy_post_read_processing(void)$/;"	f
f2fs_destroy_root_stats	fs/f2fs/debug.c	/^void f2fs_destroy_root_stats(void)$/;"	f
f2fs_destroy_root_stats	fs/f2fs/f2fs.h	/^static inline void f2fs_destroy_root_stats(void) { }$/;"	f
f2fs_destroy_segment_manager	fs/f2fs/segment.c	/^void f2fs_destroy_segment_manager(struct f2fs_sb_info *sbi)$/;"	f
f2fs_destroy_segment_manager_caches	fs/f2fs/segment.c	/^void f2fs_destroy_segment_manager_caches(void)$/;"	f
f2fs_destroy_stats	fs/f2fs/debug.c	/^void f2fs_destroy_stats(struct f2fs_sb_info *sbi)$/;"	f
f2fs_destroy_stats	fs/f2fs/f2fs.h	/^static inline void f2fs_destroy_stats(struct f2fs_sb_info *sbi) { }$/;"	f
f2fs_destroy_trace_ios	fs/f2fs/trace.c	/^void f2fs_destroy_trace_ios(void)$/;"	f
f2fs_destroy_trace_ios	fs/f2fs/trace.h	43;"	d
f2fs_dev_info	fs/f2fs/f2fs.h	/^struct f2fs_dev_info {$/;"	s
f2fs_device	include/linux/f2fs_fs.h	/^struct f2fs_device {$/;"	s
f2fs_dir_entry	include/linux/f2fs_fs.h	/^struct f2fs_dir_entry {$/;"	s
f2fs_dir_inode_operations	fs/f2fs/namei.c	/^const struct inode_operations f2fs_dir_inode_operations = {$/;"	v	typeref:struct:inode_operations
f2fs_dir_open	fs/f2fs/dir.c	/^static int f2fs_dir_open(struct inode *inode, struct file *filp)$/;"	f	file:
f2fs_dir_operations	fs/f2fs/dir.c	/^const struct file_operations f2fs_dir_operations = {$/;"	v	typeref:struct:file_operations
f2fs_direct_IO	fs/f2fs/data.c	/^static ssize_t f2fs_direct_IO(struct kiocb *iocb, struct iov_iter *iter)$/;"	f	file:
f2fs_dirty_inode	fs/f2fs/super.c	/^static void f2fs_dirty_inode(struct inode *inode, int flags)$/;"	f	file:
f2fs_discard_en	fs/f2fs/f2fs.h	/^static inline bool f2fs_discard_en(struct f2fs_sb_info *sbi)$/;"	f
f2fs_do_add_link	fs/f2fs/dir.c	/^int f2fs_do_add_link(struct inode *dir, const struct qstr *name,$/;"	f
f2fs_do_collapse	fs/f2fs/file.c	/^static int f2fs_do_collapse(struct inode *inode, pgoff_t start, pgoff_t end)$/;"	f	file:
f2fs_do_make_empty_dir	fs/f2fs/dir.c	/^void f2fs_do_make_empty_dir(struct inode *inode, struct inode *parent,$/;"	f
f2fs_do_read_inline_data	fs/f2fs/inline.c	/^void f2fs_do_read_inline_data(struct page *page, struct page *ipage)$/;"	f
f2fs_do_replace_block	fs/f2fs/segment.c	/^void f2fs_do_replace_block(struct f2fs_sb_info *sbi, struct f2fs_summary *sum,$/;"	f
f2fs_do_sync_file	fs/f2fs/file.c	/^static int f2fs_do_sync_file(struct file *file, loff_t start, loff_t end,$/;"	f	file:
f2fs_do_tmpfile	fs/f2fs/dir.c	/^int f2fs_do_tmpfile(struct inode *inode, struct inode *dir)$/;"	f
f2fs_do_write_data_page	fs/f2fs/data.c	/^int f2fs_do_write_data_page(struct f2fs_io_info *fio)$/;"	f
f2fs_do_write_meta_page	fs/f2fs/segment.c	/^void f2fs_do_write_meta_page(struct f2fs_sb_info *sbi, struct page *page,$/;"	f
f2fs_do_write_node_page	fs/f2fs/segment.c	/^void f2fs_do_write_node_page(unsigned int nid, struct f2fs_io_info *fio)$/;"	f
f2fs_do_zero_range	fs/f2fs/file.c	/^static int f2fs_do_zero_range(struct dnode_of_data *dn, pgoff_t start,$/;"	f	file:
f2fs_drop_discard_cmd	fs/f2fs/segment.c	/^void f2fs_drop_discard_cmd(struct f2fs_sb_info *sbi)$/;"	f
f2fs_drop_extent_tree	fs/f2fs/extent_cache.c	/^void f2fs_drop_extent_tree(struct inode *inode)$/;"	f
f2fs_drop_inmem_page	fs/f2fs/segment.c	/^void f2fs_drop_inmem_page(struct inode *inode, struct page *page)$/;"	f
f2fs_drop_inmem_pages	fs/f2fs/segment.c	/^void f2fs_drop_inmem_pages(struct inode *inode)$/;"	f
f2fs_drop_inmem_pages_all	fs/f2fs/segment.c	/^void f2fs_drop_inmem_pages_all(struct f2fs_sb_info *sbi, bool gc_failure)$/;"	f
f2fs_drop_inode	fs/f2fs/super.c	/^static int f2fs_drop_inode(struct inode *inode)$/;"	f	file:
f2fs_drop_nlink	fs/f2fs/dir.c	/^void f2fs_drop_nlink(struct inode *dir, struct inode *inode)$/;"	f
f2fs_dummy_context	fs/f2fs/super.c	/^static bool f2fs_dummy_context(struct inode *inode)$/;"	f	file:
f2fs_empty_dir	fs/f2fs/dir.c	/^bool f2fs_empty_dir(struct inode *dir)$/;"	f
f2fs_empty_inline_dir	fs/f2fs/inline.c	/^bool f2fs_empty_inline_dir(struct inode *dir)$/;"	f
f2fs_enable_inode_chksum	fs/f2fs/inode.c	/^static bool f2fs_enable_inode_chksum(struct f2fs_sb_info *sbi, struct page *page)$/;"	f	file:
f2fs_enable_quota_files	fs/f2fs/super.c	/^int f2fs_enable_quota_files(struct f2fs_sb_info *sbi, bool rdonly)$/;"	f
f2fs_enable_quotas	fs/f2fs/super.c	/^static int f2fs_enable_quotas(struct super_block *sb)$/;"	f	file:
f2fs_encrypted_file	fs/f2fs/f2fs.h	/^static inline bool f2fs_encrypted_file(struct inode *inode)$/;"	f
f2fs_encrypted_get_link	fs/f2fs/namei.c	/^static const char *f2fs_encrypted_get_link(struct dentry *dentry,$/;"	f	file:
f2fs_encrypted_inode	fs/f2fs/f2fs.h	/^static inline bool f2fs_encrypted_inode(struct inode *inode)$/;"	f
f2fs_encrypted_symlink_inode_operations	fs/f2fs/namei.c	/^const struct inode_operations f2fs_encrypted_symlink_inode_operations = {$/;"	v	typeref:struct:inode_operations
f2fs_evict_inode	fs/f2fs/inode.c	/^void f2fs_evict_inode(struct inode *inode)$/;"	f
f2fs_exist_data	fs/f2fs/f2fs.h	/^static inline int f2fs_exist_data(struct inode *inode)$/;"	f
f2fs_exist_trim_candidates	fs/f2fs/segment.c	/^bool f2fs_exist_trim_candidates(struct f2fs_sb_info *sbi,$/;"	f
f2fs_exist_written_data	fs/f2fs/checkpoint.c	/^bool f2fs_exist_written_data(struct f2fs_sb_info *sbi, nid_t ino, int mode)$/;"	f
f2fs_exit_sysfs	fs/f2fs/sysfs.c	/^void f2fs_exit_sysfs(void)$/;"	f
f2fs_export_ops	fs/f2fs/super.c	/^static const struct export_operations f2fs_export_ops = {$/;"	v	typeref:struct:export_operations	file:
f2fs_extent	include/linux/f2fs_fs.h	/^struct f2fs_extent {$/;"	s
f2fs_extra_info	include/linux/f2fs_fs.h	/^struct f2fs_extra_info {$/;"	s
f2fs_fallocate	fs/f2fs/file.c	/^static long f2fs_fallocate(struct file *file, int mode,$/;"	f	file:
f2fs_fault_info	fs/f2fs/f2fs.h	/^struct f2fs_fault_info {$/;"	s
f2fs_feat	fs/f2fs/sysfs.c	/^static struct kobject f2fs_feat = {$/;"	v	typeref:struct:kobject	file:
f2fs_feat_attrs	fs/f2fs/sysfs.c	/^static struct attribute *f2fs_feat_attrs[] = {$/;"	v	typeref:struct:attribute	file:
f2fs_feat_ktype	fs/f2fs/sysfs.c	/^static struct kobj_type f2fs_feat_ktype = {$/;"	v	typeref:struct:kobj_type	file:
f2fs_feature_show	fs/f2fs/sysfs.c	/^static ssize_t f2fs_feature_show(struct f2fs_attr *a,$/;"	f	file:
f2fs_fh_to_dentry	fs/f2fs/super.c	/^static struct dentry *f2fs_fh_to_dentry(struct super_block *sb, struct fid *fid,$/;"	f	file:
f2fs_fh_to_parent	fs/f2fs/super.c	/^static struct dentry *f2fs_fh_to_parent(struct super_block *sb, struct fid *fid,$/;"	f	file:
f2fs_fiemap	fs/f2fs/data.c	/^int f2fs_fiemap(struct inode *inode, struct fiemap_extent_info *fieinfo,$/;"	f
f2fs_file_flush	fs/f2fs/file.c	/^static int f2fs_file_flush(struct file *file, fl_owner_t id)$/;"	f	file:
f2fs_file_inode_operations	fs/f2fs/file.c	/^const struct inode_operations f2fs_file_inode_operations = {$/;"	v	typeref:struct:inode_operations
f2fs_file_mmap	fs/f2fs/file.c	/^static int f2fs_file_mmap(struct file *file, struct vm_area_struct *vma)$/;"	f	file:
f2fs_file_open	fs/f2fs/file.c	/^static int f2fs_file_open(struct inode *inode, struct file *filp)$/;"	f	file:
f2fs_file_operations	fs/f2fs/file.c	/^const struct file_operations f2fs_file_operations = {$/;"	v	typeref:struct:file_operations
f2fs_file_vm_ops	fs/f2fs/file.c	/^static const struct vm_operations_struct f2fs_file_vm_ops = {$/;"	v	typeref:struct:vm_operations_struct	file:
f2fs_file_write_iter	fs/f2fs/file.c	/^static ssize_t f2fs_file_write_iter(struct kiocb *iocb, struct iov_iter *from)$/;"	f	file:
f2fs_filemap_fault	fs/f2fs/file.c	/^static vm_fault_t f2fs_filemap_fault(struct vm_fault *vmf)$/;"	f	file:
f2fs_filetype_table	fs/f2fs/dir.c	/^static unsigned char f2fs_filetype_table[F2FS_FT_MAX] = {$/;"	v	file:
f2fs_fill_dentries	fs/f2fs/dir.c	/^int f2fs_fill_dentries(struct dir_context *ctx, struct f2fs_dentry_ptr *d,$/;"	f
f2fs_fill_super	fs/f2fs/super.c	/^static int f2fs_fill_super(struct super_block *sb, void *data, int silent)$/;"	f	file:
f2fs_find_data_page	fs/f2fs/data.c	/^struct page *f2fs_find_data_page(struct inode *inode, pgoff_t index)$/;"	f
f2fs_find_entry	fs/f2fs/dir.c	/^struct f2fs_dir_entry *f2fs_find_entry(struct inode *dir,$/;"	f
f2fs_find_in_inline_dir	fs/f2fs/inline.c	/^struct f2fs_dir_entry *f2fs_find_in_inline_dir(struct inode *dir,$/;"	f
f2fs_find_target_dentry	fs/f2fs/dir.c	/^struct f2fs_dir_entry *f2fs_find_target_dentry(struct fscrypt_name *fname,$/;"	f
f2fs_flush_device	fs/f2fs/f2fs.h	/^struct f2fs_flush_device {$/;"	s
f2fs_flush_device_cache	fs/f2fs/segment.c	/^int f2fs_flush_device_cache(struct f2fs_sb_info *sbi)$/;"	f
f2fs_flush_merged_writes	fs/f2fs/data.c	/^void f2fs_flush_merged_writes(struct f2fs_sb_info *sbi)$/;"	f
f2fs_flush_nat_entries	fs/f2fs/node.c	/^void f2fs_flush_nat_entries(struct f2fs_sb_info *sbi, struct cp_control *cpc)$/;"	f
f2fs_flush_sit_entries	fs/f2fs/segment.c	/^void f2fs_flush_sit_entries(struct f2fs_sb_info *sbi, struct cp_control *cpc)$/;"	f
f2fs_force_buffered_io	fs/f2fs/f2fs.h	/^static inline bool f2fs_force_buffered_io(struct inode *inode, int rw)$/;"	f
f2fs_freeze	fs/f2fs/super.c	/^static int f2fs_freeze(struct super_block *sb)$/;"	f	file:
f2fs_fs_type	fs/f2fs/super.c	/^static struct file_system_type f2fs_fs_type = {$/;"	v	typeref:struct:file_system_type	file:
f2fs_fsync_node_pages	fs/f2fs/node.c	/^int f2fs_fsync_node_pages(struct f2fs_sb_info *sbi, struct inode *inode,$/;"	f
f2fs_gc	fs/f2fs/gc.c	/^int f2fs_gc(struct f2fs_sb_info *sbi, bool sync,$/;"	f
f2fs_gc_kthread	fs/f2fs/gc.h	/^struct f2fs_gc_kthread {$/;"	s
f2fs_gc_range	fs/f2fs/f2fs.h	/^struct f2fs_gc_range {$/;"	s
f2fs_gc_task	fs/f2fs/gc.h	/^	struct task_struct *f2fs_gc_task;$/;"	m	struct:f2fs_gc_kthread	typeref:struct:f2fs_gc_kthread::task_struct
f2fs_get_acl	fs/f2fs/acl.c	/^struct posix_acl *f2fs_get_acl(struct inode *inode, int type)$/;"	f
f2fs_get_acl	fs/f2fs/acl.h	44;"	d
f2fs_get_block	fs/f2fs/data.c	/^int f2fs_get_block(struct dnode_of_data *dn, pgoff_t index)$/;"	f
f2fs_get_context	fs/f2fs/super.c	/^static int f2fs_get_context(struct inode *inode, void *ctx, size_t len)$/;"	f	file:
f2fs_get_de_type	fs/f2fs/dir.c	/^unsigned char f2fs_get_de_type(struct f2fs_dir_entry *de)$/;"	f
f2fs_get_dnode_of_data	fs/f2fs/node.c	/^int f2fs_get_dnode_of_data(struct dnode_of_data *dn, pgoff_t index, int mode)$/;"	f
f2fs_get_dquots	fs/f2fs/super.c	/^static struct dquot **f2fs_get_dquots(struct inode *inode)$/;"	f	file:
f2fs_get_inode_mode	fs/f2fs/f2fs.h	2666;"	d
f2fs_get_link	fs/f2fs/namei.c	/^static const char *f2fs_get_link(struct dentry *dentry,$/;"	f	file:
f2fs_get_lock_data_page	fs/f2fs/data.c	/^struct page *f2fs_get_lock_data_page(struct inode *inode, pgoff_t index,$/;"	f
f2fs_get_meta_page	fs/f2fs/checkpoint.c	/^struct page *f2fs_get_meta_page(struct f2fs_sb_info *sbi, pgoff_t index)$/;"	f
f2fs_get_new_data_page	fs/f2fs/data.c	/^struct page *f2fs_get_new_data_page(struct inode *inode,$/;"	f
f2fs_get_next_page_offset	fs/f2fs/node.c	/^pgoff_t f2fs_get_next_page_offset(struct dnode_of_data *dn, pgoff_t pgofs)$/;"	f
f2fs_get_node_info	fs/f2fs/node.c	/^void f2fs_get_node_info(struct f2fs_sb_info *sbi, nid_t nid,$/;"	f
f2fs_get_node_page	fs/f2fs/node.c	/^struct page *f2fs_get_node_page(struct f2fs_sb_info *sbi, pgoff_t nid)$/;"	f
f2fs_get_node_page_ra	fs/f2fs/node.c	/^struct page *f2fs_get_node_page_ra(struct page *parent, int start)$/;"	f
f2fs_get_parent	fs/f2fs/namei.c	/^struct dentry *f2fs_get_parent(struct dentry *child)$/;"	f
f2fs_get_projid	fs/f2fs/super.c	/^static int f2fs_get_projid(struct inode *inode, kprojid_t *projid)$/;"	f	file:
f2fs_get_read_data_page	fs/f2fs/data.c	/^struct page *f2fs_get_read_data_page(struct inode *inode, pgoff_t index,$/;"	f
f2fs_get_reserved_space	fs/f2fs/super.c	/^static qsize_t *f2fs_get_reserved_space(struct inode *inode)$/;"	f	file:
f2fs_get_sum_page	fs/f2fs/segment.c	/^struct page *f2fs_get_sum_page(struct f2fs_sb_info *sbi, unsigned int segno)$/;"	f
f2fs_get_tmp_page	fs/f2fs/checkpoint.c	/^struct page *f2fs_get_tmp_page(struct f2fs_sb_info *sbi, pgoff_t index)$/;"	f
f2fs_get_valid_checkpoint	fs/f2fs/checkpoint.c	/^int f2fs_get_valid_checkpoint(struct f2fs_sb_info *sbi)$/;"	f
f2fs_getattr	fs/f2fs/file.c	/^int f2fs_getattr(const struct path *path, struct kstat *stat,$/;"	f
f2fs_getxattr	fs/f2fs/xattr.c	/^int f2fs_getxattr(struct inode *inode, int index, const char *name,$/;"	f
f2fs_getxattr	fs/f2fs/xattr.h	/^static inline int f2fs_getxattr(struct inode *inode, int index,$/;"	f
f2fs_grab_cache_page	fs/f2fs/f2fs.h	/^static inline struct page *f2fs_grab_cache_page(struct address_space *mapping,$/;"	f
f2fs_grab_meta_page	fs/f2fs/checkpoint.c	/^struct page *f2fs_grab_meta_page(struct f2fs_sb_info *sbi, pgoff_t index)$/;"	f
f2fs_grab_read_bio	fs/f2fs/data.c	/^static struct bio *f2fs_grab_read_bio(struct inode *inode, block_t blkaddr,$/;"	f	file:
f2fs_handle_failed_inode	fs/f2fs/inode.c	/^void f2fs_handle_failed_inode(struct inode *inode)$/;"	f
f2fs_has_extra_attr	fs/f2fs/f2fs.h	/^static inline int f2fs_has_extra_attr(struct inode *inode)$/;"	f
f2fs_has_inline_data	fs/f2fs/f2fs.h	/^static inline int f2fs_has_inline_data(struct inode *inode)$/;"	f
f2fs_has_inline_dentry	fs/f2fs/f2fs.h	/^static inline int f2fs_has_inline_dentry(struct inode *inode)$/;"	f
f2fs_has_inline_dots	fs/f2fs/f2fs.h	/^static inline int f2fs_has_inline_dots(struct inode *inode)$/;"	f
f2fs_has_inline_xattr	fs/f2fs/f2fs.h	/^static inline int f2fs_has_inline_xattr(struct inode *inode)$/;"	f
f2fs_has_xattr_block	fs/f2fs/f2fs.h	/^static inline bool f2fs_has_xattr_block(unsigned int ofs)$/;"	f
f2fs_hash_t	include/linux/f2fs_fs.h	/^typedef __le32	f2fs_hash_t;$/;"	t
f2fs_i_blocks_write	fs/f2fs/f2fs.h	/^static inline void f2fs_i_blocks_write(struct inode *inode,$/;"	f
f2fs_i_callback	fs/f2fs/super.c	/^static void f2fs_i_callback(struct rcu_head *head)$/;"	f	file:
f2fs_i_depth_write	fs/f2fs/f2fs.h	/^static inline void f2fs_i_depth_write(struct inode *inode, unsigned int depth)$/;"	f
f2fs_i_gc_failures_write	fs/f2fs/f2fs.h	/^static inline void f2fs_i_gc_failures_write(struct inode *inode,$/;"	f
f2fs_i_links_write	fs/f2fs/f2fs.h	/^static inline void f2fs_i_links_write(struct inode *inode, bool inc)$/;"	f
f2fs_i_pino_write	fs/f2fs/f2fs.h	/^static inline void f2fs_i_pino_write(struct inode *inode, nid_t pino)$/;"	f
f2fs_i_size_write	fs/f2fs/f2fs.h	/^static inline void f2fs_i_size_write(struct inode *inode, loff_t i_size)$/;"	f
f2fs_i_xnid_write	fs/f2fs/f2fs.h	/^static inline void f2fs_i_xnid_write(struct inode *inode, nid_t xnid)$/;"	f
f2fs_iflags_to_xflags	fs/f2fs/file.c	/^static inline __u32 f2fs_iflags_to_xflags(unsigned long iflags)$/;"	f	file:
f2fs_iget	fs/f2fs/inode.c	/^struct inode *f2fs_iget(struct super_block *sb, unsigned long ino)$/;"	f
f2fs_iget_retry	fs/f2fs/inode.c	/^struct inode *f2fs_iget_retry(struct super_block *sb, unsigned long ino)$/;"	f
f2fs_init_acl	fs/f2fs/acl.c	/^int f2fs_init_acl(struct inode *inode, struct inode *dir, struct page *ipage,$/;"	f
f2fs_init_acl	fs/f2fs/acl.h	/^static inline int f2fs_init_acl(struct inode *inode, struct inode *dir,$/;"	f
f2fs_init_extent_cache_info	fs/f2fs/extent_cache.c	/^void f2fs_init_extent_cache_info(struct f2fs_sb_info *sbi)$/;"	f
f2fs_init_extent_tree	fs/f2fs/extent_cache.c	/^bool f2fs_init_extent_tree(struct inode *inode, struct f2fs_extent *i_ext)$/;"	f
f2fs_init_ino_entry_info	fs/f2fs/checkpoint.c	/^void f2fs_init_ino_entry_info(struct f2fs_sb_info *sbi)$/;"	f
f2fs_init_inode_metadata	fs/f2fs/dir.c	/^struct page *f2fs_init_inode_metadata(struct inode *inode, struct inode *dir,$/;"	f
f2fs_init_post_read_processing	fs/f2fs/data.c	/^int __init f2fs_init_post_read_processing(void)$/;"	f
f2fs_init_security	fs/f2fs/xattr.c	/^int f2fs_init_security(struct inode *inode, struct inode *dir,$/;"	f
f2fs_init_security	fs/f2fs/xattr.h	/^static inline int f2fs_init_security(struct inode *inode, struct inode *dir,$/;"	f
f2fs_init_sysfs	fs/f2fs/sysfs.c	/^int __init f2fs_init_sysfs(void)$/;"	f
f2fs_initxattrs	fs/f2fs/xattr.c	/^static int f2fs_initxattrs(struct inode *inode, const struct xattr *xattr_array,$/;"	f	file:
f2fs_inline_data_fiemap	fs/f2fs/inline.c	/^int f2fs_inline_data_fiemap(struct inode *inode,$/;"	f
f2fs_inode	include/linux/f2fs_fs.h	/^struct f2fs_inode {$/;"	s
f2fs_inode_by_name	fs/f2fs/dir.c	/^ino_t f2fs_inode_by_name(struct inode *dir, const struct qstr *qstr,$/;"	f
f2fs_inode_cachep	fs/f2fs/super.c	/^static struct kmem_cache *f2fs_inode_cachep;$/;"	v	typeref:struct:kmem_cache	file:
f2fs_inode_chksum	fs/f2fs/inode.c	/^static __u32 f2fs_inode_chksum(struct f2fs_sb_info *sbi, struct page *page)$/;"	f	file:
f2fs_inode_chksum_set	fs/f2fs/inode.c	/^void f2fs_inode_chksum_set(struct f2fs_sb_info *sbi, struct page *page)$/;"	f
f2fs_inode_chksum_verify	fs/f2fs/inode.c	/^bool f2fs_inode_chksum_verify(struct f2fs_sb_info *sbi, struct page *page)$/;"	f
f2fs_inode_dirtied	fs/f2fs/super.c	/^int f2fs_inode_dirtied(struct inode *inode, bool sync)$/;"	f
f2fs_inode_entry_slab	fs/f2fs/checkpoint.c	/^struct kmem_cache *f2fs_inode_entry_slab;$/;"	v	typeref:struct:kmem_cache
f2fs_inode_info	fs/f2fs/f2fs.h	/^struct f2fs_inode_info {$/;"	s
f2fs_inode_synced	fs/f2fs/super.c	/^void f2fs_inode_synced(struct inode *inode)$/;"	f
f2fs_inplace_write_data	fs/f2fs/segment.c	/^int f2fs_inplace_write_data(struct f2fs_io_info *fio)$/;"	f
f2fs_insert_range	fs/f2fs/file.c	/^static int f2fs_insert_range(struct inode *inode, loff_t offset, loff_t len)$/;"	f	file:
f2fs_invalidate_blocks	fs/f2fs/segment.c	/^void f2fs_invalidate_blocks(struct f2fs_sb_info *sbi, block_t addr)$/;"	f
f2fs_invalidate_page	fs/f2fs/data.c	/^void f2fs_invalidate_page(struct page *page, unsigned int offset,$/;"	f
f2fs_io_info	fs/f2fs/f2fs.h	/^struct f2fs_io_info {$/;"	s
f2fs_io_type_to_rw_hint	fs/f2fs/segment.c	/^enum rw_hint f2fs_io_type_to_rw_hint(struct f2fs_sb_info *sbi,$/;"	f
f2fs_ioc_abort_volatile_write	fs/f2fs/file.c	/^static int f2fs_ioc_abort_volatile_write(struct file *filp)$/;"	f	file:
f2fs_ioc_add_atomic_file	fs/f2fs/file.c	/^static int f2fs_ioc_add_atomic_file(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_commit_atomic_file_set	fs/f2fs/file.c	/^static int f2fs_ioc_commit_atomic_file_set(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_commit_atomic_write	fs/f2fs/file.c	/^static int f2fs_ioc_commit_atomic_write(struct file *filp)$/;"	f	file:
f2fs_ioc_defragment	fs/f2fs/file.c	/^static int f2fs_ioc_defragment(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_end_atomic_file_set	fs/f2fs/file.c	/^static int f2fs_ioc_end_atomic_file_set(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_f2fs_write_checkpoint	fs/f2fs/file.c	/^static int f2fs_ioc_f2fs_write_checkpoint(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_fitrim	fs/f2fs/file.c	/^static int f2fs_ioc_fitrim(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_flush_device	fs/f2fs/file.c	/^static int f2fs_ioc_flush_device(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_fsgetxattr	fs/f2fs/file.c	/^static int f2fs_ioc_fsgetxattr(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_fssetxattr	fs/f2fs/file.c	/^static int f2fs_ioc_fssetxattr(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_gc	fs/f2fs/file.c	/^static int f2fs_ioc_gc(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_gc_range	fs/f2fs/file.c	/^static int f2fs_ioc_gc_range(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_get_encryption_policy	fs/f2fs/file.c	/^static int f2fs_ioc_get_encryption_policy(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_get_encryption_pwsalt	fs/f2fs/file.c	/^static int f2fs_ioc_get_encryption_pwsalt(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_get_features	fs/f2fs/file.c	/^static int f2fs_ioc_get_features(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_get_pin_file	fs/f2fs/file.c	/^static int f2fs_ioc_get_pin_file(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_getflags	fs/f2fs/file.c	/^static int f2fs_ioc_getflags(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_getversion	fs/f2fs/file.c	/^static int f2fs_ioc_getversion(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_move_range	fs/f2fs/file.c	/^static int f2fs_ioc_move_range(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_precache_extents	fs/f2fs/file.c	/^static int f2fs_ioc_precache_extents(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_release_volatile_write	fs/f2fs/file.c	/^static int f2fs_ioc_release_volatile_write(struct file *filp)$/;"	f	file:
f2fs_ioc_set_encryption_policy	fs/f2fs/file.c	/^static int f2fs_ioc_set_encryption_policy(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_set_pin_file	fs/f2fs/file.c	/^static int f2fs_ioc_set_pin_file(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_setflags	fs/f2fs/file.c	/^static int f2fs_ioc_setflags(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_setproject	fs/f2fs/file.c	/^static int f2fs_ioc_setproject(struct file *filp, __u32 projid)$/;"	f	file:
f2fs_ioc_shutdown	fs/f2fs/file.c	/^static int f2fs_ioc_shutdown(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_start_atomic_file_set	fs/f2fs/file.c	/^static int f2fs_ioc_start_atomic_file_set(struct file *filp, unsigned long arg)$/;"	f	file:
f2fs_ioc_start_atomic_write	fs/f2fs/file.c	/^static int f2fs_ioc_start_atomic_write(struct file *filp)$/;"	f	file:
f2fs_ioc_start_volatile_write	fs/f2fs/file.c	/^static int f2fs_ioc_start_volatile_write(struct file *filp)$/;"	f	file:
f2fs_ioctl	fs/f2fs/file.c	/^long f2fs_ioctl(struct file *filp, unsigned int cmd, unsigned long arg)$/;"	f
f2fs_is_added_file	fs/f2fs/f2fs.h	/^static inline bool f2fs_is_added_file(struct inode *inode)$/;"	f
f2fs_is_atomic_file	fs/f2fs/f2fs.h	/^static inline bool f2fs_is_atomic_file(struct inode *inode)$/;"	f
f2fs_is_checkpointed_data	fs/f2fs/segment.c	/^bool f2fs_is_checkpointed_data(struct f2fs_sb_info *sbi, block_t blkaddr)$/;"	f
f2fs_is_checkpointed_node	fs/f2fs/node.c	/^bool f2fs_is_checkpointed_node(struct f2fs_sb_info *sbi, nid_t nid)$/;"	f
f2fs_is_commit_atomic_write	fs/f2fs/f2fs.h	/^static inline bool f2fs_is_commit_atomic_write(struct inode *inode)$/;"	f
f2fs_is_dirty_device	fs/f2fs/checkpoint.c	/^bool f2fs_is_dirty_device(struct f2fs_sb_info *sbi, nid_t ino,$/;"	f
f2fs_is_drop_cache	fs/f2fs/f2fs.h	/^static inline bool f2fs_is_drop_cache(struct inode *inode)$/;"	f
f2fs_is_first_block_written	fs/f2fs/f2fs.h	/^static inline bool f2fs_is_first_block_written(struct inode *inode)$/;"	f
f2fs_is_pinned_file	fs/f2fs/f2fs.h	/^static inline bool f2fs_is_pinned_file(struct inode *inode)$/;"	f
f2fs_is_valid_meta_blkaddr	fs/f2fs/checkpoint.c	/^bool f2fs_is_valid_meta_blkaddr(struct f2fs_sb_info *sbi,$/;"	f
f2fs_is_volatile_file	fs/f2fs/f2fs.h	/^static inline bool f2fs_is_volatile_file(struct inode *inode)$/;"	f
f2fs_issue_discard	fs/f2fs/f2fs.h	/^	struct task_struct *f2fs_issue_discard;	\/* discard thread *\/$/;"	m	struct:discard_cmd_control	typeref:struct:discard_cmd_control::task_struct
f2fs_issue_discard	fs/f2fs/segment.c	/^static int f2fs_issue_discard(struct f2fs_sb_info *sbi,$/;"	f	file:
f2fs_issue_flush	fs/f2fs/f2fs.h	/^	struct task_struct *f2fs_issue_flush;	\/* flush thread *\/$/;"	m	struct:flush_cmd_control	typeref:struct:flush_cmd_control::task_struct
f2fs_issue_flush	fs/f2fs/segment.c	/^int f2fs_issue_flush(struct f2fs_sb_info *sbi, nid_t ino)$/;"	f
f2fs_join_shrinker	fs/f2fs/shrinker.c	/^void f2fs_join_shrinker(struct f2fs_sb_info *sbi)$/;"	f
f2fs_journal	include/linux/f2fs_fs.h	/^struct f2fs_journal {$/;"	s
f2fs_kmalloc	fs/f2fs/f2fs.h	/^static inline void *f2fs_kmalloc(struct f2fs_sb_info *sbi,$/;"	f
f2fs_kmem_cache_alloc	fs/f2fs/f2fs.h	/^static inline void *f2fs_kmem_cache_alloc(struct kmem_cache *cachep,$/;"	f
f2fs_kmem_cache_create	fs/f2fs/f2fs.h	/^static inline struct kmem_cache *f2fs_kmem_cache_create(const char *name,$/;"	f
f2fs_kset	fs/f2fs/sysfs.c	/^static struct kset f2fs_kset = {$/;"	v	typeref:struct:kset	file:
f2fs_ktype	fs/f2fs/sysfs.c	/^static struct kobj_type f2fs_ktype = {$/;"	v	typeref:struct:kobj_type	file:
f2fs_kvmalloc	fs/f2fs/f2fs.h	/^static inline void *f2fs_kvmalloc(struct f2fs_sb_info *sbi,$/;"	f
f2fs_kvzalloc	fs/f2fs/f2fs.h	/^static inline void *f2fs_kvzalloc(struct f2fs_sb_info *sbi,$/;"	f
f2fs_kzalloc	fs/f2fs/f2fs.h	/^static inline void *f2fs_kzalloc(struct f2fs_sb_info *sbi,$/;"	f
f2fs_leave_shrinker	fs/f2fs/shrinker.c	/^void f2fs_leave_shrinker(struct f2fs_sb_info *sbi)$/;"	f
f2fs_link	fs/f2fs/namei.c	/^static int f2fs_link(struct dentry *old_dentry, struct inode *dir,$/;"	f	file:
f2fs_listxattr	fs/f2fs/xattr.c	/^ssize_t f2fs_listxattr(struct dentry *dentry, char *buffer, size_t buffer_size)$/;"	f
f2fs_listxattr	fs/f2fs/xattr.h	/^static inline ssize_t f2fs_listxattr(struct dentry *dentry, char *buffer,$/;"	f
f2fs_llseek	fs/f2fs/file.c	/^static loff_t f2fs_llseek(struct file *file, loff_t offset, int whence)$/;"	f	file:
f2fs_lock_all	fs/f2fs/f2fs.h	/^static inline void f2fs_lock_all(struct f2fs_sb_info *sbi)$/;"	f
f2fs_lock_op	fs/f2fs/f2fs.h	/^static inline void f2fs_lock_op(struct f2fs_sb_info *sbi)$/;"	f
f2fs_lookup	fs/f2fs/namei.c	/^static struct dentry *f2fs_lookup(struct inode *dir, struct dentry *dentry,$/;"	f	file:
f2fs_lookup_extent_cache	fs/f2fs/extent_cache.c	/^bool f2fs_lookup_extent_cache(struct inode *inode, pgoff_t pgofs,$/;"	f
f2fs_lookup_extent_tree	fs/f2fs/extent_cache.c	/^static bool f2fs_lookup_extent_tree(struct inode *inode, pgoff_t pgofs,$/;"	f	file:
f2fs_lookup_journal_in_cursum	fs/f2fs/segment.c	/^int f2fs_lookup_journal_in_cursum(struct f2fs_journal *journal, int type,$/;"	f
f2fs_lookup_rb_tree	fs/f2fs/extent_cache.c	/^struct rb_entry *f2fs_lookup_rb_tree(struct rb_root *root,$/;"	f
f2fs_lookup_rb_tree_for_insert	fs/f2fs/extent_cache.c	/^struct rb_node **f2fs_lookup_rb_tree_for_insert(struct f2fs_sb_info *sbi,$/;"	f
f2fs_lookup_rb_tree_ret	fs/f2fs/extent_cache.c	/^struct rb_entry *f2fs_lookup_rb_tree_ret(struct rb_root *root,$/;"	f
f2fs_make_empty_inline_dir	fs/f2fs/inline.c	/^int f2fs_make_empty_inline_dir(struct inode *inode, struct inode *parent,$/;"	f
f2fs_map_blocks	fs/f2fs/data.c	/^int f2fs_map_blocks(struct inode *inode, struct f2fs_map_blocks *map,$/;"	f
f2fs_map_blocks	fs/f2fs/f2fs.h	/^struct f2fs_map_blocks {$/;"	s
f2fs_mark_inode_dirty_sync	fs/f2fs/inode.c	/^void f2fs_mark_inode_dirty_sync(struct inode *inode, bool sync)$/;"	f
f2fs_mask_flags	fs/f2fs/f2fs.h	/^static inline __u32 f2fs_mask_flags(umode_t mode, __u32 flags)$/;"	f
f2fs_may_encrypt	fs/f2fs/f2fs.h	/^static inline bool f2fs_may_encrypt(struct inode *inode)$/;"	f
f2fs_may_extent_tree	fs/f2fs/f2fs.h	/^static inline bool f2fs_may_extent_tree(struct inode *inode)$/;"	f
f2fs_may_inline_data	fs/f2fs/inline.c	/^bool f2fs_may_inline_data(struct inode *inode)$/;"	f
f2fs_may_inline_dentry	fs/f2fs/inline.c	/^bool f2fs_may_inline_dentry(struct inode *inode)$/;"	f
f2fs_meta_aops	fs/f2fs/checkpoint.c	/^const struct address_space_operations f2fs_meta_aops = {$/;"	v	typeref:struct:address_space_operations
f2fs_migrate_page	fs/f2fs/data.c	/^int f2fs_migrate_page(struct address_space *mapping,$/;"	f
f2fs_mkdir	fs/f2fs/namei.c	/^static int f2fs_mkdir(struct inode *dir, struct dentry *dentry, umode_t mode)$/;"	f	file:
f2fs_mknod	fs/f2fs/namei.c	/^static int f2fs_mknod(struct inode *dir, struct dentry *dentry,$/;"	f	file:
f2fs_mount	fs/f2fs/super.c	/^static struct dentry *f2fs_mount(struct file_system_type *fs_type, int flags,$/;"	f	file:
f2fs_mount_info	fs/f2fs/f2fs.h	/^struct f2fs_mount_info {$/;"	s
f2fs_move_file_range	fs/f2fs/file.c	/^static int f2fs_move_file_range(struct file *file_in, loff_t pos_in,$/;"	f	file:
f2fs_move_inline_dirents	fs/f2fs/inline.c	/^static int f2fs_move_inline_dirents(struct inode *dir, struct page *ipage,$/;"	f	file:
f2fs_move_node_page	fs/f2fs/node.c	/^void f2fs_move_node_page(struct page *node_page, int gc_type)$/;"	f
f2fs_move_range	fs/f2fs/f2fs.h	/^struct f2fs_move_range {$/;"	s
f2fs_move_rehashed_dirents	fs/f2fs/inline.c	/^static int f2fs_move_rehashed_dirents(struct inode *dir, struct page *ipage,$/;"	f	file:
f2fs_mpage_readpages	fs/f2fs/data.c	/^static int f2fs_mpage_readpages(struct address_space *mapping,$/;"	f	file:
f2fs_msg	fs/f2fs/super.c	/^void f2fs_msg(struct super_block *sb, const char *level, const char *fmt, ...)$/;"	f
f2fs_nat_block	include/linux/f2fs_fs.h	/^struct f2fs_nat_block {$/;"	s
f2fs_nat_entry	include/linux/f2fs_fs.h	/^struct f2fs_nat_entry {$/;"	s
f2fs_need_SSR	fs/f2fs/segment.c	/^bool f2fs_need_SSR(struct f2fs_sb_info *sbi)$/;"	f
f2fs_need_dentry_mark	fs/f2fs/node.c	/^int f2fs_need_dentry_mark(struct f2fs_sb_info *sbi, nid_t nid)$/;"	f
f2fs_need_inode_block_update	fs/f2fs/node.c	/^bool f2fs_need_inode_block_update(struct f2fs_sb_info *sbi, nid_t ino)$/;"	f
f2fs_new_inode	fs/f2fs/namei.c	/^static struct inode *f2fs_new_inode(struct inode *dir, umode_t mode)$/;"	f	file:
f2fs_new_inode_page	fs/f2fs/node.c	/^struct page *f2fs_new_inode_page(struct inode *inode)$/;"	f
f2fs_new_node_page	fs/f2fs/node.c	/^struct page *f2fs_new_node_page(struct dnode_of_data *dn, unsigned int ofs)$/;"	f
f2fs_nfs_get_inode	fs/f2fs/super.c	/^static struct inode *f2fs_nfs_get_inode(struct super_block *sb,$/;"	f	file:
f2fs_nm_info	fs/f2fs/f2fs.h	/^struct f2fs_nm_info {$/;"	s
f2fs_node	include/linux/f2fs_fs.h	/^struct f2fs_node {$/;"	s
f2fs_node_aops	fs/f2fs/node.c	/^const struct address_space_operations f2fs_node_aops = {$/;"	v	typeref:struct:address_space_operations
f2fs_npages_for_summary_flush	fs/f2fs/segment.c	/^int f2fs_npages_for_summary_flush(struct f2fs_sb_info *sbi, bool for_ra)$/;"	f
f2fs_orphan_block	include/linux/f2fs_fs.h	/^struct f2fs_orphan_block {$/;"	s
f2fs_outplace_write_data	fs/f2fs/segment.c	/^void f2fs_outplace_write_data(struct dnode_of_data *dn,$/;"	f
f2fs_overwrite_io	fs/f2fs/data.c	/^bool f2fs_overwrite_io(struct inode *inode, loff_t pos, size_t len)$/;"	f
f2fs_pagecache_get_page	fs/f2fs/f2fs.h	/^static inline struct page *f2fs_pagecache_get_page($/;"	f
f2fs_parent_dir	fs/f2fs/dir.c	/^struct f2fs_dir_entry *f2fs_parent_dir(struct inode *dir, struct page **p)$/;"	f
f2fs_pin_file_control	fs/f2fs/file.c	/^int f2fs_pin_file_control(struct inode *inode, bool inc)$/;"	f
f2fs_post_read_required	fs/f2fs/f2fs.h	/^static inline bool f2fs_post_read_required(struct inode *inode)$/;"	f
f2fs_preallocate_blocks	fs/f2fs/data.c	/^int f2fs_preallocate_blocks(struct kiocb *iocb, struct iov_iter *from)$/;"	f
f2fs_precache_extents	fs/f2fs/file.c	/^int f2fs_precache_extents(struct inode *inode)$/;"	f
f2fs_proc_root	fs/f2fs/sysfs.c	/^static struct proc_dir_entry *f2fs_proc_root;$/;"	v	typeref:struct:proc_dir_entry	file:
f2fs_put_dnode	fs/f2fs/f2fs.h	/^static inline void f2fs_put_dnode(struct dnode_of_data *dn)$/;"	f
f2fs_put_page	fs/f2fs/f2fs.h	/^static inline void f2fs_put_page(struct page *page, int unlock)$/;"	f
f2fs_put_super	fs/f2fs/super.c	/^static void f2fs_put_super(struct super_block *sb)$/;"	f	file:
f2fs_qf_ino	fs/f2fs/f2fs.h	/^static inline unsigned long f2fs_qf_ino(struct super_block *sb, int type)$/;"	f
f2fs_quota_enable	fs/f2fs/super.c	/^static int f2fs_quota_enable(struct super_block *sb, int type, int format_id,$/;"	f	file:
f2fs_quota_off	fs/f2fs/super.c	/^static int f2fs_quota_off(struct super_block *sb, int type)$/;"	f	file:
f2fs_quota_off_umount	fs/f2fs/super.c	/^void f2fs_quota_off_umount(struct super_block *sb)$/;"	f
f2fs_quota_on	fs/f2fs/super.c	/^static int f2fs_quota_on(struct super_block *sb, int type, int format_id,$/;"	f	file:
f2fs_quota_on_mount	fs/f2fs/super.c	/^static int f2fs_quota_on_mount(struct f2fs_sb_info *sbi, int type)$/;"	f	file:
f2fs_quota_operations	fs/f2fs/super.c	/^static const struct dquot_operations f2fs_quota_operations = {$/;"	v	typeref:struct:dquot_operations	file:
f2fs_quota_read	fs/f2fs/super.c	/^static ssize_t f2fs_quota_read(struct super_block *sb, int type, char *data,$/;"	f	file:
f2fs_quota_sync	fs/f2fs/super.c	/^static int f2fs_quota_sync(struct super_block *sb, int type)$/;"	f	file:
f2fs_quota_write	fs/f2fs/super.c	/^static ssize_t f2fs_quota_write(struct super_block *sb, int type,$/;"	f	file:
f2fs_quotactl_ops	fs/f2fs/super.c	/^static const struct quotactl_ops f2fs_quotactl_ops = {$/;"	v	typeref:struct:quotactl_ops	file:
f2fs_ra_meta_pages	fs/f2fs/checkpoint.c	/^int f2fs_ra_meta_pages(struct f2fs_sb_info *sbi, block_t start, int nrpages,$/;"	f
f2fs_ra_meta_pages_cond	fs/f2fs/checkpoint.c	/^void f2fs_ra_meta_pages_cond(struct f2fs_sb_info *sbi, pgoff_t index)$/;"	f
f2fs_ra_node_page	fs/f2fs/node.c	/^void f2fs_ra_node_page(struct f2fs_sb_info *sbi, nid_t nid)$/;"	f
f2fs_ra_node_pages	fs/f2fs/node.c	/^static void f2fs_ra_node_pages(struct page *parent, int start, int n)$/;"	f	file:
f2fs_radix_tree_insert	fs/f2fs/f2fs.h	/^static inline void f2fs_radix_tree_insert(struct radix_tree_root *root,$/;"	f
f2fs_read_data_page	fs/f2fs/data.c	/^static int f2fs_read_data_page(struct file *file, struct page *page)$/;"	f	file:
f2fs_read_data_pages	fs/f2fs/data.c	/^static int f2fs_read_data_pages(struct file *file,$/;"	f	file:
f2fs_read_end_io	fs/f2fs/data.c	/^static void f2fs_read_end_io(struct bio *bio)$/;"	f	file:
f2fs_read_inline_data	fs/f2fs/inline.c	/^int f2fs_read_inline_data(struct inode *inode, struct page *page)$/;"	f
f2fs_read_inline_dir	fs/f2fs/inline.c	/^int f2fs_read_inline_dir(struct file *file, struct dir_context *ctx,$/;"	f
f2fs_readdir	fs/f2fs/dir.c	/^static int f2fs_readdir(struct file *file, struct dir_context *ctx)$/;"	f	file:
f2fs_readonly	fs/f2fs/f2fs.h	/^static inline bool f2fs_readonly(struct super_block *sb)$/;"	f
f2fs_recover_fsync_data	fs/f2fs/recovery.c	/^int f2fs_recover_fsync_data(struct f2fs_sb_info *sbi, bool check_only)$/;"	f
f2fs_recover_inline_data	fs/f2fs/inline.c	/^bool f2fs_recover_inline_data(struct inode *inode, struct page *npage)$/;"	f
f2fs_recover_inline_xattr	fs/f2fs/node.c	/^void f2fs_recover_inline_xattr(struct inode *inode, struct page *page)$/;"	f
f2fs_recover_inode_page	fs/f2fs/node.c	/^int f2fs_recover_inode_page(struct f2fs_sb_info *sbi, struct page *page)$/;"	f
f2fs_recover_orphan_inodes	fs/f2fs/checkpoint.c	/^int f2fs_recover_orphan_inodes(struct f2fs_sb_info *sbi)$/;"	f
f2fs_recover_xattr_data	fs/f2fs/node.c	/^int f2fs_recover_xattr_data(struct inode *inode, struct page *page)$/;"	f
f2fs_register_inmem_page	fs/f2fs/segment.c	/^void f2fs_register_inmem_page(struct inode *inode, struct page *page)$/;"	f
f2fs_register_sysfs	fs/f2fs/sysfs.c	/^int f2fs_register_sysfs(struct f2fs_sb_info *sbi)$/;"	f
f2fs_release_discard_addrs	fs/f2fs/segment.c	/^void f2fs_release_discard_addrs(struct f2fs_sb_info *sbi)$/;"	f
f2fs_release_file	fs/f2fs/file.c	/^static int f2fs_release_file(struct inode *inode, struct file *filp)$/;"	f	file:
f2fs_release_ino_entry	fs/f2fs/checkpoint.c	/^void f2fs_release_ino_entry(struct f2fs_sb_info *sbi, bool all)$/;"	f
f2fs_release_orphan_inode	fs/f2fs/checkpoint.c	/^void f2fs_release_orphan_inode(struct f2fs_sb_info *sbi)$/;"	f
f2fs_release_page	fs/f2fs/data.c	/^int f2fs_release_page(struct page *page, gfp_t wait)$/;"	f
f2fs_remount	fs/f2fs/super.c	/^static int f2fs_remount(struct super_block *sb, int *flags, char *data)$/;"	f	file:
f2fs_remove_dirty_inode	fs/f2fs/checkpoint.c	/^void f2fs_remove_dirty_inode(struct inode *inode)$/;"	f
f2fs_remove_ino_entry	fs/f2fs/checkpoint.c	/^void f2fs_remove_ino_entry(struct f2fs_sb_info *sbi, nid_t ino, int type)$/;"	f
f2fs_remove_inode_page	fs/f2fs/node.c	/^int f2fs_remove_inode_page(struct inode *inode)$/;"	f
f2fs_remove_orphan_inode	fs/f2fs/checkpoint.c	/^void f2fs_remove_orphan_inode(struct f2fs_sb_info *sbi, nid_t ino)$/;"	f
f2fs_rename	fs/f2fs/namei.c	/^static int f2fs_rename(struct inode *old_dir, struct dentry *old_dentry,$/;"	f	file:
f2fs_rename2	fs/f2fs/namei.c	/^static int f2fs_rename2(struct inode *old_dir, struct dentry *old_dentry,$/;"	f	file:
f2fs_replace_block	fs/f2fs/segment.c	/^void f2fs_replace_block(struct f2fs_sb_info *sbi, struct dnode_of_data *dn,$/;"	f
f2fs_reserve_block	fs/f2fs/data.c	/^int f2fs_reserve_block(struct dnode_of_data *dn, pgoff_t index)$/;"	f
f2fs_reserve_new_block	fs/f2fs/data.c	/^int f2fs_reserve_new_block(struct dnode_of_data *dn)$/;"	f
f2fs_reserve_new_blocks	fs/f2fs/data.c	/^int f2fs_reserve_new_blocks(struct dnode_of_data *dn, blkcnt_t count)$/;"	f
f2fs_reset_iostat	fs/f2fs/f2fs.h	/^static inline void f2fs_reset_iostat(struct f2fs_sb_info *sbi)$/;"	f
f2fs_restore_node_summary	fs/f2fs/node.c	/^void f2fs_restore_node_summary(struct f2fs_sb_info *sbi,$/;"	f
f2fs_rmdir	fs/f2fs/namei.c	/^static int f2fs_rmdir(struct inode *dir, struct dentry *dentry)$/;"	f	file:
f2fs_room_for_filename	fs/f2fs/dir.c	/^int f2fs_room_for_filename(const void *bitmap, int slots, int max_slots)$/;"	f
f2fs_rw_hint_to_seg_type	fs/f2fs/segment.c	/^int f2fs_rw_hint_to_seg_type(enum rw_hint hint)$/;"	f
f2fs_sanity_check_ckpt	fs/f2fs/super.c	/^int f2fs_sanity_check_ckpt(struct f2fs_sb_info *sbi)$/;"	f
f2fs_sb_info	fs/f2fs/f2fs.h	/^struct f2fs_sb_info {$/;"	s
f2fs_sb_ktype	fs/f2fs/sysfs.c	/^static struct kobj_type f2fs_sb_ktype = {$/;"	v	typeref:struct:kobj_type	file:
f2fs_sb_release	fs/f2fs/sysfs.c	/^static void f2fs_sb_release(struct kobject *kobj)$/;"	f	file:
f2fs_sbi_show	fs/f2fs/sysfs.c	/^static ssize_t f2fs_sbi_show(struct f2fs_attr *a,$/;"	f	file:
f2fs_sbi_store	fs/f2fs/sysfs.c	/^static ssize_t f2fs_sbi_store(struct f2fs_attr *a,$/;"	f	file:
f2fs_scan_devices	fs/f2fs/super.c	/^static int f2fs_scan_devices(struct f2fs_sb_info *sbi)$/;"	f	file:
f2fs_seek_block	fs/f2fs/file.c	/^static loff_t f2fs_seek_block(struct file *file, loff_t offset, int whence)$/;"	f	file:
f2fs_set_acl	fs/f2fs/acl.c	/^int f2fs_set_acl(struct inode *inode, struct posix_acl *acl, int type)$/;"	f
f2fs_set_acl	fs/f2fs/acl.h	45;"	d
f2fs_set_bit	fs/f2fs/f2fs.h	/^static inline void f2fs_set_bit(unsigned int nr, char *addr)$/;"	f
f2fs_set_context	fs/f2fs/super.c	/^static int f2fs_set_context(struct inode *inode, const void *ctx, size_t len,$/;"	f	file:
f2fs_set_data_blkaddr	fs/f2fs/data.c	/^void f2fs_set_data_blkaddr(struct dnode_of_data *dn)$/;"	f
f2fs_set_data_page_dirty	fs/f2fs/data.c	/^static int f2fs_set_data_page_dirty(struct page *page)$/;"	f	file:
f2fs_set_dirty_device	fs/f2fs/checkpoint.c	/^void f2fs_set_dirty_device(struct f2fs_sb_info *sbi, nid_t ino,$/;"	f
f2fs_set_encrypted_inode	fs/f2fs/f2fs.h	/^static inline void f2fs_set_encrypted_inode(struct inode *inode)$/;"	f
f2fs_set_inode_flags	fs/f2fs/inode.c	/^void f2fs_set_inode_flags(struct inode *inode)$/;"	f
f2fs_set_link	fs/f2fs/dir.c	/^void f2fs_set_link(struct inode *dir, struct f2fs_dir_entry *de,$/;"	f
f2fs_set_meta_page_dirty	fs/f2fs/checkpoint.c	/^static int f2fs_set_meta_page_dirty(struct page *page)$/;"	f	file:
f2fs_set_node_page_dirty	fs/f2fs/node.c	/^static int f2fs_set_node_page_dirty(struct page *page)$/;"	f	file:
f2fs_set_qf_name	fs/f2fs/super.c	/^static int f2fs_set_qf_name(struct super_block *sb, int qtype,$/;"	f	file:
f2fs_setattr	fs/f2fs/file.c	/^int f2fs_setattr(struct dentry *dentry, struct iattr *attr)$/;"	f
f2fs_setxattr	fs/f2fs/xattr.c	/^int f2fs_setxattr(struct inode *inode, int index, const char *name,$/;"	f
f2fs_setxattr	fs/f2fs/xattr.h	/^static inline int f2fs_setxattr(struct inode *inode, int index,$/;"	f
f2fs_should_update_inplace	fs/f2fs/data.c	/^bool f2fs_should_update_inplace(struct inode *inode, struct f2fs_io_info *fio)$/;"	f
f2fs_should_update_outplace	fs/f2fs/data.c	/^bool f2fs_should_update_outplace(struct inode *inode, struct f2fs_io_info *fio)$/;"	f
f2fs_show_injection_info	fs/f2fs/f2fs.h	1307;"	d
f2fs_show_options	fs/f2fs/super.c	/^static int f2fs_show_options(struct seq_file *seq, struct dentry *root)$/;"	f	file:
f2fs_show_quota_options	fs/f2fs/super.c	/^static inline void f2fs_show_quota_options(struct seq_file *seq,$/;"	f	file:
f2fs_shrink_count	fs/f2fs/shrinker.c	/^unsigned long f2fs_shrink_count(struct shrinker *shrink,$/;"	f
f2fs_shrink_extent_tree	fs/f2fs/extent_cache.c	/^unsigned int f2fs_shrink_extent_tree(struct f2fs_sb_info *sbi, int nr_shrink)$/;"	f
f2fs_shrink_scan	fs/f2fs/shrinker.c	/^unsigned long f2fs_shrink_scan(struct shrinker *shrink,$/;"	f
f2fs_shrinker_info	fs/f2fs/super.c	/^static struct shrinker f2fs_shrinker_info = {$/;"	v	typeref:struct:shrinker	file:
f2fs_sit_block	include/linux/f2fs_fs.h	/^struct f2fs_sit_block {$/;"	s
f2fs_sit_entry	include/linux/f2fs_fs.h	/^struct f2fs_sit_entry {$/;"	s
f2fs_skip_inode_update	fs/f2fs/f2fs.h	/^static inline bool f2fs_skip_inode_update(struct inode *inode, int dsync)$/;"	f
f2fs_sm_info	fs/f2fs/f2fs.h	/^struct f2fs_sm_info {$/;"	s
f2fs_sops	fs/f2fs/super.c	/^static const struct super_operations f2fs_sops = {$/;"	v	typeref:struct:super_operations	file:
f2fs_space_for_roll_forward	fs/f2fs/recovery.c	/^bool f2fs_space_for_roll_forward(struct f2fs_sb_info *sbi)$/;"	f
f2fs_special_inode_operations	fs/f2fs/namei.c	/^const struct inode_operations f2fs_special_inode_operations = {$/;"	v	typeref:struct:inode_operations
f2fs_start_bidx_of_node	fs/f2fs/gc.c	/^block_t f2fs_start_bidx_of_node(unsigned int node_ofs, struct inode *inode)$/;"	f
f2fs_start_gc_thread	fs/f2fs/gc.c	/^int f2fs_start_gc_thread(struct f2fs_sb_info *sbi)$/;"	f
f2fs_stat_info	fs/f2fs/f2fs.h	/^struct f2fs_stat_info {$/;"	s
f2fs_statfs	fs/f2fs/super.c	/^static int f2fs_statfs(struct dentry *dentry, struct kstatfs *buf)$/;"	f	file:
f2fs_statfs_project	fs/f2fs/super.c	/^static int f2fs_statfs_project(struct super_block *sb,$/;"	f	file:
f2fs_stop_checkpoint	fs/f2fs/checkpoint.c	/^void f2fs_stop_checkpoint(struct f2fs_sb_info *sbi, bool end_io)$/;"	f
f2fs_stop_discard_thread	fs/f2fs/segment.c	/^void f2fs_stop_discard_thread(struct f2fs_sb_info *sbi)$/;"	f
f2fs_stop_gc_thread	fs/f2fs/gc.c	/^void f2fs_stop_gc_thread(struct f2fs_sb_info *sbi)$/;"	f
f2fs_submit_discard_endio	fs/f2fs/segment.c	/^static void f2fs_submit_discard_endio(struct bio *bio)$/;"	f	file:
f2fs_submit_merged_write	fs/f2fs/data.c	/^void f2fs_submit_merged_write(struct f2fs_sb_info *sbi, enum page_type type)$/;"	f
f2fs_submit_merged_write_cond	fs/f2fs/data.c	/^void f2fs_submit_merged_write_cond(struct f2fs_sb_info *sbi,$/;"	f
f2fs_submit_page_bio	fs/f2fs/data.c	/^int f2fs_submit_page_bio(struct f2fs_io_info *fio)$/;"	f
f2fs_submit_page_read	fs/f2fs/data.c	/^static int f2fs_submit_page_read(struct inode *inode, struct page *page,$/;"	f	file:
f2fs_submit_page_write	fs/f2fs/data.c	/^void f2fs_submit_page_write(struct f2fs_io_info *fio)$/;"	f
f2fs_summary	include/linux/f2fs_fs.h	/^struct f2fs_summary {$/;"	s
f2fs_summary_block	include/linux/f2fs_fs.h	/^struct f2fs_summary_block {$/;"	s
f2fs_super_block	include/linux/f2fs_fs.h	/^struct f2fs_super_block {$/;"	s
f2fs_symlink	fs/f2fs/namei.c	/^static int f2fs_symlink(struct inode *dir, struct dentry *dentry,$/;"	f	file:
f2fs_symlink_inode_operations	fs/f2fs/namei.c	/^const struct inode_operations f2fs_symlink_inode_operations = {$/;"	v	typeref:struct:inode_operations
f2fs_sync_dirty_inodes	fs/f2fs/checkpoint.c	/^int f2fs_sync_dirty_inodes(struct f2fs_sb_info *sbi, enum inode_type type)$/;"	f
f2fs_sync_file	fs/f2fs/file.c	/^int f2fs_sync_file(struct file *file, loff_t start, loff_t end, int datasync)$/;"	f
f2fs_sync_fs	fs/f2fs/super.c	/^int f2fs_sync_fs(struct super_block *sb, int sync)$/;"	f
f2fs_sync_inode_meta	fs/f2fs/checkpoint.c	/^int f2fs_sync_inode_meta(struct f2fs_sb_info *sbi)$/;"	f
f2fs_sync_meta_pages	fs/f2fs/checkpoint.c	/^long f2fs_sync_meta_pages(struct f2fs_sb_info *sbi, enum page_type type,$/;"	f
f2fs_sync_node_pages	fs/f2fs/node.c	/^int f2fs_sync_node_pages(struct f2fs_sb_info *sbi,$/;"	f
f2fs_target_device	fs/f2fs/data.c	/^struct block_device *f2fs_target_device(struct f2fs_sb_info *sbi,$/;"	f
f2fs_target_device_index	fs/f2fs/data.c	/^int f2fs_target_device_index(struct f2fs_sb_info *sbi, block_t blkaddr)$/;"	f
f2fs_test_and_clear_bit	fs/f2fs/f2fs.h	/^static inline int f2fs_test_and_clear_bit(unsigned int nr, char *addr)$/;"	f
f2fs_test_and_set_bit	fs/f2fs/f2fs.h	/^static inline int f2fs_test_and_set_bit(unsigned int nr, char *addr)$/;"	f
f2fs_test_bit	fs/f2fs/f2fs.h	/^static inline int f2fs_test_bit(unsigned int nr, char *addr)$/;"	f
f2fs_time_over	fs/f2fs/f2fs.h	/^static inline bool f2fs_time_over(struct f2fs_sb_info *sbi, int type)$/;"	f
f2fs_tmpfile	fs/f2fs/namei.c	/^static int f2fs_tmpfile(struct inode *dir, struct dentry *dentry, umode_t mode)$/;"	f	file:
f2fs_tokens	fs/f2fs/super.c	/^static match_table_t f2fs_tokens = {$/;"	v	file:
f2fs_trace_ios	fs/f2fs/trace.c	/^void f2fs_trace_ios(struct f2fs_io_info *fio, int flush)$/;"	f
f2fs_trace_ios	fs/f2fs/trace.h	41;"	d
f2fs_trace_pid	fs/f2fs/trace.c	/^void f2fs_trace_pid(struct page *page)$/;"	f
f2fs_trace_pid	fs/f2fs/trace.h	40;"	d
f2fs_trim_fs	fs/f2fs/segment.c	/^int f2fs_trim_fs(struct f2fs_sb_info *sbi, struct fstrim_range *range)$/;"	f
f2fs_truncate	fs/f2fs/file.c	/^int f2fs_truncate(struct inode *inode)$/;"	f
f2fs_truncate_blocks	fs/f2fs/file.c	/^int f2fs_truncate_blocks(struct inode *inode, u64 from, bool lock)$/;"	f
f2fs_truncate_data_blocks	fs/f2fs/file.c	/^void f2fs_truncate_data_blocks(struct dnode_of_data *dn)$/;"	f
f2fs_truncate_data_blocks_range	fs/f2fs/file.c	/^void f2fs_truncate_data_blocks_range(struct dnode_of_data *dn, int count)$/;"	f
f2fs_truncate_hole	fs/f2fs/file.c	/^int f2fs_truncate_hole(struct inode *inode, pgoff_t pg_start, pgoff_t pg_end)$/;"	f
f2fs_truncate_inline_inode	fs/f2fs/inline.c	/^void f2fs_truncate_inline_inode(struct inode *inode,$/;"	f
f2fs_truncate_inode_blocks	fs/f2fs/node.c	/^int f2fs_truncate_inode_blocks(struct inode *inode, pgoff_t from)$/;"	f
f2fs_truncate_xattr_node	fs/f2fs/node.c	/^int f2fs_truncate_xattr_node(struct inode *inode)$/;"	f
f2fs_try_to_free_nats	fs/f2fs/node.c	/^int f2fs_try_to_free_nats(struct f2fs_sb_info *sbi, int nr_shrink)$/;"	f
f2fs_try_to_free_nids	fs/f2fs/node.c	/^int f2fs_try_to_free_nids(struct f2fs_sb_info *sbi, int nr_shrink)$/;"	f
f2fs_trylock_op	fs/f2fs/f2fs.h	/^static inline int f2fs_trylock_op(struct f2fs_sb_info *sbi)$/;"	f
f2fs_tuning_parameters	fs/f2fs/super.c	/^static void f2fs_tuning_parameters(struct f2fs_sb_info *sbi)$/;"	f	file:
f2fs_type_by_mode	fs/f2fs/dir.c	/^static unsigned char f2fs_type_by_mode[S_IFMT >> S_SHIFT] = {$/;"	v	file:
f2fs_unfreeze	fs/f2fs/super.c	/^static int f2fs_unfreeze(struct super_block *sb)$/;"	f	file:
f2fs_unlink	fs/f2fs/namei.c	/^static int f2fs_unlink(struct inode *dir, struct dentry *dentry)$/;"	f	file:
f2fs_unlock_all	fs/f2fs/f2fs.h	/^static inline void f2fs_unlock_all(struct f2fs_sb_info *sbi)$/;"	f
f2fs_unlock_op	fs/f2fs/f2fs.h	/^static inline void f2fs_unlock_op(struct f2fs_sb_info *sbi)$/;"	f
f2fs_unregister_sysfs	fs/f2fs/sysfs.c	/^void f2fs_unregister_sysfs(struct f2fs_sb_info *sbi)$/;"	f
f2fs_update_data_blkaddr	fs/f2fs/data.c	/^void f2fs_update_data_blkaddr(struct dnode_of_data *dn, block_t blkaddr)$/;"	f
f2fs_update_dentry	fs/f2fs/dir.c	/^void f2fs_update_dentry(nid_t ino, umode_t mode, struct f2fs_dentry_ptr *d,$/;"	f
f2fs_update_dirty_page	fs/f2fs/checkpoint.c	/^void f2fs_update_dirty_page(struct inode *inode, struct page *page)$/;"	f
f2fs_update_extension_list	fs/f2fs/namei.c	/^int f2fs_update_extension_list(struct f2fs_sb_info *sbi, const char *name,$/;"	f
f2fs_update_extent_cache	fs/f2fs/extent_cache.c	/^void f2fs_update_extent_cache(struct dnode_of_data *dn)$/;"	f
f2fs_update_extent_cache_range	fs/f2fs/extent_cache.c	/^void f2fs_update_extent_cache_range(struct dnode_of_data *dn,$/;"	f
f2fs_update_extent_tree_range	fs/f2fs/extent_cache.c	/^static void f2fs_update_extent_tree_range(struct inode *inode,$/;"	f	file:
f2fs_update_inode	fs/f2fs/inode.c	/^void f2fs_update_inode(struct inode *inode, struct page *node_page)$/;"	f
f2fs_update_inode_page	fs/f2fs/inode.c	/^void f2fs_update_inode_page(struct inode *inode)$/;"	f
f2fs_update_iostat	fs/f2fs/f2fs.h	/^static inline void f2fs_update_iostat(struct f2fs_sb_info *sbi,$/;"	f
f2fs_update_meta_page	fs/f2fs/segment.c	/^void f2fs_update_meta_page(struct f2fs_sb_info *sbi,$/;"	f
f2fs_update_parent_metadata	fs/f2fs/dir.c	/^void f2fs_update_parent_metadata(struct inode *dir, struct inode *inode,$/;"	f
f2fs_update_time	fs/f2fs/f2fs.h	/^static inline void f2fs_update_time(struct f2fs_sb_info *sbi, int type)$/;"	f
f2fs_vm_page_mkwrite	fs/f2fs/file.c	/^static vm_fault_t f2fs_vm_page_mkwrite(struct vm_fault *vmf)$/;"	f	file:
f2fs_wait_discard_bio	fs/f2fs/segment.c	/^static void f2fs_wait_discard_bio(struct f2fs_sb_info *sbi, block_t blkaddr)$/;"	f	file:
f2fs_wait_discard_bios	fs/f2fs/segment.c	/^bool f2fs_wait_discard_bios(struct f2fs_sb_info *sbi)$/;"	f
f2fs_wait_on_block_writeback	fs/f2fs/segment.c	/^void f2fs_wait_on_block_writeback(struct f2fs_sb_info *sbi, block_t blkaddr)$/;"	f
f2fs_wait_on_node_pages_writeback	fs/f2fs/node.c	/^int f2fs_wait_on_node_pages_writeback(struct f2fs_sb_info *sbi, nid_t ino)$/;"	f
f2fs_wait_on_page_writeback	fs/f2fs/segment.c	/^void f2fs_wait_on_page_writeback(struct page *page,$/;"	f
f2fs_write_begin	fs/f2fs/data.c	/^static int f2fs_write_begin(struct file *file, struct address_space *mapping,$/;"	f	file:
f2fs_write_cache_pages	fs/f2fs/data.c	/^static int f2fs_write_cache_pages(struct address_space *mapping,$/;"	f	file:
f2fs_write_checkpoint	fs/f2fs/checkpoint.c	/^int f2fs_write_checkpoint(struct f2fs_sb_info *sbi, struct cp_control *cpc)$/;"	f
f2fs_write_data_page	fs/f2fs/data.c	/^static int f2fs_write_data_page(struct page *page,$/;"	f	file:
f2fs_write_data_pages	fs/f2fs/data.c	/^static int f2fs_write_data_pages(struct address_space *mapping,$/;"	f	file:
f2fs_write_data_summaries	fs/f2fs/segment.c	/^void f2fs_write_data_summaries(struct f2fs_sb_info *sbi, block_t start_blk)$/;"	f
f2fs_write_end	fs/f2fs/data.c	/^static int f2fs_write_end(struct file *file,$/;"	f	file:
f2fs_write_end_io	fs/f2fs/data.c	/^static void f2fs_write_end_io(struct bio *bio)$/;"	f	file:
f2fs_write_failed	fs/f2fs/data.c	/^static void f2fs_write_failed(struct address_space *mapping, loff_t to)$/;"	f	file:
f2fs_write_inline_data	fs/f2fs/inline.c	/^int f2fs_write_inline_data(struct inode *inode, struct page *page)$/;"	f
f2fs_write_inode	fs/f2fs/inode.c	/^int f2fs_write_inode(struct inode *inode, struct writeback_control *wbc)$/;"	f
f2fs_write_meta_page	fs/f2fs/checkpoint.c	/^static int f2fs_write_meta_page(struct page *page,$/;"	f	file:
f2fs_write_meta_pages	fs/f2fs/checkpoint.c	/^static int f2fs_write_meta_pages(struct address_space *mapping,$/;"	f	file:
f2fs_write_node_page	fs/f2fs/node.c	/^static int f2fs_write_node_page(struct page *page,$/;"	f	file:
f2fs_write_node_pages	fs/f2fs/node.c	/^static int f2fs_write_node_pages(struct address_space *mapping,$/;"	f	file:
f2fs_write_node_summaries	fs/f2fs/segment.c	/^void f2fs_write_node_summaries(struct f2fs_sb_info *sbi, block_t start_blk)$/;"	f
f2fs_xattr_advise_get	fs/f2fs/xattr.c	/^static int f2fs_xattr_advise_get(const struct xattr_handler *handler,$/;"	f	file:
f2fs_xattr_advise_handler	fs/f2fs/xattr.c	/^const struct xattr_handler f2fs_xattr_advise_handler = {$/;"	v	typeref:struct:xattr_handler
f2fs_xattr_advise_set	fs/f2fs/xattr.c	/^static int f2fs_xattr_advise_set(const struct xattr_handler *handler,$/;"	f	file:
f2fs_xattr_entry	fs/f2fs/xattr.h	/^struct f2fs_xattr_entry {$/;"	s
f2fs_xattr_fiemap	fs/f2fs/data.c	/^static int f2fs_xattr_fiemap(struct inode *inode,$/;"	f	file:
f2fs_xattr_generic_get	fs/f2fs/xattr.c	/^static int f2fs_xattr_generic_get(const struct xattr_handler *handler,$/;"	f	file:
f2fs_xattr_generic_set	fs/f2fs/xattr.c	/^static int f2fs_xattr_generic_set(const struct xattr_handler *handler,$/;"	f	file:
f2fs_xattr_handler	fs/f2fs/xattr.c	/^static inline const struct xattr_handler *f2fs_xattr_handler(int index)$/;"	f	file:
f2fs_xattr_handler_map	fs/f2fs/xattr.c	/^static const struct xattr_handler *f2fs_xattr_handler_map[] = {$/;"	v	typeref:struct:xattr_handler	file:
f2fs_xattr_handlers	fs/f2fs/xattr.c	/^const struct xattr_handler *f2fs_xattr_handlers[] = {$/;"	v	typeref:struct:xattr_handler
f2fs_xattr_handlers	fs/f2fs/xattr.h	128;"	d
f2fs_xattr_header	fs/f2fs/xattr.h	/^struct f2fs_xattr_header {$/;"	s
f2fs_xattr_security_handler	fs/f2fs/xattr.c	/^const struct xattr_handler f2fs_xattr_security_handler = {$/;"	v	typeref:struct:xattr_handler
f2fs_xattr_trusted_handler	fs/f2fs/xattr.c	/^const struct xattr_handler f2fs_xattr_trusted_handler = {$/;"	v	typeref:struct:xattr_handler
f2fs_xattr_trusted_list	fs/f2fs/xattr.c	/^static bool f2fs_xattr_trusted_list(struct dentry *dentry)$/;"	f	file:
f2fs_xattr_user_handler	fs/f2fs/xattr.c	/^const struct xattr_handler f2fs_xattr_user_handler = {$/;"	v	typeref:struct:xattr_handler
f2fs_xattr_user_list	fs/f2fs/xattr.c	/^static bool f2fs_xattr_user_list(struct dentry *dentry)$/;"	f	file:
f2fs_xattr_value_same	fs/f2fs/xattr.c	/^static bool f2fs_xattr_value_same(struct f2fs_xattr_entry *entry,$/;"	f	file:
f2fs_xflags_to_iflags	fs/f2fs/file.c	/^static inline unsigned long f2fs_xflags_to_iflags(__u32 xflags)$/;"	f	file:
f2fs_zero_range	fs/f2fs/file.c	/^static int f2fs_zero_range(struct inode *inode, loff_t offset, loff_t len,$/;"	f	file:
fault_info	fs/f2fs/f2fs.h	/^	struct f2fs_fault_info fault_info;	\/* For fault injection *\/$/;"	m	struct:f2fs_mount_info	typeref:struct:f2fs_mount_info::f2fs_fault_info
fault_name	fs/f2fs/super.c	/^char *fault_name[FAULT_MAX] = {$/;"	v
fcc_info	fs/f2fs/f2fs.h	/^	struct flush_cmd_control *fcc_info;$/;"	m	struct:f2fs_sm_info	typeref:struct:f2fs_sm_info::flush_cmd_control
feat_id	fs/f2fs/sysfs.c	/^enum feat_id {$/;"	g	file:
feature	include/linux/f2fs_fs.h	/^	__le32 feature;			\/* defined features *\/$/;"	m	struct:f2fs_super_block
features	fs/f2fs/sysfs.c	/^F2FS_GENERAL_RO_ATTR(features);$/;"	v
features_show	fs/f2fs/sysfs.c	/^static ssize_t features_show(struct f2fs_attr *a,$/;"	f	file:
file	fs/f2fs/f2fs.h	/^	struct file *file;$/;"	m	struct:atomic_file	typeref:struct:atomic_file::file
file_clear_cold	fs/f2fs/f2fs.h	611;"	d
file_clear_encrypt	fs/f2fs/f2fs.h	615;"	d
file_clear_hot	fs/f2fs/f2fs.h	622;"	d
file_enc_name	fs/f2fs/f2fs.h	616;"	d
file_got_pino	fs/f2fs/f2fs.h	612;"	d
file_is_cold	fs/f2fs/f2fs.h	607;"	d
file_is_encrypt	fs/f2fs/f2fs.h	613;"	d
file_is_hot	fs/f2fs/f2fs.h	620;"	d
file_keep_isize	fs/f2fs/f2fs.h	618;"	d
file_lost_pino	fs/f2fs/f2fs.h	610;"	d
file_set_cold	fs/f2fs/f2fs.h	609;"	d
file_set_enc_name	fs/f2fs/f2fs.h	617;"	d
file_set_encrypt	fs/f2fs/f2fs.h	614;"	d
file_set_hot	fs/f2fs/f2fs.h	621;"	d
file_set_keep_isize	fs/f2fs/f2fs.h	619;"	d
file_type	fs/f2fs/trace.h	/^enum file_type {$/;"	g
file_type	include/linux/f2fs_fs.h	/^	__u8 file_type;		\/* file type *\/$/;"	m	struct:f2fs_dir_entry
file_wrong_pino	fs/f2fs/f2fs.h	608;"	d
filename	fs/f2fs/f2fs.h	/^	__u8 (*filename)[F2FS_SLOT_LEN];$/;"	m	struct:f2fs_dentry_ptr
filename	include/linux/f2fs_fs.h	/^	__u8 filename[NR_DENTRY_IN_BLOCK][F2FS_SLOT_LEN];$/;"	m	struct:f2fs_dentry_block
fill_node_footer	fs/f2fs/node.h	/^static inline void fill_node_footer(struct page *page, nid_t nid,$/;"	f
fill_node_footer_blkaddr	fs/f2fs/node.h	/^static inline void fill_node_footer_blkaddr(struct page *page, block_t blkaddr)$/;"	f
fill_zero	fs/f2fs/file.c	/^static int fill_zero(struct inode *inode, pgoff_t index,$/;"	f	file:
find_fsync_dnodes	fs/f2fs/recovery.c	/^static int find_fsync_dnodes(struct f2fs_sb_info *sbi, struct list_head *head,$/;"	f	file:
find_gc_inode	fs/f2fs/gc.c	/^static struct inode *find_gc_inode(struct gc_inode_list *gc_list, nid_t ino)$/;"	f	file:
find_in_block	fs/f2fs/dir.c	/^static struct f2fs_dir_entry *find_in_block(struct page *dentry_page,$/;"	f	file:
find_in_level	fs/f2fs/dir.c	/^static struct f2fs_dir_entry *find_in_level(struct inode *dir,$/;"	f	file:
find_next_inuse	fs/f2fs/segment.h	/^static inline unsigned int find_next_inuse(struct free_segmap_info *free_i,$/;"	f
fio	fs/f2fs/f2fs.h	/^	struct f2fs_io_info fio;	\/* store buffered io info. *\/$/;"	m	struct:f2fs_bio_info	typeref:struct:f2fs_bio_info::f2fs_io_info
fio	fs/f2fs/trace.h	/^	struct f2fs_io_info fio;$/;"	m	struct:last_io_info	typeref:struct:last_io_info::f2fs_io_info
flag	fs/f2fs/node.h	/^	unsigned char flag;	\/* for node information bits *\/$/;"	m	struct:node_info
flag	include/linux/f2fs_fs.h	/^	__le32 flag;		\/* include cold\/fsync\/dentry marks and offset *\/$/;"	m	struct:node_footer
flags	fs/f2fs/f2fs.h	/^	unsigned long flags;		\/* use to pass per-file flags *\/$/;"	m	struct:f2fs_inode_info
flush_cmd	fs/f2fs/f2fs.h	/^struct flush_cmd {$/;"	s
flush_cmd_control	fs/f2fs/f2fs.h	/^struct flush_cmd_control {$/;"	s
flush_inline_data	fs/f2fs/node.c	/^static void flush_inline_data(struct f2fs_sb_info *sbi, nid_t ino)$/;"	f	file:
flush_list_empty	fs/f2fs/f2fs.h	/^	int nr_flushing, nr_flushed, flush_list_empty;$/;"	m	struct:f2fs_stat_info
flush_wait_queue	fs/f2fs/f2fs.h	/^	wait_queue_head_t flush_wait_queue;	\/* waiting queue for wake-up *\/$/;"	m	struct:flush_cmd_control
fofs	fs/f2fs/f2fs.h	/^			unsigned int fofs;$/;"	m	struct:extent_node::__anon18::__anon19
fofs	fs/f2fs/f2fs.h	/^	unsigned int fofs;		\/* start offset in a file *\/$/;"	m	struct:extent_info
fofs	include/linux/f2fs_fs.h	/^	__le32 fofs;		\/* start file offset of the extent *\/$/;"	m	struct:f2fs_extent
footer	include/linux/f2fs_fs.h	/^	struct node_footer footer;$/;"	m	struct:f2fs_node	typeref:struct:f2fs_node::node_footer
footer	include/linux/f2fs_fs.h	/^	struct summary_footer footer;$/;"	m	struct:f2fs_summary_block	typeref:struct:f2fs_summary_block::summary_footer
free_info	fs/f2fs/f2fs.h	/^	struct free_segmap_info *free_info;	\/* free segment information *\/$/;"	m	struct:f2fs_sm_info	typeref:struct:f2fs_sm_info::free_segmap_info
free_nid	fs/f2fs/node.h	/^struct free_nid {$/;"	s
free_nid_bitmap	fs/f2fs/f2fs.h	/^	unsigned char **free_nid_bitmap;$/;"	m	struct:f2fs_nm_info
free_nid_count	fs/f2fs/f2fs.h	/^	unsigned short *free_nid_count;	\/* free nid count of NAT block *\/$/;"	m	struct:f2fs_nm_info
free_nid_list	fs/f2fs/f2fs.h	/^	struct list_head free_nid_list;		\/* list for free nids excluding preallocated nids *\/$/;"	m	struct:f2fs_nm_info	typeref:struct:f2fs_nm_info::list_head
free_nid_root	fs/f2fs/f2fs.h	/^	struct radix_tree_root free_nid_root;\/* root of the free_nid cache *\/$/;"	m	struct:f2fs_nm_info	typeref:struct:f2fs_nm_info::radix_tree_root
free_nid_slab	fs/f2fs/node.c	/^static struct kmem_cache *free_nid_slab;$/;"	v	typeref:struct:kmem_cache	file:
free_nids	fs/f2fs/f2fs.h	/^	int free_nids, avail_nids, alloc_nids;$/;"	m	struct:f2fs_stat_info
free_secmap	fs/f2fs/segment.h	/^	unsigned long *free_secmap;	\/* free section bitmap *\/$/;"	m	struct:free_segmap_info
free_secs	fs/f2fs/f2fs.h	/^	int tot_segs, node_segs, data_segs, free_segs, free_secs;$/;"	m	struct:f2fs_stat_info
free_sections	fs/f2fs/segment.h	/^	unsigned int free_sections;	\/* # of free sections *\/$/;"	m	struct:free_segmap_info
free_sections	fs/f2fs/segment.h	/^static inline unsigned int free_sections(struct f2fs_sb_info *sbi)$/;"	f
free_segmap	fs/f2fs/segment.h	/^	unsigned long *free_segmap;	\/* free segment bitmap *\/$/;"	m	struct:free_segmap_info
free_segmap_info	fs/f2fs/segment.h	/^struct free_segmap_info {$/;"	s
free_segment_count	include/linux/f2fs_fs.h	/^	__le32 free_segment_count;	\/* # of free segments in main area *\/$/;"	m	struct:f2fs_checkpoint
free_segments	fs/f2fs/segment.h	/^	unsigned int free_segments;	\/* # of free segments *\/$/;"	m	struct:free_segmap_info
free_segments	fs/f2fs/segment.h	/^static inline unsigned int free_segments(struct f2fs_sb_info *sbi)$/;"	f
free_segs	fs/f2fs/f2fs.h	/^	int tot_segs, node_segs, data_segs, free_segs, free_secs;$/;"	m	struct:f2fs_stat_info
free_user_blocks	fs/f2fs/gc.h	/^static inline block_t free_user_blocks(struct f2fs_sb_info *sbi)$/;"	f
fstrim_list	fs/f2fs/f2fs.h	/^	struct list_head fstrim_list;		\/* in-flight discard from fstrim *\/$/;"	m	struct:discard_cmd_control	typeref:struct:discard_cmd_control::list_head
fsync_entry_slab	fs/f2fs/recovery.c	/^static struct kmem_cache *fsync_entry_slab;$/;"	v	typeref:struct:kmem_cache	file:
fsync_inode_entry	fs/f2fs/f2fs.h	/^struct fsync_inode_entry {$/;"	s
fsync_mode	fs/f2fs/f2fs.h	/^	int fsync_mode;			\/* fsync policy *\/$/;"	m	struct:f2fs_mount_info
fsync_mode	fs/f2fs/f2fs.h	/^enum fsync_mode {$/;"	g
full_nat_bits	fs/f2fs/f2fs.h	/^	unsigned char *full_nat_bits;	\/* full NAT pages *\/$/;"	m	struct:f2fs_nm_info
gang_lookup_pids	fs/f2fs/trace.c	/^static unsigned int gang_lookup_pids(pid_t *results, unsigned long first_index,$/;"	f	file:
gc_data_segment	fs/f2fs/gc.c	/^static void gc_data_segment(struct f2fs_sb_info *sbi, struct f2fs_summary *sum,$/;"	f	file:
gc_inode_list	fs/f2fs/gc.h	/^struct gc_inode_list {$/;"	s
gc_mode	fs/f2fs/f2fs.h	/^	unsigned int gc_mode;			\/* current GC state *\/$/;"	m	struct:f2fs_sb_info
gc_mode	fs/f2fs/segment.h	/^	int gc_mode;			\/* GC_CB or GC_GREEDY *\/$/;"	m	struct:victim_sel_policy
gc_mutex	fs/f2fs/f2fs.h	/^	struct mutex gc_mutex;			\/* mutex for GC *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::mutex
gc_node_segment	fs/f2fs/gc.c	/^static void gc_node_segment(struct f2fs_sb_info *sbi,$/;"	f	file:
gc_pin_file_threshold	fs/f2fs/f2fs.h	/^	u64 gc_pin_file_threshold;$/;"	m	struct:f2fs_sb_info
gc_thread	fs/f2fs/f2fs.h	/^	struct f2fs_gc_kthread	*gc_thread;	\/* GC thread *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::f2fs_gc_kthread
gc_thread_func	fs/f2fs/gc.c	/^static int gc_thread_func(void *data)$/;"	f	file:
gc_wait_queue_head	fs/f2fs/gc.h	/^	wait_queue_head_t gc_wait_queue_head;$/;"	m	struct:f2fs_gc_kthread
gc_wake	fs/f2fs/gc.h	/^	unsigned int gc_wake;$/;"	m	struct:f2fs_gc_kthread
gdirty_list	fs/f2fs/f2fs.h	/^	struct list_head gdirty_list;	\/* linked in global dirty list *\/$/;"	m	struct:f2fs_inode_info	typeref:struct:f2fs_inode_info::list_head
get_blkz_type	fs/f2fs/f2fs.h	/^static inline int get_blkz_type(struct f2fs_sb_info *sbi,$/;"	f
get_blocktype_secs	fs/f2fs/f2fs.h	/^static inline int get_blocktype_secs(struct f2fs_sb_info *sbi, int block_type)$/;"	f
get_cb_cost	fs/f2fs/gc.c	/^static unsigned int get_cb_cost(struct f2fs_sb_info *sbi, unsigned int segno)$/;"	f	file:
get_checkpoint_version	fs/f2fs/checkpoint.c	/^static int get_checkpoint_version(struct f2fs_sb_info *sbi, block_t cp_addr,$/;"	f	file:
get_current_nat_page	fs/f2fs/node.c	/^static struct page *get_current_nat_page(struct f2fs_sb_info *sbi, nid_t nid)$/;"	f	file:
get_current_sit_page	fs/f2fs/segment.c	/^static struct page *get_current_sit_page(struct f2fs_sb_info *sbi,$/;"	f	file:
get_data_block	fs/f2fs/data.c	/^static int get_data_block(struct inode *inode, sector_t iblock,$/;"	f	file:
get_data_block_bmap	fs/f2fs/data.c	/^static int get_data_block_bmap(struct inode *inode, sector_t iblock,$/;"	f	file:
get_data_block_dio	fs/f2fs/data.c	/^static int get_data_block_dio(struct inode *inode, sector_t iblock,$/;"	f	file:
get_dirty_pages	fs/f2fs/f2fs.h	/^static inline int get_dirty_pages(struct inode *inode)$/;"	f
get_extent_info	fs/f2fs/f2fs.h	/^static inline void get_extent_info(struct extent_info *ext,$/;"	f
get_extra_isize	fs/f2fs/f2fs.h	/^static inline int get_extra_isize(struct inode *inode)$/;"	f
get_fsync_inode	fs/f2fs/recovery.c	/^static struct fsync_inode_entry *get_fsync_inode(struct list_head *head,$/;"	f	file:
get_gc_cost	fs/f2fs/gc.c	/^static inline unsigned int get_gc_cost(struct f2fs_sb_info *sbi,$/;"	f	file:
get_inline_info	fs/f2fs/f2fs.h	/^static inline void get_inline_info(struct inode *inode, struct f2fs_inode *ri)$/;"	f
get_inline_xattr_addrs	fs/f2fs/f2fs.h	/^static inline int get_inline_xattr_addrs(struct inode *inode)$/;"	f
get_max_cost	fs/f2fs/gc.c	/^static unsigned int get_max_cost(struct f2fs_sb_info *sbi,$/;"	f	file:
get_mtime	fs/f2fs/segment.h	/^static inline unsigned long long get_mtime(struct f2fs_sb_info *sbi,$/;"	f
get_nat_bitmap	fs/f2fs/node.h	/^static inline void get_nat_bitmap(struct f2fs_sb_info *sbi, void *addr)$/;"	f
get_nat_flag	fs/f2fs/node.h	/^static inline bool get_nat_flag(struct nat_entry *ne, unsigned int type)$/;"	f
get_new_segment	fs/f2fs/segment.c	/^static void get_new_segment(struct f2fs_sb_info *sbi,$/;"	f	file:
get_next_nat_page	fs/f2fs/node.c	/^static struct page *get_next_nat_page(struct f2fs_sb_info *sbi, nid_t nid)$/;"	f	file:
get_next_sit_page	fs/f2fs/segment.c	/^static struct page *get_next_sit_page(struct f2fs_sb_info *sbi,$/;"	f	file:
get_nid	fs/f2fs/node.h	/^static inline nid_t get_nid(struct page *p, int off, bool i)$/;"	f
get_node_path	fs/f2fs/node.c	/^static int get_node_path(struct inode *inode, long block,$/;"	f	file:
get_pages	fs/f2fs/f2fs.h	/^static inline s64 get_pages(struct f2fs_sb_info *sbi, int count_type)$/;"	f
get_parent_ino	fs/f2fs/file.c	/^static int get_parent_ino(struct inode *inode, nid_t *pino)$/;"	f	file:
get_sec_entry	fs/f2fs/segment.h	/^static inline struct sec_entry *get_sec_entry(struct f2fs_sb_info *sbi,$/;"	f
get_seg_entry	fs/f2fs/segment.h	/^static inline struct seg_entry *get_seg_entry(struct f2fs_sb_info *sbi,$/;"	f
get_sit_bitmap	fs/f2fs/segment.h	/^static inline void get_sit_bitmap(struct f2fs_sb_info *sbi,$/;"	f
get_ssr_segment	fs/f2fs/segment.c	/^static int get_ssr_segment(struct f2fs_sb_info *sbi, int type)$/;"	f	file:
get_valid_blocks	fs/f2fs/segment.h	/^static inline unsigned int get_valid_blocks(struct f2fs_sb_info *sbi,$/;"	f
get_victim	fs/f2fs/segment.h	/^	int (*get_victim)(struct f2fs_sb_info *, unsigned int *,$/;"	m	struct:victim_selection
get_victim_by_default	fs/f2fs/gc.c	/^static int get_victim_by_default(struct f2fs_sb_info *sbi,$/;"	f	file:
grab_sit_entry_set	fs/f2fs/segment.c	/^static struct sit_entry_set *grab_sit_entry_set(void)$/;"	f	file:
granularity	fs/f2fs/f2fs.h	/^	unsigned int granularity;	\/* discard granularity *\/$/;"	m	struct:discard_policy
h_magic	fs/f2fs/xattr.h	/^	__le32  h_magic;        \/* magic number for identification *\/$/;"	m	struct:f2fs_xattr_header
h_refcount	fs/f2fs/xattr.h	/^	__le32  h_refcount;     \/* reference count *\/$/;"	m	struct:f2fs_xattr_header
h_reserved	fs/f2fs/xattr.h	/^	__u32   h_reserved[4];  \/* zero right now *\/$/;"	m	struct:f2fs_xattr_header
has_curseg_enough_space	fs/f2fs/segment.h	/^static inline bool has_curseg_enough_space(struct f2fs_sb_info *sbi)$/;"	f
has_enough_invalid_blocks	fs/f2fs/gc.h	/^static inline bool has_enough_invalid_blocks(struct f2fs_sb_info *sbi)$/;"	f
has_merged_page	fs/f2fs/data.c	/^static bool has_merged_page(struct f2fs_sb_info *sbi, struct inode *inode,$/;"	f	file:
has_not_enough_free_secs	fs/f2fs/segment.h	/^static inline bool has_not_enough_free_secs(struct f2fs_sb_info *sbi,$/;"	f
hash_code	include/linux/f2fs_fs.h	/^	__le32 hash_code;	\/* hash code of file name *\/$/;"	m	struct:f2fs_dir_entry
hit_cached	fs/f2fs/f2fs.h	/^	unsigned long long hit_largest, hit_cached, hit_rbtree;$/;"	m	struct:f2fs_stat_info
hit_largest	fs/f2fs/f2fs.h	/^	unsigned long long hit_largest, hit_cached, hit_rbtree;$/;"	m	struct:f2fs_stat_info
hit_rbtree	fs/f2fs/f2fs.h	/^	unsigned long long hit_largest, hit_cached, hit_rbtree;$/;"	m	struct:f2fs_stat_info
hit_total	fs/f2fs/f2fs.h	/^	unsigned long long hit_total, total_ext;$/;"	m	struct:f2fs_stat_info
hot_ext_count	include/linux/f2fs_fs.h	/^	__u8 hot_ext_count;		\/* # of hot file extension *\/$/;"	m	struct:f2fs_super_block
i	include/linux/f2fs_fs.h	/^		struct f2fs_inode i;$/;"	m	union:f2fs_node::__anon33	typeref:struct:f2fs_node::__anon33::f2fs_inode
i_acl_mode	fs/f2fs/f2fs.h	/^	umode_t i_acl_mode;		\/* keep file acl mode temporarily *\/$/;"	m	struct:f2fs_inode_info
i_addr	include/linux/f2fs_fs.h	/^		__le32 i_addr[DEF_ADDRS_PER_INODE];	\/* Pointers to data blocks *\/$/;"	m	union:f2fs_inode::__anon30
i_advise	fs/f2fs/f2fs.h	/^	unsigned char i_advise;		\/* use to give file attribute hints *\/$/;"	m	struct:f2fs_inode_info
i_advise	include/linux/f2fs_fs.h	/^	__u8 i_advise;			\/* file hints *\/$/;"	m	struct:f2fs_inode
i_atime	include/linux/f2fs_fs.h	/^	__le64 i_atime;			\/* access time *\/$/;"	m	struct:f2fs_inode
i_atime_nsec	include/linux/f2fs_fs.h	/^	__le32 i_atime_nsec;		\/* access time in nano scale *\/$/;"	m	struct:f2fs_inode
i_blocks	include/linux/f2fs_fs.h	/^	__le64 i_blocks;		\/* file size in blocks *\/$/;"	m	struct:f2fs_inode
i_crtime	fs/f2fs/f2fs.h	/^	struct timespec i_crtime;	\/* inode creation time *\/$/;"	m	struct:f2fs_inode_info	typeref:struct:f2fs_inode_info::timespec
i_crtime	include/linux/f2fs_fs.h	/^			__le64 i_crtime;	\/* creation time *\/$/;"	m	struct:f2fs_inode::__anon30::__anon31
i_crtime_nsec	include/linux/f2fs_fs.h	/^			__le32 i_crtime_nsec;	\/* creation time in nano scale *\/$/;"	m	struct:f2fs_inode::__anon30::__anon31
i_ctime	include/linux/f2fs_fs.h	/^	__le64 i_ctime;			\/* change time *\/$/;"	m	struct:f2fs_inode
i_ctime_nsec	include/linux/f2fs_fs.h	/^	__le32 i_ctime_nsec;		\/* change time in nano scale *\/$/;"	m	struct:f2fs_inode
i_current_depth	fs/f2fs/f2fs.h	/^	unsigned int i_current_depth;	\/* only for directory depth *\/$/;"	m	struct:f2fs_inode_info
i_current_depth	include/linux/f2fs_fs.h	/^		__le32 i_current_depth;	\/* only for directory depth *\/$/;"	m	union:f2fs_inode::__anon29
i_dir_level	fs/f2fs/f2fs.h	/^	unsigned char i_dir_level;	\/* use for dentry level for large dir *\/$/;"	m	struct:f2fs_inode_info
i_dir_level	include/linux/f2fs_fs.h	/^	__u8 i_dir_level;		\/* dentry_level for large dir *\/$/;"	m	struct:f2fs_inode
i_disk_time	fs/f2fs/f2fs.h	/^	struct timespec i_disk_time[4];	\/* inode disk times *\/$/;"	m	struct:f2fs_inode_info	typeref:struct:f2fs_inode_info::timespec
i_dquot	fs/f2fs/f2fs.h	/^	struct dquot *i_dquot[MAXQUOTAS];$/;"	m	struct:f2fs_inode_info	typeref:struct:f2fs_inode_info::dquot
i_ext	include/linux/f2fs_fs.h	/^	struct f2fs_extent i_ext;	\/* caching a largest extent *\/$/;"	m	struct:f2fs_inode	typeref:struct:f2fs_inode::f2fs_extent
i_extra_end	include/linux/f2fs_fs.h	/^			__le32 i_extra_end[0];	\/* for attribute size calculation *\/$/;"	m	struct:f2fs_inode::__anon30::__anon31
i_extra_isize	fs/f2fs/f2fs.h	/^	int i_extra_isize;		\/* size of extra space located in i_addr *\/$/;"	m	struct:f2fs_inode_info
i_extra_isize	include/linux/f2fs_fs.h	/^			__le16 i_extra_isize;	\/* extra inode attribute size *\/$/;"	m	struct:f2fs_inode::__anon30::__anon31
i_flags	fs/f2fs/f2fs.h	/^	unsigned long i_flags;		\/* keep an inode flags for ioctl *\/$/;"	m	struct:f2fs_inode_info
i_flags	include/linux/f2fs_fs.h	/^	__le32 i_flags;			\/* file attributes *\/$/;"	m	struct:f2fs_inode
i_gc_failures	fs/f2fs/f2fs.h	/^	unsigned int i_gc_failures[MAX_GC_FAILURE];$/;"	m	struct:f2fs_inode_info
i_gc_failures	include/linux/f2fs_fs.h	/^		__le16 i_gc_failures;	\/*$/;"	m	union:f2fs_inode::__anon29
i_gc_rwsem	fs/f2fs/f2fs.h	/^	struct rw_semaphore i_gc_rwsem[2];$/;"	m	struct:f2fs_inode_info	typeref:struct:f2fs_inode_info::rw_semaphore
i_generation	include/linux/f2fs_fs.h	/^	__le32 i_generation;		\/* file version (for NFS) *\/$/;"	m	struct:f2fs_inode
i_gid	include/linux/f2fs_fs.h	/^	__le32 i_gid;			\/* group ID *\/$/;"	m	struct:f2fs_inode
i_inline	include/linux/f2fs_fs.h	/^	__u8 i_inline;			\/* file inline flags *\/$/;"	m	struct:f2fs_inode
i_inline_xattr_size	fs/f2fs/f2fs.h	/^	int i_inline_xattr_size;	\/* inline xattr size *\/$/;"	m	struct:f2fs_inode_info
i_inline_xattr_size	include/linux/f2fs_fs.h	/^			__le16 i_inline_xattr_size;	\/* inline xattr size, unit: 4 bytes *\/$/;"	m	struct:f2fs_inode::__anon30::__anon31
i_inode_checksum	include/linux/f2fs_fs.h	/^			__le32 i_inode_checksum;\/* inode meta checksum *\/$/;"	m	struct:f2fs_inode::__anon30::__anon31
i_links	include/linux/f2fs_fs.h	/^	__le32 i_links;			\/* links count *\/$/;"	m	struct:f2fs_inode
i_mmap_sem	fs/f2fs/f2fs.h	/^	struct rw_semaphore i_mmap_sem;$/;"	m	struct:f2fs_inode_info	typeref:struct:f2fs_inode_info::rw_semaphore
i_mode	include/linux/f2fs_fs.h	/^	__le16 i_mode;			\/* file mode *\/$/;"	m	struct:f2fs_inode
i_mtime	include/linux/f2fs_fs.h	/^	__le64 i_mtime;			\/* modification time *\/$/;"	m	struct:f2fs_inode
i_mtime_nsec	include/linux/f2fs_fs.h	/^	__le32 i_mtime_nsec;		\/* modification time in nano scale *\/$/;"	m	struct:f2fs_inode
i_name	include/linux/f2fs_fs.h	/^	__u8 i_name[F2FS_NAME_LEN];	\/* file name for SPOR *\/$/;"	m	struct:f2fs_inode
i_namelen	include/linux/f2fs_fs.h	/^	__le32 i_namelen;		\/* file name length *\/$/;"	m	struct:f2fs_inode
i_nid	include/linux/f2fs_fs.h	/^	__le32 i_nid[DEF_NIDS_PER_INODE];	\/* direct(2), indirect(2),$/;"	m	struct:f2fs_inode
i_pino	fs/f2fs/f2fs.h	/^	unsigned int i_pino;		\/* parent inode number *\/$/;"	m	struct:f2fs_inode_info
i_pino	include/linux/f2fs_fs.h	/^	__le32 i_pino;			\/* parent inode number *\/$/;"	m	struct:f2fs_inode
i_projid	fs/f2fs/f2fs.h	/^	kprojid_t i_projid;		\/* id for project quota *\/$/;"	m	struct:f2fs_inode_info
i_projid	include/linux/f2fs_fs.h	/^			__le32 i_projid;	\/* project id *\/$/;"	m	struct:f2fs_inode::__anon30::__anon31
i_reserved_quota	fs/f2fs/f2fs.h	/^	qsize_t i_reserved_quota;$/;"	m	struct:f2fs_inode_info
i_sem	fs/f2fs/f2fs.h	/^	struct rw_semaphore i_sem;	\/* protect fi info *\/$/;"	m	struct:f2fs_inode_info	typeref:struct:f2fs_inode_info::rw_semaphore
i_size	include/linux/f2fs_fs.h	/^	__le64 i_size;			\/* file size in bytes *\/$/;"	m	struct:f2fs_inode
i_uid	include/linux/f2fs_fs.h	/^	__le32 i_uid;			\/* user ID *\/$/;"	m	struct:f2fs_inode
i_xattr_nid	fs/f2fs/f2fs.h	/^	nid_t i_xattr_nid;		\/* node id that contains xattrs *\/$/;"	m	struct:f2fs_inode_info
i_xattr_nid	include/linux/f2fs_fs.h	/^	__le32 i_xattr_nid;		\/* nid to save xattr *\/$/;"	m	struct:f2fs_inode
i_xattr_sem	fs/f2fs/f2fs.h	/^	struct rw_semaphore i_xattr_sem; \/* avoid racing between reading and changing EAs *\/$/;"	m	struct:f2fs_inode_info	typeref:struct:f2fs_inode_info::rw_semaphore
id	fs/f2fs/sysfs.c	/^	int id;$/;"	m	struct:f2fs_attr	file:
ilist	fs/f2fs/gc.h	/^	struct list_head ilist;$/;"	m	struct:gc_inode_list	typeref:struct:gc_inode_list::list_head
im	fs/f2fs/f2fs.h	/^	struct inode_management im[MAX_INO_ENTRY];      \/* manage inode cache *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::inode_management
in	include/linux/f2fs_fs.h	/^		struct indirect_node in;$/;"	m	union:f2fs_node::__anon33	typeref:struct:f2fs_node::__anon33::indirect_node
in_list	fs/f2fs/f2fs.h	/^	bool in_list;		\/* indicate fio is in io_list *\/$/;"	m	struct:f2fs_io_info
inc_node_version	fs/f2fs/node.h	75;"	d
inc_page_count	fs/f2fs/f2fs.h	/^static inline void inc_page_count(struct f2fs_sb_info *sbi, int count_type)$/;"	f
inc_valid_block_count	fs/f2fs/f2fs.h	/^static inline int inc_valid_block_count(struct f2fs_sb_info *sbi,$/;"	f
inc_valid_inode_count	fs/f2fs/f2fs.h	/^static inline void inc_valid_inode_count(struct f2fs_sb_info *sbi)$/;"	f
inc_valid_node_count	fs/f2fs/f2fs.h	/^static inline int inc_valid_node_count(struct f2fs_sb_info *sbi,$/;"	f
increase_sleep_time	fs/f2fs/gc.h	/^static inline void increase_sleep_time(struct f2fs_gc_kthread *gc_th,$/;"	f
indirect_node	include/linux/f2fs_fs.h	/^struct indirect_node {$/;"	s
info	include/linux/f2fs_fs.h	/^		struct f2fs_extra_info info;$/;"	m	union:f2fs_journal::__anon38	typeref:struct:f2fs_journal::__anon38::f2fs_extra_info
init_blkz_info	fs/f2fs/super.c	/^static int init_blkz_info(struct f2fs_sb_info *sbi, int devi)$/;"	f	file:
init_dent_inode	fs/f2fs/dir.c	/^static void init_dent_inode(const struct qstr *name, struct page *ipage)$/;"	f	file:
init_dirty_segmap	fs/f2fs/segment.c	/^static void init_dirty_segmap(struct f2fs_sb_info *sbi)$/;"	f	file:
init_f2fs_fs	fs/f2fs/super.c	/^static int __init init_f2fs_fs(void)$/;"	f	file:
init_free_nid_cache	fs/f2fs/node.c	/^static int init_free_nid_cache(struct f2fs_sb_info *sbi)$/;"	f	file:
init_free_segmap	fs/f2fs/segment.c	/^static void init_free_segmap(struct f2fs_sb_info *sbi)$/;"	f	file:
init_inodecache	fs/f2fs/super.c	/^static int __init init_inodecache(void)$/;"	f	file:
init_min_max_mtime	fs/f2fs/segment.c	/^static void init_min_max_mtime(struct f2fs_sb_info *sbi)$/;"	f	file:
init_node_manager	fs/f2fs/node.c	/^static int init_node_manager(struct f2fs_sb_info *sbi)$/;"	f	file:
init_once	fs/f2fs/super.c	/^static void init_once(void *foo)$/;"	f	file:
init_percpu_info	fs/f2fs/super.c	/^static int init_percpu_info(struct f2fs_sb_info *sbi)$/;"	f	file:
init_sb_info	fs/f2fs/super.c	/^static void init_sb_info(struct f2fs_sb_info *sbi)$/;"	f	file:
init_version	include/linux/f2fs_fs.h	/^	__u8 init_version[VERSION_LEN];	\/* the initial kernel version *\/$/;"	m	struct:f2fs_super_block
init_victim_secmap	fs/f2fs/segment.c	/^static int init_victim_secmap(struct f2fs_sb_info *sbi)$/;"	f	file:
inject_ops	fs/f2fs/f2fs.h	/^	atomic_t inject_ops;$/;"	m	struct:f2fs_fault_info
inject_rate	fs/f2fs/f2fs.h	/^	unsigned int inject_rate;$/;"	m	struct:f2fs_fault_info
inject_type	fs/f2fs/f2fs.h	/^	unsigned int inject_type;$/;"	m	struct:f2fs_fault_info
inline_data_addr	fs/f2fs/f2fs.h	/^static inline void *inline_data_addr(struct inode *inode, struct page *page)$/;"	f
inline_dir	fs/f2fs/f2fs.h	/^	atomic_t inline_dir;			\/* # of inline_dentry inodes *\/$/;"	m	struct:f2fs_sb_info
inline_dir	fs/f2fs/f2fs.h	/^	int inline_xattr, inline_inode, inline_dir, append, update, orphans;$/;"	m	struct:f2fs_stat_info
inline_inode	fs/f2fs/f2fs.h	/^	atomic_t inline_inode;			\/* # of inline_data inodes *\/$/;"	m	struct:f2fs_sb_info
inline_inode	fs/f2fs/f2fs.h	/^	int inline_xattr, inline_inode, inline_dir, append, update, orphans;$/;"	m	struct:f2fs_stat_info
inline_xattr	fs/f2fs/f2fs.h	/^	atomic_t inline_xattr;			\/* # of inline_xattr inodes *\/$/;"	m	struct:f2fs_sb_info
inline_xattr	fs/f2fs/f2fs.h	/^	int inline_xattr, inline_inode, inline_dir, append, update, orphans;$/;"	m	struct:f2fs_stat_info
inline_xattr_addr	fs/f2fs/f2fs.h	/^static inline void *inline_xattr_addr(struct inode *inode, struct page *page)$/;"	f
inline_xattr_size	fs/f2fs/f2fs.h	/^	int inline_xattr_size;		\/* inline xattr size *\/$/;"	m	struct:f2fs_mount_info
inline_xattr_size	fs/f2fs/f2fs.h	/^static inline int inline_xattr_size(struct inode *inode)$/;"	f
inmem_entry_slab	fs/f2fs/segment.c	/^static struct kmem_cache *inmem_entry_slab;$/;"	v	typeref:struct:kmem_cache	file:
inmem_ilist	fs/f2fs/f2fs.h	/^	struct list_head inmem_ilist;	\/* list for inmem inodes *\/$/;"	m	struct:f2fs_inode_info	typeref:struct:f2fs_inode_info::list_head
inmem_lock	fs/f2fs/f2fs.h	/^	struct mutex inmem_lock;	\/* lock for inmemory pages *\/$/;"	m	struct:f2fs_inode_info	typeref:struct:f2fs_inode_info::mutex
inmem_pages	fs/f2fs/f2fs.h	/^	int inmem_pages;$/;"	m	struct:f2fs_stat_info
inmem_pages	fs/f2fs/f2fs.h	/^	struct list_head inmem_pages;	\/* inmemory pages managed by f2fs *\/$/;"	m	struct:f2fs_inode_info	typeref:struct:f2fs_inode_info::list_head
inmem_pages	fs/f2fs/segment.h	/^struct inmem_pages {$/;"	s
inmem_task	fs/f2fs/f2fs.h	/^	struct task_struct *inmem_task;	\/* store inmemory task *\/$/;"	m	struct:f2fs_inode_info	typeref:struct:f2fs_inode_info::task_struct
ino	fs/f2fs/f2fs.h	/^	nid_t ino;			\/* inode number *\/$/;"	m	struct:extent_tree
ino	fs/f2fs/f2fs.h	/^	nid_t ino;			\/* inode number *\/$/;"	m	struct:ino_entry
ino	fs/f2fs/f2fs.h	/^	nid_t ino;		\/* inode number *\/$/;"	m	struct:f2fs_io_info
ino	fs/f2fs/f2fs.h	/^	nid_t ino;$/;"	m	struct:flush_cmd
ino	fs/f2fs/node.h	/^	nid_t ino;		\/* inode number of the node's owner *\/$/;"	m	struct:node_info
ino	include/linux/f2fs_fs.h	/^	__le32 ino;		\/* inode number *\/$/;"	m	struct:f2fs_dir_entry
ino	include/linux/f2fs_fs.h	/^	__le32 ino;		\/* inode number *\/$/;"	m	struct:f2fs_nat_entry
ino	include/linux/f2fs_fs.h	/^	__le32 ino;		\/* inode nunmber *\/$/;"	m	struct:node_footer
ino	include/linux/f2fs_fs.h	/^	__le32 ino[F2FS_ORPHANS_PER_BLOCK];	\/* inode numbers *\/$/;"	m	struct:f2fs_orphan_block
ino_entry	fs/f2fs/f2fs.h	/^struct ino_entry {$/;"	s
ino_entry_slab	fs/f2fs/checkpoint.c	/^static struct kmem_cache *ino_entry_slab;$/;"	v	typeref:struct:kmem_cache	file:
ino_list	fs/f2fs/f2fs.h	/^	struct list_head ino_list;		\/* inode list head *\/$/;"	m	struct:inode_management	typeref:struct:inode_management::list_head
ino_lock	fs/f2fs/f2fs.h	/^	spinlock_t ino_lock;			\/* for ino entry lock *\/$/;"	m	struct:inode_management
ino_num	fs/f2fs/f2fs.h	/^	unsigned long ino_num;			\/* number of entries *\/$/;"	m	struct:inode_management
ino_of_node	fs/f2fs/node.h	/^static inline nid_t ino_of_node(struct page *node_page)$/;"	f
ino_root	fs/f2fs/f2fs.h	/^	struct radix_tree_root ino_root;	\/* ino entry array *\/$/;"	m	struct:inode_management	typeref:struct:inode_management::radix_tree_root
inode	fs/f2fs/f2fs.h	/^	struct inode *inode;		\/* vfs inode pointer *\/$/;"	m	struct:dnode_of_data	typeref:struct:dnode_of_data::inode
inode	fs/f2fs/f2fs.h	/^	struct inode *inode;	\/* vfs inode pointer *\/$/;"	m	struct:fsync_inode_entry	typeref:struct:fsync_inode_entry::inode
inode	fs/f2fs/f2fs.h	/^	struct inode *inode;	\/* vfs inode pointer *\/$/;"	m	struct:inode_entry	typeref:struct:inode_entry::inode
inode	fs/f2fs/f2fs.h	/^	struct inode *inode;$/;"	m	struct:f2fs_dentry_ptr	typeref:struct:f2fs_dentry_ptr::inode
inode_dec_dirty_pages	fs/f2fs/f2fs.h	/^static inline void inode_dec_dirty_pages(struct inode *inode)$/;"	f
inode_entry	fs/f2fs/f2fs.h	/^struct inode_entry {$/;"	s
inode_inc_dirty_pages	fs/f2fs/f2fs.h	/^static inline void inode_inc_dirty_pages(struct inode *inode)$/;"	f
inode_list	fs/f2fs/f2fs.h	/^	struct list_head inode_list[NR_INODE_TYPE];	\/* dirty inode list *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::list_head
inode_lock	fs/f2fs/f2fs.h	/^	spinlock_t inode_lock[NR_INODE_TYPE];	\/* for dirty inode list lock *\/$/;"	m	struct:f2fs_sb_info
inode_management	fs/f2fs/f2fs.h	/^struct inode_management {$/;"	s
inode_page	fs/f2fs/f2fs.h	/^	struct page *inode_page;	\/* its inode page, NULL is possible *\/$/;"	m	struct:dnode_of_data	typeref:struct:dnode_of_data::page
inode_page_locked	fs/f2fs/f2fs.h	/^	bool inode_page_locked;		\/* inode page is locked or not *\/$/;"	m	struct:dnode_of_data
inode_type	fs/f2fs/f2fs.h	/^enum inode_type {$/;"	g
inplace_count	fs/f2fs/f2fs.h	/^	atomic_t inplace_count;		\/* # of inplace update *\/$/;"	m	struct:f2fs_sb_info
inplace_count	fs/f2fs/f2fs.h	/^	unsigned int inplace_count;$/;"	m	struct:f2fs_stat_info
interval_time	fs/f2fs/f2fs.h	/^	long interval_time[MAX_TIME];		\/* to store thresholds *\/$/;"	m	struct:f2fs_sb_info
io_aware	fs/f2fs/f2fs.h	/^	bool io_aware;			\/* issue discard in idle time *\/$/;"	m	struct:discard_policy
io_aware_gran	fs/f2fs/f2fs.h	/^	unsigned int io_aware_gran;	\/* minimum granularity discard not be aware of I\/O *\/$/;"	m	struct:discard_policy
io_list	fs/f2fs/f2fs.h	/^	struct list_head io_list;	\/* track fios *\/$/;"	m	struct:f2fs_bio_info	typeref:struct:f2fs_bio_info::list_head
io_lock	fs/f2fs/f2fs.h	/^	spinlock_t io_lock;		\/* serialize DATA\/NODE IOs *\/$/;"	m	struct:f2fs_bio_info
io_order_lock	fs/f2fs/f2fs.h	/^	struct rw_semaphore io_order_lock;$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::rw_semaphore
io_rwsem	fs/f2fs/f2fs.h	/^	struct rw_semaphore io_rwsem;	\/* blocking op for bio *\/$/;"	m	struct:f2fs_bio_info	typeref:struct:f2fs_bio_info::rw_semaphore
io_type	fs/f2fs/f2fs.h	/^	enum iostat_type io_type;	\/* io type *\/$/;"	m	struct:f2fs_io_info	typeref:enum:f2fs_io_info::iostat_type
io_wbc	fs/f2fs/f2fs.h	/^	struct writeback_control *io_wbc; \/* writeback control *\/$/;"	m	struct:f2fs_io_info	typeref:struct:f2fs_io_info::writeback_control
iostat_enable	fs/f2fs/f2fs.h	/^	bool iostat_enable;$/;"	m	struct:f2fs_sb_info
iostat_info_seq_show	fs/f2fs/sysfs.c	/^static int iostat_info_seq_show(struct seq_file *seq, void *offset)$/;"	f	file:
iostat_lock	fs/f2fs/f2fs.h	/^	spinlock_t iostat_lock;$/;"	m	struct:f2fs_sb_info
iostat_type	fs/f2fs/f2fs.h	/^enum iostat_type {$/;"	g
ipu_policy	fs/f2fs/f2fs.h	/^	unsigned int ipu_policy;	\/* in-place-update policy *\/$/;"	m	struct:f2fs_sm_info
iroot	fs/f2fs/gc.h	/^	struct radix_tree_root iroot;$/;"	m	struct:gc_inode_list	typeref:struct:gc_inode_list::radix_tree_root
is_alive	fs/f2fs/gc.c	/^static bool is_alive(struct f2fs_sb_info *sbi, struct f2fs_summary *sum,$/;"	f	file:
is_cold_data	fs/f2fs/node.h	/^static inline int is_cold_data(struct page *page)$/;"	f
is_cold_node	fs/f2fs/node.h	407;"	d
is_dent_dnode	fs/f2fs/node.h	409;"	d
is_dot_dotdot	fs/f2fs/f2fs.h	/^static inline bool is_dot_dotdot(const struct qstr *str)$/;"	f
is_extension_exist	fs/f2fs/namei.c	/^static int is_extension_exist(const unsigned char *s, const char *sub)$/;"	f	file:
is_file	fs/f2fs/f2fs.h	/^static inline int is_file(struct inode *inode, int type)$/;"	f
is_fsync_dnode	fs/f2fs/node.h	408;"	d
is_idle	fs/f2fs/f2fs.h	/^static inline bool is_idle(struct f2fs_sb_info *sbi)$/;"	f
is_inline_node	fs/f2fs/node.h	/^static inline int is_inline_node(struct page *page)$/;"	f
is_inode_flag_set	fs/f2fs/f2fs.h	/^static inline int is_inode_flag_set(struct inode *inode, int flag)$/;"	f
is_meta	fs/f2fs/f2fs.h	/^	bool is_meta;		\/* indicate borrow meta inode mapping or not *\/$/;"	m	struct:f2fs_io_info
is_next_segment_free	fs/f2fs/segment.c	/^static int is_next_segment_free(struct f2fs_sb_info *sbi, int type)$/;"	f	file:
is_node	fs/f2fs/node.h	/^static inline int is_node(struct page *page, int type)$/;"	f
is_read_io	fs/f2fs/f2fs.h	1047;"	d
is_recoverable_dnode	fs/f2fs/node.h	/^static inline bool is_recoverable_dnode(struct page *page)$/;"	f
is_sbi_flag_set	fs/f2fs/f2fs.h	/^static inline bool is_sbi_flag_set(struct f2fs_sb_info *sbi, unsigned int type)$/;"	f
is_set_ckpt_flags	fs/f2fs/f2fs.h	/^static inline bool is_set_ckpt_flags(struct f2fs_sb_info *sbi, unsigned int f)$/;"	f
is_valid_blkaddr	fs/f2fs/f2fs.h	/^static inline bool is_valid_blkaddr(block_t blkaddr)$/;"	f
issing_discard	fs/f2fs/f2fs.h	/^	atomic_t issing_discard;		\/* # of issing discard *\/$/;"	m	struct:discard_cmd_control
issing_flush	fs/f2fs/f2fs.h	/^	atomic_t issing_flush;			\/* # of issing flushes *\/$/;"	m	struct:flush_cmd_control
issue_discard_thread	fs/f2fs/segment.c	/^static int issue_discard_thread(void *data)$/;"	f	file:
issue_flush_thread	fs/f2fs/segment.c	/^static int issue_flush_thread(void *data)$/;"	f	file:
issue_list	fs/f2fs/f2fs.h	/^	struct llist_head issue_list;		\/* list for command issue *\/$/;"	m	struct:flush_cmd_control	typeref:struct:flush_cmd_control::llist_head
issued_discard	fs/f2fs/f2fs.h	/^	atomic_t issued_discard;		\/* # of issued discard *\/$/;"	m	struct:discard_cmd_control
issued_flush	fs/f2fs/f2fs.h	/^	atomic_t issued_flush;			\/* # of issued flushes *\/$/;"	m	struct:flush_cmd_control
journal	fs/f2fs/segment.h	/^	struct f2fs_journal *journal;		\/* cached journal info *\/$/;"	m	struct:curseg_info	typeref:struct:curseg_info::f2fs_journal
journal	include/linux/f2fs_fs.h	/^	struct f2fs_journal journal;$/;"	m	struct:f2fs_summary_block	typeref:struct:f2fs_summary_block::f2fs_journal
journal_rwsem	fs/f2fs/segment.h	/^	struct rw_semaphore journal_rwsem;	\/* protect journal area *\/$/;"	m	struct:curseg_info	typeref:struct:curseg_info::rw_semaphore
kbytes_written	fs/f2fs/f2fs.h	/^	u64 kbytes_written;$/;"	m	struct:f2fs_sb_info
kbytes_written	include/linux/f2fs_fs.h	/^	__le64 kbytes_written;$/;"	m	struct:f2fs_extra_info
kill_f2fs_super	fs/f2fs/super.c	/^static void kill_f2fs_super(struct super_block *sb)$/;"	f	file:
largest	fs/f2fs/f2fs.h	/^	struct extent_info largest;	\/* largested extent info *\/$/;"	m	struct:extent_tree	typeref:struct:extent_tree::extent_info
last_block_in_bio	fs/f2fs/f2fs.h	/^	sector_t last_block_in_bio;	\/* last block number *\/$/;"	m	struct:f2fs_bio_info
last_dentry	fs/f2fs/f2fs.h	/^	block_t last_dentry;	\/* block address locating the last dentry *\/$/;"	m	struct:fsync_inode_entry
last_disk_size	fs/f2fs/f2fs.h	/^	loff_t	last_disk_size;		\/* lastly written file size *\/$/;"	m	struct:f2fs_inode_info
last_fsync_dnode	fs/f2fs/node.c	/^static struct page *last_fsync_dnode(struct f2fs_sb_info *sbi, nid_t ino)$/;"	f	file:
last_io	fs/f2fs/trace.c	/^static struct last_io_info last_io;$/;"	v	typeref:struct:last_io_info	file:
last_io_info	fs/f2fs/trace.h	/^struct last_io_info {$/;"	s
last_time	fs/f2fs/f2fs.h	/^	unsigned long last_time[MAX_TIME];	\/* to store time in jiffies *\/$/;"	m	struct:f2fs_sb_info
last_valid_block_count	fs/f2fs/f2fs.h	/^	block_t last_valid_block_count;		\/* for recovery *\/$/;"	m	struct:f2fs_sb_info
last_victim	fs/f2fs/segment.h	/^	unsigned int last_victim[MAX_GC_POLICY]; \/* last victim segment # *\/$/;"	m	struct:sit_info
len	fs/f2fs/f2fs.h	/^			block_t len;	\/* length *\/$/;"	m	struct:discard_cmd::__anon14::__anon15
len	fs/f2fs/f2fs.h	/^			unsigned int len;$/;"	m	struct:extent_node::__anon18::__anon19
len	fs/f2fs/f2fs.h	/^	block_t len;			\/* length *\/$/;"	m	struct:discard_info
len	fs/f2fs/f2fs.h	/^	u64 len;		\/* size to move *\/$/;"	m	struct:f2fs_move_range
len	fs/f2fs/f2fs.h	/^	u64 len;$/;"	m	struct:f2fs_defragment
len	fs/f2fs/f2fs.h	/^	u64 len;$/;"	m	struct:f2fs_gc_range
len	fs/f2fs/f2fs.h	/^	unsigned int len;		\/* length of the entry *\/$/;"	m	struct:rb_entry
len	fs/f2fs/f2fs.h	/^	unsigned int len;		\/* length of the extent *\/$/;"	m	struct:extent_info
len	fs/f2fs/trace.h	/^	block_t len;$/;"	m	struct:last_io_info
len	include/linux/f2fs_fs.h	/^	__le32 len;		\/* lengh of the extent *\/$/;"	m	struct:f2fs_extent
lifetime_write_kbytes	fs/f2fs/sysfs.c	/^F2FS_GENERAL_RO_ATTR(lifetime_write_kbytes);$/;"	v
lifetime_write_kbytes_show	fs/f2fs/sysfs.c	/^static ssize_t lifetime_write_kbytes_show(struct f2fs_attr *a,$/;"	f	file:
limit_free_user_blocks	fs/f2fs/gc.h	/^static inline block_t limit_free_user_blocks(struct f2fs_sb_info *sbi)$/;"	f
limit_invalid_user_blocks	fs/f2fs/gc.h	/^static inline block_t limit_invalid_user_blocks(struct f2fs_sb_info *sbi)$/;"	f
limit_reserve_root	fs/f2fs/super.c	/^static inline void limit_reserve_root(struct f2fs_sb_info *sbi)$/;"	f	file:
list	fs/f2fs/f2fs.h	/^	struct list_head list;		\/* command list *\/$/;"	m	struct:discard_cmd	typeref:struct:discard_cmd::list_head
list	fs/f2fs/f2fs.h	/^	struct list_head list;		\/* list head *\/$/;"	m	struct:ino_entry	typeref:struct:ino_entry::list_head
list	fs/f2fs/f2fs.h	/^	struct list_head list;		\/* node in global extent list of sbi *\/$/;"	m	struct:extent_node	typeref:struct:extent_node::list_head
list	fs/f2fs/f2fs.h	/^	struct list_head list;		\/* serialize IOs *\/$/;"	m	struct:f2fs_io_info	typeref:struct:f2fs_io_info::list_head
list	fs/f2fs/f2fs.h	/^	struct list_head list;		\/* to be used by sbi->zombie_list *\/$/;"	m	struct:extent_tree	typeref:struct:extent_tree::list_head
list	fs/f2fs/f2fs.h	/^	struct list_head list;	\/* list head *\/$/;"	m	struct:discard_entry	typeref:struct:discard_entry::list_head
list	fs/f2fs/f2fs.h	/^	struct list_head list;	\/* list head *\/$/;"	m	struct:fsync_inode_entry	typeref:struct:fsync_inode_entry::list_head
list	fs/f2fs/f2fs.h	/^	struct list_head list;	\/* list head *\/$/;"	m	struct:inode_entry	typeref:struct:inode_entry::list_head
list	fs/f2fs/f2fs.h	/^	struct list_head list;$/;"	m	struct:atomic_file	typeref:struct:atomic_file::list_head
list	fs/f2fs/node.h	/^	struct list_head list;	\/* for clean or dirty nat list *\/$/;"	m	struct:nat_entry	typeref:struct:nat_entry::list_head
list	fs/f2fs/node.h	/^	struct list_head list;	\/* for free node id list *\/$/;"	m	struct:free_nid	typeref:struct:free_nid::list_head
list	fs/f2fs/segment.h	/^	struct list_head list;$/;"	m	struct:inmem_pages	typeref:struct:inmem_pages::list_head
list_for_each_xattr	fs/f2fs/xattr.h	71;"	d
llnode	fs/f2fs/f2fs.h	/^	struct llist_node llnode;$/;"	m	struct:flush_cmd	typeref:struct:flush_cmd::llist_node
load_free_nid_bitmap	fs/f2fs/node.c	/^static inline void load_free_nid_bitmap(struct f2fs_sb_info *sbi)$/;"	f	file:
locate_dirty_segment	fs/f2fs/segment.c	/^static void locate_dirty_segment(struct f2fs_sb_info *sbi, unsigned int segno)$/;"	f	file:
lock	fs/f2fs/f2fs.h	/^	rwlock_t lock;			\/* protect extent info rb-tree *\/$/;"	m	struct:extent_tree
log_blocks_per_blkz	fs/f2fs/f2fs.h	/^	unsigned int log_blocks_per_blkz;	\/* log2 F2FS blocks per zone *\/$/;"	m	struct:f2fs_sb_info
log_blocks_per_seg	fs/f2fs/f2fs.h	/^	unsigned int log_blocks_per_seg;	\/* log2 blocks per segment *\/$/;"	m	struct:f2fs_sb_info
log_blocks_per_seg	include/linux/f2fs_fs.h	/^	__le32 log_blocks_per_seg;	\/* log2 # of blocks per segment *\/$/;"	m	struct:f2fs_super_block
log_blocksize	fs/f2fs/f2fs.h	/^	unsigned int log_blocksize;		\/* log2 block size *\/$/;"	m	struct:f2fs_sb_info
log_blocksize	include/linux/f2fs_fs.h	/^	__le32 log_blocksize;		\/* log2 block size in bytes *\/$/;"	m	struct:f2fs_super_block
log_sectors_per_block	fs/f2fs/f2fs.h	/^	unsigned int log_sectors_per_block;	\/* log2 sectors per block *\/$/;"	m	struct:f2fs_sb_info
log_sectors_per_block	include/linux/f2fs_fs.h	/^	__le32 log_sectors_per_block;	\/* log2 # of sectors per block *\/$/;"	m	struct:f2fs_super_block
log_sectorsize	include/linux/f2fs_fs.h	/^	__le32 log_sectorsize;		\/* log2 sector size in bytes *\/$/;"	m	struct:f2fs_super_block
logical_to_blk	fs/f2fs/data.c	/^static inline sector_t logical_to_blk(struct inode *inode, loff_t offset)$/;"	f	file:
lookup_all_xattrs	fs/f2fs/xattr.c	/^static int lookup_all_xattrs(struct inode *inode, struct page *ipage,$/;"	f	file:
lstart	fs/f2fs/f2fs.h	/^			block_t lstart;	\/* logical start address *\/$/;"	m	struct:discard_cmd::__anon14::__anon15
lstart	fs/f2fs/f2fs.h	/^	block_t lstart;			\/* logical start address *\/$/;"	m	struct:discard_info
m_flags	fs/f2fs/f2fs.h	/^	unsigned int m_flags;$/;"	m	struct:f2fs_map_blocks
m_lblk	fs/f2fs/f2fs.h	/^	block_t m_lblk;$/;"	m	struct:f2fs_map_blocks
m_len	fs/f2fs/f2fs.h	/^	unsigned int m_len;$/;"	m	struct:f2fs_map_blocks
m_next_extent	fs/f2fs/f2fs.h	/^	pgoff_t *m_next_extent;		\/* point to next possible extent *\/$/;"	m	struct:f2fs_map_blocks
m_next_pgofs	fs/f2fs/f2fs.h	/^	pgoff_t *m_next_pgofs;		\/* point next possible non-hole pgofs *\/$/;"	m	struct:f2fs_map_blocks
m_pblk	fs/f2fs/f2fs.h	/^	block_t m_pblk;$/;"	m	struct:f2fs_map_blocks
m_seg_type	fs/f2fs/f2fs.h	/^	int m_seg_type;$/;"	m	struct:f2fs_map_blocks
magic	include/linux/f2fs_fs.h	/^	__le32 magic;			\/* Magic Number *\/$/;"	m	struct:f2fs_super_block
main_area_sections	fs/f2fs/f2fs.h	/^	int main_area_segs, main_area_sections, main_area_zones;$/;"	m	struct:f2fs_stat_info
main_area_segs	fs/f2fs/f2fs.h	/^	int main_area_segs, main_area_sections, main_area_zones;$/;"	m	struct:f2fs_stat_info
main_area_zones	fs/f2fs/f2fs.h	/^	int main_area_segs, main_area_sections, main_area_zones;$/;"	m	struct:f2fs_stat_info
main_blkaddr	fs/f2fs/f2fs.h	/^	block_t main_blkaddr;		\/* start block address of main area *\/$/;"	m	struct:f2fs_sm_info
main_blkaddr	include/linux/f2fs_fs.h	/^	__le32 main_blkaddr;		\/* start block address of main area *\/$/;"	m	struct:f2fs_super_block
main_segments	fs/f2fs/f2fs.h	/^	unsigned int main_segments;	\/* # of segments in main area *\/$/;"	m	struct:f2fs_sm_info
major	fs/f2fs/trace.h	/^	int major, minor;$/;"	m	struct:last_io_info
major_ver	include/linux/f2fs_fs.h	/^	__le16 major_ver;		\/* Major Version *\/$/;"	m	struct:f2fs_super_block
make_dentry_ptr_block	fs/f2fs/f2fs.h	/^static inline void make_dentry_ptr_block(struct inode *inode,$/;"	f
make_dentry_ptr_inline	fs/f2fs/f2fs.h	/^static inline void make_dentry_ptr_inline(struct inode *inode,$/;"	f
make_empty_dir	fs/f2fs/dir.c	/^static int make_empty_dir(struct inode *inode,$/;"	f	file:
master_nid	fs/f2fs/f2fs.h	/^	nid_t master_nid;		\/* nid of mufit node *\/$/;"	m	struct:atomic_file_set
master_node	include/linux/f2fs_fs.h	/^struct master_node {$/;"	s
max	fs/f2fs/f2fs.h	/^	int max;$/;"	m	struct:f2fs_dentry_ptr
max_aw_cnt	fs/f2fs/f2fs.h	/^	atomic_t max_aw_cnt;			\/* max # of atomic writes *\/$/;"	m	struct:f2fs_sb_info
max_aw_cnt	fs/f2fs/f2fs.h	/^	int aw_cnt, max_aw_cnt, vw_cnt, max_vw_cnt;$/;"	m	struct:f2fs_stat_info
max_discards	fs/f2fs/f2fs.h	/^	unsigned int max_discards;		\/* max. discards to be issued *\/$/;"	m	struct:discard_cmd_control
max_file_blocks	fs/f2fs/f2fs.h	/^	loff_t max_file_blocks;			\/* max block index of file *\/$/;"	m	struct:f2fs_sb_info
max_file_blocks	fs/f2fs/super.c	/^static loff_t max_file_blocks(void)$/;"	f	file:
max_interval	fs/f2fs/f2fs.h	/^	unsigned int max_interval;	\/* used for candidates not exist *\/$/;"	m	struct:discard_policy
max_level	fs/f2fs/f2fs.h	/^	char max_level;			\/* level of current page located *\/$/;"	m	struct:dnode_of_data
max_mtime	fs/f2fs/segment.h	/^	unsigned long long max_mtime;		\/* max. modification time *\/$/;"	m	struct:sit_info
max_nid	fs/f2fs/f2fs.h	/^	nid_t max_nid;			\/* maximum possible node ids *\/$/;"	m	struct:f2fs_nm_info
max_orphans	fs/f2fs/f2fs.h	/^	unsigned int max_orphans;		\/* max orphan inodes *\/$/;"	m	struct:f2fs_sb_info
max_requests	fs/f2fs/f2fs.h	/^	unsigned int max_requests;	\/* # of discards issued per round *\/$/;"	m	struct:discard_policy
max_search	fs/f2fs/segment.h	/^	unsigned int max_search;	\/* maximum # of segments to search *\/$/;"	m	struct:victim_sel_policy
max_sleep_time	fs/f2fs/gc.h	/^	unsigned int max_sleep_time;$/;"	m	struct:f2fs_gc_kthread
max_victim_search	fs/f2fs/f2fs.h	/^	unsigned int max_victim_search;$/;"	m	struct:f2fs_sb_info
max_vw_cnt	fs/f2fs/f2fs.h	/^	atomic_t max_vw_cnt;			\/* max # of volatile writes *\/$/;"	m	struct:f2fs_sb_info
max_vw_cnt	fs/f2fs/f2fs.h	/^	int aw_cnt, max_aw_cnt, vw_cnt, max_vw_cnt;$/;"	m	struct:f2fs_stat_info
mem_type	fs/f2fs/node.h	/^enum mem_type {$/;"	g
meta_ino	include/linux/f2fs_fs.h	/^	__le32 meta_ino;		\/* meta inode number *\/$/;"	m	struct:f2fs_super_block
meta_ino_num	fs/f2fs/f2fs.h	/^	unsigned int meta_ino_num;		\/* meta inode number*\/$/;"	m	struct:f2fs_sb_info
meta_inode	fs/f2fs/f2fs.h	/^	struct inode *meta_inode;		\/* cache meta blocks *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::inode
meta_pages	fs/f2fs/f2fs.h	/^	int dirty_count, node_pages, meta_pages;$/;"	m	struct:f2fs_stat_info
mid_interval	fs/f2fs/f2fs.h	/^	unsigned int mid_interval;	\/* used for device busy *\/$/;"	m	struct:discard_policy
min_cost	fs/f2fs/segment.h	/^	unsigned int min_cost;		\/* minimum cost *\/$/;"	m	struct:victim_sel_policy
min_fsync_blocks	fs/f2fs/f2fs.h	/^	unsigned int min_fsync_blocks;	\/* threshold for fsync *\/$/;"	m	struct:f2fs_sm_info
min_hot_blocks	fs/f2fs/f2fs.h	/^	unsigned int min_hot_blocks;	\/* threshold for hot block allocation *\/$/;"	m	struct:f2fs_sm_info
min_interval	fs/f2fs/f2fs.h	/^	unsigned int min_interval;	\/* used for candidates exist *\/$/;"	m	struct:discard_policy
min_ipu_util	fs/f2fs/f2fs.h	/^	unsigned int min_ipu_util;	\/* in-place-update threshold *\/$/;"	m	struct:f2fs_sm_info
min_mtime	fs/f2fs/segment.h	/^	unsigned long long min_mtime;		\/* min. modification time *\/$/;"	m	struct:sit_info
min_segno	fs/f2fs/segment.h	/^	unsigned int min_segno;		\/* segment # having min. cost *\/$/;"	m	struct:victim_sel_policy
min_sleep_time	fs/f2fs/gc.h	/^	unsigned int min_sleep_time;$/;"	m	struct:f2fs_gc_kthread
min_ssr_sections	fs/f2fs/f2fs.h	/^	unsigned int min_ssr_sections;	\/* threshold to trigger SSR allocation *\/$/;"	m	struct:f2fs_sm_info
minor	fs/f2fs/trace.h	/^	int major, minor;$/;"	m	struct:last_io_info
minor_ver	include/linux/f2fs_fs.h	/^	__le16 minor_ver;		\/* Minor Version *\/$/;"	m	struct:f2fs_super_block
mn	fs/f2fs/f2fs.h	/^	struct mufit_node mn;		\/* data of mufit node *\/$/;"	m	struct:atomic_file_set	typeref:struct:atomic_file_set::mufit_node
mn	include/linux/f2fs_fs.h	/^		struct master_node mn;$/;"	m	union:f2fs_node::__anon33	typeref:struct:f2fs_node::__anon33::master_node
mount_opt	fs/f2fs/f2fs.h	/^	struct f2fs_mount_info mount_opt;	\/* mount options *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::f2fs_mount_info
mounted_time	fs/f2fs/segment.h	/^	unsigned long long mounted_time;	\/* mount time *\/$/;"	m	struct:sit_info
move_data_block	fs/f2fs/gc.c	/^static void move_data_block(struct inode *inode, block_t bidx,$/;"	f	file:
move_data_page	fs/f2fs/gc.c	/^static void move_data_page(struct inode *inode, block_t bidx, int gc_type,$/;"	f	file:
mtime	fs/f2fs/segment.h	/^	unsigned long long mtime;	\/* modification time of the segment *\/$/;"	m	struct:seg_entry
mtime	include/linux/f2fs_fs.h	/^	__le64 mtime;				\/* segment age for cleaning *\/$/;"	m	struct:f2fs_sit_entry
n_nats	include/linux/f2fs_fs.h	/^		__le16 n_nats;$/;"	m	union:f2fs_journal::__anon37
n_sits	include/linux/f2fs_fs.h	/^		__le16 n_sits;$/;"	m	union:f2fs_journal::__anon37
name_len	include/linux/f2fs_fs.h	/^	__le16 name_len;	\/* lengh of file name *\/$/;"	m	struct:f2fs_dir_entry
nat_area_segs	fs/f2fs/f2fs.h	/^	int all_area_segs, sit_area_segs, nat_area_segs, ssa_area_segs;$/;"	m	struct:f2fs_stat_info
nat_bitmap	fs/f2fs/f2fs.h	/^	char *nat_bitmap;		\/* NAT bitmap pointer *\/$/;"	m	struct:f2fs_nm_info
nat_bitmap_mir	fs/f2fs/f2fs.h	/^	char *nat_bitmap_mir;		\/* NAT bitmap mirror *\/$/;"	m	struct:f2fs_nm_info
nat_bits	fs/f2fs/f2fs.h	/^	unsigned char *nat_bits;	\/* NAT bits blocks *\/$/;"	m	struct:f2fs_nm_info
nat_bits_blocks	fs/f2fs/f2fs.h	/^	unsigned int nat_bits_blocks;	\/* # of nat bits blocks *\/$/;"	m	struct:f2fs_nm_info
nat_blkaddr	fs/f2fs/f2fs.h	/^	block_t nat_blkaddr;		\/* base disk address of NAT *\/$/;"	m	struct:f2fs_nm_info
nat_blkaddr	include/linux/f2fs_fs.h	/^	__le32 nat_blkaddr;		\/* start block address of NAT *\/$/;"	m	struct:f2fs_super_block
nat_block_bitmap	fs/f2fs/f2fs.h	/^	unsigned char *nat_block_bitmap;$/;"	m	struct:f2fs_nm_info
nat_blocks	fs/f2fs/f2fs.h	/^	unsigned int nat_blocks;	\/* # of nat blocks *\/$/;"	m	struct:f2fs_nm_info
nat_cnt	fs/f2fs/f2fs.h	/^	unsigned int nat_cnt;		\/* the # of cached nat entries *\/$/;"	m	struct:f2fs_nm_info
nat_entries	fs/f2fs/f2fs.h	/^	struct list_head nat_entries;	\/* cached nat entry list (clean) *\/$/;"	m	struct:f2fs_nm_info	typeref:struct:f2fs_nm_info::list_head
nat_entry	fs/f2fs/node.h	/^struct nat_entry {$/;"	s
nat_entry_set	fs/f2fs/node.h	/^struct nat_entry_set {$/;"	s
nat_entry_set_slab	fs/f2fs/node.c	/^static struct kmem_cache *nat_entry_set_slab;$/;"	v	typeref:struct:kmem_cache	file:
nat_entry_slab	fs/f2fs/node.c	/^static struct kmem_cache *nat_entry_slab;$/;"	v	typeref:struct:kmem_cache	file:
nat_get_blkaddr	fs/f2fs/node.h	68;"	d
nat_get_ino	fs/f2fs/node.h	70;"	d
nat_get_nid	fs/f2fs/node.h	66;"	d
nat_get_version	fs/f2fs/node.h	72;"	d
nat_in_journal	fs/f2fs/f2fs.h	325;"	d
nat_j	include/linux/f2fs_fs.h	/^		struct nat_journal nat_j;$/;"	m	union:f2fs_journal::__anon38	typeref:struct:f2fs_journal::__anon38::nat_journal
nat_journal	include/linux/f2fs_fs.h	/^struct nat_journal {$/;"	s
nat_journal_entry	include/linux/f2fs_fs.h	/^struct nat_journal_entry {$/;"	s
nat_reset_flag	fs/f2fs/node.h	/^static inline void nat_reset_flag(struct nat_entry *ne)$/;"	f
nat_root	fs/f2fs/f2fs.h	/^	struct radix_tree_root nat_root;\/* root of the nat entry cache *\/$/;"	m	struct:f2fs_nm_info	typeref:struct:f2fs_nm_info::radix_tree_root
nat_set_blkaddr	fs/f2fs/node.h	69;"	d
nat_set_ino	fs/f2fs/node.h	71;"	d
nat_set_nid	fs/f2fs/node.h	67;"	d
nat_set_root	fs/f2fs/f2fs.h	/^	struct radix_tree_root nat_set_root;\/* root of the nat set cache *\/$/;"	m	struct:f2fs_nm_info	typeref:struct:f2fs_nm_info::radix_tree_root
nat_set_version	fs/f2fs/node.h	73;"	d
nat_tree_lock	fs/f2fs/f2fs.h	/^	struct rw_semaphore nat_tree_lock;	\/* protect nat_tree_lock *\/$/;"	m	struct:f2fs_nm_info	typeref:struct:f2fs_nm_info::rw_semaphore
nat_ver_bitmap_bytesize	include/linux/f2fs_fs.h	/^	__le32 nat_ver_bitmap_bytesize; \/* Default value 256 *\/$/;"	m	struct:f2fs_checkpoint
nats	fs/f2fs/f2fs.h	/^	int nats, dirty_nats, sits, dirty_sits;$/;"	m	struct:f2fs_stat_info
nats_in_cursum	fs/f2fs/f2fs.h	322;"	d
ndirty_all	fs/f2fs/f2fs.h	/^	unsigned int ndirty_dirs, ndirty_files, nquota_files, ndirty_all;$/;"	m	struct:f2fs_stat_info
ndirty_data	fs/f2fs/f2fs.h	/^	int ndirty_data, ndirty_qdata;$/;"	m	struct:f2fs_stat_info
ndirty_dent	fs/f2fs/f2fs.h	/^	int ndirty_node, ndirty_dent, ndirty_meta, ndirty_imeta;$/;"	m	struct:f2fs_stat_info
ndirty_dirs	fs/f2fs/f2fs.h	/^	unsigned int ndirty_dirs, ndirty_files, nquota_files, ndirty_all;$/;"	m	struct:f2fs_stat_info
ndirty_files	fs/f2fs/f2fs.h	/^	unsigned int ndirty_dirs, ndirty_files, nquota_files, ndirty_all;$/;"	m	struct:f2fs_stat_info
ndirty_imeta	fs/f2fs/f2fs.h	/^	int ndirty_node, ndirty_dent, ndirty_meta, ndirty_imeta;$/;"	m	struct:f2fs_stat_info
ndirty_inode	fs/f2fs/f2fs.h	/^	unsigned int ndirty_inode[NR_INODE_TYPE];	\/* # of dirty inodes *\/$/;"	m	struct:f2fs_sb_info
ndirty_meta	fs/f2fs/f2fs.h	/^	int ndirty_node, ndirty_dent, ndirty_meta, ndirty_imeta;$/;"	m	struct:f2fs_stat_info
ndirty_node	fs/f2fs/f2fs.h	/^	int ndirty_node, ndirty_dent, ndirty_meta, ndirty_imeta;$/;"	m	struct:f2fs_stat_info
ndirty_qdata	fs/f2fs/f2fs.h	/^	int ndirty_data, ndirty_qdata;$/;"	m	struct:f2fs_stat_info
ne	include/linux/f2fs_fs.h	/^	struct f2fs_nat_entry ne;$/;"	m	struct:nat_journal_entry	typeref:struct:nat_journal_entry::f2fs_nat_entry
need_do_checkpoint	fs/f2fs/file.c	/^static inline enum cp_reason_type need_do_checkpoint(struct inode *inode)$/;"	f	file:
need_inode_page_update	fs/f2fs/file.c	/^static bool need_inode_page_update(struct f2fs_sb_info *sbi, nid_t ino)$/;"	f	file:
need_inplace_update	fs/f2fs/data.c	/^static inline bool need_inplace_update(struct f2fs_io_info *fio)$/;"	f	file:
need_lock	fs/f2fs/f2fs.h	/^	int need_lock;		\/* indicate we need to lock cp_rwsem *\/$/;"	m	struct:f2fs_io_info
need_lock_type	fs/f2fs/f2fs.h	/^enum need_lock_type {$/;"	g
new_blkaddr	fs/f2fs/f2fs.h	/^	block_t new_blkaddr;	\/* new block address to be written *\/$/;"	m	struct:f2fs_io_info
new_curseg	fs/f2fs/segment.c	/^static void new_curseg(struct f2fs_sb_info *sbi, int type, bool new_sec)$/;"	f	file:
next_blkaddr	include/linux/f2fs_fs.h	/^	__le32 next_blkaddr;	\/* next node page block address *\/$/;"	m	struct:node_footer
next_blkaddr_of_node	fs/f2fs/node.h	/^static inline block_t next_blkaddr_of_node(struct page *node_page)$/;"	f
next_blkoff	fs/f2fs/segment.h	/^	unsigned short next_blkoff;		\/* next block offset to write *\/$/;"	m	struct:curseg_info
next_free_nid	fs/f2fs/node.h	/^static inline void next_free_nid(struct f2fs_sb_info *sbi, nid_t *nid)$/;"	f
next_free_nid	include/linux/f2fs_fs.h	/^	__le32 next_free_nid;		\/* Next free node number *\/$/;"	m	struct:f2fs_checkpoint
next_nat_addr	fs/f2fs/node.h	/^static inline pgoff_t next_nat_addr(struct f2fs_sb_info *sbi,$/;"	f
next_scan_nid	fs/f2fs/f2fs.h	/^	nid_t next_scan_nid;		\/* the next nid to be scanned *\/$/;"	m	struct:f2fs_nm_info
next_segno	fs/f2fs/segment.h	/^	unsigned int next_segno;		\/* preallocated segment *\/$/;"	m	struct:curseg_info
next_sit_addr	fs/f2fs/segment.h	/^static inline pgoff_t next_sit_addr(struct f2fs_sb_info *sbi,$/;"	f
ni	fs/f2fs/node.h	/^	struct node_info ni;	\/* in-memory node information *\/$/;"	m	struct:nat_entry	typeref:struct:nat_entry::node_info
nid	fs/f2fs/f2fs.h	/^	nid_t nid;			\/* node id of the direct node block *\/$/;"	m	struct:dnode_of_data
nid	fs/f2fs/node.h	/^	nid_t nid;		\/* node id *\/$/;"	m	struct:free_nid
nid	fs/f2fs/node.h	/^	nid_t nid;		\/* node id *\/$/;"	m	struct:node_info
nid	include/linux/f2fs_fs.h	/^	__le32 nid;		\/* node id *\/$/;"	m	struct:node_footer
nid	include/linux/f2fs_fs.h	/^	__le32 nid;		\/* parent node id *\/$/;"	m	struct:f2fs_summary
nid	include/linux/f2fs_fs.h	/^	__le32 nid;$/;"	m	struct:nat_journal_entry
nid	include/linux/f2fs_fs.h	/^	__le32 nid[NIDS_PER_BLOCK];	\/* array of data block address *\/$/;"	m	struct:indirect_node
nid_cnt	fs/f2fs/f2fs.h	/^	unsigned int nid_cnt[MAX_NID_STATE];	\/* the number of free node id *\/$/;"	m	struct:f2fs_nm_info
nid_in_journal	fs/f2fs/f2fs.h	326;"	d
nid_list_lock	fs/f2fs/f2fs.h	/^	spinlock_t nid_list_lock;	\/* protect nid lists ops *\/$/;"	m	struct:f2fs_nm_info
nid_of_node	fs/f2fs/node.h	/^static inline nid_t nid_of_node(struct page *node_page)$/;"	f
nid_state	fs/f2fs/f2fs.h	/^enum nid_state {$/;"	g
nid_t	fs/f2fs/f2fs.h	/^typedef u32 nid_t;$/;"	t
nm_info	fs/f2fs/f2fs.h	/^	struct f2fs_nm_info *nm_info;		\/* node manager *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::f2fs_nm_info
no_gc_sleep_time	fs/f2fs/gc.h	/^	unsigned int no_gc_sleep_time;$/;"	m	struct:f2fs_gc_kthread
node_blks	fs/f2fs/f2fs.h	/^	int tot_blks, data_blks, node_blks;$/;"	m	struct:f2fs_stat_info
node_change	fs/f2fs/f2fs.h	/^	struct rw_semaphore node_change;	\/* locking node change *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::rw_semaphore
node_changed	fs/f2fs/f2fs.h	/^	bool node_changed;		\/* is node block changed *\/$/;"	m	struct:dnode_of_data
node_cnt	fs/f2fs/f2fs.h	/^	atomic_t node_cnt;		\/* # of extent node in rb-tree*\/$/;"	m	struct:extent_tree
node_footer	include/linux/f2fs_fs.h	/^struct node_footer {$/;"	s
node_info	fs/f2fs/node.h	/^struct node_info {$/;"	s
node_info_from_raw_nat	fs/f2fs/node.h	/^static inline void node_info_from_raw_nat(struct node_info *ni,$/;"	f
node_ino	include/linux/f2fs_fs.h	/^	__le32 node_ino;		\/* node inode number *\/$/;"	m	struct:f2fs_super_block
node_ino_num	fs/f2fs/f2fs.h	/^	unsigned int node_ino_num;		\/* node inode number*\/$/;"	m	struct:f2fs_sb_info
node_inode	fs/f2fs/f2fs.h	/^	struct inode *node_inode;		\/* cache node blocks *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::inode
node_page	fs/f2fs/f2fs.h	/^	struct page *node_page;		\/* cached direct node page *\/$/;"	m	struct:dnode_of_data	typeref:struct:dnode_of_data::page
node_pages	fs/f2fs/f2fs.h	/^	int dirty_count, node_pages, meta_pages;$/;"	m	struct:f2fs_stat_info
node_segs	fs/f2fs/f2fs.h	/^	int tot_segs, node_segs, data_segs, free_segs, free_secs;$/;"	m	struct:f2fs_stat_info
node_write	fs/f2fs/f2fs.h	/^	struct rw_semaphore node_write;		\/* locking node writes *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::rw_semaphore
nquota_files	fs/f2fs/f2fs.h	/^	unsigned int ndirty_dirs, ndirty_files, nquota_files, ndirty_all;$/;"	m	struct:f2fs_stat_info
nquota_files	fs/f2fs/f2fs.h	/^	unsigned int nquota_files;		\/* # of quota sysfile *\/$/;"	m	struct:f2fs_sb_info
nr_bitmap	fs/f2fs/f2fs.h	/^	int nr_bitmap;$/;"	m	struct:f2fs_dentry_ptr
nr_blkz	fs/f2fs/f2fs.h	/^	unsigned int nr_blkz;			\/* Total number of zones *\/$/;"	m	struct:f2fs_dev_info
nr_dirty	fs/f2fs/segment.h	/^	int nr_dirty[NR_DIRTY_TYPE];		\/* # of dirty segments *\/$/;"	m	struct:dirty_seglist_info
nr_discard_cmd	fs/f2fs/f2fs.h	/^	int nr_discard_cmd;$/;"	m	struct:f2fs_stat_info
nr_discarded	fs/f2fs/f2fs.h	/^	int nr_discarding, nr_discarded;$/;"	m	struct:f2fs_stat_info
nr_discarding	fs/f2fs/f2fs.h	/^	int nr_discarding, nr_discarded;$/;"	m	struct:f2fs_stat_info
nr_discards	fs/f2fs/f2fs.h	/^	unsigned int nr_discards;		\/* # of discards in the list *\/$/;"	m	struct:discard_cmd_control
nr_flushed	fs/f2fs/f2fs.h	/^	int nr_flushing, nr_flushed, flush_list_empty;$/;"	m	struct:f2fs_stat_info
nr_flushing	fs/f2fs/f2fs.h	/^	int nr_flushing, nr_flushed, flush_list_empty;$/;"	m	struct:f2fs_stat_info
nr_pages	fs/f2fs/f2fs.h	/^	atomic_t nr_pages[NR_COUNT_TYPE];$/;"	m	struct:f2fs_sb_info
nr_pages_to_skip	fs/f2fs/segment.h	/^static inline int nr_pages_to_skip(struct f2fs_sb_info *sbi, int type)$/;"	f
nr_pages_to_write	fs/f2fs/segment.h	/^static inline long nr_pages_to_write(struct f2fs_sb_info *sbi, int type,$/;"	f
nr_wb_cp_data	fs/f2fs/f2fs.h	/^	int bg_gc, nr_wb_cp_data, nr_wb_data;$/;"	m	struct:f2fs_stat_info
nr_wb_data	fs/f2fs/f2fs.h	/^	int bg_gc, nr_wb_cp_data, nr_wb_data;$/;"	m	struct:f2fs_stat_info
offset	fs/f2fs/segment.h	/^	unsigned int offset;		\/* last scanned bitmap offset *\/$/;"	m	struct:victim_sel_policy
offset	fs/f2fs/sysfs.c	/^	int offset;$/;"	m	struct:f2fs_attr	file:
offset_in_addr	fs/f2fs/f2fs.h	/^static inline int offset_in_addr(struct f2fs_inode *i)$/;"	f
ofs	fs/f2fs/f2fs.h	/^	unsigned int ofs;		\/* start offset of the entry *\/$/;"	m	struct:rb_entry
ofs_in_node	fs/f2fs/f2fs.h	/^	unsigned int ofs_in_node;	\/* data offset in the node page *\/$/;"	m	struct:dnode_of_data
ofs_in_node	include/linux/f2fs_fs.h	/^			__le16 ofs_in_node;	\/* block index in parent node *\/$/;"	m	struct:f2fs_summary::__anon34::__anon35
ofs_of_node	fs/f2fs/node.h	/^static inline unsigned int ofs_of_node(struct page *node_page)$/;"	f
ofs_unit	fs/f2fs/segment.h	/^	unsigned int ofs_unit;		\/* bitmap search unit *\/$/;"	m	struct:victim_sel_policy
old_addr	fs/f2fs/segment.h	/^	block_t old_addr;		\/* for revoking when fail to commit *\/$/;"	m	struct:inmem_pages
old_blkaddr	fs/f2fs/f2fs.h	/^	block_t old_blkaddr;	\/* old block address before Cow *\/$/;"	m	struct:f2fs_io_info
on_f2fs_build_free_nids	fs/f2fs/node.c	26;"	d	file:
op	fs/f2fs/f2fs.h	/^	int op;			\/* contains REQ_OP_ *\/$/;"	m	struct:f2fs_io_info
op_flags	fs/f2fs/f2fs.h	/^	int op_flags;		\/* req_flag_bits *\/$/;"	m	struct:f2fs_io_info
opt	fs/f2fs/f2fs.h	/^	unsigned int opt;$/;"	m	struct:f2fs_mount_info
orphans	fs/f2fs/f2fs.h	/^	int inline_xattr, inline_inode, inline_dir, append, update, orphans;$/;"	m	struct:f2fs_stat_info
overp_segs	fs/f2fs/f2fs.h	/^	int rsvd_segs, overp_segs;$/;"	m	struct:f2fs_stat_info
overprov_segment_count	include/linux/f2fs_fs.h	/^	__le32 overprov_segment_count;	\/* # of overprovision segments *\/$/;"	m	struct:f2fs_checkpoint
overprovision_segments	fs/f2fs/segment.h	/^static inline int overprovision_segments(struct f2fs_sb_info *sbi)$/;"	f
ovp_segments	fs/f2fs/f2fs.h	/^	unsigned int ovp_segments;	\/* # of overprovision segments *\/$/;"	m	struct:f2fs_sm_info
padding	fs/f2fs/segment.h	/^	unsigned int padding:6;		\/* padding *\/$/;"	m	struct:seg_entry
page	fs/f2fs/f2fs.h	/^	struct page *page;	\/* page to be written *\/$/;"	m	struct:f2fs_io_info	typeref:struct:f2fs_io_info::page
page	fs/f2fs/segment.h	/^	struct page *page;$/;"	m	struct:inmem_pages	typeref:struct:inmem_pages::page
page_mem	fs/f2fs/f2fs.h	/^	unsigned long long base_mem, cache_mem, page_mem;$/;"	m	struct:f2fs_stat_info
page_type	fs/f2fs/f2fs.h	/^enum page_type {$/;"	g
parse_options	fs/f2fs/super.c	/^static int parse_options(struct super_block *sb, char *options)$/;"	f	file:
path	fs/f2fs/f2fs.h	/^	char path[MAX_PATH_LEN];$/;"	m	struct:f2fs_dev_info
path	include/linux/f2fs_fs.h	/^	__u8 path[MAX_PATH_LEN];$/;"	m	struct:f2fs_device
pend_list	fs/f2fs/f2fs.h	/^	struct list_head pend_list[MAX_PLIST_NUM];\/* store pending entries *\/$/;"	m	struct:discard_cmd_control	typeref:struct:discard_cmd_control::list_head
pid	fs/f2fs/trace.h	/^	pid_t pid;$/;"	m	struct:last_io_info
pids_lock	fs/f2fs/trace.c	/^static struct mutex pids_lock;$/;"	v	typeref:struct:mutex	file:
plist_idx	fs/f2fs/f2fs.h	241;"	d
pos_in	fs/f2fs/f2fs.h	/^	u64 pos_in;		\/* start position in src_fd *\/$/;"	m	struct:f2fs_move_range
pos_out	fs/f2fs/f2fs.h	/^	u64 pos_out;		\/* start position in dst_fd *\/$/;"	m	struct:f2fs_move_range
prefree_count	fs/f2fs/f2fs.h	/^	int prefree_count, call_count, cp_count, bg_cp_count;$/;"	m	struct:f2fs_stat_info
prefree_segments	fs/f2fs/segment.h	/^static inline unsigned int prefree_segments(struct f2fs_sb_info *sbi)$/;"	f
prepare_write_begin	fs/f2fs/data.c	/^static int prepare_write_begin(struct f2fs_sb_info *sbi,$/;"	f	file:
punch_hole	fs/f2fs/file.c	/^static int punch_hole(struct inode *inode, loff_t offset, loff_t len)$/;"	f	file:
put_gc_inode	fs/f2fs/gc.c	/^static void put_gc_inode(struct gc_inode_list *gc_list)$/;"	f	file:
qf_ino	include/linux/f2fs_fs.h	/^	__le32 qf_ino[F2FS_MAX_QUOTAS];	\/* quota inode numbers *\/$/;"	m	struct:f2fs_super_block
quotatypes	fs/f2fs/super.c	/^static const char * const quotatypes[] = INITQFNAMES;$/;"	v	file:
ra_nid_pages	fs/f2fs/f2fs.h	/^	unsigned int ra_nid_pages;	\/* # of nid pages to be readaheaded *\/$/;"	m	struct:f2fs_nm_info
ram_thresh	fs/f2fs/f2fs.h	/^	unsigned int ram_thresh;	\/* control the memory footprint *\/$/;"	m	struct:f2fs_nm_info
raw_nat_from_node_info	fs/f2fs/node.h	/^static inline void raw_nat_from_node_info(struct f2fs_nat_entry *raw_ne,$/;"	f
raw_super	fs/f2fs/f2fs.h	/^	struct f2fs_super_block *raw_super;	\/* raw super block pointer *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::f2fs_super_block
rb_entry	fs/f2fs/f2fs.h	/^struct rb_entry {$/;"	s
rb_node	fs/f2fs/f2fs.h	/^	struct rb_node rb_node;		\/* rb node located in rb-tree *\/$/;"	m	struct:discard_cmd	typeref:struct:discard_cmd::rb_node
rb_node	fs/f2fs/f2fs.h	/^	struct rb_node rb_node;		\/* rb node located in rb-tree *\/$/;"	m	struct:rb_entry	typeref:struct:rb_entry::rb_node
rb_node	fs/f2fs/f2fs.h	/^	struct rb_node rb_node;$/;"	m	struct:extent_node	typeref:struct:extent_node::rb_node
read_all_xattrs	fs/f2fs/xattr.c	/^static int read_all_xattrs(struct inode *inode, struct page *ipage,$/;"	f	file:
read_compacted_summaries	fs/f2fs/segment.c	/^static void read_compacted_summaries(struct f2fs_sb_info *sbi)$/;"	f	file:
read_hit_cached	fs/f2fs/f2fs.h	/^	atomic64_t read_hit_cached;		\/* # of hit cached extent node *\/$/;"	m	struct:f2fs_sb_info
read_hit_largest	fs/f2fs/f2fs.h	/^	atomic64_t read_hit_largest;		\/* # of hit largest extent node *\/$/;"	m	struct:f2fs_sb_info
read_hit_rbtree	fs/f2fs/f2fs.h	/^	atomic64_t read_hit_rbtree;		\/* # of hit rbtree extent node *\/$/;"	m	struct:f2fs_sb_info
read_inline_xattr	fs/f2fs/xattr.c	/^static int read_inline_xattr(struct inode *inode, struct page *ipage,$/;"	f	file:
read_node_page	fs/f2fs/node.c	/^static int read_node_page(struct page *page, int op_flags)$/;"	f	file:
read_normal_summaries	fs/f2fs/segment.c	/^static int read_normal_summaries(struct f2fs_sb_info *sbi, int type)$/;"	f	file:
read_raw_super_block	fs/f2fs/super.c	/^static int read_raw_super_block(struct f2fs_sb_info *sbi,$/;"	f	file:
read_xattr_block	fs/f2fs/xattr.c	/^static int read_xattr_block(struct inode *inode, void *txattr_addr)$/;"	f	file:
readdir_ra	fs/f2fs/f2fs.h	/^	int readdir_ra;				\/* readahead inode in readdir *\/$/;"	m	struct:f2fs_sb_info
reason	fs/f2fs/f2fs.h	/^	int reason;$/;"	m	struct:cp_control
rec_prefree_segments	fs/f2fs/f2fs.h	/^	unsigned int rec_prefree_segments;$/;"	m	struct:f2fs_sm_info
recover_data	fs/f2fs/recovery.c	/^static int recover_data(struct f2fs_sb_info *sbi, struct list_head *inode_list,$/;"	f	file:
recover_dentry	fs/f2fs/recovery.c	/^static int recover_dentry(struct inode *inode, struct page *ipage,$/;"	f	file:
recover_inline_flags	fs/f2fs/recovery.c	/^static void recover_inline_flags(struct inode *inode, struct f2fs_inode *ri)$/;"	f	file:
recover_inode	fs/f2fs/recovery.c	/^static void recover_inode(struct inode *inode, struct page *page)$/;"	f	file:
recover_orphan_inode	fs/f2fs/checkpoint.c	/^static int recover_orphan_inode(struct f2fs_sb_info *sbi, nid_t ino)$/;"	f	file:
ref	fs/f2fs/f2fs.h	/^	unsigned short ref;		\/* reference count *\/$/;"	m	struct:discard_cmd
release_discard_addr	fs/f2fs/segment.c	/^static void release_discard_addr(struct discard_entry *entry)$/;"	f	file:
release_sit_entry_set	fs/f2fs/segment.c	/^static void release_sit_entry_set(struct sit_entry_set *ses)$/;"	f	file:
remove_free_nid	fs/f2fs/node.c	/^static void remove_free_nid(struct f2fs_sb_info *sbi, nid_t nid)$/;"	f	file:
remove_nats_in_journal	fs/f2fs/node.c	/^static void remove_nats_in_journal(struct f2fs_sb_info *sbi)$/;"	f	file:
remove_sits_in_journal	fs/f2fs/segment.c	/^static void remove_sits_in_journal(struct f2fs_sb_info *sbi)$/;"	f	file:
reserved	include/linux/f2fs_fs.h	/^		__u8 reserved[3];$/;"	m	union:f2fs_summary::__anon34
reserved	include/linux/f2fs_fs.h	/^	__le32 reserved;	\/* reserved *\/$/;"	m	struct:f2fs_orphan_block
reserved	include/linux/f2fs_fs.h	/^	__u8 reserved[314];		\/* valid reserved region *\/$/;"	m	struct:f2fs_super_block
reserved	include/linux/f2fs_fs.h	/^	__u8 reserved[EXTRA_INFO_RESERVED];$/;"	m	struct:f2fs_extra_info
reserved	include/linux/f2fs_fs.h	/^	__u8 reserved[NAT_JOURNAL_RESERVED];$/;"	m	struct:nat_journal
reserved	include/linux/f2fs_fs.h	/^	__u8 reserved[SIT_JOURNAL_RESERVED];$/;"	m	struct:sit_journal
reserved	include/linux/f2fs_fs.h	/^	__u8 reserved[SIZE_OF_RESERVED];$/;"	m	struct:f2fs_dentry_block
reserved_blocks	fs/f2fs/f2fs.h	/^	block_t reserved_blocks;		\/* configurable reserved blocks *\/$/;"	m	struct:f2fs_sb_info
reserved_sections	fs/f2fs/segment.h	/^static inline int reserved_sections(struct f2fs_sb_info *sbi)$/;"	f
reserved_segments	fs/f2fs/f2fs.h	/^	unsigned int reserved_segments;	\/* # of reserved segments *\/$/;"	m	struct:f2fs_sm_info
reserved_segments	fs/f2fs/segment.h	/^static inline int reserved_segments(struct f2fs_sb_info *sbi)$/;"	f
reset_curseg	fs/f2fs/segment.c	/^static void reset_curseg(struct f2fs_sb_info *sbi, int type, int modified)$/;"	f	file:
restore_curseg_summaries	fs/f2fs/segment.c	/^static int restore_curseg_summaries(struct f2fs_sb_info *sbi)$/;"	f	file:
ret	fs/f2fs/f2fs.h	/^	int ret;$/;"	m	struct:flush_cmd
retry	fs/f2fs/f2fs.h	/^	bool retry;		\/* need to reallocate block address *\/$/;"	m	struct:f2fs_io_info
root	fs/f2fs/f2fs.h	/^	struct rb_root root;			\/* root of discard rb-tree *\/$/;"	m	struct:discard_cmd_control	typeref:struct:discard_cmd_control::rb_root
root	fs/f2fs/f2fs.h	/^	struct rb_root root;		\/* root of extent info rb-tree *\/$/;"	m	struct:extent_tree	typeref:struct:extent_tree::rb_root
root_ino	include/linux/f2fs_fs.h	/^	__le32 root_ino;		\/* root inode number *\/$/;"	m	struct:f2fs_super_block
root_ino_num	fs/f2fs/f2fs.h	/^	unsigned int root_ino_num;		\/* root inode number*\/$/;"	m	struct:f2fs_sb_info
root_reserved_blocks	fs/f2fs/f2fs.h	/^	block_t root_reserved_blocks;	\/* root reserved blocks *\/$/;"	m	struct:f2fs_mount_info
rsvd_segment_count	include/linux/f2fs_fs.h	/^	__le32 rsvd_segment_count;	\/* # of reserved segments for gc *\/$/;"	m	struct:f2fs_checkpoint
rsvd_segs	fs/f2fs/f2fs.h	/^	int rsvd_segs, overp_segs;$/;"	m	struct:f2fs_stat_info
s_chksum_driver	fs/f2fs/f2fs.h	/^	struct crypto_shash *s_chksum_driver;$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::crypto_shash
s_chksum_seed	fs/f2fs/f2fs.h	/^	__u32 s_chksum_seed;$/;"	m	struct:f2fs_sb_info
s_flag	fs/f2fs/f2fs.h	/^	unsigned long s_flag;				\/* flags for sbi *\/$/;"	m	struct:f2fs_sb_info
s_jquota_fmt	fs/f2fs/f2fs.h	/^	int s_jquota_fmt;			\/* Format of quota to use *\/$/;"	m	struct:f2fs_mount_info
s_kobj	fs/f2fs/f2fs.h	/^	struct kobject s_kobj;$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::kobject
s_kobj_unregister	fs/f2fs/f2fs.h	/^	struct completion s_kobj_unregister;$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::completion
s_list	fs/f2fs/f2fs.h	/^	struct list_head s_list;$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::list_head
s_ndevs	fs/f2fs/f2fs.h	/^	int s_ndevs;				\/* number of devices *\/$/;"	m	struct:f2fs_sb_info
s_next_generation	fs/f2fs/f2fs.h	/^	u32 s_next_generation;			\/* for NFS support *\/$/;"	m	struct:f2fs_sb_info
s_ops	fs/f2fs/segment.h	/^	const struct segment_allocation *s_ops;$/;"	m	struct:sit_info	typeref:struct:sit_info::segment_allocation
s_proc	fs/f2fs/f2fs.h	/^	struct proc_dir_entry *s_proc;		\/* proc entry *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::proc_dir_entry
s_qf_names	fs/f2fs/f2fs.h	/^	char *s_qf_names[MAXQUOTAS];$/;"	m	struct:f2fs_mount_info
s_resgid	fs/f2fs/f2fs.h	/^	kgid_t s_resgid;		\/* reserved blocks for gid *\/$/;"	m	struct:f2fs_mount_info
s_resuid	fs/f2fs/f2fs.h	/^	kuid_t s_resuid;		\/* reserved blocks for uid *\/$/;"	m	struct:f2fs_mount_info
sanity_check_area_boundary	fs/f2fs/super.c	/^static inline bool sanity_check_area_boundary(struct f2fs_sb_info *sbi,$/;"	f	file:
sanity_check_inode	fs/f2fs/inode.c	/^static bool sanity_check_inode(struct inode *inode)$/;"	f	file:
sanity_check_raw_super	fs/f2fs/super.c	/^static int sanity_check_raw_super(struct f2fs_sb_info *sbi,$/;"	f	file:
sb	fs/f2fs/f2fs.h	/^	struct super_block *sb;			\/* pointer to VFS super block *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::super_block
sb_lock	fs/f2fs/f2fs.h	/^	struct rw_semaphore sb_lock;		\/* lock for raw super block *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::rw_semaphore
sbi	fs/f2fs/f2fs.h	/^	struct f2fs_sb_info *sbi;	\/* f2fs superblock *\/$/;"	m	struct:f2fs_bio_info	typeref:struct:f2fs_bio_info::f2fs_sb_info
sbi	fs/f2fs/f2fs.h	/^	struct f2fs_sb_info *sbi;	\/* f2fs_sb_info pointer *\/$/;"	m	struct:f2fs_io_info	typeref:struct:f2fs_io_info::f2fs_sb_info
sbi	fs/f2fs/f2fs.h	/^	struct f2fs_sb_info *sbi;$/;"	m	struct:f2fs_stat_info	typeref:struct:f2fs_stat_info::f2fs_sb_info
scan_curseg_cache	fs/f2fs/node.c	/^static void scan_curseg_cache(struct f2fs_sb_info *sbi)$/;"	f	file:
scan_free_nid_bits	fs/f2fs/node.c	/^static void scan_free_nid_bits(struct f2fs_sb_info *sbi)$/;"	f	file:
scan_nat_page	fs/f2fs/node.c	/^static void scan_nat_page(struct f2fs_sb_info *sbi,$/;"	f	file:
se	include/linux/f2fs_fs.h	/^	struct f2fs_sit_entry se;$/;"	m	struct:sit_journal_entry	typeref:struct:sit_journal_entry::f2fs_sit_entry
sec_entries	fs/f2fs/segment.h	/^	struct sec_entry *sec_entries;		\/* SIT section-level cache *\/$/;"	m	struct:sit_info	typeref:struct:sit_info::sec_entry
sec_entry	fs/f2fs/segment.h	/^struct sec_entry {$/;"	s
sec_usage_check	fs/f2fs/segment.h	/^static inline bool sec_usage_check(struct f2fs_sb_info *sbi, unsigned int secno)$/;"	f
secs_per_zone	fs/f2fs/f2fs.h	/^	unsigned int secs_per_zone;		\/* sections per zone *\/$/;"	m	struct:f2fs_sb_info
secs_per_zone	include/linux/f2fs_fs.h	/^	__le32 secs_per_zone;		\/* # of sections per zone *\/$/;"	m	struct:f2fs_super_block
section_count	include/linux/f2fs_fs.h	/^	__le32 section_count;		\/* total # of sections *\/$/;"	m	struct:f2fs_super_block
sectors_written_start	fs/f2fs/f2fs.h	/^	u64 sectors_written_start;$/;"	m	struct:f2fs_sb_info
seg0_blkaddr	fs/f2fs/f2fs.h	/^	block_t seg0_blkaddr;		\/* block address of 0'th segment *\/$/;"	m	struct:f2fs_sm_info
seg_entry	fs/f2fs/segment.h	/^struct seg_entry {$/;"	s
seg_info_from_raw_sit	fs/f2fs/segment.h	/^static inline void seg_info_from_raw_sit(struct seg_entry *se,$/;"	f
seg_info_to_raw_sit	fs/f2fs/segment.h	/^static inline void seg_info_to_raw_sit(struct seg_entry *se,$/;"	f
seg_info_to_sit_page	fs/f2fs/segment.h	/^static inline void seg_info_to_sit_page(struct f2fs_sb_info *sbi,$/;"	f
seglist_lock	fs/f2fs/segment.h	/^	struct mutex seglist_lock;		\/* lock for segment bitmaps *\/$/;"	m	struct:dirty_seglist_info	typeref:struct:dirty_seglist_info::mutex
segmap_lock	fs/f2fs/segment.h	/^	spinlock_t segmap_lock;		\/* free segmap lock *\/$/;"	m	struct:free_segmap_info
segment0_blkaddr	include/linux/f2fs_fs.h	/^	__le32 segment0_blkaddr;	\/* start block address of segment 0 *\/$/;"	m	struct:f2fs_super_block
segment_allocation	fs/f2fs/segment.h	/^struct segment_allocation {$/;"	s
segment_bits_seq_show	fs/f2fs/sysfs.c	/^static int segment_bits_seq_show(struct seq_file *seq, void *offset)$/;"	f	file:
segment_count	fs/f2fs/f2fs.h	/^	unsigned int segment_count;	\/* total # of segments *\/$/;"	m	struct:f2fs_sm_info
segment_count	fs/f2fs/f2fs.h	/^	unsigned int segment_count[2];		\/* # of allocated segments *\/$/;"	m	struct:f2fs_sb_info
segment_count	fs/f2fs/f2fs.h	/^	unsigned int segment_count[2];$/;"	m	struct:f2fs_stat_info
segment_count	include/linux/f2fs_fs.h	/^	__le32 segment_count;		\/* total # of segments *\/$/;"	m	struct:f2fs_super_block
segment_count_ckpt	include/linux/f2fs_fs.h	/^	__le32 segment_count_ckpt;	\/* # of segments for checkpoint *\/$/;"	m	struct:f2fs_super_block
segment_count_main	include/linux/f2fs_fs.h	/^	__le32 segment_count_main;	\/* # of segments for main area *\/$/;"	m	struct:f2fs_super_block
segment_count_nat	include/linux/f2fs_fs.h	/^	__le32 segment_count_nat;	\/* # of segments for NAT *\/$/;"	m	struct:f2fs_super_block
segment_count_sit	include/linux/f2fs_fs.h	/^	__le32 segment_count_sit;	\/* # of segments for SIT *\/$/;"	m	struct:f2fs_super_block
segment_count_ssa	include/linux/f2fs_fs.h	/^	__le32 segment_count_ssa;	\/* # of segments for SSA *\/$/;"	m	struct:f2fs_super_block
segment_info_seq_show	fs/f2fs/sysfs.c	/^static int segment_info_seq_show(struct seq_file *seq, void *offset)$/;"	f	file:
segments	fs/f2fs/f2fs.h	/^	u32 segments;		\/* # of segments to flush *\/$/;"	m	struct:f2fs_flush_device
segno	fs/f2fs/segment.h	/^	unsigned int segno;			\/* current segment number *\/$/;"	m	struct:curseg_info
segno	include/linux/f2fs_fs.h	/^	__le32 segno;$/;"	m	struct:sit_journal_entry
segno_in_journal	fs/f2fs/f2fs.h	328;"	d
segs_per_sec	fs/f2fs/f2fs.h	/^	unsigned int segs_per_sec;		\/* segments per section *\/$/;"	m	struct:f2fs_sb_info
segs_per_sec	include/linux/f2fs_fs.h	/^	__le32 segs_per_sec;		\/* # of segments per section *\/$/;"	m	struct:f2fs_super_block
select_gc_type	fs/f2fs/gc.c	/^static int select_gc_type(struct f2fs_sb_info *sbi, int gc_type)$/;"	f	file:
select_policy	fs/f2fs/gc.c	/^static void select_policy(struct f2fs_sb_info *sbi, int gc_type,$/;"	f	file:
sentries	fs/f2fs/segment.h	/^	struct seg_entry *sentries;		\/* SIT segment-level cache *\/$/;"	m	struct:sit_info	typeref:struct:sit_info::seg_entry
sentry_lock	fs/f2fs/segment.h	/^	struct rw_semaphore sentry_lock;	\/* to protect SIT cache *\/$/;"	m	struct:sit_info	typeref:struct:sit_info::rw_semaphore
sents_per_block	fs/f2fs/segment.h	/^	unsigned int sents_per_block;		\/* # of SIT entries per block *\/$/;"	m	struct:sit_info
set	fs/f2fs/node.h	/^	nid_t set;			\/* set number*\/$/;"	m	struct:nat_entry_set
set_acl_inode	fs/f2fs/f2fs.h	/^static inline void set_acl_inode(struct inode *inode, umode_t mode)$/;"	f
set_ckpt_flags	fs/f2fs/f2fs.h	/^static inline void set_ckpt_flags(struct f2fs_sb_info *sbi, unsigned int f)$/;"	f
set_cold_data	fs/f2fs/node.h	/^static inline void set_cold_data(struct page *page)$/;"	f
set_cold_node	fs/f2fs/node.h	/^static inline void set_cold_node(struct page *page, bool is_dir)$/;"	f
set_de_type	fs/f2fs/dir.c	/^static void set_de_type(struct f2fs_dir_entry *de, umode_t mode)$/;"	f	file:
set_dentry_mark	fs/f2fs/node.h	448;"	d
set_extent_info	fs/f2fs/f2fs.h	/^static inline void set_extent_info(struct extent_info *ei, unsigned int fofs,$/;"	f
set_file	fs/f2fs/f2fs.h	/^static inline void set_file(struct inode *inode, int type)$/;"	f
set_file_temperature	fs/f2fs/namei.c	/^static inline void set_file_temperature(struct f2fs_sb_info *sbi, struct inode *inode,$/;"	f	file:
set_fsync_mark	fs/f2fs/node.h	449;"	d
set_inline_node	fs/f2fs/node.h	/^static inline void set_inline_node(struct page *page)$/;"	f
set_inode_flag	fs/f2fs/f2fs.h	/^static inline void set_inode_flag(struct inode *inode, int flag)$/;"	f
set_list	fs/f2fs/node.h	/^	struct list_head set_list;	\/* link with other nat sets *\/$/;"	m	struct:nat_entry_set	typeref:struct:nat_entry_set::list_head
set_list	fs/f2fs/segment.h	/^	struct list_head set_list;	\/* link with all sit sets *\/$/;"	m	struct:sit_entry_set	typeref:struct:sit_entry_set::list_head
set_mark	fs/f2fs/node.h	/^static inline void set_mark(struct page *page, int mark, int type)$/;"	f
set_nat_flag	fs/f2fs/node.h	/^static inline void set_nat_flag(struct nat_entry *ne,$/;"	f
set_new_dnode	fs/f2fs/f2fs.h	/^static inline void set_new_dnode(struct dnode_of_data *dn, struct inode *inode,$/;"	f
set_nid	fs/f2fs/node.h	/^static inline int set_nid(struct page *p, int off, nid_t nid, bool i)$/;"	f
set_node_addr	fs/f2fs/node.c	/^static void set_node_addr(struct f2fs_sb_info *sbi, struct node_info *ni,$/;"	f	file:
set_opt	fs/f2fs/f2fs.h	103;"	d
set_opt_mode	fs/f2fs/f2fs.h	/^static inline void set_opt_mode(struct f2fs_sb_info *sbi, unsigned int mt)$/;"	f
set_prefree_as_free_segments	fs/f2fs/segment.c	/^static void set_prefree_as_free_segments(struct f2fs_sb_info *sbi)$/;"	f	file:
set_raw_extent	fs/f2fs/f2fs.h	/^static inline void set_raw_extent(struct extent_info *ext,$/;"	f
set_raw_inline	fs/f2fs/f2fs.h	/^static inline void set_raw_inline(struct inode *inode, struct f2fs_inode *ri)$/;"	f
set_sbi_flag	fs/f2fs/f2fs.h	/^static inline void set_sbi_flag(struct f2fs_sb_info *sbi, unsigned int type)$/;"	f
set_summary	fs/f2fs/segment.h	/^static inline void set_summary(struct f2fs_summary *sum, nid_t nid,$/;"	f
set_to_next_nat	fs/f2fs/node.h	/^static inline void set_to_next_nat(struct f2fs_nm_info *nm_i, nid_t start_nid)$/;"	f
set_to_next_sit	fs/f2fs/segment.h	/^static inline void set_to_next_sit(struct sit_info *sit_i, unsigned int start)$/;"	f
show	fs/f2fs/sysfs.c	/^	ssize_t (*show)(struct f2fs_attr *, struct f2fs_sb_info *, char *);$/;"	m	struct:f2fs_attr	file:
shrinker_run_no	fs/f2fs/f2fs.h	/^	unsigned int shrinker_run_no;$/;"	m	struct:f2fs_sb_info
shrinker_run_no	fs/f2fs/shrinker.c	/^static unsigned int shrinker_run_no;$/;"	v	file:
sit_area_segs	fs/f2fs/f2fs.h	/^	int all_area_segs, sit_area_segs, nat_area_segs, ssa_area_segs;$/;"	m	struct:f2fs_stat_info
sit_base_addr	fs/f2fs/segment.h	/^	block_t sit_base_addr;		\/* start block address of SIT area *\/$/;"	m	struct:sit_info
sit_bitmap	fs/f2fs/segment.h	/^	char *sit_bitmap;		\/* SIT bitmap pointer *\/$/;"	m	struct:sit_info
sit_bitmap_mir	fs/f2fs/segment.h	/^	char *sit_bitmap_mir;		\/* SIT bitmap mirror *\/$/;"	m	struct:sit_info
sit_blkaddr	include/linux/f2fs_fs.h	/^	__le32 sit_blkaddr;		\/* start block address of SIT *\/$/;"	m	struct:f2fs_super_block
sit_blocks	fs/f2fs/segment.h	/^	block_t sit_blocks;		\/* # of blocks used by SIT area *\/$/;"	m	struct:sit_info
sit_entry_set	fs/f2fs/f2fs.h	/^	struct list_head sit_entry_set;	\/* sit entry set list *\/$/;"	m	struct:f2fs_sm_info	typeref:struct:f2fs_sm_info::list_head
sit_entry_set	fs/f2fs/segment.h	/^struct sit_entry_set {$/;"	s
sit_entry_set_slab	fs/f2fs/segment.c	/^static struct kmem_cache *sit_entry_set_slab;$/;"	v	typeref:struct:kmem_cache	file:
sit_in_journal	fs/f2fs/f2fs.h	327;"	d
sit_info	fs/f2fs/f2fs.h	/^	struct sit_info *sit_info;		\/* whole segment information *\/$/;"	m	struct:f2fs_sm_info	typeref:struct:f2fs_sm_info::sit_info
sit_info	fs/f2fs/segment.h	/^struct sit_info {$/;"	s
sit_j	include/linux/f2fs_fs.h	/^		struct sit_journal sit_j;$/;"	m	union:f2fs_journal::__anon38	typeref:struct:f2fs_journal::__anon38::sit_journal
sit_journal	include/linux/f2fs_fs.h	/^struct sit_journal {$/;"	s
sit_journal_entry	include/linux/f2fs_fs.h	/^struct sit_journal_entry {$/;"	s
sit_nat_version_bitmap	include/linux/f2fs_fs.h	/^	unsigned char sit_nat_version_bitmap[1];$/;"	m	struct:f2fs_checkpoint
sit_ver_bitmap_bytesize	include/linux/f2fs_fs.h	/^	__le32 sit_ver_bitmap_bytesize;	\/* Default value 64 *\/$/;"	m	struct:f2fs_checkpoint
sits	fs/f2fs/f2fs.h	/^	int nats, dirty_nats, sits, dirty_sits;$/;"	m	struct:f2fs_stat_info
sits_in_cursum	fs/f2fs/f2fs.h	323;"	d
skipped_atomic_files	fs/f2fs/f2fs.h	/^	unsigned long long skipped_atomic_files[2];	\/* FG_GC and BG_GC *\/$/;"	m	struct:f2fs_sb_info
skipped_atomic_files	fs/f2fs/f2fs.h	/^	unsigned long long skipped_atomic_files[2];$/;"	m	struct:f2fs_stat_info
sm_info	fs/f2fs/f2fs.h	/^	struct f2fs_sm_info *sm_info;		\/* segment manager *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::f2fs_sm_info
ssa_area_segs	fs/f2fs/f2fs.h	/^	int all_area_segs, sit_area_segs, nat_area_segs, ssa_area_segs;$/;"	m	struct:f2fs_stat_info
ssa_blkaddr	fs/f2fs/f2fs.h	/^	block_t ssa_blkaddr;		\/* start block address of SSA area *\/$/;"	m	struct:f2fs_sm_info
ssa_blkaddr	include/linux/f2fs_fs.h	/^	__le32 ssa_blkaddr;		\/* start block address of SSA *\/$/;"	m	struct:f2fs_super_block
start	fs/f2fs/f2fs.h	/^			block_t start;	\/* actual start address in dev *\/$/;"	m	struct:discard_cmd::__anon14::__anon15
start	fs/f2fs/f2fs.h	/^	block_t start;			\/* actual start address in dev *\/$/;"	m	struct:discard_info
start	fs/f2fs/f2fs.h	/^	u64 start;$/;"	m	struct:f2fs_defragment
start	fs/f2fs/f2fs.h	/^	u64 start;$/;"	m	struct:f2fs_gc_range
start_blk	fs/f2fs/f2fs.h	/^	block_t start_blk;$/;"	m	struct:f2fs_dev_info
start_blkaddr	fs/f2fs/f2fs.h	/^	block_t start_blkaddr;	\/* start blockaddr of current segment *\/$/;"	m	struct:discard_entry
start_segno	fs/f2fs/segment.h	/^	unsigned int start_segno;	\/* start segment number logically *\/$/;"	m	struct:free_segmap_info
start_segno	fs/f2fs/segment.h	/^	unsigned int start_segno;	\/* start segno of sits in set *\/$/;"	m	struct:sit_entry_set
start_sum_block	fs/f2fs/segment.h	/^static inline block_t start_sum_block(struct f2fs_sb_info *sbi)$/;"	f
stat_dec_atomic_write	fs/f2fs/f2fs.h	3127;"	d
stat_dec_atomic_write	fs/f2fs/f2fs.h	3201;"	d
stat_dec_dirty_inode	fs/f2fs/f2fs.h	3084;"	d
stat_dec_dirty_inode	fs/f2fs/f2fs.h	3189;"	d
stat_dec_inline_dir	fs/f2fs/f2fs.h	3114;"	d
stat_dec_inline_dir	fs/f2fs/f2fs.h	3199;"	d
stat_dec_inline_inode	fs/f2fs/f2fs.h	3104;"	d
stat_dec_inline_inode	fs/f2fs/f2fs.h	3197;"	d
stat_dec_inline_xattr	fs/f2fs/f2fs.h	3094;"	d
stat_dec_inline_xattr	fs/f2fs/f2fs.h	3195;"	d
stat_dec_volatile_write	fs/f2fs/f2fs.h	3138;"	d
stat_dec_volatile_write	fs/f2fs/f2fs.h	3204;"	d
stat_fops	fs/f2fs/debug.c	/^static const struct file_operations stat_fops = {$/;"	v	typeref:struct:file_operations	file:
stat_inc_atomic_write	fs/f2fs/f2fs.h	3125;"	d
stat_inc_atomic_write	fs/f2fs/f2fs.h	3200;"	d
stat_inc_bg_cp_count	fs/f2fs/f2fs.h	3080;"	d
stat_inc_bg_cp_count	fs/f2fs/f2fs.h	3185;"	d
stat_inc_bggc_count	fs/f2fs/f2fs.h	3082;"	d
stat_inc_bggc_count	fs/f2fs/f2fs.h	3187;"	d
stat_inc_block_count	fs/f2fs/f2fs.h	3121;"	d
stat_inc_block_count	fs/f2fs/f2fs.h	3207;"	d
stat_inc_cached_node_hit	fs/f2fs/f2fs.h	3088;"	d
stat_inc_cached_node_hit	fs/f2fs/f2fs.h	3193;"	d
stat_inc_call_count	fs/f2fs/f2fs.h	3081;"	d
stat_inc_call_count	fs/f2fs/f2fs.h	3186;"	d
stat_inc_cp_count	fs/f2fs/f2fs.h	3079;"	d
stat_inc_cp_count	fs/f2fs/f2fs.h	3184;"	d
stat_inc_data_blk_count	fs/f2fs/f2fs.h	3163;"	d
stat_inc_data_blk_count	fs/f2fs/f2fs.h	3211;"	d
stat_inc_dirty_inode	fs/f2fs/f2fs.h	3083;"	d
stat_inc_dirty_inode	fs/f2fs/f2fs.h	3188;"	d
stat_inc_inline_dir	fs/f2fs/f2fs.h	3109;"	d
stat_inc_inline_dir	fs/f2fs/f2fs.h	3198;"	d
stat_inc_inline_inode	fs/f2fs/f2fs.h	3099;"	d
stat_inc_inline_inode	fs/f2fs/f2fs.h	3196;"	d
stat_inc_inline_xattr	fs/f2fs/f2fs.h	3089;"	d
stat_inc_inline_xattr	fs/f2fs/f2fs.h	3194;"	d
stat_inc_inplace_blocks	fs/f2fs/f2fs.h	3123;"	d
stat_inc_inplace_blocks	fs/f2fs/f2fs.h	3208;"	d
stat_inc_largest_node_hit	fs/f2fs/f2fs.h	3087;"	d
stat_inc_largest_node_hit	fs/f2fs/f2fs.h	3192;"	d
stat_inc_node_blk_count	fs/f2fs/f2fs.h	3171;"	d
stat_inc_node_blk_count	fs/f2fs/f2fs.h	3212;"	d
stat_inc_rbtree_node_hit	fs/f2fs/f2fs.h	3086;"	d
stat_inc_rbtree_node_hit	fs/f2fs/f2fs.h	3191;"	d
stat_inc_seg_count	fs/f2fs/f2fs.h	3147;"	d
stat_inc_seg_count	fs/f2fs/f2fs.h	3209;"	d
stat_inc_seg_type	fs/f2fs/f2fs.h	3119;"	d
stat_inc_seg_type	fs/f2fs/f2fs.h	3206;"	d
stat_inc_tot_blk_count	fs/f2fs/f2fs.h	3160;"	d
stat_inc_tot_blk_count	fs/f2fs/f2fs.h	3210;"	d
stat_inc_total_hit	fs/f2fs/f2fs.h	3085;"	d
stat_inc_total_hit	fs/f2fs/f2fs.h	3190;"	d
stat_inc_volatile_write	fs/f2fs/f2fs.h	3136;"	d
stat_inc_volatile_write	fs/f2fs/f2fs.h	3203;"	d
stat_info	fs/f2fs/f2fs.h	/^	struct f2fs_stat_info *stat_info;	\/* FS status information *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::f2fs_stat_info
stat_list	fs/f2fs/f2fs.h	/^	struct list_head stat_list;$/;"	m	struct:f2fs_stat_info	typeref:struct:f2fs_stat_info::list_head
stat_lock	fs/f2fs/f2fs.h	/^	spinlock_t stat_lock;			\/* lock for stat operations *\/$/;"	m	struct:f2fs_sb_info
stat_open	fs/f2fs/debug.c	/^static int stat_open(struct inode *inode, struct file *file)$/;"	f	file:
stat_show	fs/f2fs/debug.c	/^static int stat_show(struct seq_file *s, void *v)$/;"	f	file:
stat_update_max_atomic_write	fs/f2fs/f2fs.h	3129;"	d
stat_update_max_atomic_write	fs/f2fs/f2fs.h	3202;"	d
stat_update_max_volatile_write	fs/f2fs/f2fs.h	3140;"	d
stat_update_max_volatile_write	fs/f2fs/f2fs.h	3205;"	d
state	fs/f2fs/f2fs.h	/^	unsigned char state;		\/* state *\/$/;"	m	struct:discard_cmd
state	fs/f2fs/node.h	/^	int state;		\/* in use or not: FREE_NID or PREALLOC_NID *\/$/;"	m	struct:free_nid
store	fs/f2fs/sysfs.c	/^	ssize_t (*store)(struct f2fs_attr *, struct f2fs_sb_info *,$/;"	m	struct:f2fs_attr	file:
str2hashbuf	fs/f2fs/hash.c	/^static void str2hashbuf(const unsigned char *msg, size_t len,$/;"	f	file:
struct_type	fs/f2fs/sysfs.c	/^	int struct_type;$/;"	m	struct:f2fs_attr	file:
submit_flush_wait	fs/f2fs/segment.c	/^static int submit_flush_wait(struct f2fs_sb_info *sbi, nid_t ino)$/;"	f	file:
submitted	fs/f2fs/f2fs.h	/^	bool submitted;		\/* indicate IO submission *\/$/;"	m	struct:f2fs_io_info
sum_blk	fs/f2fs/segment.h	/^	struct f2fs_summary_block *sum_blk;	\/* cached summary block *\/$/;"	m	struct:curseg_info	typeref:struct:curseg_info::f2fs_summary_block
sum_blk_addr	fs/f2fs/segment.h	/^static inline block_t sum_blk_addr(struct f2fs_sb_info *sbi, int base, int type)$/;"	f
summary_footer	include/linux/f2fs_fs.h	/^struct summary_footer {$/;"	s
sync	fs/f2fs/f2fs.h	/^	bool sync;			\/* submit discard with REQ_SYNC flag *\/$/;"	m	struct:discard_policy
sync	fs/f2fs/f2fs.h	/^	u32 sync;$/;"	m	struct:f2fs_gc_range
task	fs/f2fs/f2fs.h	/^	struct task_struct *task;	\/* lookup and create consistency *\/$/;"	m	struct:f2fs_inode_info	typeref:struct:f2fs_inode_info::task_struct
temp	fs/f2fs/f2fs.h	/^	enum temp_type temp;	\/* contains HOT\/WARM\/COLD *\/$/;"	m	struct:f2fs_io_info	typeref:enum:f2fs_io_info::temp_type
temp_type	fs/f2fs/f2fs.h	/^enum temp_type {$/;"	g
test_dummy_encryption	fs/f2fs/f2fs.h	/^	bool test_dummy_encryption;	\/* test dummy encryption *\/$/;"	m	struct:f2fs_mount_info
test_opt	fs/f2fs/f2fs.h	104;"	d
time_to_inject	fs/f2fs/f2fs.h	/^static inline bool time_to_inject(struct f2fs_sb_info *sbi, int type)$/;"	f
tmp_map	fs/f2fs/segment.h	/^	unsigned long *tmp_map;			\/* bitmap for temporal use *\/$/;"	m	struct:sit_info
tot_blks	fs/f2fs/f2fs.h	/^	int tot_blks, data_blks, node_blks;$/;"	m	struct:f2fs_stat_info
tot_segs	fs/f2fs/f2fs.h	/^	int tot_segs, node_segs, data_segs, free_segs, free_secs;$/;"	m	struct:f2fs_stat_info
total_count	fs/f2fs/f2fs.h	/^	int total_count, utilization;$/;"	m	struct:f2fs_stat_info
total_ext	fs/f2fs/f2fs.h	/^	unsigned long long hit_total, total_ext;$/;"	m	struct:f2fs_stat_info
total_ext_node	fs/f2fs/f2fs.h	/^	atomic_t total_ext_node;		\/* extent info count *\/$/;"	m	struct:f2fs_sb_info
total_ext_tree	fs/f2fs/f2fs.h	/^	atomic_t total_ext_tree;		\/* extent tree count *\/$/;"	m	struct:f2fs_sb_info
total_hit_ext	fs/f2fs/f2fs.h	/^	atomic64_t total_hit_ext;		\/* # of lookup extent cache *\/$/;"	m	struct:f2fs_sb_info
total_node_count	fs/f2fs/f2fs.h	/^	unsigned int total_node_count;		\/* total node block count *\/$/;"	m	struct:f2fs_sb_info
total_sections	fs/f2fs/f2fs.h	/^	unsigned int total_sections;		\/* total section count *\/$/;"	m	struct:f2fs_sb_info
total_segments	fs/f2fs/f2fs.h	/^	unsigned int total_segments;$/;"	m	struct:f2fs_dev_info
total_segments	include/linux/f2fs_fs.h	/^	__le32 total_segments;$/;"	m	struct:f2fs_device
total_valid_block_count	fs/f2fs/f2fs.h	/^	block_t total_valid_block_count;	\/* # of valid blocks *\/$/;"	m	struct:f2fs_sb_info
total_valid_inode_count	fs/f2fs/f2fs.h	/^	struct percpu_counter total_valid_inode_count;$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::percpu_counter
total_valid_node_count	fs/f2fs/f2fs.h	/^	unsigned int total_valid_node_count;	\/* valid node block count *\/$/;"	m	struct:f2fs_sb_info
total_zombie_tree	fs/f2fs/f2fs.h	/^	atomic_t total_zombie_tree;		\/* extent zombie tree count *\/$/;"	m	struct:f2fs_sb_info
trigger_ssr_threshold	fs/f2fs/f2fs.h	/^	unsigned int trigger_ssr_threshold;	\/* threshold to trigger ssr *\/$/;"	m	struct:f2fs_sb_info
trim_end	fs/f2fs/f2fs.h	/^	__u64 trim_end;$/;"	m	struct:cp_control
trim_minlen	fs/f2fs/f2fs.h	/^	__u64 trim_minlen;$/;"	m	struct:cp_control
trim_sections	fs/f2fs/f2fs.h	/^	unsigned int trim_sections;		\/* # of sections to trim *\/$/;"	m	struct:f2fs_sm_info
trim_start	fs/f2fs/f2fs.h	/^	__u64 trim_start;$/;"	m	struct:cp_control
truncate_dnode	fs/f2fs/node.c	/^static int truncate_dnode(struct dnode_of_data *dn)$/;"	f	file:
truncate_node	fs/f2fs/node.c	/^static void truncate_node(struct dnode_of_data *dn)$/;"	f	file:
truncate_nodes	fs/f2fs/node.c	/^static int truncate_nodes(struct dnode_of_data *dn, unsigned int nofs,$/;"	f	file:
truncate_partial_data_page	fs/f2fs/file.c	/^static int truncate_partial_data_page(struct inode *inode, u64 from,$/;"	f	file:
truncate_partial_nodes	fs/f2fs/node.c	/^static int truncate_partial_nodes(struct dnode_of_data *dn,$/;"	f	file:
try_to_fix_pino	fs/f2fs/file.c	/^static void try_to_fix_pino(struct inode *inode)$/;"	f	file:
type	fs/f2fs/f2fs.h	/^	enum page_type type;	\/* contains DATA\/NODE\/META\/META_FLUSH *\/$/;"	m	struct:f2fs_io_info	typeref:enum:f2fs_io_info::page_type
type	fs/f2fs/f2fs.h	/^	int type;			\/* type of discard *\/$/;"	m	struct:discard_policy
type	fs/f2fs/segment.h	/^	unsigned int type:6;		\/* segment type like CURSEG_XXX_TYPE *\/$/;"	m	struct:seg_entry
type	fs/f2fs/trace.h	/^	enum file_type type;$/;"	m	struct:last_io_info	typeref:enum:last_io_info::file_type
umount_mutex	fs/f2fs/f2fs.h	/^	struct mutex umount_mutex;$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::mutex
unblock_operations	fs/f2fs/checkpoint.c	/^static void unblock_operations(struct f2fs_sb_info *sbi)$/;"	f	file:
undiscard_blks	fs/f2fs/f2fs.h	/^	unsigned int undiscard_blks;		\/* # of undiscard blocks *\/$/;"	m	struct:discard_cmd_control
undiscard_blks	fs/f2fs/f2fs.h	/^	unsigned int undiscard_blks;$/;"	m	struct:f2fs_stat_info
update	fs/f2fs/f2fs.h	/^	int inline_xattr, inline_inode, inline_dir, append, update, orphans;$/;"	m	struct:f2fs_stat_info
update_ckpt_flags	fs/f2fs/checkpoint.c	/^static void update_ckpt_flags(struct f2fs_sb_info *sbi, struct cp_control *cpc)$/;"	f	file:
update_device_state	fs/f2fs/segment.c	/^static void update_device_state(struct f2fs_io_info *fio)$/;"	f	file:
update_free_nid_bitmap	fs/f2fs/node.c	/^static void update_free_nid_bitmap(struct f2fs_sb_info *sbi, nid_t nid,$/;"	f	file:
update_general_status	fs/f2fs/debug.c	/^static void update_general_status(struct f2fs_sb_info *sbi)$/;"	f	file:
update_mem_info	fs/f2fs/debug.c	/^static void update_mem_info(struct f2fs_sb_info *sbi)$/;"	f	file:
update_nats_in_cursum	fs/f2fs/f2fs.h	/^static inline int update_nats_in_cursum(struct f2fs_journal *journal, int i)$/;"	f
update_sit_entry	fs/f2fs/segment.c	/^static void update_sit_entry(struct f2fs_sb_info *sbi, block_t blkaddr, int del)$/;"	f	file:
update_sit_info	fs/f2fs/debug.c	/^static void update_sit_info(struct f2fs_sb_info *sbi)$/;"	f	file:
update_sits_in_cursum	fs/f2fs/f2fs.h	/^static inline int update_sits_in_cursum(struct f2fs_journal *journal, int i)$/;"	f
urgent_sleep_time	fs/f2fs/gc.h	/^	unsigned int urgent_sleep_time;$/;"	m	struct:f2fs_gc_kthread
user_block_count	fs/f2fs/f2fs.h	/^	block_t user_block_count;		\/* # of user blocks *\/$/;"	m	struct:f2fs_sb_info
user_block_count	include/linux/f2fs_fs.h	/^	__le64 user_block_count;	\/* # of user blocks *\/$/;"	m	struct:f2fs_checkpoint
util_free	fs/f2fs/f2fs.h	/^	int util_free, util_valid, util_invalid;$/;"	m	struct:f2fs_stat_info
util_invalid	fs/f2fs/f2fs.h	/^	int util_free, util_valid, util_invalid;$/;"	m	struct:f2fs_stat_info
util_valid	fs/f2fs/f2fs.h	/^	int util_free, util_valid, util_invalid;$/;"	m	struct:f2fs_stat_info
utilization	fs/f2fs/f2fs.h	/^	int total_count, utilization;$/;"	m	struct:f2fs_stat_info
utilization	fs/f2fs/segment.h	/^static inline int utilization(struct f2fs_sb_info *sbi)$/;"	f
uuid	include/linux/f2fs_fs.h	/^	__u8 uuid[16];			\/* 128-bit uuid for volume *\/$/;"	m	struct:f2fs_super_block
uuid_is_nonzero	fs/f2fs/file.c	/^static bool uuid_is_nonzero(__u8 u[16])$/;"	f	file:
v_ops	fs/f2fs/segment.h	/^	const struct victim_selection *v_ops;	\/* victim selction operation *\/$/;"	m	struct:dirty_seglist_info	typeref:struct:dirty_seglist_info::victim_selection
valid_block_count	include/linux/f2fs_fs.h	/^	__le64 valid_block_count;	\/* # of valid blocks in main area *\/$/;"	m	struct:f2fs_checkpoint
valid_blocks	fs/f2fs/segment.h	/^	unsigned int valid_blocks:10;	\/* # of valid blocks *\/$/;"	m	struct:seg_entry
valid_blocks	fs/f2fs/segment.h	/^	unsigned int valid_blocks;	\/* # of valid blocks in a section *\/$/;"	m	struct:sec_entry
valid_count	fs/f2fs/f2fs.h	/^	unsigned int valid_count, valid_node_count, valid_inode_count, discard_blks;$/;"	m	struct:f2fs_stat_info
valid_inode_count	fs/f2fs/f2fs.h	/^	unsigned int valid_count, valid_node_count, valid_inode_count, discard_blks;$/;"	m	struct:f2fs_stat_info
valid_inode_count	fs/f2fs/f2fs.h	/^static inline s64 valid_inode_count(struct f2fs_sb_info *sbi)$/;"	f
valid_inode_count	include/linux/f2fs_fs.h	/^	__le32 valid_inode_count;	\/* Total number of valid inodes *\/$/;"	m	struct:f2fs_checkpoint
valid_map	include/linux/f2fs_fs.h	/^	__u8 valid_map[SIT_VBLOCK_MAP_SIZE];	\/* bitmap for valid blocks *\/$/;"	m	struct:f2fs_sit_entry
valid_node_count	fs/f2fs/f2fs.h	/^	unsigned int valid_count, valid_node_count, valid_inode_count, discard_blks;$/;"	m	struct:f2fs_stat_info
valid_node_count	fs/f2fs/f2fs.h	/^static inline unsigned int valid_node_count(struct f2fs_sb_info *sbi)$/;"	f
valid_node_count	include/linux/f2fs_fs.h	/^	__le32 valid_node_count;	\/* Total number of valid nodes *\/$/;"	m	struct:f2fs_checkpoint
valid_super_block	fs/f2fs/f2fs.h	/^	int valid_super_block;			\/* valid super block no *\/$/;"	m	struct:f2fs_sb_info
valid_user_blocks	fs/f2fs/f2fs.h	/^static inline block_t valid_user_blocks(struct f2fs_sb_info *sbi)$/;"	f
validate_checkpoint	fs/f2fs/checkpoint.c	/^static struct page *validate_checkpoint(struct f2fs_sb_info *sbi,$/;"	f	file:
vblocks	include/linux/f2fs_fs.h	/^	__le16 vblocks;				\/* reference above *\/$/;"	m	struct:f2fs_sit_entry
ver_after	fs/f2fs/f2fs.h	106;"	d
verify_block_addr	fs/f2fs/segment.h	/^static inline void verify_block_addr(struct f2fs_io_info *fio, block_t blk_addr)$/;"	f
version	fs/f2fs/node.h	/^	unsigned char version;	\/* version of the node *\/$/;"	m	struct:node_info
version	include/linux/f2fs_fs.h	/^			__u8 version;		\/* node version number *\/$/;"	m	struct:f2fs_summary::__anon34::__anon35
version	include/linux/f2fs_fs.h	/^	__u8 version;		\/* latest version of cached nat entry *\/$/;"	m	struct:f2fs_nat_entry
version	include/linux/f2fs_fs.h	/^	__u8 version[VERSION_LEN];	\/* the kernel version *\/$/;"	m	struct:f2fs_super_block
vfs_inode	fs/f2fs/f2fs.h	/^	struct inode vfs_inode;		\/* serve a vfs inode *\/$/;"	m	struct:f2fs_inode_info	typeref:struct:f2fs_inode_info::inode
victim_secmap	fs/f2fs/segment.h	/^	unsigned long *victim_secmap;		\/* background GC victims *\/$/;"	m	struct:dirty_seglist_info
victim_sel_policy	fs/f2fs/segment.h	/^struct victim_sel_policy {$/;"	s
victim_selection	fs/f2fs/segment.h	/^struct victim_selection {$/;"	s
volume_name	include/linux/f2fs_fs.h	/^	__le16 volume_name[MAX_VOLUME_NAME];	\/* volume name *\/$/;"	m	struct:f2fs_super_block
vw_cnt	fs/f2fs/f2fs.h	/^	atomic_t vw_cnt;			\/* # of volatile writes *\/$/;"	m	struct:f2fs_sb_info
vw_cnt	fs/f2fs/f2fs.h	/^	int aw_cnt, max_aw_cnt, vw_cnt, max_vw_cnt;$/;"	m	struct:f2fs_stat_info
wait	fs/f2fs/f2fs.h	/^	struct completion wait;		\/* compleation *\/$/;"	m	struct:discard_cmd	typeref:struct:discard_cmd::completion
wait	fs/f2fs/f2fs.h	/^	struct completion wait;$/;"	m	struct:flush_cmd	typeref:struct:flush_cmd::completion
wait_list	fs/f2fs/f2fs.h	/^	struct list_head wait_list;		\/* store on-flushing entries *\/$/;"	m	struct:discard_cmd_control	typeref:struct:discard_cmd_control::list_head
wait_on_all_pages_writeback	fs/f2fs/checkpoint.c	/^static void wait_on_all_pages_writeback(struct f2fs_sb_info *sbi)$/;"	f	file:
wake_up_discard_thread	fs/f2fs/segment.h	/^static inline void wake_up_discard_thread(struct f2fs_sb_info *sbi, bool force)$/;"	f
wb_sync_req	fs/f2fs/f2fs.h	/^	atomic_t wb_sync_req[META];	\/* count # of WB_SYNC threads *\/$/;"	m	struct:f2fs_sb_info
whint_mode	fs/f2fs/f2fs.h	/^	int whint_mode;$/;"	m	struct:f2fs_mount_info
wio_mutex	fs/f2fs/f2fs.h	/^	struct mutex wio_mutex[NR_PAGE_TYPE - 1][NR_TEMP_TYPE];$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::mutex
work	fs/f2fs/data.c	/^	struct work_struct work;$/;"	m	struct:bio_post_read_ctx	typeref:struct:bio_post_read_ctx::work_struct	file:
write_all_xattrs	fs/f2fs/xattr.c	/^static inline int write_all_xattrs(struct inode *inode, __u32 hsize,$/;"	f	file:
write_compacted_summaries	fs/f2fs/segment.c	/^static void write_compacted_summaries(struct f2fs_sb_info *sbi, block_t blkaddr)$/;"	f	file:
write_current_sum_page	fs/f2fs/segment.c	/^static void write_current_sum_page(struct f2fs_sb_info *sbi,$/;"	f	file:
write_io	fs/f2fs/f2fs.h	/^	struct f2fs_bio_info *write_io[NR_PAGE_TYPE];	\/* for write bios *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::f2fs_bio_info
write_io_dummy	fs/f2fs/f2fs.h	/^	mempool_t *write_io_dummy;		\/* Dummy pages *\/$/;"	m	struct:f2fs_sb_info
write_io_size_bits	fs/f2fs/f2fs.h	/^	int write_io_size_bits;		\/* Write IO size bits *\/$/;"	m	struct:f2fs_mount_info
write_iostat	fs/f2fs/f2fs.h	/^	unsigned long long write_iostat[NR_IO_TYPE];$/;"	m	struct:f2fs_sb_info
write_normal_summaries	fs/f2fs/segment.c	/^static void write_normal_summaries(struct f2fs_sb_info *sbi,$/;"	f	file:
write_orphan_inodes	fs/f2fs/checkpoint.c	/^static void write_orphan_inodes(struct f2fs_sb_info *sbi, block_t start_blk)$/;"	f	file:
write_sum_page	fs/f2fs/segment.c	/^static void write_sum_page(struct f2fs_sb_info *sbi,$/;"	f	file:
written_block_count	fs/f2fs/segment.h	/^static inline block_t written_block_count(struct f2fs_sb_info *sbi)$/;"	f
written_valid_blocks	fs/f2fs/segment.h	/^	block_t written_valid_blocks;	\/* # of valid blocks in main area *\/$/;"	m	struct:sit_info
zombie_list	fs/f2fs/f2fs.h	/^	struct list_head zombie_list;		\/* extent zombie tree list *\/$/;"	m	struct:f2fs_sb_info	typeref:struct:f2fs_sb_info::list_head
zombie_tree	fs/f2fs/f2fs.h	/^	int ext_tree, zombie_tree, ext_node;$/;"	m	struct:f2fs_stat_info
zone	fs/f2fs/segment.h	/^	unsigned int zone;			\/* current zone number *\/$/;"	m	struct:curseg_info
